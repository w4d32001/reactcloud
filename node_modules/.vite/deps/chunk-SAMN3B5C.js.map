{
  "version": 3,
  "sources": ["../../base64-js/index.js", "../../@babel/runtime/helpers/typeof.js", "../../@babel/runtime/helpers/regeneratorRuntime.js", "../../@babel/runtime/regenerator/index.js", "../../form-data/lib/browser.js", "../../isomorphic-ws/browser.js", "../../@babel/runtime/helpers/esm/asyncToGenerator.js", "../../@babel/runtime/helpers/esm/classCallCheck.js", "../../@babel/runtime/helpers/esm/typeof.js", "../../@babel/runtime/helpers/esm/toPrimitive.js", "../../@babel/runtime/helpers/esm/toPropertyKey.js", "../../@babel/runtime/helpers/esm/createClass.js", "../../@babel/runtime/helpers/esm/defineProperty.js", "../../@babel/runtime/helpers/esm/arrayWithHoles.js", "../../@babel/runtime/helpers/esm/iterableToArrayLimit.js", "../../@babel/runtime/helpers/esm/arrayLikeToArray.js", "../../@babel/runtime/helpers/esm/unsupportedIterableToArray.js", "../../@babel/runtime/helpers/esm/nonIterableRest.js", "../../@babel/runtime/helpers/esm/slicedToArray.js", "../../@babel/runtime/helpers/esm/extends.js", "../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js", "../../@babel/runtime/helpers/esm/objectWithoutProperties.js", "../../@babel/runtime/helpers/esm/arrayWithoutHoles.js", "../../@babel/runtime/helpers/esm/iterableToArray.js", "../../@babel/runtime/helpers/esm/nonIterableSpread.js", "../../@babel/runtime/helpers/esm/toConsumableArray.js", "../../@babel/runtime/helpers/esm/assertThisInitialized.js", "../../@babel/runtime/helpers/esm/setPrototypeOf.js", "../../@babel/runtime/helpers/esm/inherits.js", "../../@babel/runtime/helpers/esm/possibleConstructorReturn.js", "../../@babel/runtime/helpers/esm/getPrototypeOf.js", "../../@babel/runtime/helpers/esm/isNativeFunction.js", "../../@babel/runtime/helpers/esm/isNativeReflectConstruct.js", "../../@babel/runtime/helpers/esm/construct.js", "../../@babel/runtime/helpers/esm/wrapNativeSuper.js", "../../stream-chat/src/base64.ts", "../../stream-chat/src/campaign.ts", "../../stream-chat/https", "../../stream-chat/src/utils.ts", "../../stream-chat/src/constants.ts", "../../stream-chat/src/channel_state.ts", "../../stream-chat/src/channel.ts", "../../stream-chat/src/client_state.ts", "../../stream-chat/src/insights.ts", "../../stream-chat/src/connection.ts", "../../stream-chat/jsonwebtoken", "../../stream-chat/crypto", "../../stream-chat/src/signing.ts", "../../stream-chat/src/token_manager.ts", "../../stream-chat/src/errors.ts", "../../stream-chat/src/connection_fallback.ts", "../../stream-chat/src/segment.ts", "../../stream-chat/src/types.ts", "../../stream-chat/src/store.ts", "../../stream-chat/src/thread.ts", "../../stream-chat/src/moderation.ts", "../../stream-chat/src/thread_manager.ts", "../../stream-chat/src/poll.ts", "../../stream-chat/src/poll_manager.ts", "../../stream-chat/src/channel_manager.ts", "../../stream-chat/src/client.ts", "../../stream-chat/src/events.ts", "../../stream-chat/src/permissions.ts", "../../stream-chat/src/search_controller.ts"],
  "sourcesContent": ["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n", "/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n", "function asyncGeneratorStep(n, t, e, r, o, a, c) {\n  try {\n    var i = n[a](c),\n      u = i.value;\n  } catch (n) {\n    return void e(n);\n  }\n  i.done ? t(u) : Promise.resolve(u).then(r, o);\n}\nfunction _asyncToGenerator(n) {\n  return function () {\n    var t = this,\n      e = arguments;\n    return new Promise(function (r, o) {\n      var a = n.apply(t, e);\n      function _next(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n);\n      }\n      function _throw(n) {\n        asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n);\n      }\n      _next(void 0);\n    });\n  };\n}\nexport { _asyncToGenerator as default };", "function _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _classCallCheck as default };", "function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };", "import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };", "import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };", "import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };", "import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };", "function _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nexport { _arrayWithHoles as default };", "function _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nexport { _iterableToArrayLimit as default };", "function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nexport { _arrayLikeToArray as default };", "import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;\n  }\n}\nexport { _unsupportedIterableToArray as default };", "function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableRest as default };", "import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nfunction _slicedToArray(r, e) {\n  return arrayWithHoles(r) || iterableToArrayLimit(r, e) || unsupportedIterableToArray(r, e) || nonIterableRest();\n}\nexport { _slicedToArray as default };", "function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };", "function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };", "import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nexport { _objectWithoutProperties as default };", "import arrayLikeToArray from \"./arrayLikeToArray.js\";\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return arrayLikeToArray(r);\n}\nexport { _arrayWithoutHoles as default };", "function _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nexport { _iterableToArray as default };", "function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _nonIterableSpread as default };", "import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nfunction _toConsumableArray(r) {\n  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();\n}\nexport { _toConsumableArray as default };", "function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };", "function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };", "import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && setPrototypeOf(t, e);\n}\nexport { _inherits as default };", "import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return assertThisInitialized(t);\n}\nexport { _possibleConstructorReturn as default };", "function _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nexport { _getPrototypeOf as default };", "function _isNativeFunction(t) {\n  try {\n    return -1 !== Function.toString.call(t).indexOf(\"[native code]\");\n  } catch (n) {\n    return \"function\" == typeof t;\n  }\n}\nexport { _isNativeFunction as default };", "function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nexport { _isNativeReflectConstruct as default };", "import isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nexport { _construct as default };", "import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nfunction _wrapNativeSuper(t) {\n  var r = \"function\" == typeof Map ? new Map() : void 0;\n  return _wrapNativeSuper = function _wrapNativeSuper(t) {\n    if (null === t || !isNativeFunction(t)) return t;\n    if (\"function\" != typeof t) throw new TypeError(\"Super expression must either be null or a function\");\n    if (void 0 !== r) {\n      if (r.has(t)) return r.get(t);\n      r.set(t, Wrapper);\n    }\n    function Wrapper() {\n      return construct(t, arguments, getPrototypeOf(this).constructor);\n    }\n    return Wrapper.prototype = Object.create(t.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: !1,\n        writable: !0,\n        configurable: !0\n      }\n    }), setPrototypeOf(Wrapper, t);\n  }, _wrapNativeSuper(t);\n}\nexport { _wrapNativeSuper as default };", "import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(arrayOrString: string | T[], callback: MapGenericCallback<T, U> | MapStringCallback<U>): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n", "import { StreamChat } from './client';\nimport { CampaignData, DefaultGenerics, ExtendableGenerics, GetCampaignOptions } from './types';\n\nexport class Campaign<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  id: string | null;\n  data?: CampaignData;\n  client: StreamChat<StreamChatGenerics>;\n\n  constructor(client: StreamChat<StreamChatGenerics>, id: string | null, data?: CampaignData) {\n    this.client = client;\n    this.id = id;\n    this.data = data;\n  }\n\n  async create() {\n    const body = {\n      id: this.id,\n      message_template: this.data?.message_template,\n      segment_ids: this.data?.segment_ids,\n      sender_id: this.data?.sender_id,\n      sender_mode: this.data?.sender_mode,\n      channel_template: this.data?.channel_template,\n      create_channels: this.data?.create_channels,\n      show_channels: this.data?.show_channels,\n      description: this.data?.description,\n      name: this.data?.name,\n      skip_push: this.data?.skip_push,\n      skip_webhook: this.data?.skip_webhook,\n      user_ids: this.data?.user_ids,\n    };\n\n    const result = await this.client.createCampaign(body);\n\n    this.id = result.campaign.id;\n    this.data = result.campaign;\n    return result;\n  }\n\n  verifyCampaignId() {\n    if (!this.id) {\n      throw new Error(\n        'Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)',\n      );\n    }\n  }\n\n  async start(options?: { scheduledFor?: string; stopAt?: string }) {\n    this.verifyCampaignId();\n\n    return await this.client.startCampaign(this.id as string, options);\n  }\n\n  async update(data: Partial<CampaignData>) {\n    this.verifyCampaignId();\n\n    return this.client.updateCampaign(this.id as string, data);\n  }\n\n  async delete() {\n    this.verifyCampaignId();\n\n    return await this.client.deleteCampaign(this.id as string);\n  }\n\n  async stop() {\n    this.verifyCampaignId();\n\n    return this.client.stopCampaign(this.id as string);\n  }\n\n  async get(options?: GetCampaignOptions) {\n    this.verifyCampaignId();\n\n    return this.client.getCampaign(this.id as string, options);\n  }\n}\n", "export default null;", "import FormData from 'form-data';\nimport {\n  AscDesc,\n  ExtendableGenerics,\n  DefaultGenerics,\n  Logger,\n  OwnUserBase,\n  OwnUserResponse,\n  UserResponse,\n  MessageResponse,\n  FormatMessageResponse,\n  ReactionGroupResponse,\n  MessageSet,\n  MessagePaginationOptions,\n  ChannelQueryOptions,\n  QueryChannelAPIResponse,\n  ChannelSort,\n  ChannelFilters,\n  ChannelSortBase,\n  PromoteChannelParams,\n} from './types';\nimport { StreamChat } from './client';\nimport { Channel } from './channel';\nimport { AxiosRequestConfig } from 'axios';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable || typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function isOwnUser<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>,\n): user is OwnUserResponse<StreamChatGenerics> {\n  return (user as OwnUserResponse<StreamChatGenerics>)?.total_unread_count !== undefined;\n}\n\nfunction isBlobWebAPI(uri: unknown): uri is Blob {\n  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;\n}\n\nexport function isOwnUserBaseProperty(property: string) {\n  const ownUserBaseProperties: {\n    [Property in keyof Required<OwnUserBase>]: boolean;\n  } = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    unread_threads: true,\n    invisible: true,\n    privacy_settings: true,\n    roles: true,\n    push_preferences: true,\n  };\n\n  return ownUserBaseProperties[property as keyof OwnUserBase];\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\nexport function normalizeQuerySort<T extends Record<string, AscDesc | undefined>>(sort: T | T[]) {\n  const sortFields: Array<{ direction: AscDesc; field: keyof T }> = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item) as [keyof T, AscDesc][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 25000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function randomId() {\n  return generateUUIDv4();\n}\n\nfunction hex(bytes: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n\n// https://tools.ietf.org/html/rfc4122\nexport function generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n  bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n  return (\n    hex(bytes.subarray(0, 4)) +\n    '-' +\n    hex(bytes.subarray(4, 6)) +\n    '-' +\n    hex(bytes.subarray(6, 8)) +\n    '-' +\n    hex(bytes.subarray(8, 10)) +\n    '-' +\n    hex(bytes.subarray(10, 16))\n  );\n}\n\nfunction getRandomValuesWithMathRandom(bytes: Uint8Array): void {\n  const max = Math.pow(2, (8 * bytes.byteLength) / bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\ndeclare const msCrypto: Crypto;\n\nconst getRandomValues = (() => {\n  if (typeof crypto !== 'undefined' && typeof crypto?.getRandomValues !== 'undefined') {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== 'undefined') {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n})();\n\nfunction getRandomBytes(length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n\nexport function convertErrorToJson(err: Error) {\n  const jsonObj = {} as Record<string, unknown>;\n\n  if (!err) return jsonObj;\n\n  try {\n    Object.getOwnPropertyNames(err).forEach((key) => {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: 'failed to serialize the error',\n    };\n  }\n\n  return jsonObj;\n}\n\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */\nexport function isOnline() {\n  const nav =\n    typeof navigator !== 'undefined'\n      ? navigator\n      : typeof window !== 'undefined' && window.navigator\n      ? window.navigator\n      : undefined;\n\n  if (!nav) {\n    console.warn('isOnline failed to access window.navigator and assume browser is online');\n    return true;\n  }\n\n  // RN navigator has undefined for onLine\n  if (typeof nav.onLine !== 'boolean') {\n    return true;\n  }\n\n  return nav.onLine;\n}\n\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nexport function addConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\n\nexport function removeConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\n\nexport const axiosParamsSerializer: AxiosRequestConfig['paramsSerializer'] = (params) => {\n  const newParams = [];\n  for (const k in params) {\n    // Stream backend doesn't treat \"undefined\" value same as value not being present.\n    // So, we need to skip the undefined values.\n    if (params[k] === undefined) continue;\n\n    if (Array.isArray(params[k]) || typeof params[k] === 'object') {\n      newParams.push(`${k}=${encodeURIComponent(JSON.stringify(params[k]))}`);\n    } else {\n      newParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  }\n\n  return newParams.join('&');\n};\n\n/**\n * Takes the message object, parses the dates, sets `__html`\n * and sets the status to `received` if missing; returns a new message object.\n *\n * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object\n */\nexport function formatMessage<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  message: MessageResponse<StreamChatGenerics> | FormatMessageResponse<StreamChatGenerics>,\n): FormatMessageResponse<StreamChatGenerics> {\n  return {\n    ...message,\n    /**\n     * @deprecated please use `html`\n     */\n    __html: message.html,\n    // parse the dates\n    pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n    created_at: message.created_at ? new Date(message.created_at) : new Date(),\n    updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n    deleted_at: message.deleted_at ? new Date(message.deleted_at) : null,\n    status: message.status || 'received',\n    reaction_groups: maybeGetReactionGroupsFallback(\n      message.reaction_groups,\n      message.reaction_counts,\n      message.reaction_scores,\n    ),\n  };\n}\n\nexport const findIndexInSortedArray = <T, L>({\n  needle,\n  sortedArray,\n  selectKey,\n  selectValueToCompare = (e) => e,\n  sortDirection = 'ascending',\n}: {\n  needle: T;\n  sortedArray: readonly T[];\n  /**\n   * In an array of objects (like messages), pick a unique property identifying\n   * an element. It will be used to find a direct match for the needle element\n   * in case compare values are not unique.\n   *\n   * @example\n   * ```ts\n   * selectKey: (message) => message.id\n   * ```\n   */\n  selectKey?: (arrayElement: T) => string;\n  /**\n   * In an array of objects (like messages), pick a specific\n   * property to compare the needle value to.\n   *\n   * @example\n   * ```ts\n   * selectValueToCompare: (message) => message.created_at.getTime()\n   * ```\n   */\n  selectValueToCompare?: (arrayElement: T) => L | T;\n  /**\n   * @default ascending\n   * @description\n   * ```md\n   * ascending  - [1,2,3,4,5...]\n   * descending - [...5,4,3,2,1]\n   * ```\n   */\n  sortDirection?: 'ascending' | 'descending';\n}) => {\n  if (!sortedArray.length) return 0;\n\n  let left = 0;\n  let right = sortedArray.length - 1;\n  let middle = 0;\n\n  const recalculateMiddle = () => {\n    middle = Math.round((left + right) / 2);\n  };\n\n  const comparableNeedle = selectValueToCompare(needle);\n\n  while (left <= right) {\n    recalculateMiddle();\n\n    const comparableMiddle = selectValueToCompare(sortedArray[middle]);\n\n    if (\n      (sortDirection === 'ascending' && comparableNeedle < comparableMiddle) ||\n      (sortDirection === 'descending' && comparableNeedle >= comparableMiddle)\n    ) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n\n  // In case there are several array elements with the same comparable value, search around the insertion\n  // point to possibly find an element with the same key. If found, prefer it.\n  // This, for example, prevents duplication of messages with the same creation date.\n  if (selectKey) {\n    const needleKey = selectKey(needle);\n    const step = sortDirection === 'ascending' ? -1 : +1;\n    for (\n      let i = left + step;\n      0 <= i && i < sortedArray.length && selectValueToCompare(sortedArray[i]) === comparableNeedle;\n      i += step\n    ) {\n      if (selectKey(sortedArray[i]) === needleKey) {\n        return i;\n      }\n    }\n  }\n\n  return left;\n};\n\nexport function addToMessageList<T extends FormatMessageResponse>(\n  messages: readonly T[],\n  newMessage: T,\n  timestampChanged = false,\n  sortBy: 'pinned_at' | 'created_at' = 'created_at',\n  addIfDoesNotExist = true,\n) {\n  const addMessageToList = addIfDoesNotExist || timestampChanged;\n  let newMessages = [...messages];\n\n  // if created_at has changed, message should be filtered and re-inserted in correct order\n  // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n  if (timestampChanged) {\n    newMessages = newMessages.filter((message) => !(message.id && newMessage.id === message.id));\n  }\n\n  // for empty list just concat and return unless it's an update or deletion\n  if (newMessages.length === 0 && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (newMessages.length === 0) {\n    return newMessages;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const messageTime = newMessage[sortBy]!.getTime();\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const messageIsNewest = newMessages.at(-1)![sortBy]!.getTime() < messageTime;\n\n  // if message is newer than last item in the list concat and return unless it's an update or deletion\n  if (messageIsNewest && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (messageIsNewest) {\n    return newMessages;\n  }\n\n  // find the closest index to push the new message\n  const insertionIndex = findIndexInSortedArray({\n    needle: newMessage,\n    sortedArray: newMessages,\n    sortDirection: 'ascending',\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    selectValueToCompare: (m) => m[sortBy]!.getTime(),\n    selectKey: (m) => m.id,\n  });\n\n  // message already exists and not filtered with timestampChanged, update and return\n  if (\n    !timestampChanged &&\n    newMessage.id &&\n    newMessages[insertionIndex] &&\n    newMessage.id === newMessages[insertionIndex].id\n  ) {\n    newMessages[insertionIndex] = newMessage;\n    return newMessages;\n  }\n\n  // do not add updated or deleted messages to the list if they already exist or come with a timestamp change\n  if (addMessageToList) {\n    newMessages.splice(insertionIndex, 0, newMessage);\n  }\n\n  return newMessages;\n}\n\nfunction maybeGetReactionGroupsFallback(\n  groups: { [key: string]: ReactionGroupResponse } | null | undefined,\n  counts: { [key: string]: number } | null | undefined,\n  scores: { [key: string]: number } | null | undefined,\n): { [key: string]: ReactionGroupResponse } | null {\n  if (groups) {\n    return groups;\n  }\n\n  if (counts && scores) {\n    const fallback: { [key: string]: ReactionGroupResponse } = {};\n\n    for (const type of Object.keys(counts)) {\n      fallback[type] = {\n        count: counts[type],\n        sum_scores: scores[type],\n      };\n    }\n\n    return fallback;\n  }\n\n  return null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface DebouncedFunc<T extends (...args: any[]) => any> {\n  /**\n   * Call the original function, but applying the debounce rules.\n   *\n   * If the debounced function can be run immediately, this calls it and returns its return\n   * value.\n   *\n   * Otherwise, it returns the return value of the last invocation, or undefined if the debounced\n   * function was not invoked yet.\n   */\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n\n  /**\n   * Throw away any pending invocation of the debounced function.\n   */\n  cancel(): void;\n\n  /**\n   * If there is a pending invocation of the debounced function, invoke it immediately and return\n   * its return value.\n   *\n   * Otherwise, return the value from the last invocation, or undefined if the debounced function\n   * was never invoked.\n   */\n  flush(): ReturnType<T> | undefined;\n}\n\n// works exactly the same as lodash.debounce\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const debounce = <T extends (...args: any[]) => any>(\n  fn: T,\n  timeout = 0,\n  { leading = false, trailing = true }: { leading?: boolean; trailing?: boolean } = {},\n): DebouncedFunc<T> => {\n  let runningTimeout: null | NodeJS.Timeout = null;\n  let argsForTrailingExecution: Parameters<T> | null = null;\n  let lastResult: ReturnType<T> | undefined;\n\n  const debouncedFn = (...args: Parameters<T>) => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n    } else if (leading) {\n      lastResult = fn(...args);\n    }\n    if (trailing) argsForTrailingExecution = args;\n\n    const timeoutHandler = () => {\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n        argsForTrailingExecution = null;\n      }\n      runningTimeout = null;\n    };\n\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n    return lastResult;\n  };\n\n  debouncedFn.cancel = () => {\n    if (runningTimeout) clearTimeout(runningTimeout);\n  };\n\n  debouncedFn.flush = () => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n      runningTimeout = null;\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n      }\n    }\n    return lastResult;\n  };\n  return debouncedFn;\n};\n\n// works exactly the same as lodash.throttle\nexport const throttle = <T extends (...args: unknown[]) => unknown>(\n  fn: T,\n  timeout = 200,\n  { leading = true, trailing = false }: { leading?: boolean; trailing?: boolean } = {},\n) => {\n  let runningTimeout: null | NodeJS.Timeout = null;\n  let storedArgs: Parameters<T> | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (runningTimeout) {\n      if (trailing) storedArgs = args;\n      return;\n    }\n\n    if (leading) fn(...args);\n\n    const timeoutHandler = () => {\n      if (storedArgs) {\n        fn(...storedArgs);\n        storedArgs = null;\n        runningTimeout = setTimeout(timeoutHandler, timeout);\n\n        return;\n      }\n\n      runningTimeout = null;\n    };\n\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n  };\n};\n\nconst get = <T>(obj: T, path: string): unknown =>\n  path.split('.').reduce<unknown>((acc, key) => {\n    if (acc && typeof acc === 'object' && key in acc) {\n      return (acc as Record<string, unknown>)[key];\n    }\n    return undefined;\n  }, obj);\n\n// works exactly the same as lodash.uniqBy\nexport const uniqBy = <T>(array: T[] | unknown, iteratee: ((item: T) => unknown) | keyof T): T[] => {\n  if (!Array.isArray(array)) return [];\n\n  const seen = new Set<unknown>();\n  return array.filter((item) => {\n    const key = typeof iteratee === 'function' ? iteratee(item) : get(item, iteratee as string);\n    if (seen.has(key)) return false;\n    seen.add(key);\n    return true;\n  });\n};\n\ntype MessagePaginationUpdatedParams<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  parentSet: MessageSet;\n  requestedPageSize: number;\n  returnedPage: MessageResponse<StreamChatGenerics>[];\n  logger?: Logger;\n  messagePaginationOptions?: MessagePaginationOptions;\n};\n\nexport function binarySearchByDateEqualOrNearestGreater(\n  array: {\n    created_at?: string;\n  }[],\n  targetDate: Date,\n): number {\n  let left = 0;\n  let right = array.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const midCreatedAt = array[mid].created_at;\n    if (!midCreatedAt) {\n      left += 1;\n      continue;\n    }\n    const midDate = new Date(midCreatedAt);\n\n    if (midDate.getTime() === targetDate.getTime()) {\n      return mid;\n    } else if (midDate.getTime() < targetDate.getTime()) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return left;\n}\n\nconst messagePaginationCreatedAtAround = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams<StreamChatGenerics>) => {\n  const newPagination = { ...parentSet.pagination };\n  if (!messagePaginationOptions?.created_at_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n  let updateHasPrev;\n  let updateHasNext;\n  const createdAtAroundDate = new Date(messagePaginationOptions.created_at_around);\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n\n  // expect ASC order (from oldest to newest)\n  const wholePageHasNewerMessages =\n    !!firstPageMsg?.created_at && new Date(firstPageMsg.created_at) > createdAtAroundDate;\n  const wholePageHasOlderMessages = !!lastPageMsg?.created_at && new Date(lastPageMsg.created_at) < createdAtAroundDate;\n\n  const requestedPageSizeNotMet =\n    requestedPageSize > parentSet.messages.length && requestedPageSize > returnedPage.length;\n  const noMoreMessages =\n    (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) &&\n    requestedPageSize > returnedPage.length;\n\n  if (wholePageHasNewerMessages) {\n    hasPrev = false;\n    updateHasPrev = true;\n    if (requestedPageSizeNotMet) {\n      hasNext = false;\n      updateHasNext = true;\n    }\n  } else if (wholePageHasOlderMessages) {\n    hasNext = false;\n    updateHasNext = true;\n    if (requestedPageSizeNotMet) {\n      hasPrev = false;\n      updateHasPrev = true;\n    }\n  } else if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else {\n    const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n      firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id,\n      lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id,\n    ];\n    updateHasPrev = firstPageMsgIsFirstInSet;\n    updateHasNext = lastPageMsgIsLastInSet;\n    const midPointByCount = Math.floor(returnedPage.length / 2);\n    const midPointByCreationDate = binarySearchByDateEqualOrNearestGreater(returnedPage, createdAtAroundDate);\n\n    if (midPointByCreationDate !== -1) {\n      hasPrev = midPointByCount <= midPointByCreationDate;\n      hasNext = midPointByCount >= midPointByCreationDate;\n    }\n  }\n\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nconst messagePaginationIdAround = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams<StreamChatGenerics>) => {\n  const newPagination = { ...parentSet.pagination };\n  const { id_around } = messagePaginationOptions || {};\n  if (!id_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n    firstPageMsg?.id === parentSet.messages[0]?.id,\n    lastPageMsg?.id === parentSet.messages.slice(-1)[0]?.id,\n  ];\n  let updateHasPrev = firstPageMsgIsFirstInSet;\n  let updateHasNext = lastPageMsgIsLastInSet;\n\n  const midPoint = Math.floor(returnedPage.length / 2);\n  const noMoreMessages =\n    (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) &&\n    requestedPageSize > returnedPage.length;\n\n  if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else if (!returnedPage[midPoint]) {\n    return newPagination;\n  } else if (returnedPage[midPoint].id === id_around) {\n    hasPrev = hasNext = true;\n  } else {\n    let targetMsg;\n    const halves = [returnedPage.slice(0, midPoint), returnedPage.slice(midPoint)];\n    hasPrev = hasNext = true;\n    for (let i = 0; i < halves.length; i++) {\n      targetMsg = halves[i].find((message) => message.id === id_around);\n      if (targetMsg && i === 0) {\n        hasPrev = false;\n      }\n      if (targetMsg && i === 1) {\n        hasNext = false;\n      }\n    }\n  }\n\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nconst messagePaginationLinear = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams<StreamChatGenerics>) => {\n  const newPagination = { ...parentSet.pagination };\n\n  let hasPrev;\n  let hasNext;\n\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n    firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id,\n    lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id,\n  ];\n\n  const queriedNextMessages =\n    messagePaginationOptions &&\n    (messagePaginationOptions.created_at_after_or_equal ||\n      messagePaginationOptions.created_at_after ||\n      messagePaginationOptions.id_gt ||\n      messagePaginationOptions.id_gte);\n\n  const queriedPrevMessages =\n    typeof messagePaginationOptions === 'undefined'\n      ? true\n      : messagePaginationOptions.created_at_before_or_equal ||\n        messagePaginationOptions.created_at_before ||\n        messagePaginationOptions.id_lt ||\n        messagePaginationOptions.id_lte ||\n        messagePaginationOptions.offset;\n\n  const containsUnrecognizedOptionsOnly =\n    !queriedNextMessages &&\n    !queriedPrevMessages &&\n    !messagePaginationOptions?.id_around &&\n    !messagePaginationOptions?.created_at_around;\n\n  const hasMore = returnedPage.length >= requestedPageSize;\n\n  if (typeof queriedPrevMessages !== 'undefined' || containsUnrecognizedOptionsOnly) {\n    hasPrev = hasMore;\n  }\n  if (typeof queriedNextMessages !== 'undefined') {\n    hasNext = hasMore;\n  }\n  const returnedPageIsEmpty = returnedPage.length === 0;\n\n  if ((firstPageMsgIsFirstInSet || returnedPageIsEmpty) && typeof hasPrev !== 'undefined')\n    newPagination.hasPrev = hasPrev;\n  if ((lastPageMsgIsLastInSet || returnedPageIsEmpty) && typeof hasNext !== 'undefined')\n    newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nexport const messageSetPagination = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  params: MessagePaginationUpdatedParams<StreamChatGenerics>,\n) => {\n  if (params.parentSet.messages.length < params.returnedPage.length) {\n    params.logger?.('error', 'Corrupted message set state: parent set size < returned page size');\n    return params.parentSet.pagination;\n  }\n\n  if (params.messagePaginationOptions?.created_at_around) {\n    return messagePaginationCreatedAtAround(params);\n  } else if (params.messagePaginationOptions?.id_around) {\n    return messagePaginationIdAround(params);\n  } else {\n    return messagePaginationLinear(params);\n  }\n};\n\n/**\n * A utility object used to prevent duplicate invocation of channel.watch() to be triggered when\n * 'notification.message_new' and 'notification.added_to_channel' events arrive at the same time.\n */\nconst WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL: Record<string, Promise<QueryChannelAPIResponse> | undefined> = {};\n\ntype GetChannelParams<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client: StreamChat<StreamChatGenerics>;\n  channel?: Channel<StreamChatGenerics>;\n  id?: string;\n  members?: string[];\n  options?: ChannelQueryOptions<StreamChatGenerics>;\n  type?: string;\n};\n/**\n * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.\n * If the channel is not passed as a property, it will get it either by its channel.cid or by its members list and do the same.\n * @param client\n * @param members\n * @param options\n * @param type\n * @param id\n * @param channel\n */\nexport const getAndWatchChannel = async <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  channel,\n  client,\n  id,\n  members,\n  options,\n  type,\n}: GetChannelParams<StreamChatGenerics>) => {\n  if (!channel && !type) {\n    throw new Error('Channel or channel type have to be provided to query a channel.');\n  }\n\n  // unfortunately typescript is not able to infer that if (!channel && !type) === false, then channel or type has to be truthy\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const channelToWatch = channel || client.channel(type!, id, { members });\n\n  // need to keep as with call to channel.watch the id can be changed from undefined to an actual ID generated server-side\n  const originalCid = channelToWatch.id\n    ? channelToWatch.cid\n    : members && members.length\n    ? generateChannelTempCid(channelToWatch.type, members)\n    : undefined;\n\n  if (!originalCid) {\n    throw new Error('Channel ID or channel members array have to be provided to query a channel.');\n  }\n\n  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n\n  if (queryPromise) {\n    await queryPromise;\n  } else {\n    try {\n      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = channelToWatch.watch(options);\n      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    } finally {\n      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    }\n  }\n\n  return channelToWatch;\n};\n\n/**\n * Generates a temporary channel.cid for channels created without ID, as they need to be referenced\n * by an identifier until the back-end generates the final ID. The cid is generated by its member IDs\n * which are sorted and can be recreated the same every time given the same arguments.\n * @param channelType\n * @param members\n */\nexport const generateChannelTempCid = (channelType: string, members: string[]) => {\n  if (!members) return;\n  const membersStr = [...members].sort().join(',');\n  if (!membersStr) return;\n  return `${channelType}:!members-${membersStr}`;\n};\n\n/**\n * Checks if a channel is pinned or not. Will return true only if channel.state.membership.pinned_at exists.\n * @param channel\n */\nexport const isChannelPinned = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  if (!channel) return false;\n\n  const member = channel.state.membership;\n\n  return !!member?.pinned_at;\n};\n\n/**\n * Checks if a channel is archived or not. Will return true only if channel.state.membership.archived_at exists.\n * @param channel\n */\nexport const isChannelArchived = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  channel: Channel<StreamChatGenerics>,\n) => {\n  if (!channel) return false;\n\n  const member = channel.state.membership;\n\n  return !!member?.archived_at;\n};\n\n/**\n * A utility that tells us whether we should consider archived channels or not based\n * on filters. Will return true only if filters.archived exists and is a boolean value.\n * @param filters\n */\nexport const shouldConsiderArchivedChannels = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  filters: ChannelFilters<StreamChatGenerics>,\n) => {\n  if (!filters) return false;\n\n  return typeof filters.archived === 'boolean';\n};\n\n/**\n * Extracts the value of the sort parameter at a given index, for a targeted key. Can\n * handle both array and object versions of sort. Will return null if the index/key\n * combination does not exist.\n * @param atIndex - the index at which we'll examine the sort value, if it's an array one\n * @param sort - the sort value - both array and object notations are accepted\n * @param targetKey - the target key which needs to exist for the sort at a certain index\n */\nexport const extractSortValue = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  atIndex,\n  sort,\n  targetKey,\n}: {\n  atIndex: number;\n  targetKey: keyof ChannelSortBase<StreamChatGenerics>;\n  sort?: ChannelSort<StreamChatGenerics>;\n}) => {\n  if (!sort) return null;\n  let option: null | ChannelSortBase<StreamChatGenerics> = null;\n\n  if (Array.isArray(sort)) {\n    option = sort[atIndex] ?? null;\n  } else {\n    let index = 0;\n    for (const key in sort) {\n      if (index !== atIndex) {\n        index++;\n        continue;\n      }\n\n      if (key !== targetKey) {\n        return null;\n      }\n\n      option = sort;\n\n      break;\n    }\n  }\n\n  return option?.[targetKey] ?? null;\n};\n\n/**\n * Returns true only if `{ pinned_at: -1 }` or `{ pinned_at: 1 }` option is first within the `sort` array.\n */\nexport const shouldConsiderPinnedChannels = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  sort: ChannelSort<StreamChatGenerics>,\n) => {\n  const value = findPinnedAtSortOrder({ sort });\n\n  if (typeof value !== 'number') return false;\n\n  return Math.abs(value) === 1;\n};\n\n/**\n * Checks whether the sort value of type object contains a pinned_at value or if\n * an array sort value type has the first value be an object containing pinned_at.\n * @param sort\n */\nexport const findPinnedAtSortOrder = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  sort,\n}: {\n  sort: ChannelSort<StreamChatGenerics>;\n}) =>\n  extractSortValue({\n    atIndex: 0,\n    sort,\n    targetKey: 'pinned_at',\n  });\n\n/**\n * Finds the index of the last consecutively pinned channel, starting from the start of the\n * array. Will not consider any pinned channels after the contiguous subsequence at the\n * start of the array.\n * @param channels\n */\nexport const findLastPinnedChannelIndex = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  channels,\n}: {\n  channels: Channel<StreamChatGenerics>[];\n}) => {\n  let lastPinnedChannelIndex: number | null = null;\n\n  for (const channel of channels) {\n    if (!isChannelPinned(channel)) break;\n\n    if (typeof lastPinnedChannelIndex === 'number') {\n      lastPinnedChannelIndex++;\n    } else {\n      lastPinnedChannelIndex = 0;\n    }\n  }\n\n  return lastPinnedChannelIndex;\n};\n\n/**\n * A utility used to move a channel towards the beginning of a list of channels (promote it to a higher position). It\n * considers pinned channels in the process if needed and makes sure to only update the list reference if the list\n * should actually change. It will try to move the channel as high as it can within the list.\n * @param channels - the list of channels we want to modify\n * @param channelToMove - the channel we want to promote\n * @param channelToMoveIndexWithinChannels - optionally, the index of the channel we want to move if we know it (will skip a manual check)\n * @param sort - the sort value used to check for pinned channels\n */\nexport const promoteChannel = <StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>({\n  channels,\n  channelToMove,\n  channelToMoveIndexWithinChannels,\n  sort,\n}: PromoteChannelParams<StreamChatGenerics>) => {\n  // get index of channel to move up\n  const targetChannelIndex =\n    channelToMoveIndexWithinChannels ?? channels.findIndex((channel) => channel.cid === channelToMove.cid);\n\n  const targetChannelExistsWithinList = targetChannelIndex >= 0;\n  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;\n\n  // pinned channels should not move within the list based on recent activity, channels which\n  // receive messages and are not pinned should move upwards but only under the last pinned channel\n  // in the list\n  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n  const isTargetChannelPinned = isChannelPinned<StreamChatGenerics>(channelToMove);\n\n  if (targetChannelAlreadyAtTheTop || (considerPinnedChannels && isTargetChannelPinned)) {\n    return channels;\n  }\n\n  const newChannels = [...channels];\n\n  // target channel index is known, remove it from the list\n  if (targetChannelExistsWithinList) {\n    newChannels.splice(targetChannelIndex, 1);\n  }\n\n  // as position of pinned channels has to stay unchanged, we need to\n  // find last pinned channel in the list to move the target channel after\n  let lastPinnedChannelIndex: number | null = null;\n  if (considerPinnedChannels) {\n    lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });\n  }\n\n  // re-insert it at the new place (to specific index if pinned channels are considered)\n  newChannels.splice(typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);\n\n  return newChannels;\n};\n", "export const DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE = 25;\nexport const DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE = 100;\n\nexport const DEFAULT_MESSAGE_SET_PAGINATION = { hasNext: false, hasPrev: false };\n", "import { Channel } from './channel';\nimport {\n  ChannelMemberResponse,\n  DefaultGenerics,\n  Event,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  MessageResponse,\n  MessageSet,\n  MessageSetType,\n  PendingMessageResponse,\n  ReactionResponse,\n  UserResponse,\n} from './types';\nimport { addToMessageList, formatMessage } from './utils';\nimport { DEFAULT_MESSAGE_SET_PAGINATION } from './constants';\n\ntype ChannelReadStatus<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  {\n    last_read: Date;\n    unread_messages: number;\n    user: UserResponse<StreamChatGenerics>;\n    first_unread_message_id?: string;\n    last_read_message_id?: string;\n  }\n>;\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  _channel: Channel<StreamChatGenerics>;\n  watcher_count: number;\n  typing: Record<string, Event<StreamChatGenerics>>;\n  read: ChannelReadStatus<StreamChatGenerics>;\n  pinnedMessages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>;\n  pending_messages: Array<PendingMessageResponse<StreamChatGenerics>>;\n  threads: Record<string, Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>>;\n  mutedUsers: Array<UserResponse<StreamChatGenerics>>;\n  watchers: Record<string, UserResponse<StreamChatGenerics>>;\n  members: Record<string, ChannelMemberResponse<StreamChatGenerics>>;\n  unreadCount: number;\n  membership: ChannelMemberResponse<StreamChatGenerics>;\n  last_message_at: Date | null;\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  isUpToDate: boolean;\n  /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */\n  messageSets: MessageSet[] = [];\n\n  constructor(channel: Channel<StreamChatGenerics>) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.initMessages();\n    this.pinnedMessages = [];\n    this.pending_messages = [];\n    this.threads = {};\n    // a list of users to hide messages from\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n    this.isUpToDate = true;\n    this.last_message_at = channel?.state?.last_message_at != null ? new Date(channel.state.last_message_at) : null;\n  }\n\n  get messages() {\n    return this.messageSets.find((s) => s.isCurrent)?.messages || [];\n  }\n\n  set messages(messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isCurrent);\n    this.messageSets[index].messages = messages;\n  }\n\n  /**\n   * The list of latest messages\n   * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)\n   */\n  get latestMessages() {\n    return this.messageSets.find((s) => s.isLatest)?.messages || [];\n  }\n\n  set latestMessages(messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isLatest);\n    this.messageSets[index].messages = messages;\n  }\n\n  get messagePagination() {\n    return this.messageSets.find((s) => s.isCurrent)?.pagination || DEFAULT_MESSAGE_SET_PAGINATION;\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<StreamChatGenerics>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)\n   */\n  addMessageSorted(\n    newMessage: MessageResponse<StreamChatGenerics>,\n    timestampChanged = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    return this.addMessagesSorted(\n      [newMessage],\n      timestampChanged,\n      false,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n  }\n\n  /**\n   * Takes the message object, parses the dates, sets `__html`\n   * and sets the status to `received` if missing; returns a new message object.\n   *\n   * @param {MessageResponse<StreamChatGenerics>} message `MessageResponse` object\n   */\n  formatMessage = (message: MessageResponse<StreamChatGenerics>) => formatMessage<StreamChatGenerics>(message);\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse<StreamChatGenerics>>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)\n   *\n   */\n  addMessagesSorted(\n    newMessages: MessageResponse<StreamChatGenerics>[],\n    timestampChanged = false,\n    initializing = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    const { messagesToAdd, targetMessageSetIndex } = this.findTargetMessageSet(\n      newMessages,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n\n    for (let i = 0; i < messagesToAdd.length; i += 1) {\n      const isFromShadowBannedUser = messagesToAdd[i].shadowed;\n      if (isFromShadowBannedUser) {\n        continue;\n      }\n      // If message is already formatted we can skip the tasks below\n      // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n      // This will be also true for message previews used by some SDKs\n      const isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n      let message: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n      if (isMessageFormatted) {\n        message = messagesToAdd[i] as ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n      } else {\n        message = this.formatMessage(messagesToAdd[i] as MessageResponse<StreamChatGenerics>);\n\n        if (message.user && this._channel?.cid) {\n          /**\n           * Store the reference to user for this channel, so that when we have to\n           * handle updates to user, we can use the reference map, to determine which\n           * channels need to be updated with updated user object.\n           */\n          this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n        }\n\n        if (initializing && message.id && this.threads[message.id]) {\n          // If we are initializing the state of channel (e.g., in case of connection recovery),\n          // then in that case we remove thread related to this message from threads object.\n          // This way we can ensure that we don't have any stale data in thread object\n          // and consumer can refetch the replies.\n          delete this.threads[message.id];\n        }\n\n        if (!this.last_message_at) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n\n        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the given message set\n      if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(\n          this.messageSets[targetMessageSetIndex].messages,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n\n      /**\n       * Add message to thread if applicable and the message\n       * was added when querying for replies, or the thread already exits.\n       * This is to prevent the thread state from getting out of sync if\n       * a thread message is shown in channel but older than the newest thread\n       * message. This situation can result in a thread state where a random\n       * message is \"oldest\" message, and newer messages are therefore not loaded.\n       * This can also occur if an old thread message is updated.\n       */\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        this.threads[parentID] = this._addToMessageList(\n          thread,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n    }\n\n    return {\n      messageSet: this.messageSets[targetMessageSetIndex],\n    };\n  }\n\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse<StreamChatGenerics>>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(pinnedMessages: MessageResponse<StreamChatGenerics>[]) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse<StreamChatGenerics>} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(pinnedMessage: MessageResponse<StreamChatGenerics>) {\n    this.pinnedMessages = this._addToMessageList(\n      this.pinnedMessages,\n      this.formatMessage(pinnedMessage),\n      false,\n      'pinned_at',\n    );\n  }\n\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse<StreamChatGenerics>} message message to remove\n   *\n   */\n  removePinnedMessage(message: MessageResponse<StreamChatGenerics>) {\n    const { result } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n\n  addReaction(\n    reaction: ReactionResponse<StreamChatGenerics>,\n    message?: MessageResponse<StreamChatGenerics>,\n    enforce_unique?: boolean,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _addOwnReactionToMessage(\n    ownReactions: ReactionResponse<StreamChatGenerics>[] | null | undefined,\n    reaction: ReactionResponse<StreamChatGenerics>,\n    enforce_unique?: boolean,\n  ) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n\n    return ownReactions;\n  }\n\n  _removeOwnReactionFromMessage(\n    ownReactions: ReactionResponse<StreamChatGenerics>[] | null | undefined,\n    reaction: ReactionResponse<StreamChatGenerics>,\n  ) {\n    if (ownReactions) {\n      return ownReactions.filter((item) => item.user_id !== reaction.user_id || item.type !== reaction.type);\n    }\n    return ownReactions;\n  }\n\n  removeReaction(reaction: ReactionResponse<StreamChatGenerics>, message?: MessageResponse<StreamChatGenerics>) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _updateQuotedMessageReferences({\n    message,\n    remove,\n  }: {\n    message: MessageResponse<StreamChatGenerics>;\n    remove?: boolean;\n  }) {\n    const parseMessage = (m: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>) =>\n      (({\n        ...m,\n        created_at: m.created_at.toISOString(),\n        pinned_at: m.pinned_at?.toISOString(),\n        updated_at: m.updated_at?.toISOString(),\n      } as unknown) as MessageResponse<StreamChatGenerics>);\n\n    const update = (messages: FormatMessageResponse<StreamChatGenerics>[]) => {\n      const updatedMessages = messages.reduce<MessageResponse<StreamChatGenerics>[]>((acc, msg) => {\n        if (msg.quoted_message_id === message.id) {\n          acc.push({ ...parseMessage(msg), quoted_message: remove ? { ...message, attachments: [] } : message });\n        }\n        return acc;\n      }, []);\n      this.addMessagesSorted(updatedMessages, true);\n    };\n\n    if (!message.parent_id) {\n      this.messageSets.forEach((set) => update(set.messages));\n    } else if (message.parent_id && this.threads[message.parent_id]) {\n      // prevent going through all the threads even though it is possible to quote a message from another thread\n      update(this.threads[message.parent_id]);\n    }\n  }\n\n  removeQuotedMessageReferences(message: MessageResponse<StreamChatGenerics>) {\n    this._updateQuotedMessageReferences({ message, remove: true });\n  }\n\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(\n    message: {\n      id?: string;\n      parent_id?: string;\n      pinned?: boolean;\n      show_in_channel?: boolean;\n    },\n    updateFunc: (\n      msg: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n    ) => ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n  ) {\n    const { parent_id, show_in_channel, pinned } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      const messageSetIndex = this.findMessageSetIndex(message);\n      if (messageSetIndex !== -1) {\n        const msgIndex = this.messageSets[messageSetIndex].messages.findIndex((msg) => msg.id === message.id);\n        if (msgIndex !== -1) {\n          this.messageSets[messageSetIndex].messages[msgIndex] = updateFunc(\n            this.messageSets[messageSetIndex].messages[msgIndex],\n          );\n        }\n      }\n    }\n\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n\n  /**\n   * Setter for isUpToDate.\n   *\n   * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n   *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   *                    When false, any new message (received by websocket event - message.new) will not\n   *                    be pushed on to message list.\n   */\n  setIsUpToDate = (isUpToDate: boolean) => {\n    this.isUpToDate = isUpToDate;\n  };\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(\n    messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n    message: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n    timestampChanged = false,\n    sortBy: 'pinned_at' | 'created_at' = 'created_at',\n    addIfDoesNotExist = true,\n  ) {\n    return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: { id: string; messageSetIndex?: number; parent_id?: string }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const messageSetIndex = messageToRemove.messageSetIndex ?? this.findMessageSetIndex(messageToRemove);\n      if (messageSetIndex !== -1) {\n        const { removed, result: messages } = this.removeMessageFromArray(\n          this.messageSets[messageSetIndex].messages,\n          messageToRemove,\n        );\n        this.messageSets[messageSetIndex].messages = messages;\n        isRemoved = removed;\n      }\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter((message) => !(!!message.id && !!msg.id && message.id === msg.id));\n\n    return { removed: result.length < msgArray.length, result };\n  };\n\n  /**\n   * Updates the message.user property with updated user object, for messages.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  updateUserMessages = (user: UserResponse<StreamChatGenerics>) => {\n    const _updateUserMessages = (\n      messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n      user: UserResponse<StreamChatGenerics>,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id === user.id) {\n          messages[i] = { ...m, user };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _updateUserMessages(set.messages, user));\n\n    for (const parentId in this.threads) {\n      _updateUserMessages(this.threads[parentId], user);\n    }\n\n    _updateUserMessages(this.pinnedMessages, user);\n  };\n\n  /**\n   * Marks the messages as deleted, from deleted user.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   * @param {boolean} hardDelete\n   */\n  deleteUserMessages = (user: UserResponse<StreamChatGenerics>, hardDelete = false) => {\n    const _deleteUserMessages = (\n      messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n      user: UserResponse<StreamChatGenerics>,\n      hardDelete = false,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id !== user.id) {\n          continue;\n        }\n\n        if (hardDelete) {\n          /**\n           * In case of hard delete, we need to strip down all text, html,\n           * attachments and all the custom properties on message\n           */\n          messages[i] = ({\n            cid: m.cid,\n            created_at: m.created_at,\n            deleted_at: user.deleted_at,\n            id: m.id,\n            latest_reactions: [],\n            mentioned_users: [],\n            own_reactions: [],\n            parent_id: m.parent_id,\n            reply_count: m.reply_count,\n            status: m.status,\n            thread_participants: m.thread_participants,\n            type: 'deleted',\n            updated_at: m.updated_at,\n            user: m.user,\n          } as unknown) as ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n        } else {\n          messages[i] = {\n            ...m,\n            type: 'deleted',\n            deleted_at: user.deleted_at ? new Date(user.deleted_at) : null,\n          };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _deleteUserMessages(set.messages, user, hardDelete));\n\n    for (const parentId in this.threads) {\n      _deleteUserMessages(this.threads[parentId], user, hardDelete);\n    }\n\n    _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n  };\n\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.latestMessages.filter((message) => message.type !== 'error');\n\n    this.latestMessages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt =\n        typeof lastEvent.received_at === 'string'\n          ? new Date(lastEvent.received_at)\n          : lastEvent.received_at || new Date();\n      if (now.getTime() - receivedAt.getTime() > 7000) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: 'typing.stop',\n          user: { id: userID },\n        } as Event<StreamChatGenerics>);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.initMessages();\n    this.pinnedMessages = [];\n  }\n\n  initMessages() {\n    this.messageSets = [{ messages: [], isLatest: true, isCurrent: true, pagination: DEFAULT_MESSAGE_SET_PAGINATION }];\n  }\n\n  /**\n   * loadMessageIntoState - Loads a given message (and messages around it) into the state\n   *\n   * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   * @param {number} limit The page size if the message has to be queried from the server\n   */\n  async loadMessageIntoState(messageId: string | 'latest', parentMessageId?: string, limit = 25) {\n    let messageSetIndex: number;\n    let switchedToMessageSet = false;\n    let loadedMessageThread = false;\n    const messageIdToFind = parentMessageId || messageId;\n    if (messageId === 'latest') {\n      if (this.messages === this.latestMessages) {\n        return;\n      }\n      messageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n    } else {\n      messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    }\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n      switchedToMessageSet = true;\n    }\n    loadedMessageThread = !parentMessageId || !!this.threads[parentMessageId]?.find((m) => m.id === messageId);\n    if (switchedToMessageSet && loadedMessageThread) {\n      return;\n    }\n    if (!switchedToMessageSet) {\n      await this._channel.query({ messages: { id_around: messageIdToFind, limit } }, 'new');\n    }\n    if (!loadedMessageThread && parentMessageId) {\n      await this._channel.getReplies(parentMessageId, { id_around: messageId, limit });\n    }\n    messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n    }\n  }\n\n  /**\n   * findMessage - Finds a message inside the state\n   *\n   * @param {string} messageId The id of the message\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   *\n   * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found\n   */\n  findMessage(messageId: string, parentMessageId?: string) {\n    if (parentMessageId) {\n      const messages = this.threads[parentMessageId];\n      if (!messages) {\n        return undefined;\n      }\n      return messages.find((m) => m.id === messageId);\n    }\n\n    const messageSetIndex = this.findMessageSetIndex({ id: messageId });\n    if (messageSetIndex === -1) {\n      return undefined;\n    }\n    return this.messageSets[messageSetIndex].messages.find((m) => m.id === messageId);\n  }\n\n  private switchToMessageSet(index: number) {\n    const currentMessages = this.messageSets.find((s) => s.isCurrent);\n    if (!currentMessages) {\n      return;\n    }\n    currentMessages.isCurrent = false;\n    this.messageSets[index].isCurrent = true;\n  }\n\n  private areMessageSetsOverlap(messages1: Array<{ id: string }>, messages2: Array<{ id: string }>) {\n    return messages1.some((m1) => messages2.find((m2) => m1.id === m2.id));\n  }\n\n  private findMessageSetIndex(message: { id?: string }) {\n    return this.messageSets.findIndex((set) => !!set.messages.find((m) => m.id === message.id));\n  }\n\n  private findTargetMessageSet(\n    newMessages: MessageResponse<StreamChatGenerics>[],\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    let messagesToAdd: (\n      | MessageResponse<StreamChatGenerics>\n      | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n    )[] = newMessages;\n    let targetMessageSetIndex!: number;\n    if (addIfDoesNotExist) {\n      const overlappingMessageSetIndices = this.messageSets\n        .map((_, i) => i)\n        .filter((i) => this.areMessageSetsOverlap(this.messageSets[i].messages, newMessages));\n      switch (messageSetToAddToIfDoesNotExist) {\n        case 'new':\n          if (overlappingMessageSetIndices.length > 0) {\n            targetMessageSetIndex = overlappingMessageSetIndices[0];\n            // No new message set is created if newMessages only contains thread replies\n          } else if (newMessages.some((m) => !m.parent_id)) {\n            this.messageSets.push({\n              messages: [],\n              isCurrent: false,\n              isLatest: false,\n              pagination: DEFAULT_MESSAGE_SET_PAGINATION,\n            });\n            targetMessageSetIndex = this.messageSets.length - 1;\n          }\n          break;\n        case 'current':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isCurrent);\n          break;\n        case 'latest':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n          break;\n        default:\n          targetMessageSetIndex = -1;\n      }\n      // when merging the target set will be the first one from the overlapping message sets\n      const mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n      const mergeSourceMessageSetIndices = [...overlappingMessageSetIndices];\n      if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n      }\n      // merge message sets\n      if (mergeSourceMessageSetIndices.length > 0) {\n        const target = this.messageSets[mergeTargetMessageSetIndex];\n        const sources = this.messageSets.filter((_, i) => mergeSourceMessageSetIndices.indexOf(i) !== -1);\n        sources.forEach((messageSet) => {\n          target.isLatest = target.isLatest || messageSet.isLatest;\n          target.isCurrent = target.isCurrent || messageSet.isCurrent;\n          target.pagination.hasPrev =\n            messageSet.messages[0].created_at < target.messages[0].created_at\n              ? messageSet.pagination.hasPrev\n              : target.pagination.hasPrev;\n          target.pagination.hasNext =\n            target.messages.slice(-1)[0].created_at < messageSet.messages.slice(-1)[0].created_at\n              ? messageSet.pagination.hasNext\n              : target.pagination.hasNext;\n          messagesToAdd = [...messagesToAdd, ...messageSet.messages];\n        });\n        sources.forEach((s) => this.messageSets.splice(this.messageSets.indexOf(s), 1));\n        const overlappingMessageSetIndex = this.messageSets.findIndex((s) =>\n          this.areMessageSetsOverlap(s.messages, newMessages),\n        );\n        targetMessageSetIndex = overlappingMessageSetIndex;\n      }\n    } else {\n      // assumes that all new messages belong to the same set\n      targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n    }\n\n    return { targetMessageSetIndex, messagesToAdd };\n  }\n}\n", "import { ChannelState } from './channel_state';\nimport { generateChannelTempCid, logChatPromiseExecution, messageSetPagination, normalizeQuerySort } from './utils';\nimport { StreamChat } from './client';\nimport {\n  APIResponse,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  ChannelUpdateOptions,\n  CreateCallOptions,\n  CreateCallResponse,\n  DefaultGenerics,\n  DeleteChannelAPIResponse,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  InviteOptions,\n  MarkReadOptions,\n  MarkUnreadOptions,\n  MemberFilters,\n  MemberSort,\n  Message,\n  MessageFilters,\n  MessagePaginationOptions,\n  MessageResponse,\n  MessageSetType,\n  MuteChannelAPIResponse,\n  NewMemberPayload,\n  PartialUpdateChannel,\n  PartialUpdateChannelAPIResponse,\n  PartialUpdateMember,\n  PinnedMessagePaginationOptions,\n  PinnedMessagesSort,\n  QueryMembersOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SendMessageAPIResponse,\n  TruncateChannelAPIResponse,\n  TruncateOptions,\n  UpdateChannelAPIResponse,\n  UserResponse,\n  QueryChannelAPIResponse,\n  PollVoteData,\n  SendMessageOptions,\n  AscDesc,\n  PartialUpdateMemberAPIResponse,\n  AIState,\n  MessageOptions,\n  PushPreference,\n  CreateDraftResponse,\n  GetDraftResponse,\n  DraftMessagePayload,\n} from './types';\nimport { Role } from './permissions';\nimport { DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE } from './constants';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  _client: StreamChat<StreamChatGenerics>;\n  type: string;\n  id: string | undefined;\n  data: ChannelData<StreamChatGenerics> | ChannelResponse<StreamChatGenerics> | undefined;\n  _data: ChannelData<StreamChatGenerics> | ChannelResponse<StreamChatGenerics>;\n  cid: string;\n  /**  */\n  listeners: { [key: string]: (string | EventHandler<StreamChatGenerics>)[] };\n  state: ChannelState<StreamChatGenerics>;\n  /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */\n  initialized: boolean;\n  /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */\n  offlineMode: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n  push_preferences?: PushPreference;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<StreamChatGenerics>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<StreamChatGenerics>} data any additional custom params\n   *\n   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat<StreamChatGenerics>,\n    type: string,\n    id: string | undefined,\n    data: ChannelData<StreamChatGenerics>,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState<StreamChatGenerics>(this);\n    this.initialized = false;\n    this.offlineMode = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<StreamChatGenerics>}\n   */\n  getClient(): StreamChat<StreamChatGenerics> {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the config for this channel id (cid)\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.cid];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message<StreamChatGenerics>} message The Message object\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   * @param {boolean} [options.skip_push] Skip sending push notifications\n   * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.\n   * @param {boolean} [options.pending] Make this message pending\n   * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message\n   * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests\n   *\n   * @return {Promise<SendMessageAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendMessage(message: Message<StreamChatGenerics>, options?: SendMessageOptions) {\n    return await this.getClient().post<SendMessageAPIResponse<StreamChatGenerics>>(this._channelURL() + '/message', {\n      message,\n      ...options,\n    });\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    return this.getClient().sendFile(`${this._channelURL()}/file`, uri, name, contentType, user);\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    return this.getClient().sendFile(`${this._channelURL()}/image`, uri, name, contentType, user);\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event<StreamChatGenerics>} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendEvent(event: Event<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().post<EventAPIResponse<StreamChatGenerics>>(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters<StreamChatGenerics> | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<StreamChatGenerics>}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n   */\n  async search(\n    query: MessageFilters<StreamChatGenerics> | string,\n    options: SearchOptions<StreamChatGenerics> & {\n      client_id?: string;\n      connection_id?: string;\n      message_filter_conditions?: MessageFilters<StreamChatGenerics>;\n      message_options?: MessageOptions;\n      query?: string;\n    } = {},\n  ) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    // Return a list of channels\n    const payload: SearchPayload<StreamChatGenerics> = {\n      filter_conditions: { cid: this.cid } as ChannelFilters<StreamChatGenerics>,\n      ...options,\n      sort: options.sort ? normalizeQuerySort<SearchMessageSortBase<StreamChatGenerics>>(options.sort) : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<SearchAPIResponse<StreamChatGenerics>>(this.getClient().baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {MemberFilters<StreamChatGenerics>}  filterConditions object MongoDB style filters\n   * @param {MemberSort<StreamChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse<StreamChatGenerics>>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: MemberFilters<StreamChatGenerics>,\n    sort: MemberSort<StreamChatGenerics> = [],\n    options: QueryMembersOptions = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse<StreamChatGenerics>[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * updateMemberPartial - Partial update a member\n   *\n   * @param {PartialUpdateMember<StreamChatGenerics>}  updates\n   * @param {{ user_id?: string }} [options] Option object, {user_id: 'jane'} to optionally specify the user id\n\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} Updated member\n   */\n  async updateMemberPartial(updates: PartialUpdateMember<StreamChatGenerics>, options?: { userId?: string }) {\n    const url = new URL(`${this._channelURL()}/member`);\n\n    if (options?.userId) {\n      url.searchParams.append('user_id', options.userId);\n    }\n\n    return await this.getClient().patch<PartialUpdateMemberAPIResponse<StreamChatGenerics>>(url.toString(), updates);\n  }\n\n  /**\n   * @deprecated Use `updateMemberPartial` instead\n   * partialUpdateMember - Partial update a member\n   *\n   * @param {string} user_id member user id\n   * @param {PartialUpdateMember<StreamChatGenerics>}  updates\n   *\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} Updated member\n   */\n  async partialUpdateMember(user_id: string, updates: PartialUpdateMember<StreamChatGenerics>) {\n    if (!user_id) {\n      throw Error('Please specify the user id');\n    }\n\n    return await this.getClient().patch<PartialUpdateMemberAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + `/member/${encodeURIComponent(user_id)}`,\n      updates,\n    );\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction<StreamChatGenerics>} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction<StreamChatGenerics>,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    return await this.getClient().post<ReactionAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/reaction`,\n      {\n        reaction,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error('Deleting a reaction requires specifying both the message and reaction type');\n    }\n\n    const url =\n      this.getClient().baseURL +\n      `/messages/${encodeURIComponent(messageID)}/reaction/${encodeURIComponent(reactionType)}`;\n    //provided when server side request\n    if (user_id) {\n      return this.getClient().delete<ReactionAPIResponse<StreamChatGenerics>>(url, { user_id });\n    }\n\n    return this.getClient().delete<ReactionAPIResponse<StreamChatGenerics>>(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData<StreamChatGenerics>} channelData The object to update the custom properties of this channel with\n   * @param {Message<StreamChatGenerics>} [updateMessage] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async update(\n    channelData: Partial<ChannelData<StreamChatGenerics>> | Partial<ChannelResponse<StreamChatGenerics>> = {},\n    updateMessage?: Message<StreamChatGenerics>,\n    options?: ChannelUpdateOptions,\n  ) {\n    // Strip out reserved names that will result in API errors.\n    const reserved = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n      'own_capabilities',\n    ];\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options,\n    });\n  }\n\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel<StreamChatGenerics>} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse<StreamChatGenerics>>}\n   */\n  async updatePartial(update: PartialUpdateChannel<StreamChatGenerics>) {\n    const data = await this.getClient().patch<PartialUpdateChannelAPIResponse<StreamChatGenerics>>(\n      this._channelURL(),\n      update,\n    );\n\n    const areCapabilitiesChanged =\n      [...(data.channel.own_capabilities || [])].sort().join() !==\n      [...(Array.isArray(this.data?.own_capabilities) ? (this.data?.own_capabilities as string[]) : [])].sort().join();\n    this.data = data.channel;\n    // If the capabiltities are changed, we trigger the `capabilities.changed` event.\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: 'capabilities.changed',\n        cid: this.cid,\n        own_capabilities: data.channel.own_capabilities,\n      });\n    }\n    return data;\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      cooldown: coolDownInterval,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      cooldown: 0,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {Promise<DeleteChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async delete(options: { hard_delete?: boolean } = {}) {\n    return await this.getClient().delete<DeleteChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      ...options,\n    });\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   * @param {TruncateOptions<StreamChatGenerics>} [options] Defines truncation options\n   * @return {Promise<TruncateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async truncate(options: TruncateOptions<StreamChatGenerics> = {}) {\n    return await this.getClient().post<TruncateChannelAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + '/truncate',\n      options,\n    );\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async acceptInvite(options: InviteOptions<StreamChatGenerics> = {}) {\n    return await this._update({ accept_invite: true, ...options });\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async rejectInvite(options: InviteOptions<StreamChatGenerics> = {}) {\n    return await this._update({ reject_invite: true, ...options });\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to add to the channel\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async addMembers(\n    members: string[] | Array<NewMemberPayload<StreamChatGenerics>>,\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ add_members: members, message, ...options });\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async addModerators(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ add_moderators: members, message, ...options });\n  }\n\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async assignRoles(\n    roles: { channel_role: Role; user_id: string }[],\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ assign_roles: roles, message, ...options });\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload<StreamChatGenerics>>} members An array of members to invite to the channel\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async inviteMembers(\n    members: string[] | Array<NewMemberPayload<StreamChatGenerics>>,\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ invites: members, message, ...options });\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async removeMembers(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ remove_members: members, message, ...options });\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async demoteModerators(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ demote_moderators: members, message, ...options });\n  }\n\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload: Object) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), payload);\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse<StreamChatGenerics>>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<MuteChannelAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + '/moderation/mute/channel',\n      { channel_cid: this.cid, ...opts },\n    );\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(this.getClient().baseURL + '/moderation/unmute/channel', {\n      channel_cid: this.cid,\n      ...opts,\n    });\n  }\n\n  /**\n   * archive - archives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.archives();\n   *\n   * example server side:\n   * await channel.archive({user_id: userId});\n   *\n   */\n  async archive(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error('A user_id is required for archiving a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { archived: true } });\n    return resp.channel_member;\n  }\n\n  /**\n   * unarchive - unarchives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.unarchive();\n   *\n   * example server side:\n   * await channel.unarchive({user_id: userId});\n   *\n   */\n  async unarchive(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error('A user_id is required for unarchiving a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { archived: false } });\n    return resp.channel_member;\n  }\n\n  /**\n   * pin - pins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.pin();\n   *\n   * example server side:\n   * await channel.pin({user_id: userId});\n   *\n   */\n  async pin(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error('A user_id is required for pinning a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { pinned: true } });\n    return resp.channel_member;\n  }\n\n  /**\n   * unpin - unpins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse<StreamChatGenerics>>} The server response\n   *\n   * example:\n   * await channel.unpin();\n   *\n   * example server side:\n   * await channel.unpin({user_id: userId});\n   *\n   */\n  async unpin(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error('A user_id is required for unpinning a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { pinned: false } });\n    return resp.channel_member;\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    createdAt: Date | null;\n    expiresAt: Date | null;\n    muted: boolean;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<SendMessageAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/action`,\n      {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type,\n      },\n    );\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string, options?: { user_id: string }) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n        ...(options || {}),\n      } as Event<StreamChatGenerics>);\n    }\n  }\n\n  /**\n   * Sends an event to update the AI state for a specific message.\n   * Typically used by the server connected to the AI service to notify clients of state changes.\n   *\n   * @param messageId - The ID of the message associated with the AI state.\n   * @param state - The new state of the AI process (e.g., thinking, generating).\n   * @param options - Optional parameters, such as `ai_message`, to include additional details in the event.\n   */\n  async updateAIState(messageId: string, state: AIState, options: { ai_message?: string } = {}) {\n    await this.sendEvent({\n      ...options,\n      type: 'ai_indicator.update',\n      message_id: messageId,\n      ai_state: state,\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * Sends an event to notify watchers to clear the typing/thinking UI when the AI response starts streaming.\n   * Typically used by the server connected to the AI service to inform clients that the AI response has started.\n   */\n  async clearAIIndicator() {\n    await this.sendEvent({\n      type: 'ai_indicator.clear',\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * Sends an event to stop AI response generation, leaving the message in its current state.\n   * Triggered by the user to halt the AI response process.\n   */\n  async stopAIResponse() {\n    await this.sendEvent({\n      type: 'ai_indicator.stop',\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string, options?: { user_id: string }) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n      ...(options || {}),\n    } as Event<StreamChatGenerics>);\n  }\n\n  _isTypingIndicatorsEnabled(): boolean {\n    if (!this.getConfig()?.typing_events) {\n      return false;\n    }\n    return this.getClient().user?.privacy_settings?.typing_indicators?.enabled ?? true;\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | undefined} Description\n   */\n  lastMessage(): FormatMessageResponse<StreamChatGenerics> | undefined {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.latestMessages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.latestMessages.length + 1;\n    const messageSlice = this.state.latestMessages.slice(min, max);\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    return messageSlice[0];\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions<StreamChatGenerics>} data\n   * @return {Promise<EventAPIResponse<StreamChatGenerics> | null>} Description\n   */\n  async markRead(data: MarkReadOptions<StreamChatGenerics> = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<EventAPIResponse<StreamChatGenerics>>(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkUnreadOptions<StreamChatGenerics>} data\n   * @return {APIResponse} An API response\n   */\n  async markUnread(data: MarkUnreadOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<APIResponse>(this._channelURL() + '/unread', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions<StreamChatGenerics>} options additional options for the query endpoint\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async watch(options?: ChannelQueryOptions<StreamChatGenerics>) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined, 'latest');\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger('info', `channel:watch() - started watching channel ${this.cid}`, {\n      tags: ['channel'],\n      channel: this,\n    });\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(this._channelURL() + '/stop-watching', {});\n\n    this._client.logger('info', `channel:watch() - stopped watching channel ${this.cid}`, {\n      tags: ['channel'],\n      channel: this,\n    });\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message.\n   *\n   * The recommended way of working with threads is to use the Thread class.\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string },\n    sort?: { created_at: AscDesc }[],\n  ) {\n    const normalizedSort = sort ? normalizeQuerySort(sort) : undefined;\n    const data = await this.getClient().get<GetRepliesAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(parent_id)}/replies`,\n      {\n        sort: normalizedSort,\n        ...options,\n      },\n    );\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getPinnedMessages - List list pinned messages of the channel\n   *\n   * @param {PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages\n   *\n   * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n   */\n  async getPinnedMessages(\n    options: PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string },\n    sort: PinnedMessagesSort = [],\n  ) {\n    return await this.getClient().get<GetRepliesAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + '/pinned_messages',\n      {\n        payload: {\n          ...options,\n          sort: normalizeQuerySort(sort),\n        },\n      },\n    );\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse<StreamChatGenerics>>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(message_id)}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse<StreamChatGenerics>>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<GetMultipleMessagesAPIResponse<StreamChatGenerics>>(this._channelURL() + '/messages', {\n      ids: messageIds.join(','),\n    });\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(message: FormatMessageResponse<StreamChatGenerics> | MessageResponse<StreamChatGenerics>) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.parent_id && !message.show_in_channel) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id)) return false;\n\n    // Return false if channel doesn't allow read events.\n    if (Array.isArray(this.data?.own_capabilities) && !this.data?.own_capabilities.includes('read-events'))\n      return false;\n\n    // FIXME: see #1265, adjust and count new messages even when the channel is muted\n    if (this.muteStatus().muted) return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | null) {\n    if (!lastRead) return this.state.unreadCount;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnreadMentions - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.some((user) => user.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The Server Response\n   *\n   */\n  create = async (options?: ChannelQueryOptions<StreamChatGenerics>) => {\n    const defaultOptions = {\n      ...options,\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(defaultOptions, 'latest');\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response\n   */\n  async query(\n    options?: ChannelQueryOptions<StreamChatGenerics>,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    let queryURL = `${this.getClient().baseURL}/channels/${encodeURIComponent(this.type)}`;\n    if (this.id) {\n      queryURL += `/${encodeURIComponent(this.id)}`;\n    }\n\n    const state = await this.getClient().post<QueryChannelAPIResponse<StreamChatGenerics>>(queryURL + '/query', {\n      data: this._data,\n      state: true,\n      ...options,\n    });\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n\n      const tempChannelCid = generateChannelTempCid(\n        this.type,\n        state.members.map((member) => member.user_id || member.user?.id || ''),\n      );\n\n      if (tempChannelCid && tempChannelCid in this.getClient().activeChannels) {\n        // This gets set in `client.channel()` function, when channel is created\n        // using members, not id.\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n\n      if (!(this.cid in this.getClient().activeChannels) && this.getClient()._cacheEnabled()) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state.channel);\n\n    // add any messages to our channel state\n    const { messageSet } = this._initializeState(state, messageSetToAddToIfDoesNotExist);\n    messageSet.pagination = {\n      ...messageSet.pagination,\n      ...messageSetPagination({\n        parentSet: messageSet,\n        messagePaginationOptions: options?.messages,\n        requestedPageSize: options?.messages?.limit ?? DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE,\n        returnedPage: state.messages,\n        logger: this.getClient().logger,\n      }),\n    };\n\n    this.getClient().polls.hydratePollCache(state.messages, true);\n\n    const areCapabilitiesChanged =\n      [...(state.channel.own_capabilities || [])].sort().join() !==\n      [...(Array.isArray(this.data?.own_capabilities) ? (this.data?.own_capabilities as string[]) : [])].sort().join();\n    this.data = state.channel;\n    this.offlineMode = false;\n\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: 'capabilities.changed',\n        cid: this.cid,\n        own_capabilities: state.channel.own_capabilities,\n      });\n    }\n\n    this.getClient().dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: [state],\n        isLatestMessageSet: messageSet.isLatest,\n      },\n    });\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * createCall - creates a call for the current channel\n   *\n   * @param {CreateCallOptions} options\n   * @returns {Promise<CreateCallResponse>}\n   */\n  async createCall(options: CreateCallOptions) {\n    return await this.getClient().post<CreateCallResponse>(this._channelURL() + '/call', options);\n  }\n\n  /**\n   * Cast or cancel one or more votes on a poll\n   * @param pollId string The poll id\n   * @param votes PollVoteData[] The votes that will be casted (or canceled in case of an empty array)\n   * @returns {APIResponse & PollVoteResponse} The poll votes\n   */\n  async vote(messageId: string, pollId: string, vote: PollVoteData) {\n    return await this.getClient().castPollVote(messageId, pollId, vote);\n  }\n\n  async removeVote(messageId: string, pollId: string, voteId: string) {\n    return await this.getClient().removePollVote(messageId, pollId, voteId);\n  }\n\n  /**\n   * createDraft - Creates or updates a draft message in a channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string} channelID The channel ID\n   * @param {DraftMessagePayload<StreamChatGenerics>} message The draft message to create or update\n   *\n   * @return {Promise<CreateDraftResponse<StreamChatGenerics>>} Response containing the created draft\n   */\n  async createDraft(message: DraftMessagePayload<StreamChatGenerics>) {\n    return await this.getClient().post<CreateDraftResponse<StreamChatGenerics>>(this._channelURL() + '/draft', {\n      message,\n    });\n  }\n\n  /**\n   * deleteDraft - Deletes a draft message from a channel\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<APIResponse>} API response\n   */\n  async deleteDraft({ parent_id }: { parent_id?: string } = {}) {\n    return await this.getClient().delete<APIResponse>(this._channelURL() + '/draft', { parent_id });\n  }\n\n  /**\n   * getDraft - Retrieves a draft message from a channel\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<GetDraftResponse<StreamChatGenerics>>} Response containing the draft\n   */\n  async getDraft({ parent_id }: { parent_id?: string } = {}) {\n    return await this.getClient().get<GetDraftResponse<StreamChatGenerics>>(this._channelURL() + '/draft', {\n      parent_id,\n    });\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<StreamChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n   */\n  on(eventType: EventTypes, callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler<StreamChatGenerics> | EventTypes,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger('info', `Attaching listener for ${key} event on channel ${this.cid}`, {\n      tags: ['event', 'channel'],\n      channel: this,\n    });\n\n    this.listeners[key].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this._client.logger('info', `Removing listener for ${key} event from channel ${this.cid}`, {\n          tags: ['event', 'channel'],\n          channel: this,\n        });\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(eventType: EventTypes, callback: EventHandler<StreamChatGenerics>): void;\n  off(callback: EventHandler<StreamChatGenerics>): void;\n  off(\n    callbackOrString: EventHandler<StreamChatGenerics> | EventTypes,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger('info', `Removing listener for ${key} event from channel ${this.cid}`, {\n      tags: ['event', 'channel'],\n      channel: this,\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _handleChannelEvent(event: Event<StreamChatGenerics>) {\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const channelState = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id && event.created_at) {\n          channelState.read[event.user.id] = {\n            last_read: new Date(event.created_at),\n            last_read_message_id: event.last_read_message_id,\n            user: event.user,\n            unread_messages: 0,\n          };\n\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          if (event.hard_delete) channelState.removeMessage(event.message);\n          else channelState.addMessageSorted(event.message, false, false);\n\n          channelState.removeQuotedMessageReferences(event.message);\n\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n\n          // do not increase the unread count - the back-end does not increase the count neither in the following cases:\n          // 1. the message is mine\n          // 2. the message is a thread reply from any user\n          const preventUnreadCountUpdate = ownMessage || isThreadMessage;\n          if (preventUnreadCountUpdate) break;\n\n          if (event.user?.id) {\n            for (const userId in channelState.read) {\n              if (userId === event.user.id) {\n                channelState.read[event.user.id] = {\n                  last_read: new Date(event.created_at as string),\n                  user: event.user,\n                  unread_messages: 0,\n                };\n              } else {\n                channelState.read[userId].unread_messages += 1;\n              }\n            }\n          }\n\n          if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n      case 'message.undeleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          channelState.addMessageSorted(event.message, false, false);\n          channelState._updateQuotedMessageReferences({ message: event.message });\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'channel.truncated':\n        if (event.channel?.truncated_at) {\n          const truncatedAt = +new Date(event.channel.truncated_at);\n\n          channelState.messageSets.forEach((messageSet, messageSetIndex) => {\n            messageSet.messages.forEach(({ created_at: createdAt, id }) => {\n              if (truncatedAt > +createdAt) channelState.removeMessage({ id, messageSetIndex });\n            });\n          });\n\n          channelState.pinnedMessages.forEach(({ id, created_at: createdAt }) => {\n            if (truncatedAt > +createdAt)\n              channelState.removePinnedMessage({ id } as MessageResponse<StreamChatGenerics>);\n          });\n        } else {\n          channelState.clearMessages();\n        }\n\n        channelState.unreadCount = 0;\n        // system messages don't increment unread counts\n        if (event.message) {\n          channelState.addMessageSorted(event.message);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'member.added':\n      case 'member.updated': {\n        const memberCopy: ChannelMemberResponse = {\n          ...event.member,\n        };\n\n        if (memberCopy.pinned_at === null) {\n          delete memberCopy.pinned_at;\n        }\n\n        if (memberCopy.archived_at === null) {\n          delete memberCopy.archived_at;\n        }\n\n        if (memberCopy?.user) {\n          channelState.members = {\n            ...channelState.members,\n            [memberCopy.user.id]: memberCopy,\n          };\n        }\n\n        const currentUserId = this.getClient().userID;\n        if (\n          typeof currentUserId === 'string' &&\n          typeof memberCopy?.user?.id === 'string' &&\n          memberCopy.user.id === currentUserId\n        ) {\n          channelState.membership = memberCopy;\n        }\n        break;\n      }\n      case 'member.removed':\n        if (event.user?.id) {\n          const newMembers = {\n            ...channelState.members,\n          };\n\n          delete newMembers[event.user.id];\n\n          channelState.members = newMembers;\n\n          // TODO?: unset membership\n        }\n        break;\n      case 'notification.mark_unread': {\n        const ownMessage = event.user?.id === this.getClient().user?.id;\n        if (!(ownMessage && event.user)) break;\n\n        const unreadCount = event.unread_messages ?? 0;\n\n        channelState.read[event.user.id] = {\n          first_unread_message_id: event.first_unread_message_id,\n          last_read: new Date(event.last_read_at as string),\n          last_read_message_id: event.last_read_message_id,\n          user: event.user,\n          unread_messages: unreadCount,\n        };\n\n        channelState.unreadCount = unreadCount;\n        break;\n      }\n      case 'channel.updated':\n        if (event.channel) {\n          const isFrozenChanged = event.channel?.frozen !== undefined && event.channel.frozen !== channel.data?.frozen;\n          if (isFrozenChanged) {\n            this.query({ state: false, messages: { limit: 0 }, watchers: { limit: 0 } });\n          }\n          channel.data = {\n            ...event.channel,\n            hidden: event.channel?.hidden ?? channel.data?.hidden,\n            own_capabilities: event.channel?.own_capabilities ?? channel.data?.own_capabilities,\n          };\n        }\n        break;\n      case 'reaction.new':\n        if (event.message && event.reaction) {\n          event.message = channelState.addReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.reaction) {\n          event.message = channelState.removeReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.updated':\n        if (event.reaction) {\n          // assuming reaction.updated is only called if enforce_unique is true\n          event.message = channelState.addReaction(event.reaction, event.message, true);\n        }\n        break;\n      case 'channel.hidden':\n        channel.data = { ...channel.data, hidden: true };\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      case 'channel.visible':\n        channel.data = { ...channel.data, hidden: false };\n        break;\n      case 'user.banned':\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: !!event.shadow,\n          banned: !event.shadow,\n          user: { ...(channelState.members[event.user.id]?.user || {}), ...event.user },\n        };\n        break;\n      case 'user.unbanned':\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: false,\n          banned: false,\n          user: { ...(channelState.members[event.user.id]?.user || {}), ...event.user },\n        };\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (event: Event<StreamChatGenerics>) => {\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${encodeURIComponent(this.type)}/${encodeURIComponent(this.id)}`;\n  };\n\n  _checkInitialized() {\n    if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _initializeState(\n    state: ChannelAPIResponse<StreamChatGenerics>,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    const { state: clientState, user, userID } = this.getClient();\n\n    // add the members and users\n    if (state.members) {\n      this._hydrateMembers({ members: state.members });\n\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = state.membership || {};\n\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.initMessages();\n    }\n    const { messageSet } = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist);\n\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    if (state.pending_messages) {\n      this.state.pending_messages = state.pending_messages;\n    }\n    if (state.watcher_count !== undefined) {\n      this.state.watcher_count = state.watcher_count;\n    }\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (userID != null) {\n      const last_read = this.state.last_message_at || new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n          unread_messages: 0,\n        };\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        this.state.read[read.user.id] = {\n          last_read: new Date(read.last_read),\n          last_read_message_id: read.last_read_message_id,\n          unread_messages: read.unread_messages ?? 0,\n          user: read.user,\n        };\n\n        if (read.user.id === user?.id) {\n          this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n        }\n      }\n    }\n\n    return {\n      messageSet,\n    };\n  }\n\n  _extendEventWithOwnReactions(event: Event<StreamChatGenerics>) {\n    if (!event.message) {\n      return;\n    }\n    const message = this.state.findMessage(event.message.id, event.message.parent_id);\n    if (message) {\n      event.message.own_reactions = message.own_reactions;\n    }\n  }\n\n  _hydrateMembers({\n    members,\n    overrideCurrentState = true,\n  }: {\n    members: ChannelMemberResponse<StreamChatGenerics>[];\n    /**\n     * If set to `true` then `ChannelState.members` will be overriden with the newly\n     * provided `members`, setting this property to `false` will merge current `ChannelState.members`\n     * object with the newly provided `members`\n     * (new members with the same `userId` will replace the old ones).\n     */\n    overrideCurrentState?: boolean;\n  }) {\n    const newMembersById = members.reduce<ChannelState<StreamChatGenerics>['members']>((membersById, member) => {\n      if (member.user) {\n        membersById[member.user.id] = member;\n      }\n      return membersById;\n    }, {});\n\n    if (overrideCurrentState) {\n      this.state.members = newMembersById;\n    } else if (!overrideCurrentState && members.length) {\n      this.state.members = {\n        ...this.state.members,\n        ...newMembersById,\n      };\n    }\n  }\n\n  _disconnect() {\n    this._client.logger('info', `channel:disconnect() - Disconnecting the channel ${this.cid}`, {\n      tags: ['connection', 'channel'],\n      channel: this,\n    });\n\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n}\n", "import { UserResponse, ExtendableGenerics, DefaultGenerics } from './types';\nimport { StreamChat } from './client';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  private client: StreamChat<StreamChatGenerics>;\n  users: {\n    [key: string]: UserResponse<StreamChatGenerics>;\n  };\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.client = client;\n    this.users = {};\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse<StreamChatGenerics>[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse<StreamChatGenerics>) {\n    if (user != null && this.client._cacheEnabled()) {\n      this.users[user.id] = user;\n    }\n  }\n\n  updateUserReference(user: UserResponse<StreamChatGenerics>, channelID: string) {\n    if (user == null || !this.client._cacheEnabled()) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n\n  deleteAllChannelReference(channelID: string) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n}\n", "import axios from 'axios';\nimport { StableWSConnection } from './connection';\nimport { randomId, sleep } from './utils';\n\nexport type InsightTypes = 'ws_fatal' | 'ws_success_after_failure' | 'http_hi_failed';\nexport class InsightMetrics {\n  connectionStartTimestamp: number | null;\n  wsConsecutiveFailures: number;\n  wsTotalFailures: number;\n  instanceClientId: string;\n\n  constructor() {\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n  }\n}\n\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */\nexport const postInsights = async (insightType: InsightTypes, insights: Record<string, unknown>) => {\n  const maxAttempts = 3;\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      await axios.post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n    } catch (e) {\n      await sleep((i + 1) * 3000);\n      continue;\n    }\n    break;\n  }\n};\n\nexport function buildWsFatalInsight(connection: StableWSConnection, event: Record<string, unknown>) {\n  return {\n    ...event,\n    ...buildWsBaseInsight(connection),\n  };\n}\n\nfunction buildWsBaseInsight(connection: StableWSConnection) {\n  const { client } = connection;\n  return {\n    ready_state: connection.ws?.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: new Date().getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    device: client.options.device,\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== 'undefined' ? navigator?.onLine : null,\n    user_agent: typeof navigator !== 'undefined' ? navigator?.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId,\n  };\n}\n\nexport function buildWsSuccessAfterFailureInsight(connection: StableWSConnection) {\n  return buildWsBaseInsight(connection);\n}\n", "import WebSocket from 'isomorphic-ws';\nimport {\n  chatCodes,\n  convertErrorToJson,\n  sleep,\n  retryInterval,\n  randomId,\n  removeConnectionEventListeners,\n  addConnectionEventListeners,\n} from './utils';\nimport { buildWsFatalInsight, buildWsSuccessAfterFailureInsight, postInsights } from './insights';\nimport { ConnectAPIResponse, ConnectionOpen, ExtendableGenerics, DefaultGenerics, UR, LogLevel } from './types';\nimport { StreamChat } from './client';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent): res is WebSocket.CloseEvent =>\n  (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent): res is WebSocket.ErrorEvent =>\n  (res as WebSocket.ErrorEvent).error !== undefined;\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  // global from constructor\n  client: StreamChat<StreamChatGenerics>;\n\n  // local vars\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse<StreamChatGenerics>;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isDisconnected: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & { code?: string | number; isWSFailure?: boolean; StatusCode?: string | number },\n  ) => void;\n  requestID: string | undefined;\n  resolvePromise?: (value: ConnectionOpen<StreamChatGenerics>) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    /** StreamChat client */\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'connection:' + msg, { tags: ['connection'], ...extra });\n  }\n\n  setClient(client: StreamChat<StreamChatGenerics>) {\n    this.client = client;\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n    }\n\n    this.isDisconnected = false;\n\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n\n      this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n        this._reconnect({ refreshToken: true });\n      } else if (!error.isWSFailure) {\n        // API rejected the connection and we should not retry\n        throw new Error(\n          JSON.stringify({\n            code: error.code,\n            StatusCode: error.StatusCode,\n            message: error.message,\n            isWSFailure: error.isWSFailure,\n          }),\n        );\n      }\n    }\n\n    return await this._waitForHealthy(timeout);\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n          } catch (error) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        this.isConnecting = false;\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  /**\n   * Builds and returns the url for websocket.\n   * @private\n   * @returns url string\n   */\n  _buildUrl = () => {\n    const qs = this.client._buildWSPayload(this.requestID);\n    const token = this.client.tokenManager.getToken();\n    const wsUrlParams = this.client.options.wsUrlParams;\n\n    const params = new URLSearchParams(wsUrlParams);\n    params.set('json', qs);\n    params.set('api_key', this.client.key);\n    // it is expected that the autorization parameter exists even if\n    // the token is undefined, so we interpolate it to be safe\n    params.set('authorization', `${token}`);\n    params.set('stream-auth-type', this.client.getAuthType());\n    params.set('X-Stream-Client', this.client.getUserAgent());\n\n    return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    removeConnectionEventListeners(this.onlineStatusChanged);\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this._log(`disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`, { event });\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n\n      ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n    } else {\n      this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (this.isConnecting || (this.isDisconnected && this.client.options.enableWSFallback)) return; // simply ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    this.requestID = randomId();\n    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch (e) {\n      // token provider has failed before, so try again\n    }\n\n    try {\n      if (!isTokenReady) {\n        this._log(`_connect() - tokenProvider failed before, so going to retry`);\n        await this.client.tokenManager.loadToken();\n      }\n\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`, { wsURL, requestID: this.requestID });\n      this.ws = new WebSocket(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n\n      if (response) {\n        this.connectionID = response.connection_id;\n        if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n          postInsights(\n            'ws_success_after_failure',\n            buildWsSuccessAfterFailureInsight((this as unknown) as StableWSConnection),\n          );\n          this.client.insightMetrics.wsConsecutiveFailures = 0;\n        }\n        return response;\n      }\n    } catch (err) {\n      this.isConnecting = false;\n      this._log(`_connect() - Error - `, err);\n      if (this.client.options.enableInsights) {\n        this.client.insightMetrics.wsConsecutiveFailures++;\n        this.client.insightMetrics.wsTotalFailures++;\n\n        const insights = buildWsFatalInsight((this as unknown) as StableWSConnection, convertErrorToJson(err as Error));\n        postInsights?.('ws_fatal', insights);\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(options: { interval?: number; refreshToken?: boolean } = {}): Promise<void> {\n    this._log('_reconnect() - Initiating the reconnect');\n\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n\n    if (this.isDisconnected && this.client.options.enableWSFallback) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n\n    this._log('_reconnect() - Destroying current WS connection');\n\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this._log('onlineStatusChanged() - Status changing to offline');\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onopen() - onopen callback', { wsID });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onmessage() - onmessage callback', { event, wsID });\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && data) {\n      this.isResolved = true;\n      if (data.error) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      }\n\n      this.resolvePromise?.(data);\n      this._setHealth(true);\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n\n    if (data && data.type === 'health.check') {\n      this.scheduleNextPing();\n    }\n\n    this.client.handleEvent(event);\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onclose() - onclose callback - ' + event.code, { event, wsID });\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(`WS connection reject with error ${event.reason}`) as Error & WebSocket.CloseEvent;\n\n      error.reason = event.reason;\n      error.code = event.code;\n      error.wasClean = event.wasClean;\n      error.target = event.target;\n\n      this.rejectPromise?.(error);\n      this._log(`onclose() - WS connection reject with error ${event.reason}`, { event });\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this._log(`onclose() - WS connection closed. Calling reconnect ...`, { event });\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n    this.isConnecting = false;\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this._log(`onerror() - WS connection resulted into error`, { event });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy === this.isHealthy) return;\n\n    this.isHealthy = healthy;\n\n    if (this.isHealthy) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n      return;\n    }\n\n    // we're offline, wait few seconds and fire and event if still offline\n    setTimeout(() => {\n      if (this.isHealthy) return;\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n    }, 5000);\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent, isWSFailure = true) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this._log(`_errorFromWSEvent() - WS failed with code ${code}`, { event }, 'warn');\n\n    const error = new Error(`WS failed with code ${code} and reason - ${message}`) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      this?.ws?.removeAllListeners();\n      this?.ws?.close();\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<ConnectionOpen<StreamChatGenerics>>((resolve, reject) => {\n      this.resolvePromise = resolve;\n      this.rejectPromise = reject;\n    });\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [{ type: 'health.check', client_id: this.client.clientID }];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n        this._log('scheduleConnectionCheck - going to reconnect');\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n", "export default null;", "export default null;", "import jwt, { Secret, SignOptions } from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\nimport { UR } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret: Secret, userId: string, extraData: UR = {}, jwtOptions: SignOptions = {}) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UR = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: SignOptions = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: Secret, jwtOptions: SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: SignOptions = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string | Buffer} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string | Buffer, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'utf8');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n\n  try {\n    return crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n  } catch {\n    return false;\n  }\n}\n", "import { Secret } from 'jsonwebtoken';\nimport { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\nimport { TokenOrProvider, ExtendableGenerics, DefaultGenerics, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse<StreamChatGenerics>;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  setTokenOrProvider = async (tokenOrProvider: TokenOrProvider, user: UserResponse<StreamChatGenerics>) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.tokenProvider = undefined;\n    this.type = 'static';\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse<StreamChatGenerics>) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {\n        throw new Error('userToken does not have a user_id or is not matching with user.id');\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve, reject) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        try {\n          this.token = await this.tokenProvider();\n        } catch (e) {\n          return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n        }\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n", "import { AxiosResponse } from 'axios';\nimport { APIErrorResponse } from './types';\n\nexport const APIErrorCodes: Record<string, { name: string; retryable: boolean }> = {\n  '-1': { name: 'InternalSystemError', retryable: true },\n  '2': { name: 'AccessKeyError', retryable: false },\n  '3': { name: 'AuthenticationFailedError', retryable: true },\n  '4': { name: 'InputError', retryable: false },\n  '6': { name: 'DuplicateUsernameError', retryable: false },\n  '9': { name: 'RateLimitError', retryable: true },\n  '16': { name: 'DoesNotExistError', retryable: false },\n  '17': { name: 'NotAllowedError', retryable: false },\n  '18': { name: 'EventNotSupportedError', retryable: false },\n  '19': { name: 'ChannelFeatureNotSupportedError', retryable: false },\n  '20': { name: 'MessageTooLongError', retryable: false },\n  '21': { name: 'MultipleNestingLevelError', retryable: false },\n  '22': { name: 'PayloadTooBigError', retryable: false },\n  '23': { name: 'RequestTimeoutError', retryable: true },\n  '24': { name: 'MaxHeaderSizeExceededError', retryable: false },\n  '40': { name: 'AuthErrorTokenExpired', retryable: false },\n  '41': { name: 'AuthErrorTokenNotValidYet', retryable: false },\n  '42': { name: 'AuthErrorTokenUsedBeforeIssuedAt', retryable: false },\n  '43': { name: 'AuthErrorTokenSignatureInvalid', retryable: false },\n  '44': { name: 'CustomCommandEndpointMissingError', retryable: false },\n  '45': { name: 'CustomCommandEndpointCallError', retryable: true },\n  '46': { name: 'ConnectionIDNotFoundError', retryable: false },\n  '60': { name: 'CoolDownError', retryable: true },\n  '69': { name: 'ErrWrongRegion', retryable: false },\n  '70': { name: 'ErrQueryChannelPermissions', retryable: false },\n  '71': { name: 'ErrTooManyConnections', retryable: true },\n  '99': { name: 'AppSuspendedError', retryable: false },\n};\n\ntype APIError = Error & { code: number; isWSFailure?: boolean };\n\nexport function isAPIError(error: Error): error is APIError {\n  return (error as APIError).code !== undefined;\n}\n\nexport function isErrorRetryable(error: APIError) {\n  if (!error.code) return false;\n  const err = APIErrorCodes[`${error.code}`];\n  if (!err) return false;\n  return err.retryable;\n}\n\nexport function isConnectionIDError(error: APIError) {\n  return error.code === 46; // ConnectionIDNotFoundError\n}\n\nexport function isWSFailure(err: APIError): boolean {\n  if (typeof err.isWSFailure === 'boolean') {\n    return err.isWSFailure;\n  }\n\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function isErrorResponse(res: AxiosResponse<unknown>): res is AxiosResponse<APIErrorResponse> {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n", "import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\nimport { StreamChat } from './client';\nimport { addConnectionEventListeners, removeConnectionEventListeners, retryInterval, sleep } from './utils';\nimport { isAPIError, isConnectionIDError, isErrorRetryable } from './errors';\nimport { ConnectionOpen, Event, UR, ExtendableGenerics, DefaultGenerics, LogLevel } from './types';\n\nexport enum ConnectionState {\n  Closed = 'CLOSED',\n  Connected = 'CONNECTED',\n  Connecting = 'CONNECTING',\n  Disconnected = 'DISCONNECTED',\n  Init = 'INIT',\n}\n\nexport class WSConnectionFallback<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  client: StreamChat<StreamChatGenerics>;\n  state: ConnectionState;\n  consecutiveFailures: number;\n  connectionID?: string;\n  cancelToken?: CancelTokenSource;\n\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    this.client = client;\n    this.state = ConnectionState.Init;\n    this.consecutiveFailures = 0;\n\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'WSConnectionFallback:' + msg, { tags: ['connection_fallback', 'connection'], ...extra });\n  }\n\n  _setState(state: ConnectionState) {\n    this._log(`_setState() - ${state}`);\n\n    // transition from connecting => connected\n    if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: true });\n    }\n\n    if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: false });\n    }\n\n    this.state = state;\n  }\n\n  /** @private */\n  _onlineStatusChanged = (event: { type: string }) => {\n    this._log(`_onlineStatusChanged() - ${event.type}`);\n\n    if (event.type === 'offline') {\n      this._setState(ConnectionState.Closed);\n      this.cancelToken?.cancel('disconnect() is called');\n      this.cancelToken = undefined;\n      return;\n    }\n\n    if (event.type === 'online' && this.state === ConnectionState.Closed) {\n      this.connect(true);\n    }\n  };\n\n  /** @private */\n  _req = async <T = UR>(params: UR, config: AxiosRequestConfig, retry: boolean): Promise<T> => {\n    if (!this.cancelToken && !params.close) {\n      this.cancelToken = axios.CancelToken.source();\n    }\n\n    try {\n      const res = await this.client.doAxiosRequest<T>(\n        'get',\n        (this.client.baseURL as string).replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API\n        undefined,\n        {\n          config: { ...config, cancelToken: this.cancelToken?.token },\n          params,\n        },\n      );\n\n      this.consecutiveFailures = 0; // always reset in case of no error\n      return res;\n    } catch (err) {\n      this.consecutiveFailures += 1;\n\n      if (retry && isErrorRetryable(err)) {\n        this._log(`_req() - Retryable error, retrying request`);\n        await sleep(retryInterval(this.consecutiveFailures));\n        return this._req<T>(params, config, retry);\n      }\n\n      throw err;\n    }\n  };\n\n  /** @private */\n  _poll = async () => {\n    while (this.state === ConnectionState.Connected) {\n      try {\n        const data = await this._req<{\n          events: Event<StreamChatGenerics>[];\n        }>({}, { timeout: 30000 }, true); // 30s => API responds in 20s if there is no event\n\n        if (data.events?.length) {\n          for (let i = 0; i < data.events.length; i++) {\n            this.client.dispatchEvent(data.events[i]);\n          }\n        }\n      } catch (err) {\n        if (axios.isCancel(err)) {\n          this._log(`_poll() - axios canceled request`);\n          return;\n        }\n\n        /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */\n\n        if (isConnectionIDError(err)) {\n          this._log(`_poll() - ConnectionID error, connecting without ID...`);\n          this._setState(ConnectionState.Disconnected);\n          this.connect(true);\n          return;\n        }\n\n        if (isAPIError(err) && !isErrorRetryable(err)) {\n          this._setState(ConnectionState.Closed);\n          return;\n        }\n\n        await sleep(retryInterval(this.consecutiveFailures));\n      }\n    }\n  };\n\n  /**\n   * connect try to open a longpoll request\n   * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n   */\n  connect = async (reconnect = false) => {\n    if (this.state === ConnectionState.Connecting) {\n      this._log('connect() - connecting already in progress', { reconnect }, 'warn');\n      return;\n    }\n    if (this.state === ConnectionState.Connected) {\n      this._log('connect() - already connected and polling', { reconnect }, 'warn');\n      return;\n    }\n\n    this._setState(ConnectionState.Connecting);\n    this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n    try {\n      const { event } = await this._req<{ event: ConnectionOpen<StreamChatGenerics> }>(\n        { json: this.client._buildWSPayload() },\n        { timeout: 8000 }, // 8s\n        reconnect,\n      );\n\n      this._setState(ConnectionState.Connected);\n      this.connectionID = event.connection_id;\n      // @ts-expect-error\n      this.client.dispatchEvent(event);\n      this._poll();\n      if (reconnect) {\n        this.client.recoverState();\n      }\n      return event;\n    } catch (err) {\n      this._setState(ConnectionState.Closed);\n      throw err;\n    }\n  };\n\n  /**\n   * isHealthy checks if there is a connectionID and connection is in Connected state\n   */\n  isHealthy = () => {\n    return !!this.connectionID && this.state === ConnectionState.Connected;\n  };\n\n  disconnect = async (timeout = 2000) => {\n    removeConnectionEventListeners(this._onlineStatusChanged);\n\n    this._setState(ConnectionState.Disconnected);\n    this.cancelToken?.cancel('disconnect() is called');\n    this.cancelToken = undefined;\n\n    const connection_id = this.connectionID;\n    this.connectionID = undefined;\n\n    try {\n      await this._req({ close: true, connection_id }, { timeout }, false);\n      this._log(`disconnect() - Closed connectionID`);\n    } catch (err) {\n      this._log(`disconnect() - Failed`, { err }, 'error');\n    }\n  };\n}\n", "import { StreamChat } from './client';\nimport {\n  DefaultGenerics,\n  ExtendableGenerics,\n  QuerySegmentTargetsFilter,\n  SegmentData,\n  SegmentResponse,\n  SortParam,\n} from './types';\n\ntype SegmentType = 'user' | 'channel';\n\ntype SegmentUpdatableFields = {\n  description?: string;\n  filter?: {};\n  name?: string;\n};\n\nexport class Segment<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  type: SegmentType;\n  id: string | null;\n  client: StreamChat<StreamChatGenerics>;\n  data?: SegmentData | SegmentResponse;\n\n  constructor(client: StreamChat<StreamChatGenerics>, type: SegmentType, id: string | null, data?: SegmentData) {\n    this.client = client;\n    this.type = type;\n    this.id = id;\n    this.data = data;\n  }\n\n  async create() {\n    const body = {\n      name: this.data?.name,\n      filter: this.data?.filter,\n      description: this.data?.description,\n      all_sender_channels: this.data?.all_sender_channels,\n      all_users: this.data?.all_users,\n    };\n\n    return this.client.createSegment(this.type, this.id, body);\n  }\n\n  verifySegmentId() {\n    if (!this.id) {\n      throw new Error(\n        'Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)',\n      );\n    }\n  }\n\n  async get() {\n    this.verifySegmentId();\n    return this.client.getSegment(this.id as string);\n  }\n\n  async update(data: Partial<SegmentUpdatableFields>) {\n    this.verifySegmentId();\n\n    return this.client.updateSegment(this.id as string, data);\n  }\n\n  async addTargets(targets: string[]) {\n    this.verifySegmentId();\n    return this.client.addSegmentTargets(this.id as string, targets);\n  }\n\n  async removeTargets(targets: string[]) {\n    this.verifySegmentId();\n    return this.client.removeSegmentTargets(this.id as string, targets);\n  }\n\n  async delete() {\n    this.verifySegmentId();\n    return this.client.deleteSegment(this.id as string);\n  }\n\n  async targetExists(targetId: string) {\n    this.verifySegmentId();\n    return this.client.segmentTargetExists(this.id as string, targetId);\n  }\n\n  async queryTargets(filter: QuerySegmentTargetsFilter | null = {}, sort: SortParam[] | null | [] = [], options = {}) {\n    this.verifySegmentId();\n\n    return this.client.querySegmentTargets(this.id as string, filter, sort, options);\n  }\n}\n", "import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { StableWSConnection } from './connection';\nimport { EVENT_MAP } from './events';\nimport { Role } from './permissions';\nimport type { Channel } from './channel';\n\n/**\n * Utility Types\n */\n\nexport type ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\nexport type ArrayTwoOrMore<T> = {\n  0: T;\n  1: T;\n} & Array<T>;\n\nexport type KnownKeys<T> = {\n  [K in keyof T]: string extends K ? never : number extends K ? never : K;\n} extends { [_ in keyof T]: infer U }\n  ? U\n  : never;\n\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\nexport type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\n  }[Keys];\n\nexport type PartializeKeys<T, K extends keyof T> = Partial<Pick<T, K>> & Omit<T, K>;\n\n/* Unknown Record */\nexport type UR = Record<string, unknown>;\nexport type UnknownType = UR; //alias to avoid breaking change\n\nexport type DefaultGenerics = {\n  attachmentType: UR;\n  channelType: UR;\n  commandType: LiteralStringForUnion;\n  eventType: UR;\n  memberType: UR;\n  messageType: UR;\n  pollOptionType: UR;\n  pollType: UR;\n  reactionType: UR;\n  userType: UR;\n};\n\nexport type ExtendableGenerics = {\n  attachmentType: UR;\n  channelType: UR;\n  commandType: string;\n  eventType: UR;\n  memberType: UR;\n  messageType: UR;\n  pollOptionType: UR;\n  pollType: UR;\n  reactionType: UR;\n  userType: UR;\n};\n\nexport type Unpacked<T> = T extends (infer U)[]\n  ? U // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  : T extends (...args: any[]) => infer U\n  ? U\n  : T extends Promise<infer U>\n  ? U\n  : T;\n\n/**\n * Response Types\n */\n\nexport type APIResponse = {\n  duration: string;\n};\n\nexport type TranslateResponse = {\n  language: string;\n  translated_text: string;\n};\n\nexport type AppSettingsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  app?: {\n    // TODO\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call_types: any;\n    channel_configs: Record<\n      string,\n      {\n        reminders: boolean;\n        automod?: ChannelConfigAutomod;\n        automod_behavior?: ChannelConfigAutomodBehavior;\n        automod_thresholds?: ChannelConfigAutomodThresholds;\n        blocklist_behavior?: ChannelConfigAutomodBehavior;\n        commands?: CommandVariants<StreamChatGenerics>[];\n        connect_events?: boolean;\n        created_at?: string;\n        custom_events?: boolean;\n        mark_messages_pending?: boolean;\n        max_message_length?: number;\n        message_retention?: string;\n        mutes?: boolean;\n        name?: string;\n        polls?: boolean;\n        push_notifications?: boolean;\n        quotes?: boolean;\n        reactions?: boolean;\n        read_events?: boolean;\n        replies?: boolean;\n        search?: boolean;\n        typing_events?: boolean;\n        updated_at?: string;\n        uploads?: boolean;\n        url_enrichment?: boolean;\n      }\n    >;\n    reminders_interval: number;\n    agora_options?: AgoraOptions | null;\n    async_moderation_config?: AsyncModerationOptions;\n    async_url_enrich_enabled?: boolean;\n    auto_translation_enabled?: boolean;\n    before_message_send_hook_url?: string;\n    campaign_enabled?: boolean;\n    cdn_expiration_seconds?: number;\n    custom_action_handler_url?: string;\n    datadog_info?: {\n      api_key: string;\n      site: string;\n      enabled?: boolean;\n    };\n    disable_auth_checks?: boolean;\n    disable_permissions_checks?: boolean;\n    enforce_unique_usernames?: 'no' | 'app' | 'team';\n    file_upload_config?: FileUploadConfig;\n    geofences?: Array<{\n      country_codes: Array<string>;\n      description: string;\n      name: string;\n      type: string;\n    }>;\n    grants?: Record<string, string[]>;\n    hms_options?: HMSOptions | null;\n    image_moderation_enabled?: boolean;\n    image_upload_config?: FileUploadConfig;\n    multi_tenant_enabled?: boolean;\n    name?: string;\n    organization?: string;\n    permission_version?: string;\n    policies?: Record<string, Policy[]>;\n    poll_enabled?: boolean;\n    push_notifications?: {\n      offline_only: boolean;\n      version: string;\n      apn?: APNConfig;\n      firebase?: FirebaseConfig;\n      huawei?: HuaweiConfig;\n      providers?: PushProviderConfig[];\n      xiaomi?: XiaomiConfig;\n    };\n    revoke_tokens_issued_before?: string | null;\n    search_backend?: 'disabled' | 'elasticsearch' | 'postgres';\n    sns_key?: string;\n    sns_secret?: string;\n    sns_topic_arn?: string;\n    sqs_key?: string;\n    sqs_secret?: string;\n    sqs_url?: string;\n    suspended?: boolean;\n    suspended_explanation?: string;\n    user_search_disallowed_roles?: string[] | null;\n    video_provider?: string;\n    webhook_events?: Array<string>;\n    webhook_url?: string;\n  };\n};\n\nexport type ModerationResult = {\n  action: string;\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n  user_bad_karma: boolean;\n  user_karma: number;\n  blocked_word?: string;\n  blocklist_name?: string;\n  moderated_by?: string;\n};\n\nexport type AutomodDetails = {\n  action?: string;\n  image_labels?: Array<string>;\n  original_message_type?: string;\n  result?: ModerationResult;\n};\n\nexport type FlagDetails = {\n  automod?: AutomodDetails;\n};\n\nexport type Flag<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  created_by_automod: boolean;\n  updated_at: string;\n  details?: FlagDetails;\n  target_message?: MessageResponse<StreamChatGenerics>;\n  target_user?: UserResponse<StreamChatGenerics>;\n  user?: UserResponse<StreamChatGenerics>;\n};\n\nexport type FlagsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flags?: Array<Flag<StreamChatGenerics>>;\n};\n\nexport type MessageFlagsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flags?: Array<{\n    message: MessageResponse<StreamChatGenerics>;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    created_at?: string;\n    created_by_automod?: boolean;\n    moderation_result?: ModerationResult;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: UserResponse<StreamChatGenerics>;\n    updated_at?: string;\n  }>;\n};\n\nexport type FlagReport<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  flags_count: number;\n  id: string;\n  message: MessageResponse<StreamChatGenerics>;\n  user: UserResponse<StreamChatGenerics>;\n  created_at?: string;\n  details?: FlagDetails;\n  first_reporter?: UserResponse<StreamChatGenerics>;\n  review_result?: string;\n  reviewed_at?: string;\n  reviewed_by?: UserResponse<StreamChatGenerics>;\n  updated_at?: string;\n};\n\nexport type FlagReportsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag_reports: Array<FlagReport<StreamChatGenerics>>;\n};\n\nexport type ReviewFlagReportResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag_report: FlagReport<StreamChatGenerics>;\n};\n\nexport type BannedUsersResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  bans?: Array<{\n    user: UserResponse<StreamChatGenerics>;\n    banned_by?: UserResponse<StreamChatGenerics>;\n    channel?: ChannelResponse<StreamChatGenerics>;\n    expires?: string;\n    ip_ban?: boolean;\n    reason?: string;\n    timeout?: number;\n  }>;\n};\n\nexport type BlockListResponse = BlockList & {\n  created_at?: string;\n  type?: string;\n  updated_at?: string;\n};\n\nexport type ChannelResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['channelType'] & {\n  cid: string;\n  disabled: boolean;\n  frozen: boolean;\n  id: string;\n  type: string;\n  auto_translation_enabled?: boolean;\n  auto_translation_language?: TranslationLanguages | '';\n  config?: ChannelConfigWithInfo<StreamChatGenerics>;\n  cooldown?: number;\n  created_at?: string;\n  created_by?: UserResponse<StreamChatGenerics> | null;\n  created_by_id?: string;\n  deleted_at?: string;\n  hidden?: boolean;\n  invites?: string[];\n  joined?: boolean;\n  last_message_at?: string;\n  member_count?: number;\n  members?: ChannelMemberResponse<StreamChatGenerics>[];\n  muted?: boolean;\n  name?: string;\n  own_capabilities?: string[];\n  team?: string;\n  truncated_at?: string;\n  truncated_by?: UserResponse<StreamChatGenerics>;\n  truncated_by_id?: string;\n  updated_at?: string;\n};\n\nexport type QueryReactionsOptions = Pager;\n\nexport type QueryReactionsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  reactions: ReactionResponse<StreamChatGenerics>[];\n  next?: string;\n};\n\nexport type QueryChannelsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channels: Omit<ChannelAPIResponse<StreamChatGenerics>, keyof APIResponse>[];\n};\n\nexport type QueryChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  ChannelAPIResponse<StreamChatGenerics>;\n\nexport type ChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n  messages: MessageResponse<StreamChatGenerics>[];\n  pinned_messages: MessageResponse<StreamChatGenerics>[];\n  hidden?: boolean;\n  membership?: ChannelMemberResponse<StreamChatGenerics> | null;\n  pending_messages?: PendingMessageResponse<StreamChatGenerics>[];\n  push_preferences?: PushPreference;\n  read?: ReadResponse<StreamChatGenerics>[];\n  threads?: ThreadResponse[];\n  watcher_count?: number;\n  watchers?: UserResponse<StreamChatGenerics>[];\n};\n\nexport type ChannelUpdateOptions = {\n  hide_history?: boolean;\n  skip_push?: boolean;\n};\n\nexport type ChannelMemberAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n};\n\nexport type ChannelMemberUpdates<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['memberType'] & {\n  archived?: boolean;\n  channel_role?: Role;\n  pinned?: boolean;\n};\n\nexport type ChannelMemberResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['memberType'] & {\n  archived_at?: string | null;\n  ban_expires?: string;\n  banned?: boolean;\n  channel_role?: Role;\n  created_at?: string;\n  invite_accepted_at?: string;\n  invite_rejected_at?: string;\n  invited?: boolean;\n  is_moderator?: boolean;\n  notifications_muted?: boolean;\n  pinned_at?: string | null;\n  role?: string;\n  shadow_banned?: boolean;\n  status?: InviteStatus;\n  updated_at?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PartialUpdateMemberAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel_member: ChannelMemberResponse<StreamChatGenerics>;\n};\n\nexport type CheckPushResponse = APIResponse & {\n  device_errors?: {\n    [deviceID: string]: {\n      error_message?: string;\n      provider?: PushProvider;\n      provider_name?: string;\n    };\n  };\n  general_errors?: string[];\n  rendered_apn_template?: string;\n  rendered_firebase_template?: string;\n  rendered_message?: {};\n  skip_devices?: boolean;\n};\n\nexport type CheckSQSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CheckSNSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CommandResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Partial<CreatedAtUpdatedAt> & {\n  args?: string;\n  description?: string;\n  name?: CommandVariants<StreamChatGenerics>;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type ConnectAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Promise<void | ConnectionOpen<StreamChatGenerics>>;\n\nexport type CreateChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n    grants?: Record<string, string[]>;\n  };\n\nexport type CreateCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  command: CreateCommandOptions<StreamChatGenerics> & CreatedAtUpdatedAt;\n};\n\nexport type DeleteChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n};\n\nexport type DeleteCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  name?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type EventAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  event: Event<StreamChatGenerics>;\n};\n\nexport type ExportChannelResponse = {\n  task_id: string;\n};\n\nexport type ExportUsersResponse = {\n  task_id: string;\n};\n\nexport type ExportChannelStatusResponse = {\n  created_at?: string;\n  error?: {};\n  result?: {};\n  updated_at?: string;\n};\n\nexport type FlagMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_message_id: string;\n    updated_at: string;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    channel_cid?: string;\n    details?: Object; // Any JSON\n    message_user_id?: string;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n  review_queue_item_id?: string;\n};\n\nexport type FlagUserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_user: UserResponse<StreamChatGenerics>;\n    updated_at: string;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    details?: Object; // Any JSON\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n  review_queue_item_id?: string;\n};\n\nexport type FormatMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<{\n    attachmentType: StreamChatGenerics['attachmentType'];\n    channelType: StreamChatGenerics['channelType'];\n    commandType: StreamChatGenerics['commandType'];\n    eventType: StreamChatGenerics['eventType'];\n    memberType: StreamChatGenerics['memberType'];\n    messageType: {};\n    pollOptionType: StreamChatGenerics['pollOptionType'];\n    pollType: StreamChatGenerics['pollType'];\n    reactionType: StreamChatGenerics['reactionType'];\n    userType: StreamChatGenerics['userType'];\n  }>,\n  'created_at' | 'pinned_at' | 'updated_at' | 'deleted_at' | 'status'\n> &\n  StreamChatGenerics['messageType'] & {\n    created_at: Date;\n    deleted_at: Date | null;\n    pinned_at: Date | null;\n    status: string;\n    updated_at: Date;\n  };\n\nexport type GetChannelTypeResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id' | 'commands'> & {\n    created_at: string;\n    updated_at: string;\n    commands?: CommandResponse<StreamChatGenerics>[];\n    grants?: Record<string, string[]>;\n  };\n\nexport type GetCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  CreateCommandOptions<StreamChatGenerics> &\n  CreatedAtUpdatedAt;\n\nexport type GetMessageAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = SendMessageAPIResponse<StreamChatGenerics>;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ThreadResponseCustomData {}\n\nexport interface ThreadResponse<SCG extends ExtendableGenerics = DefaultGenerics> extends ThreadResponseCustomData {\n  // FIXME: according to OpenAPI, `channel` could be undefined but since cid is provided I'll asume that it's wrong\n  channel: ChannelResponse<SCG>;\n  channel_cid: string;\n  created_at: string;\n  created_by_user_id: string;\n  latest_replies: Array<MessageResponse<SCG>>;\n  parent_message: MessageResponse<SCG>;\n  parent_message_id: string;\n  title: string;\n  updated_at: string;\n  active_participant_count?: number;\n  created_by?: UserResponse<SCG>;\n  deleted_at?: string;\n  last_message_at?: string;\n  participant_count?: number;\n  read?: Array<ReadResponse<SCG>>;\n  reply_count?: number;\n  thread_participants?: Array<{\n    channel_cid: string;\n    created_at: string;\n    last_read_at: string;\n    last_thread_message_at?: string;\n    left_thread_at?: string;\n    thread_id?: string;\n    user?: UserResponse<SCG>;\n    user_id?: string;\n  }>;\n  // TODO: when moving to API v2 we should do this instead\n  // custom: ThreadResponseCustomData;\n}\n\n// TODO: Figure out a way to strongly type set and unset.\nexport type PartialThreadUpdate = {\n  set?: Partial<Record<string, unknown>>;\n  unset?: Array<string>;\n};\n\nexport type QueryThreadsOptions = {\n  filter?: ThreadFilters;\n  limit?: number;\n  member_limit?: number;\n  next?: string;\n  participant_limit?: number;\n  reply_limit?: number;\n  sort?: ThreadSort;\n  watch?: boolean;\n};\n\nexport type QueryThreadsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  threads: ThreadResponse<StreamChatGenerics>[];\n  next?: string;\n};\n\nexport type GetThreadOptions = {\n  member_limit?: number;\n  participant_limit?: number;\n  reply_limit?: number;\n  watch?: boolean;\n};\n\nexport type GetThreadAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  thread: ThreadResponse<StreamChatGenerics>;\n};\n\nexport type GetMultipleMessagesAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  messages: MessageResponse<StreamChatGenerics>[];\n};\n\nexport type GetRateLimitsResponse = APIResponse & {\n  android?: RateLimitsMap;\n  ios?: RateLimitsMap;\n  server_side?: RateLimitsMap;\n  web?: RateLimitsMap;\n};\n\nexport type GetReactionsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  reactions: ReactionResponse<StreamChatGenerics>[];\n};\n\nexport type GetRepliesAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  messages: MessageResponse<StreamChatGenerics>[];\n};\n\nexport type GetUnreadCountAPIResponse = APIResponse & {\n  channel_type: {\n    channel_count: number;\n    channel_type: string;\n    unread_count: number;\n  }[];\n  channels: {\n    channel_id: string;\n    last_read: string;\n    unread_count: number;\n  }[];\n  threads: {\n    last_read: string;\n    last_read_message_id: string;\n    parent_message_id: string;\n    unread_count: number;\n  }[];\n  total_unread_count: number;\n  total_unread_threads_count: number;\n};\n\nexport type ChatLevelPushPreference = 'all' | 'none' | 'mentions' | (string & {});\n\nexport type PushPreference = {\n  callLevel?: 'all' | 'none' | (string & {});\n  chatLevel?: ChatLevelPushPreference;\n  disabledUntil?: string; // snooze till this time\n  removeDisable?: boolean; // Temporary flag for resetting disabledUntil\n};\n\nexport type ChannelPushPreference = {\n  chatLevel?: ChatLevelPushPreference; // \"all\", \"none\", \"mentions\", or other custom strings\n  disabledUntil?: string;\n  removeDisable?: boolean; // Temporary flag for resetting disabledUntil\n};\n\nexport type UpsertPushPreferencesResponse = APIResponse & {\n  // Mapping of user IDs to their push preferences\n  userChannelPreferences: Record<string, Record<string, ChannelPushPreference>>;\n  userPreferences: Record<string, PushPreference>; // Mapping of user -> channel id -> push preferences\n};\n\nexport type GetUnreadCountBatchAPIResponse = APIResponse & {\n  counts_by_user: { [userId: string]: GetUnreadCountAPIResponse };\n};\n\nexport type ListChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel_types: Record<\n    string,\n    Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id' | 'commands'> & {\n      commands: CommandResponse<StreamChatGenerics>[];\n      created_at: string;\n      updated_at: string;\n      grants?: Record<string, string[]>;\n    }\n  >;\n};\n\nexport type ListChannelTypesAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ListChannelResponse<StreamChatGenerics>;\n\nexport type ListCommandsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  commands: Array<CreateCommandOptions<StreamChatGenerics> & Partial<CreatedAtUpdatedAt>>;\n};\n\nexport type MuteChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel_mute: ChannelMute<StreamChatGenerics>;\n  own_user: OwnUserResponse<StreamChatGenerics>;\n  channel_mutes?: ChannelMute<StreamChatGenerics>[];\n  mute?: MuteResponse<StreamChatGenerics>;\n};\n\nexport type MessageResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MessageResponseBase<StreamChatGenerics> & {\n  quoted_message?: MessageResponseBase<StreamChatGenerics>;\n};\n\nexport type MessageResponseBase<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MessageBase<StreamChatGenerics> & {\n  type: MessageLabel;\n  args?: string;\n  before_message_send_failed?: boolean;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  cid?: string;\n  command?: string;\n  command_info?: { name?: string };\n  created_at?: string;\n  deleted_at?: string;\n  deleted_reply_count?: number;\n  i18n?: RequireAtLeastOne<Record<`${TranslationLanguages}_text`, string>> & {\n    language: TranslationLanguages;\n  };\n  latest_reactions?: ReactionResponse<StreamChatGenerics>[];\n  mentioned_users?: UserResponse<StreamChatGenerics>[];\n  message_text_updated_at?: string;\n  moderation?: ModerationResponse; // present only with Moderation v2\n  moderation_details?: ModerationDetailsResponse; // present only with Moderation v1\n  own_reactions?: ReactionResponse<StreamChatGenerics>[] | null;\n  pin_expires?: string | null;\n  pinned_at?: string | null;\n  pinned_by?: UserResponse<StreamChatGenerics> | null;\n  poll?: PollResponse<StreamChatGenerics>;\n  reaction_counts?: { [key: string]: number } | null;\n  reaction_groups?: { [key: string]: ReactionGroupResponse } | null;\n  reaction_scores?: { [key: string]: number } | null;\n  reply_count?: number;\n  shadowed?: boolean;\n  status?: string;\n  thread_participants?: UserResponse<StreamChatGenerics>[];\n  updated_at?: string;\n};\n\nexport type ReactionGroupResponse = {\n  count: number;\n  sum_scores: number;\n  first_reaction_at?: string;\n  last_reaction_at?: string;\n};\n\nexport type ModerationDetailsResponse = {\n  action: 'MESSAGE_RESPONSE_ACTION_BOUNCE' | (string & {});\n  error_msg: string;\n  harms: ModerationHarmResponse[];\n  original_text: string;\n};\n\nexport type ModerationHarmResponse = {\n  name: string;\n  phrase_list_ids: number[];\n};\n\nexport type ModerationAction = 'bounce' | 'flag' | 'remove' | 'shadow';\n\nexport type ModerationResponse = {\n  action: ModerationAction;\n  original_text: string;\n};\n\nexport type MuteResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  created_at?: string;\n  expires?: string;\n  target?: UserResponse<StreamChatGenerics>;\n  updated_at?: string;\n};\n\nexport type MuteUserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  mute?: MuteResponse<StreamChatGenerics>;\n  mutes?: Array<Mute<StreamChatGenerics>>;\n  own_user?: OwnUserResponse<StreamChatGenerics>;\n};\n\nexport type BlockUserAPIResponse = APIResponse & {\n  blocked_at: string;\n  blocked_by_user_id: string;\n  blocked_user_id: string;\n};\n\nexport type GetBlockedUsersAPIResponse = APIResponse & {\n  blocks: BlockedUserDetails[];\n};\nexport type BlockedUserDetails = APIResponse & {\n  blocked_user: UserResponse;\n  blocked_user_id: string;\n  created_at: string;\n  user: UserResponse;\n  user_id: string;\n};\n\nexport type OwnUserBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel_mutes: ChannelMute<StreamChatGenerics>[];\n  devices: Device<StreamChatGenerics>[];\n  mutes: Mute<StreamChatGenerics>[];\n  total_unread_count: number;\n  unread_channels: number;\n  unread_count: number;\n  unread_threads: number;\n  invisible?: boolean;\n  privacy_settings?: PrivacySettings;\n  push_preferences?: PushPreference;\n  roles?: string[];\n};\n\nexport type OwnUserResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = UserResponse<StreamChatGenerics> & OwnUserBase<StreamChatGenerics>;\n\nexport type PartialUpdateChannelAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n};\n\nexport type PermissionAPIResponse = APIResponse & {\n  permission?: PermissionAPIObject;\n};\n\nexport type PermissionsAPIResponse = APIResponse & {\n  permissions?: PermissionAPIObject[];\n};\n\nexport type ReactionAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n  reaction: ReactionResponse<StreamChatGenerics>;\n};\n\nexport type ReactionResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Reaction<StreamChatGenerics> & {\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n};\n\nexport type ReadResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  last_read: string;\n  user: UserResponse<StreamChatGenerics>;\n  last_read_message_id?: string;\n  unread_messages?: number;\n};\n\nexport type SearchAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  results: {\n    message: MessageResponse<StreamChatGenerics>;\n  }[];\n  next?: string;\n  previous?: string;\n  results_warning?: SearchWarning | null;\n};\n\nexport type SearchWarning = {\n  channel_search_cids: string[];\n  channel_search_count: number;\n  warning_code: number;\n  warning_description: string;\n};\n\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\nexport type SendFileAPIResponse = APIResponse & { file: string; thumb_url?: string };\n\nexport type SendMessageAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n  pending_message_metadata?: Record<string, string> | null;\n};\n\nexport type SyncResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  events: Event<StreamChatGenerics>[];\n  inaccessible_cids?: string[];\n};\n\nexport type TruncateChannelAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  message?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UpdateChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n  message?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UpdateChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n  };\n\nexport type UpdateCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  command: UpdateCommandOptions<StreamChatGenerics> &\n    CreatedAtUpdatedAt & {\n      name: CommandVariants<StreamChatGenerics>;\n    };\n};\n\nexport type UpdateMessageAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UsersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  users: Array<UserResponse<StreamChatGenerics>>;\n};\n\nexport type UpdateUsersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  users: { [key: string]: UserResponse<StreamChatGenerics> };\n};\n\nexport type UserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = User<StreamChatGenerics> & {\n  banned?: boolean;\n  blocked_user_ids?: string[];\n  created_at?: string;\n  deactivated_at?: string;\n  deleted_at?: string;\n  language?: TranslationLanguages | '';\n  last_active?: string;\n  online?: boolean;\n  privacy_settings?: PrivacySettings;\n  push_notifications?: PushNotificationSettings;\n  revoke_tokens_issued_before?: string;\n  shadow_banned?: boolean;\n  teams_role?: TeamsRole;\n  updated_at?: string;\n};\n\nexport type TeamsRole = { [team: string]: string };\n\nexport type PrivacySettings = {\n  read_receipts?: {\n    enabled?: boolean;\n  };\n  typing_indicators?: {\n    enabled?: boolean;\n  };\n};\n\nexport type PushNotificationSettings = {\n  disabled?: boolean;\n  disabled_until?: string | null;\n};\n\n/**\n * Option Types\n */\n\nexport type MessageFlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagReportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ReviewFlagReportOptions = {\n  review_details?: Object;\n  user_id?: string;\n};\n\nexport type BannedUsersPaginationOptions = Omit<PaginationOptions, 'id_gt' | 'id_gte' | 'id_lt' | 'id_lte'> & {\n  exclude_expired_bans?: boolean;\n};\n\nexport type BanUserOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = UnBanUserOptions & {\n  banned_by?: UserResponse<StreamChatGenerics>;\n  banned_by_id?: string;\n  ip_ban?: boolean;\n  reason?: string;\n  timeout?: number;\n};\n\nexport type ChannelOptions = {\n  limit?: number;\n  member_limit?: number;\n  message_limit?: number;\n  offset?: number;\n  presence?: boolean;\n  state?: boolean;\n  user_id?: string;\n  watch?: boolean;\n};\n\nexport type ChannelQueryOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  data?: ChannelResponse<StreamChatGenerics>;\n  hide_for_creator?: boolean;\n  members?: PaginationOptions;\n  messages?: MessagePaginationOptions;\n  presence?: boolean;\n  state?: boolean;\n  watch?: boolean;\n  watchers?: PaginationOptions;\n};\n\nexport type ChannelStateOptions = {\n  offlineMode?: boolean;\n  skipInitialization?: string[];\n};\n\nexport type CreateChannelOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist?: string;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  client_id?: string;\n  commands?: CommandVariants<StreamChatGenerics>[];\n  connect_events?: boolean;\n  connection_id?: string;\n  custom_events?: boolean;\n  grants?: Record<string, string[]>;\n  mark_messages_pending?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  permissions?: PermissionObject[];\n  polls?: boolean;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  reminders?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  skip_last_msg_update_for_system_msgs?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n};\n\nexport type CreateCommandOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  description: string;\n  name: CommandVariants<StreamChatGenerics>;\n  args?: string;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type CustomPermissionOptions = {\n  action: string;\n  condition: object;\n  id: string;\n  name: string;\n  description?: string;\n  owner?: boolean;\n  same_team?: boolean;\n};\n\nexport type DeactivateUsersOptions = {\n  created_by_id?: string;\n  mark_messages_deleted?: boolean;\n};\n\nexport type NewMemberPayload<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['memberType'] & Pick<ChannelMemberResponse<StreamChatGenerics>, 'user_id' | 'channel_role'>;\n\n// TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update\nexport type InviteOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  accept_invite?: boolean;\n  add_members?: string[];\n  add_moderators?: string[];\n  client_id?: string;\n  connection_id?: string;\n  data?: Omit<ChannelResponse<StreamChatGenerics>, 'id' | 'cid'>;\n  demote_moderators?: string[];\n  invites?: string[];\n  message?: MessageResponse<StreamChatGenerics>;\n  reject_invite?: boolean;\n  remove_members?: string[];\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\n/** @deprecated use MarkChannelsReadOptions instead */\nexport type MarkAllReadOptions<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MarkChannelsReadOptions<StreamChatGenerics>;\n\nexport type MarkChannelsReadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  read_by_channel?: Record<string, string>;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MarkReadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  thread_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MarkUnreadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  message_id?: string;\n  thread_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MuteUserOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  reason?: string;\n  target_user_id?: string;\n  timeout?: number;\n  type?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PaginationOptions = {\n  created_at_after?: string | Date;\n  created_at_after_or_equal?: string | Date;\n  created_at_before?: string | Date;\n  created_at_before_or_equal?: string | Date;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number; // should be avoided with channel.query()\n};\n\nexport type MessagePaginationOptions = PaginationOptions & {\n  created_at_around?: string | Date;\n  id_around?: string;\n};\n\nexport type PinnedMessagePaginationOptions = {\n  id_around?: string;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number;\n  pinned_at_after?: string | Date;\n  pinned_at_after_or_equal?: string | Date;\n  pinned_at_around?: string | Date;\n  pinned_at_before?: string | Date;\n  pinned_at_before_or_equal?: string | Date;\n};\n\nexport type QueryMembersOptions = {\n  // Pagination option: select members created after the date (RFC399)\n  created_at_after?: string;\n  // Pagination option: select members created after or equal the date (RFC399)\n  created_at_after_or_equal?: string;\n  // Pagination option: select members created before the date (RFC399)\n  created_at_before?: string;\n  // Pagination option: select members created before or equal the date (RFC399)\n  created_at_before_or_equal?: string;\n  // Number of members to return, default 100\n  limit?: number;\n  // Offset (max is 1000)\n  offset?: number;\n  // \tPagination option: excludes members with ID less or equal the value\n  user_id_gt?: string;\n  // Pagination option: excludes members with ID less than the value\n  user_id_gte?: string;\n  // Pagination option: excludes members with ID greater or equal the value\n  user_id_lt?: string;\n  // \tPagination option: excludes members with ID greater than the value\n  user_id_lte?: string;\n};\n\nexport type ReactivateUserOptions = {\n  created_by_id?: string;\n  name?: string;\n  restore_messages?: boolean;\n};\n\nexport type ReactivateUsersOptions = {\n  created_by_id?: string;\n  restore_messages?: boolean;\n};\n\nexport type SearchOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  limit?: number;\n  next?: string;\n  offset?: number;\n  sort?: SearchMessageSort<StreamChatGenerics>;\n};\n\nexport type StreamChatOptions = AxiosRequestConfig & {\n  /**\n   * Used to disable warnings that are triggered by using connectUser or connectAnonymousUser server-side.\n   */\n  allowServerSideConnect?: boolean;\n  axiosRequestConfig?: AxiosRequestConfig;\n  /**\n   * Base url to use for API\n   * such as https://chat-proxy-dublin.stream-io-api.com\n   */\n  baseURL?: string;\n  browser?: boolean;\n  device?: BaseDeviceFields;\n  /**\n   * Disables the hydration of all caches within the JS Client. This includes this.activeChannels,\n   * this.polls.pollCache and this.config.\n   * It is mainly meant to be used for integrations where stream-chat is used as a server-side service\n   * interacting with Stream's REST API, not depending on any state and purely serving as a wrapper\n   * around HTTP requests. Using this property on either the client side or a backend implementation\n   * that also relies on WS events will break these functionalities, so please use carefully.\n   */\n  disableCache?: boolean;\n  enableInsights?: boolean;\n  /** experimental feature, please contact support if you want this feature enabled for you */\n  enableWSFallback?: boolean;\n  logger?: Logger;\n  /**\n   * When true, user will be persisted on client. Otherwise if `connectUser` call fails, then you need to\n   * call `connectUser` again to retry.\n   * This is mainly useful for chat application working in offline mode, where you will need client.user to\n   * persist even if connectUser call fails.\n   */\n  persistUserOnConnectionFailure?: boolean;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  warmUp?: boolean;\n  /**\n   * Set the instance of StableWSConnection on chat client. Its purely for testing purpose and should\n   * not be used in production apps.\n   */\n  wsConnection?: StableWSConnection;\n  /**\n   * Sets a suffix to the wsUrl when it is being built in `wsConnection`. Is meant to be\n   * used purely in testing suites and should not be used in production apps.\n   */\n  wsUrlParams?: URLSearchParams;\n};\n\nexport type SyncOptions = {\n  /**\n   * This will behave as queryChannels option.\n   */\n  watch?: boolean;\n  /**\n   * Return channels from request that user does not have access to in a separate\n   * field in the response called 'inaccessible_cids' instead of\n   * adding them as 'notification.removed_from_channel' events.\n   */\n  with_inaccessible_cids?: boolean;\n};\n\nexport type UnBanUserOptions = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  shadow?: boolean;\n  target_user_id?: string;\n  type?: string;\n};\n\n// TODO: rename to UpdateChannelTypeOptions in the next major update\nexport type UpdateChannelOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  CreateChannelOptions<StreamChatGenerics>,\n  'name'\n> & {\n  created_at?: string;\n  updated_at?: string;\n};\n\nexport type UpdateCommandOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  description: string;\n  args?: string;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type UserOptions = {\n  include_deactivated_users?: boolean;\n  limit?: number;\n  offset?: number;\n  presence?: boolean;\n};\n\n/**\n * Event Types\n */\n\nexport type ConnectionChangeEvent = {\n  type: EventTypes;\n  online?: boolean;\n};\n\nexport type Event<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = StreamChatGenerics['eventType'] & {\n  type: EventTypes;\n  ai_message?: string;\n  ai_state?: AIState;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  channel_id?: string;\n  channel_type?: string;\n  cid?: string;\n  clear_history?: boolean;\n  connection_id?: string;\n  // event creation timestamp, format Date ISO string\n  created_at?: string;\n  draft?: DraftResponse<StreamChatGenerics>;\n  // id of the message that was marked as unread - all the following messages are considered unread. (notification.mark_unread)\n  first_unread_message_id?: string;\n  hard_delete?: boolean;\n  // creation date of a message with last_read_message_id, formatted as Date ISO string\n  last_read_at?: string;\n  last_read_message_id?: string;\n  mark_messages_deleted?: boolean;\n  me?: OwnUserResponse<StreamChatGenerics>;\n  member?: ChannelMemberResponse<StreamChatGenerics>;\n  message?: MessageResponse<StreamChatGenerics>;\n  message_id?: string;\n  mode?: string;\n  online?: boolean;\n  parent_id?: string;\n  poll?: PollResponse<StreamChatGenerics>;\n  poll_vote?: PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>;\n  queriedChannels?: {\n    channels: ChannelAPIResponse<StreamChatGenerics>[];\n    isLatestMessageSet?: boolean;\n  };\n  reaction?: ReactionResponse<StreamChatGenerics>;\n  received_at?: string | Date;\n  team?: string;\n  thread?: ThreadResponse<StreamChatGenerics>;\n  // @deprecated number of all unread messages across all current user's unread channels, equals unread_count\n  total_unread_count?: number;\n  // number of all current user's channels with at least one unread message including the channel in this event\n  unread_channels?: number;\n  // number of all unread messages across all current user's unread channels\n  unread_count?: number;\n  // number of unread messages in the channel from this event (notification.mark_unread)\n  unread_messages?: number;\n  unread_thread_messages?: number;\n  unread_threads?: number;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n  watcher_count?: number;\n};\n\nexport type UserCustomEvent<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['eventType'] & {\n  type: string;\n};\n\nexport type EventHandler<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = (\n  event: Event<StreamChatGenerics>,\n) => void;\n\nexport type EventTypes = 'all' | keyof typeof EVENT_MAP;\n\n/**\n * Filter Types\n */\n\nexport type AscDesc = 1 | -1;\n\nexport type MessageFlagsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  team?: string;\n  user_id?: string;\n};\n\nexport type MessageFlagsFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['team']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['user_id']>;\n  } & {\n      [Key in keyof Omit<MessageFlagsFiltersOptions, 'channel_cid' | 'user_id' | 'is_reviewed'>]:\n        | RequireOnlyOne<QueryFilter<MessageFlagsFiltersOptions[Key]>>\n        | PrimitiveFilter<MessageFlagsFiltersOptions[Key]>;\n    }\n>;\n\nexport type FlagsFiltersOptions = {\n  channel_cid?: string;\n  message_id?: string;\n  message_user_id?: string;\n  reporter_id?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagsFilters = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['message_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['channel_cid']>;\n  } & {\n    reporter_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['reporter_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['reporter_id']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['team']>;\n  }\n>;\n\nexport type FlagReportsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  message_id?: string;\n  message_user_id?: string;\n  report_id?: string;\n  review_result?: string;\n  reviewed_by?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagReportsFilters = QueryFilters<\n  {\n    report_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['report_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['report_id']>;\n  } & {\n    review_result?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['review_result']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['review_result']>;\n  } & {\n    reviewed_by?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['reviewed_by']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['reviewed_by']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['message_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['team']>;\n  } & {\n      [Key in keyof Omit<\n        FlagReportsFiltersOptions,\n        'report_id' | 'user_id' | 'message_id' | 'review_result' | 'reviewed_by'\n      >]: RequireOnlyOne<QueryFilter<FlagReportsFiltersOptions[Key]>> | PrimitiveFilter<FlagReportsFiltersOptions[Key]>;\n    }\n>;\n\nexport type BannedUsersFilterOptions = {\n  banned_by_id?: string;\n  channel_cid?: string;\n  created_at?: string;\n  reason?: string;\n  user_id?: string;\n};\n\nexport type BannedUsersFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<BannedUsersFilterOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<BannedUsersFilterOptions['channel_cid']>;\n  } & {\n    reason?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: BannedUsersFilterOptions['reason'];\n          } & QueryFilter<BannedUsersFilterOptions['reason']>\n        >\n      | PrimitiveFilter<BannedUsersFilterOptions['reason']>;\n  } & {\n      [Key in keyof Omit<BannedUsersFilterOptions, 'channel_cid' | 'reason'>]:\n        | RequireOnlyOne<QueryFilter<BannedUsersFilterOptions[Key]>>\n        | PrimitiveFilter<BannedUsersFilterOptions[Key]>;\n    }\n>;\n\nexport type ReactionFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReactionResponse<StreamChatGenerics>['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReactionResponse<StreamChatGenerics>['user_id']>;\n  } & {\n    type?:\n      | RequireOnlyOne<Pick<QueryFilter<ReactionResponse<StreamChatGenerics>['type']>, '$eq'>>\n      | PrimitiveFilter<ReactionResponse<StreamChatGenerics>['type']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['created_at']>;\n  }\n>;\n\nexport type ChannelFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['channelType']> & {\n    members?:\n      | RequireOnlyOne<Pick<QueryFilter<string>, '$in' | '$nin'>>\n      | RequireOnlyOne<Pick<QueryFilter<string[]>, '$eq'>>\n      | PrimitiveFilter<string[]>;\n  } & {\n    name?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: ChannelResponse<StreamChatGenerics>['name'];\n          } & QueryFilter<ChannelResponse<StreamChatGenerics>['name']>\n        >\n      | PrimitiveFilter<ChannelResponse<StreamChatGenerics>['name']>;\n  } & {\n      [Key in keyof Omit<\n        ChannelResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: {};\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          memberType: StreamChatGenerics['memberType'];\n          messageType: StreamChatGenerics['messageType'];\n          pollOptionType: StreamChatGenerics['pollOptionType'];\n          pollType: StreamChatGenerics['pollType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: StreamChatGenerics['userType'];\n        }>,\n        'name' | 'members'\n      >]:\n        | RequireOnlyOne<\n            QueryFilter<\n              ChannelResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: {};\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                memberType: StreamChatGenerics['memberType'];\n                messageType: StreamChatGenerics['messageType'];\n                pollOptionType: StreamChatGenerics['pollOptionType'];\n                pollType: StreamChatGenerics['pollType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: StreamChatGenerics['userType'];\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            ChannelResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: {};\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              memberType: StreamChatGenerics['memberType'];\n              messageType: StreamChatGenerics['messageType'];\n              pollOptionType: StreamChatGenerics['pollOptionType'];\n              pollType: StreamChatGenerics['pollType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: StreamChatGenerics['userType'];\n            }>[Key]\n          >;\n    } & {\n      archived?: boolean;\n      pinned?: boolean;\n    }\n>;\n\nexport type DraftFilters<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  channel_cid?:\n    | RequireOnlyOne<Pick<QueryFilter<DraftResponse<SCG>['channel_cid']>, '$in' | '$eq'>>\n    | PrimitiveFilter<DraftResponse<SCG>['channel_cid']>;\n  created_at?:\n    | RequireOnlyOne<Pick<QueryFilter<DraftResponse<SCG>['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n    | PrimitiveFilter<DraftResponse<SCG>['created_at']>;\n  parent_id?:\n    | RequireOnlyOne<Pick<QueryFilter<DraftResponse<SCG>['created_at']>, '$in' | '$eq' | '$exists'>>\n    | PrimitiveFilter<DraftResponse<SCG>['parent_id']>;\n};\n\nexport type QueryPollsParams = {\n  filter?: QueryPollsFilters;\n  options?: QueryPollsOptions;\n  sort?: PollSort;\n};\n\nexport type QueryPollsOptions = Pager;\n\nexport type VotesFiltersOptions = {\n  is_answer?: boolean;\n  option_id?: string;\n  user_id?: string;\n};\n\nexport type QueryVotesOptions = Pager;\n\nexport type QueryPollsFilters = QueryFilters<\n  {\n    id?: RequireOnlyOne<Pick<QueryFilter<PollResponse['id']>, '$eq' | '$in'>> | PrimitiveFilter<PollResponse['id']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['user_id']>;\n  } & {\n    is_closed?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['is_closed']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['is_closed']>;\n  } & {\n    max_votes_allowed?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<PollResponse['max_votes_allowed']>, '$eq' | '$ne' | '$gt' | '$lt' | '$gte' | '$lte'>\n        >\n      | PrimitiveFilter<PollResponse['max_votes_allowed']>;\n  } & {\n    allow_answers?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['allow_answers']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['allow_answers']>;\n  } & {\n    allow_user_suggested_options?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['allow_user_suggested_options']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['allow_user_suggested_options']>;\n  } & {\n    voting_visibility?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['voting_visibility']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['voting_visibility']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['created_at']>;\n  } & {\n    created_by_id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['created_by_id']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['updated_at']>;\n  } & {\n    name?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['name']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['name']>;\n  }\n>;\n\nexport type QueryVotesFilters = QueryFilters<\n  {\n    id?: RequireOnlyOne<Pick<QueryFilter<PollResponse['id']>, '$eq' | '$in'>> | PrimitiveFilter<PollResponse['id']>;\n  } & {\n    option_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['option_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['option_id']>;\n  } & {\n    is_answer?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['is_answer']>, '$eq'>>\n      | PrimitiveFilter<VotesFiltersOptions['is_answer']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['user_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['created_at']>;\n  } & {\n    created_by_id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['created_by_id']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<PollResponse['updated_at']>;\n  }\n>;\n\nexport type ContainsOperator<CustomType = {}> = {\n  [Key in keyof CustomType]?: CustomType[Key] extends (infer ContainType)[]\n    ?\n        | RequireOnlyOne<\n            {\n              $contains?: ContainType extends object\n                ? PrimitiveFilter<RequireAtLeastOne<ContainType>>\n                : PrimitiveFilter<ContainType>;\n            } & QueryFilter<PrimitiveFilter<ContainType>[]>\n          >\n        | PrimitiveFilter<PrimitiveFilter<ContainType>[]>\n    : RequireOnlyOne<QueryFilter<CustomType[Key]>> | PrimitiveFilter<CustomType[Key]>;\n};\n\nexport type MessageFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['messageType']> & {\n    text?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: MessageResponse<StreamChatGenerics>['text'];\n            $q?: MessageResponse<StreamChatGenerics>['text'];\n          } & QueryFilter<MessageResponse<StreamChatGenerics>['text']>\n        >\n      | PrimitiveFilter<MessageResponse<StreamChatGenerics>['text']>;\n  } & {\n      [Key in keyof Omit<\n        MessageResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: StreamChatGenerics['channelType'];\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          memberType: StreamChatGenerics['memberType'];\n          messageType: {};\n          pollOptionType: StreamChatGenerics['pollOptionType'];\n          pollType: StreamChatGenerics['pollType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: StreamChatGenerics['userType'];\n        }>,\n        'text'\n      >]?:\n        | RequireOnlyOne<\n            QueryFilter<\n              MessageResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: StreamChatGenerics['channelType'];\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                memberType: StreamChatGenerics['memberType'];\n                messageType: {};\n                pollOptionType: StreamChatGenerics['pollOptionType'];\n                pollType: StreamChatGenerics['pollType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: StreamChatGenerics['userType'];\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            MessageResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: StreamChatGenerics['channelType'];\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              memberType: StreamChatGenerics['memberType'];\n              messageType: {};\n              pollOptionType: StreamChatGenerics['pollOptionType'];\n              pollType: StreamChatGenerics['pollType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: StreamChatGenerics['userType'];\n            }>[Key]\n          >;\n    }\n>;\n\nexport type MessageOptions = {\n  include_thread_participants?: boolean;\n};\n\nexport type PrimitiveFilter<ObjectType> = ObjectType | null;\n\nexport type QueryFilter<ObjectType = string> = NonNullable<ObjectType> extends string | number | boolean\n  ? {\n      $eq?: PrimitiveFilter<ObjectType>;\n      $exists?: boolean;\n      $gt?: PrimitiveFilter<ObjectType>;\n      $gte?: PrimitiveFilter<ObjectType>;\n      $in?: PrimitiveFilter<ObjectType>[];\n      $lt?: PrimitiveFilter<ObjectType>;\n      $lte?: PrimitiveFilter<ObjectType>;\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $ne?: PrimitiveFilter<ObjectType>;\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $nin?: PrimitiveFilter<ObjectType>[];\n    }\n  : {\n      $eq?: PrimitiveFilter<ObjectType>;\n      $exists?: boolean;\n      $in?: PrimitiveFilter<ObjectType>[];\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $ne?: PrimitiveFilter<ObjectType>;\n      /**\n       * @deprecated and will be removed in a future release. Filtering shall be applied client-side.\n       */\n      $nin?: PrimitiveFilter<ObjectType>[];\n    };\n\nexport type QueryFilters<Operators = {}> = {\n  [Key in keyof Operators]?: Operators[Key];\n} &\n  QueryLogicalOperators<Operators>;\n\nexport type QueryLogicalOperators<Operators> = {\n  $and?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $nor?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $or?: ArrayTwoOrMore<QueryFilters<Operators>>;\n};\n\nexport type UserFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['userType']> & {\n    id?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['id'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['id']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['id']>;\n    name?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['name'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['name']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['name']>;\n    notifications_muted?:\n      | RequireOnlyOne<{\n          $eq?: PrimitiveFilter<UserResponse<StreamChatGenerics>['notifications_muted']>;\n        }>\n      | boolean;\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n          $in?: PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n        }>\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n    username?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['username'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['username']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['username']>;\n  } & {\n      [Key in keyof Omit<\n        UserResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: StreamChatGenerics['channelType'];\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          memberType: StreamChatGenerics['memberType'];\n          messageType: StreamChatGenerics['messageType'];\n          pollOptionType: StreamChatGenerics['pollOptionType'];\n          pollType: StreamChatGenerics['pollType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: {};\n        }>,\n        'id' | 'name' | 'teams' | 'username'\n      >]?:\n        | RequireOnlyOne<\n            QueryFilter<\n              UserResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: StreamChatGenerics['channelType'];\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                memberType: StreamChatGenerics['memberType'];\n                messageType: StreamChatGenerics['messageType'];\n                pollOptionType: StreamChatGenerics['pollOptionType'];\n                pollType: StreamChatGenerics['pollType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: {};\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            UserResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: StreamChatGenerics['channelType'];\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              memberType: StreamChatGenerics['memberType'];\n              messageType: StreamChatGenerics['messageType'];\n              pollOptionType: StreamChatGenerics['pollOptionType'];\n              pollType: StreamChatGenerics['pollType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: {};\n            }>[Key]\n          >;\n    }\n>;\n\nexport type InviteStatus = 'pending' | 'accepted' | 'rejected';\n\n// https://getstream.io/chat/docs/react/channel_member/#update-channel-members\nexport type MemberFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  {\n    banned?:\n      | { $eq?: ChannelMemberResponse<StreamChatGenerics>['banned'] }\n      | ChannelMemberResponse<StreamChatGenerics>['banned'];\n    channel_role?:\n      | { $eq?: ChannelMemberResponse<StreamChatGenerics>['channel_role'] }\n      | ChannelMemberResponse<StreamChatGenerics>['channel_role'];\n    cid?: { $eq?: ChannelResponse<StreamChatGenerics>['cid'] } | ChannelResponse<StreamChatGenerics>['cid'];\n    created_at?:\n      | {\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $gt?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $gte?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $lt?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n          $lte?: ChannelMemberResponse<StreamChatGenerics>['created_at'];\n        }\n      | ChannelMemberResponse<StreamChatGenerics>['created_at'];\n    id?:\n      | RequireOnlyOne<{\n          $eq?: UserResponse<StreamChatGenerics>['id'];\n          $in?: UserResponse<StreamChatGenerics>['id'][];\n        }>\n      | UserResponse<StreamChatGenerics>['id'];\n    invite?:\n      | { $eq?: ChannelMemberResponse<StreamChatGenerics>['status'] }\n      | ChannelMemberResponse<StreamChatGenerics>['status'];\n    joined?: { $eq?: boolean } | boolean;\n    last_active?:\n      | {\n          $eq?: UserResponse<StreamChatGenerics>['last_active'];\n          $gt?: UserResponse<StreamChatGenerics>['last_active'];\n          $gte?: UserResponse<StreamChatGenerics>['last_active'];\n          $lt?: UserResponse<StreamChatGenerics>['last_active'];\n          $lte?: UserResponse<StreamChatGenerics>['last_active'];\n        }\n      | UserResponse<StreamChatGenerics>['last_active'];\n    name?:\n      | RequireOnlyOne<{\n          $autocomplete?: ChannelMemberResponse<StreamChatGenerics>['name'];\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['name'];\n          $in?: ChannelMemberResponse<StreamChatGenerics>['name'][];\n          $q?: ChannelMemberResponse<StreamChatGenerics>['name'];\n        }>\n      | PrimitiveFilter<ChannelMemberResponse<StreamChatGenerics>['name']>;\n    updated_at?:\n      | {\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $gt?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $gte?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $lt?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n          $lte?: ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n        }\n      | ChannelMemberResponse<StreamChatGenerics>['updated_at'];\n    'user.email'?:\n      | RequireOnlyOne<{\n          $autocomplete?: string;\n          $eq?: string;\n          $in?: string;\n        }>\n      | string;\n    user_id?:\n      | RequireOnlyOne<{\n          $eq?: ChannelMemberResponse<StreamChatGenerics>['user_id'];\n          $in?: ChannelMemberResponse<StreamChatGenerics>['user_id'][];\n        }>\n      | PrimitiveFilter<ChannelMemberResponse<StreamChatGenerics>['id']>;\n  } & {\n    [Key in keyof ContainsOperator<StreamChatGenerics['memberType']>]?:\n      | RequireOnlyOne<QueryFilter<ContainsOperator<StreamChatGenerics['memberType']>[Key]>>\n      | PrimitiveFilter<ContainsOperator<StreamChatGenerics['memberType']>[Key]>;\n  }\n>;\n\n/**\n * Sort Types\n */\n\nexport type BannedUsersSort = BannedUsersSortBase | Array<BannedUsersSortBase>;\n\nexport type BannedUsersSortBase = { created_at?: AscDesc };\n\nexport type ReactionSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | ReactionSortBase<StreamChatGenerics>\n  | Array<ReactionSortBase<StreamChatGenerics>>;\n\nexport type ReactionSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['reactionType']\n> & {\n  created_at?: AscDesc;\n};\n\nexport type ChannelSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | ChannelSortBase<StreamChatGenerics>\n  | Array<ChannelSortBase<StreamChatGenerics>>;\n\nexport type ChannelSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['channelType']\n> & {\n  created_at?: AscDesc;\n  has_unread?: AscDesc;\n  last_message_at?: AscDesc;\n  last_updated?: AscDesc;\n  member_count?: AscDesc;\n  pinned_at?: AscDesc;\n  unread_count?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type PinnedMessagesSort = PinnedMessagesSortBase | Array<PinnedMessagesSortBase>;\nexport type PinnedMessagesSortBase = { pinned_at?: AscDesc };\n\nexport type Sort<T> = {\n  [P in keyof T]?: AscDesc;\n};\n\nexport type UserSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | Sort<UserResponse<StreamChatGenerics>>\n  | Array<Sort<UserResponse<StreamChatGenerics>>>;\n\nexport type MemberSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | Sort<Pick<UserResponse<StreamChatGenerics>, 'id' | 'created_at' | 'last_active' | 'name' | 'updated_at'>>\n  | Array<Sort<Pick<UserResponse<StreamChatGenerics>, 'id' | 'created_at' | 'last_active' | 'name' | 'updated_at'>>>;\n\nexport type SearchMessageSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['messageType']\n> & {\n  attachments?: AscDesc;\n  'attachments.type'?: AscDesc;\n  created_at?: AscDesc;\n  id?: AscDesc;\n  'mentioned_users.id'?: AscDesc;\n  parent_id?: AscDesc;\n  pinned?: AscDesc;\n  relevance?: AscDesc;\n  reply_count?: AscDesc;\n  text?: AscDesc;\n  type?: AscDesc;\n  updated_at?: AscDesc;\n  'user.id'?: AscDesc;\n};\n\nexport type SearchMessageSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | SearchMessageSortBase<StreamChatGenerics>\n  | Array<SearchMessageSortBase<StreamChatGenerics>>;\n\nexport type DraftSortBase = {\n  created_at?: AscDesc;\n};\n\nexport type DraftSort = DraftSortBase | Array<DraftSortBase>;\n\nexport type QuerySort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | BannedUsersSort\n  | ChannelSort<StreamChatGenerics>\n  | SearchMessageSort<StreamChatGenerics>\n  | UserSort<StreamChatGenerics>;\n\nexport type PollSort = PollSortBase | Array<PollSortBase>;\n\nexport type PollSortBase = {\n  created_at?: AscDesc;\n  id?: AscDesc;\n  is_closed?: AscDesc;\n  name?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type VoteSort = VoteSortBase | Array<VoteSortBase>;\n\nexport type VoteSortBase = {\n  created_at?: AscDesc;\n  id?: AscDesc;\n  is_closed?: AscDesc;\n  name?: AscDesc;\n  updated_at?: AscDesc;\n};\n\n/**\n * Base Types\n */\n\nexport type Action = {\n  name?: string;\n  style?: string;\n  text?: string;\n  type?: string;\n  value?: string;\n};\n\nexport type AnonUserType = {};\n\nexport type APNConfig = {\n  auth_key?: string;\n  auth_type?: string;\n  bundle_id?: string;\n  development?: boolean;\n  enabled?: boolean;\n  host?: string;\n  key_id?: string;\n  notification_template?: string;\n  p12_cert?: string;\n  team_id?: string;\n};\n\nexport type AgoraOptions = {\n  app_certificate: string;\n  app_id: string;\n  role_map?: Record<string, string>;\n};\n\nexport type HMSOptions = {\n  app_access_key: string;\n  app_secret: string;\n  default_role: string;\n  default_room_template: string;\n  default_region?: string;\n  role_map?: Record<string, string>;\n};\n\nexport type AsyncModerationOptions = {\n  callback?: {\n    mode?: 'CALLBACK_MODE_NONE' | 'CALLBACK_MODE_REST' | 'CALLBACK_MODE_TWIRP';\n    server_url?: string;\n  };\n  timeout_ms?: number;\n};\n\nexport type AppSettings = {\n  agora_options?: AgoraOptions | null;\n  allowed_flag_reasons?: string[];\n  apn_config?: {\n    auth_key?: string;\n    auth_type?: string;\n    bundle_id?: string;\n    development?: boolean;\n    host?: string;\n    key_id?: string;\n    notification_template?: string;\n    p12_cert?: string;\n    team_id?: string;\n  };\n  async_moderation_config?: AsyncModerationOptions;\n  async_url_enrich_enabled?: boolean;\n  auto_translation_enabled?: boolean;\n  before_message_send_hook_url?: string;\n  cdn_expiration_seconds?: number;\n  custom_action_handler_url?: string;\n  disable_auth_checks?: boolean;\n  disable_permissions_checks?: boolean;\n  enforce_unique_usernames?: 'no' | 'app' | 'team';\n  // all possible file mime types are https://www.iana.org/assignments/media-types/media-types.xhtml\n  file_upload_config?: FileUploadConfig;\n  firebase_config?: {\n    apn_template?: string;\n    credentials_json?: string;\n    data_template?: string;\n    notification_template?: string;\n    server_key?: string;\n  };\n  grants?: Record<string, string[]>;\n  hms_options?: HMSOptions | null;\n  huawei_config?: {\n    id: string;\n    secret: string;\n  };\n  image_moderation_enabled?: boolean;\n  image_upload_config?: FileUploadConfig;\n  migrate_permissions_to_v2?: boolean;\n  multi_tenant_enabled?: boolean;\n  permission_version?: 'v1' | 'v2';\n  push_config?: {\n    offline_only?: boolean;\n    version?: string;\n  };\n  reminders_interval?: number;\n  revoke_tokens_issued_before?: string | null;\n  sns_key?: string;\n  sns_secret?: string;\n  sns_topic_arn?: string;\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n  video_provider?: string;\n  webhook_events?: Array<string> | null;\n  webhook_url?: string;\n  xiaomi_config?: {\n    package_name: string;\n    secret: string;\n  };\n};\n\nexport type Attachment<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['attachmentType'] & {\n  actions?: Action[];\n  asset_url?: string;\n  author_icon?: string;\n  author_link?: string;\n  author_name?: string;\n  color?: string;\n  duration?: number;\n  fallback?: string;\n  fields?: Field[];\n  file_size?: number | string;\n  footer?: string;\n  footer_icon?: string;\n  giphy?: GiphyData;\n  image_url?: string;\n  latitude?: number;\n  longitude?: number;\n  mime_type?: string;\n  og_scrape_url?: string;\n  original_height?: number;\n  original_width?: number;\n  pretext?: string;\n  text?: string;\n  thumb_url?: string;\n  title?: string;\n  title_link?: string;\n  type?: string;\n  waveform_data?: Array<number>;\n};\n\nexport type OGAttachment = {\n  og_scrape_url: string;\n  asset_url?: string; // og:video | og:audio\n  author_link?: string; // og:site\n  author_name?: string; // og:site_name\n  image_url?: string; // og:image\n  text?: string; // og:description\n  thumb_url?: string; // og:image\n  title?: string; // og:title\n  title_link?: string; // og:url\n  type?: string | 'video' | 'audio' | 'image';\n};\n\nexport type BlockList = {\n  name: string;\n  words: string[];\n  team?: string;\n  type?: string;\n  validate?: boolean;\n};\n\nexport type ChannelConfig<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandVariants<StreamChatGenerics>[];\n  };\n\nexport type ChannelConfigAutomod = '' | 'AI' | 'disabled' | 'simple';\n\nexport type ChannelConfigAutomodBehavior = '' | 'block' | 'flag';\n\nexport type ChannelConfigAutomodThresholds = null | {\n  explicit?: { block?: number; flag?: number };\n  spam?: { block?: number; flag?: number };\n  toxic?: { block?: number; flag?: number };\n};\n\nexport type ChannelConfigFields = {\n  reminders: boolean;\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  connect_events?: boolean;\n  custom_events?: boolean;\n  mark_messages_pending?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  polls?: boolean;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n};\n\nexport type ChannelConfigWithInfo<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandResponse<StreamChatGenerics>[];\n  };\n\nexport type ChannelData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['channelType'] & {\n  blocked?: boolean;\n  members?: string[] | Array<NewMemberPayload<StreamChatGenerics>>;\n  name?: string;\n};\n\n/**\n * @deprecated Use ChannelMemberResponse instead\n */\nexport type ChannelMembership<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ChannelMemberResponse<StreamChatGenerics>;\n\nexport type ChannelMute<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  created_at?: string;\n  expires?: string;\n  updated_at?: string;\n};\n\nexport type ChannelRole = {\n  custom?: boolean;\n  name?: string;\n  owner?: boolean;\n  resource?: string;\n  same_team?: boolean;\n};\n\nexport type CheckPushInput<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  apn_template?: string;\n  client_id?: string;\n  connection_id?: string;\n  firebase_data_template?: string;\n  firebase_template?: string;\n  message_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PushProvider = 'apn' | 'firebase' | 'huawei' | 'xiaomi';\n\nexport type PushProviderConfig = PushProviderCommon &\n  PushProviderID &\n  PushProviderAPN &\n  PushProviderFirebase &\n  PushProviderHuawei &\n  PushProviderXiaomi;\n\nexport type PushProviderID = {\n  name: string;\n  type: PushProvider;\n};\n\nexport type PushProviderCommon = {\n  created_at: string;\n  updated_at: string;\n  description?: string;\n  disabled_at?: string;\n  disabled_reason?: string;\n};\n\nexport type PushProviderAPN = {\n  apn_auth_key?: string;\n  apn_auth_type?: 'token' | 'certificate';\n  apn_development?: boolean;\n  apn_host?: string;\n  apn_key_id?: string;\n  apn_notification_template?: string;\n  apn_p12_cert?: string;\n  apn_team_id?: string;\n  apn_topic?: string;\n};\n\nexport type PushProviderFirebase = {\n  firebase_apn_template?: string;\n  firebase_credentials?: string;\n  firebase_data_template?: string;\n  firebase_notification_template?: string;\n  firebase_server_key?: string;\n};\n\nexport type PushProviderHuawei = {\n  huawei_app_id?: string;\n  huawei_app_secret?: string;\n};\n\nexport type PushProviderXiaomi = {\n  xiaomi_package_name?: string;\n  xiaomi_secret?: string;\n};\n\nexport type CommandVariants<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | 'all'\n  | 'ban'\n  | 'fun_set'\n  | 'giphy'\n  | 'moderation_set'\n  | 'mute'\n  | 'unban'\n  | 'unmute'\n  | StreamChatGenerics['commandType'];\n\nexport type Configs<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  ChannelConfigWithInfo<StreamChatGenerics> | undefined\n>;\n\nexport type ConnectionOpen<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  connection_id: string;\n  cid?: string;\n  created_at?: string;\n  me?: OwnUserResponse<StreamChatGenerics>;\n  type?: string;\n};\n\nexport type CreatedAtUpdatedAt = {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type Device<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = DeviceFields & {\n  provider?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type BaseDeviceFields = {\n  id: string;\n  push_provider: PushProvider;\n  push_provider_name?: string;\n};\n\nexport type DeviceFields = BaseDeviceFields & {\n  created_at: string;\n  disabled?: boolean;\n  disabled_reason?: string;\n};\n\nexport type EndpointName =\n  | 'Connect'\n  | 'LongPoll'\n  | 'DeleteFile'\n  | 'DeleteImage'\n  | 'DeleteMessage'\n  | 'DeleteUser'\n  | 'DeleteUsers'\n  | 'DeactivateUser'\n  | 'ExportUser'\n  | 'DeleteReaction'\n  | 'UpdateChannel'\n  | 'UpdateChannelPartial'\n  | 'UpdateMessage'\n  | 'UpdateMessagePartial'\n  | 'GetMessage'\n  | 'GetManyMessages'\n  | 'UpdateUsers'\n  | 'UpdateUsersPartial'\n  | 'CreateGuest'\n  | 'GetOrCreateChannel'\n  | 'StopWatchingChannel'\n  | 'QueryChannels'\n  | 'Search'\n  | 'QueryUsers'\n  | 'QueryMembers'\n  | 'QueryBannedUsers'\n  | 'QueryFlags'\n  | 'QueryMessageFlags'\n  | 'GetReactions'\n  | 'GetReplies'\n  | 'GetPinnedMessages'\n  | 'Ban'\n  | 'Unban'\n  | 'MuteUser'\n  | 'MuteChannel'\n  | 'UnmuteChannel'\n  | 'UnmuteUser'\n  | 'RunMessageAction'\n  | 'SendEvent'\n  | 'SendUserCustomEvent'\n  | 'MarkRead'\n  | 'MarkChannelsRead'\n  | 'SendMessage'\n  | 'ImportChannelMessages'\n  | 'UploadFile'\n  | 'UploadImage'\n  | 'UpdateApp'\n  | 'GetApp'\n  | 'CreateDevice'\n  | 'DeleteDevice'\n  | 'SendReaction'\n  | 'Flag'\n  | 'Unflag'\n  | 'Unblock'\n  | 'QueryFlagReports'\n  | 'FlagReportReview'\n  | 'CreateChannelType'\n  | 'DeleteChannel'\n  | 'DeleteChannels'\n  | 'DeleteChannelType'\n  | 'GetChannelType'\n  | 'ListChannelTypes'\n  | 'ListDevices'\n  | 'TruncateChannel'\n  | 'UpdateChannelType'\n  | 'CheckPush'\n  | 'PrivateSubmitModeration'\n  | 'ReactivateUser'\n  | 'HideChannel'\n  | 'ShowChannel'\n  | 'CreatePermission'\n  | 'UpdatePermission'\n  | 'GetPermission'\n  | 'DeletePermission'\n  | 'ListPermissions'\n  | 'CreateRole'\n  | 'DeleteRole'\n  | 'ListRoles'\n  | 'ListCustomRoles'\n  | 'Sync'\n  | 'TranslateMessage'\n  | 'CreateCommand'\n  | 'GetCommand'\n  | 'UpdateCommand'\n  | 'DeleteCommand'\n  | 'ListCommands'\n  | 'CreateBlockList'\n  | 'UpdateBlockList'\n  | 'GetBlockList'\n  | 'ListBlockLists'\n  | 'DeleteBlockList'\n  | 'ExportChannels'\n  | 'GetExportChannelsStatus'\n  | 'CheckSQS'\n  | 'GetRateLimits'\n  | 'CreateSegment'\n  | 'GetSegment'\n  | 'QuerySegments'\n  | 'UpdateSegment'\n  | 'DeleteSegment'\n  | 'CreateCampaign'\n  | 'GetCampaign'\n  | 'ListCampaigns'\n  | 'UpdateCampaign'\n  | 'DeleteCampaign'\n  | 'ScheduleCampaign'\n  | 'StopCampaign'\n  | 'ResumeCampaign'\n  | 'TestCampaign'\n  | 'GetOG'\n  | 'GetTask'\n  | 'ExportUsers'\n  | 'CreateImport'\n  | 'CreateImportURL'\n  | 'GetImport'\n  | 'ListImports'\n  | 'UpsertPushProvider'\n  | 'DeletePushProvider'\n  | 'ListPushProviders'\n  | 'CreatePoll';\n\nexport type ExportChannelRequest = {\n  id: string;\n  type: string;\n  cid?: string;\n  messages_since?: Date;\n  messages_until?: Date;\n};\n\nexport type ExportChannelOptions = {\n  clear_deleted_message_text?: boolean;\n  export_users?: boolean;\n  include_soft_deleted_channels?: boolean;\n  include_truncated_messages?: boolean;\n  version?: string;\n};\n\nexport type ExportUsersRequest = {\n  user_ids: string[];\n};\n\nexport type Field = {\n  short?: boolean;\n  title?: string;\n  value?: string;\n};\n\nexport type FileUploadConfig = {\n  allowed_file_extensions?: string[] | null;\n  allowed_mime_types?: string[] | null;\n  blocked_file_extensions?: string[] | null;\n  blocked_mime_types?: string[] | null;\n  size_limit?: number | null;\n};\n\nexport type FirebaseConfig = {\n  apn_template?: string;\n  credentials_json?: string;\n  data_template?: string;\n  enabled?: boolean;\n  notification_template?: string;\n  server_key?: string;\n};\n\ntype GiphyVersionInfo = {\n  height: string;\n  url: string;\n  width: string;\n  frames?: string;\n  size?: string;\n};\n\ntype GiphyVersions =\n  | 'original'\n  | 'fixed_height'\n  | 'fixed_height_still'\n  | 'fixed_height_downsampled'\n  | 'fixed_width'\n  | 'fixed_width_still'\n  | 'fixed_width_downsampled';\n\ntype GiphyData = {\n  [key in GiphyVersions]: GiphyVersionInfo;\n};\n\nexport type HuaweiConfig = {\n  enabled?: boolean;\n  id?: string;\n  secret?: string;\n};\n\nexport type XiaomiConfig = {\n  enabled?: boolean;\n  package_name?: string;\n  secret?: string;\n};\n\nexport type LiteralStringForUnion = string & {};\n\nexport type LogLevel = 'info' | 'error' | 'warn';\n\nexport type Logger = (logLevel: LogLevel, message: string, extraData?: Record<string, unknown>) => void;\n\nexport type Message<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Partial<\n  MessageBase<StreamChatGenerics>\n> & {\n  mentioned_users?: string[];\n};\n\nexport type MessageBase<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['messageType'] & {\n  id: string;\n  attachments?: Attachment<StreamChatGenerics>[];\n  html?: string;\n  mml?: string;\n  parent_id?: string;\n  pin_expires?: string | null;\n  pinned?: boolean;\n  pinned_at?: string | null;\n  poll_id?: string;\n  quoted_message_id?: string;\n  restricted_visibility?: string[];\n  show_in_channel?: boolean;\n  silent?: boolean;\n  text?: string;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type MessageLabel = 'deleted' | 'ephemeral' | 'error' | 'regular' | 'reply' | 'system';\n\nexport type SendMessageOptions = {\n  force_moderation?: boolean;\n  is_pending_message?: boolean;\n  keep_channel_hidden?: boolean;\n  pending?: boolean;\n  pending_message_metadata?: Record<string, string>;\n  skip_enrich_url?: boolean;\n  skip_push?: boolean;\n};\n\nexport type UpdateMessageOptions = {\n  skip_enrich_url?: boolean;\n};\n\nexport type GetMessageOptions = {\n  show_deleted_message?: boolean;\n};\n\nexport type Mute<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  target: UserResponse<StreamChatGenerics>;\n  updated_at: string;\n  user: UserResponse<StreamChatGenerics>;\n};\n\nexport type PartialUpdateChannel<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<ChannelResponse<StreamChatGenerics>>;\n  unset?: Array<keyof ChannelResponse<StreamChatGenerics>>;\n};\n\nexport type PartialUpdateMember<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: ChannelMemberUpdates<StreamChatGenerics>;\n  unset?: Array<keyof ChannelMemberUpdates<StreamChatGenerics>>;\n};\n\nexport type PartialUserUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  set?: Partial<UserResponse<StreamChatGenerics>>;\n  unset?: Array<keyof UserResponse<StreamChatGenerics>>;\n};\n\nexport type MessageUpdatableFields<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<StreamChatGenerics>,\n  'cid' | 'created_at' | 'updated_at' | 'deleted_at' | 'user' | 'user_id'\n>;\n\nexport type PartialMessageUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<MessageUpdatableFields<StreamChatGenerics>>;\n  unset?: Array<keyof MessageUpdatableFields<StreamChatGenerics>>;\n};\n\nexport type PendingMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message: MessageResponse<StreamChatGenerics>;\n  pending_message_metadata?: Record<string, string>;\n};\n\nexport type PermissionAPIObject = {\n  action?: string;\n  condition?: object;\n  custom?: boolean;\n  description?: string;\n  id?: string;\n  level?: string;\n  name?: string;\n  owner?: boolean;\n  same_team?: boolean;\n  tags?: string[];\n};\n\nexport type PermissionObject = {\n  action?: 'Deny' | 'Allow';\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[];\n};\n\nexport type Policy = {\n  action?: 0 | 1;\n  created_at?: string;\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[] | null;\n  updated_at?: string;\n};\n\nexport type RateLimitsInfo = {\n  limit: number;\n  remaining: number;\n  reset: number;\n};\n\nexport type RateLimitsMap = Record<EndpointName, RateLimitsInfo>;\n\nexport type Reaction<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['reactionType'] & {\n  type: string;\n  message_id?: string;\n  score?: number;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type Resource =\n  | 'AddLinks'\n  | 'BanUser'\n  | 'CreateChannel'\n  | 'CreateMessage'\n  | 'CreateReaction'\n  | 'DeleteAttachment'\n  | 'DeleteChannel'\n  | 'DeleteMessage'\n  | 'DeleteReaction'\n  | 'EditUser'\n  | 'MuteUser'\n  | 'ReadChannel'\n  | 'RunMessageAction'\n  | 'UpdateChannel'\n  | 'UpdateChannelMembers'\n  | 'UpdateMessage'\n  | 'UpdateUser'\n  | 'UploadAttachment';\n\nexport type SearchPayload<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  SearchOptions<StreamChatGenerics>,\n  'sort'\n> & {\n  client_id?: string;\n  connection_id?: string;\n  filter_conditions?: ChannelFilters<StreamChatGenerics>;\n  message_filter_conditions?: MessageFilters<StreamChatGenerics>;\n  message_options?: MessageOptions;\n  query?: string;\n  sort?: Array<{\n    direction: AscDesc;\n    field: keyof SearchMessageSortBase<StreamChatGenerics>;\n  }>;\n};\n\nexport type TestPushDataInput = {\n  apnTemplate?: string;\n  firebaseDataTemplate?: string;\n  firebaseTemplate?: string;\n  messageID?: string;\n  pushProviderName?: string;\n  pushProviderType?: PushProvider;\n  skipDevices?: boolean;\n};\n\nexport type TestSQSDataInput = {\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n};\n\nexport type TestSNSDataInput = {\n  sns_key?: string;\n  sns_secret?: string;\n  sns_topic_arn?: string;\n};\n\nexport type TokenOrProvider = null | string | TokenProvider | undefined;\n\nexport type TokenProvider = () => Promise<string>;\n\nexport type TranslationLanguages =\n  | ''\n  | 'af'\n  | 'am'\n  | 'ar'\n  | 'az'\n  | 'bg'\n  | 'bn'\n  | 'bs'\n  | 'cs'\n  | 'da'\n  | 'de'\n  | 'el'\n  | 'en'\n  | 'es'\n  | 'es-MX'\n  | 'et'\n  | 'fa'\n  | 'fa-AF'\n  | 'fi'\n  | 'fr'\n  | 'fr-CA'\n  | 'ha'\n  | 'he'\n  | 'hi'\n  | 'hr'\n  | 'hu'\n  | 'id'\n  | 'it'\n  | 'ja'\n  | 'ka'\n  | 'ko'\n  | 'lt'\n  | 'lv'\n  | 'ms'\n  | 'nl'\n  | 'no'\n  | 'pl'\n  | 'ps'\n  | 'pt'\n  | 'ro'\n  | 'ru'\n  | 'sk'\n  | 'sl'\n  | 'so'\n  | 'sq'\n  | 'sr'\n  | 'sv'\n  | 'sw'\n  | 'ta'\n  | 'th'\n  | 'tl'\n  | 'tr'\n  | 'uk'\n  | 'ur'\n  | 'vi'\n  | 'zh'\n  | 'zh-TW';\n\nexport type TypingStartEvent = Event;\n\nexport type ReservedMessageFields =\n  | 'command'\n  | 'created_at'\n  | 'html'\n  | 'latest_reactions'\n  | 'own_reactions'\n  | 'quoted_message'\n  | 'reaction_counts'\n  | 'reply_count'\n  | 'type'\n  | 'updated_at'\n  | 'pinned_at'\n  | 'user'\n  | '__html';\n\nexport type UpdatedMessage<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<StreamChatGenerics>,\n  'mentioned_users'\n> & { mentioned_users?: string[] };\n\nexport type User<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = StreamChatGenerics['userType'] & {\n  id: string;\n  anon?: boolean;\n  name?: string;\n  role?: string;\n  teams?: string[];\n  username?: string;\n};\n\nexport type TaskResponse = {\n  task_id: string;\n};\n\nexport type DeleteChannelsResponse = {\n  result: Record<string, string>;\n} & Partial<TaskResponse>;\n\nexport type DeleteType = 'soft' | 'hard' | 'pruning';\n\n/*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user`:\n    - soft: marks user as deleted and retains all user data\n    - pruning: marks user as deleted and nullifies user information\n    - hard: deletes user completely - this requires hard option for messages and conversation as well\n  `conversations`:\n    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)\n    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)\n  `messages`:\n    - soft: marks all user messages as deleted without removing any related message data\n    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags\n    - hard: deletes messages completely with all related information\n  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID\n */\nexport type DeleteUserOptions = {\n  conversations?: Exclude<DeleteType, 'pruning'>;\n  messages?: DeleteType;\n  new_channel_owner_id?: string;\n  user?: DeleteType;\n};\n\nexport type SegmentType = 'channel' | 'user';\n\nexport type SegmentData = {\n  all_sender_channels?: boolean;\n  all_users?: boolean;\n  description?: string;\n  filter?: {};\n  name?: string;\n};\n\nexport type SegmentResponse = {\n  created_at: string;\n  deleted_at: string;\n  id: string;\n  locked: boolean;\n  size: number;\n  task_id: string;\n  type: SegmentType;\n  updated_at: string;\n} & SegmentData;\n\nexport type UpdateSegmentData = {\n  name: string;\n} & SegmentData;\n\nexport type SegmentTargetsResponse = {\n  created_at: string;\n  segment_id: string;\n  target_id: string;\n};\n\nexport type SortParam = {\n  field: string;\n  direction?: AscDesc;\n};\n\nexport type Pager = {\n  limit?: number;\n  next?: string;\n  prev?: string;\n};\n\nexport type QuerySegmentsOptions = Pager;\n\nexport type QuerySegmentTargetsFilter = {\n  target_id?: {\n    $eq?: string;\n    $gte?: string;\n    $in?: string[];\n    $lte?: string;\n  };\n};\nexport type QuerySegmentTargetsOptions = Pick<Pager, 'next' | 'limit'>;\n\nexport type GetCampaignOptions = {\n  users?: { limit?: number; next?: string; prev?: string };\n};\n\nexport type CampaignSort = {\n  field: string;\n  direction?: number;\n}[];\n\nexport type CampaignQueryOptions = {\n  limit?: number;\n  next?: string;\n  prev?: string;\n  sort?: CampaignSort;\n  user_limit?: number;\n};\n\nexport type SegmentQueryOptions = CampaignQueryOptions;\n\n// TODO: add better typing\nexport type CampaignFilters = {};\n\nexport type CampaignData = {\n  channel_template?: {\n    type: string;\n    custom?: {};\n    id?: string;\n    members?: string[];\n    team?: string;\n  };\n  create_channels?: boolean;\n  deleted_at?: string;\n  description?: string;\n  id?: string | null;\n  message_template?: {\n    text: string;\n    attachments?: Attachment[];\n    custom?: {};\n    poll_id?: string;\n  };\n  name?: string;\n  segment_ids?: string[];\n  sender_id?: string;\n  sender_mode?: 'exclude' | 'include' | null;\n  show_channels?: boolean;\n  skip_push?: boolean;\n  skip_webhook?: boolean;\n  user_ids?: string[];\n};\n\nexport type CampaignStats = {\n  progress?: number;\n  stats_channels_created?: number;\n  stats_completed_at?: string;\n  stats_messages_sent?: number;\n  stats_started_at?: string;\n  stats_users_read?: number;\n  stats_users_sent?: number;\n};\nexport type CampaignResponse = {\n  created_at: string;\n  id: string;\n  segments: SegmentResponse[];\n  sender: UserResponse;\n  stats: CampaignStats;\n  status: 'draft' | 'scheduled' | 'in_progress' | 'completed' | 'stopped';\n  updated_at: string;\n  users: UserResponse[];\n  scheduled_for?: string;\n} & CampaignData;\n\nexport type DeleteCampaignOptions = {};\n\nexport type TaskStatus = {\n  created_at: string;\n  status: string;\n  task_id: string;\n  updated_at: string;\n  error?: {\n    description: string;\n    type: string;\n  };\n  result?: UR;\n};\n\nexport type TruncateOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  hard_delete?: boolean;\n  message?: Message<StreamChatGenerics>;\n  skip_push?: boolean;\n  truncated_at?: Date;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type CreateImportURLResponse = {\n  path: string;\n  upload_url: string;\n};\n\nexport type CreateImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type GetImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type CreateImportOptions = {\n  mode: 'insert' | 'upsert';\n};\n\nexport type ListImportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ListImportsResponse = {\n  import_tasks: ImportTask[];\n};\n\nexport type ImportTaskHistory = {\n  created_at: string;\n  next_state: string;\n  prev_state: string;\n};\n\nexport type ImportTask = {\n  created_at: string;\n  history: ImportTaskHistory[];\n  id: string;\n  path: string;\n  state: string;\n  updated_at: string;\n  result?: UR;\n  size?: number;\n};\n\nexport type MessageSetType = 'latest' | 'current' | 'new';\nexport type MessageSet<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  isCurrent: boolean;\n  isLatest: boolean;\n  messages: FormatMessageResponse<StreamChatGenerics>[];\n  pagination: { hasNext: boolean; hasPrev: boolean };\n};\n\nexport type PushProviderUpsertResponse = {\n  push_provider: PushProvider;\n};\n\nexport type PushProviderListResponse = {\n  push_providers: PushProvider[];\n};\n\nexport type CreateCallOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  type: string;\n  options?: UR;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type HMSCall = {\n  room: string;\n};\n\nexport type AgoraCall = {\n  channel: string;\n};\n\nexport type Call = {\n  id: string;\n  provider: string;\n  agora?: AgoraCall;\n  hms?: HMSCall;\n};\n\nexport type CreateCallResponse = APIResponse & {\n  call: Call;\n  token: string;\n  agora_app_id?: string;\n  agora_uid?: number;\n};\n\nexport type GetCallTokenResponse = APIResponse & {\n  token: string;\n  agora_app_id?: string;\n  agora_uid?: number;\n};\n\ntype ErrorResponseDetails = {\n  code: number;\n  messages: string[];\n};\n\nexport type APIErrorResponse = {\n  code: number;\n  duration: string;\n  message: string;\n  more_info: string;\n  StatusCode: number;\n  details?: ErrorResponseDetails;\n};\n\nexport class ErrorFromResponse<T> extends Error {\n  code?: number;\n  response?: AxiosResponse<T>;\n  status?: number;\n}\n\nexport type QueryPollsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  polls: PollResponse<StreamChatGenerics>[];\n  next?: string;\n};\n\nexport type CreatePollAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll: PollResponse<StreamChatGenerics>;\n};\n\nexport type GetPollAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll: PollResponse<StreamChatGenerics>;\n};\n\nexport type UpdatePollAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll: PollResponse<StreamChatGenerics>;\n};\n\nexport type PollResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollType'] &\n  PollEnrichData<StreamChatGenerics> & {\n    created_at: string;\n    created_by: UserResponse<StreamChatGenerics> | null;\n    created_by_id: string;\n    enforce_unique_vote: boolean;\n    id: string;\n    max_votes_allowed: number;\n    name: string;\n    options: PollOption<StreamChatGenerics>[];\n    updated_at: string;\n    allow_answers?: boolean;\n    allow_user_suggested_options?: boolean;\n    description?: string;\n    is_closed?: boolean;\n    voting_visibility?: VotingVisibility;\n  };\n\nexport type PollOption<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  text: string;\n  updated_at: string;\n  vote_count: number;\n  votes?: PollVote<StreamChatGenerics>[];\n};\n\nexport enum VotingVisibility {\n  anonymous = 'anonymous',\n  public = 'public',\n}\n\nexport type PollEnrichData<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  answers_count: number;\n  latest_answers: PollAnswer<StreamChatGenerics>[]; // not updated with WS events, ordered DESC by created_at, seems like updated_at cannot be different from created_at\n  latest_votes_by_option: Record<string, PollVote<StreamChatGenerics>[]>; // not updated with WS events; always null in anonymous polls\n  vote_count: number;\n  vote_counts_by_option: Record<string, number>;\n  own_votes?: (PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>)[]; // not updated with WS events\n};\n\nexport type PollData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollType'] & {\n  id: string;\n  name: string;\n  allow_answers?: boolean;\n  allow_user_suggested_options?: boolean;\n  description?: string;\n  enforce_unique_vote?: boolean;\n  is_closed?: boolean;\n  max_votes_allowed?: number;\n  options?: PollOptionData<StreamChatGenerics>[];\n  user_id?: string;\n  voting_visibility?: VotingVisibility;\n};\n\nexport type CreatePollData<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Partial<\n  PollData<StreamChatGenerics>\n> &\n  Pick<PollData<StreamChatGenerics>, 'name'>;\n\nexport type PartialPollUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<PollData<StreamChatGenerics>>;\n  unset?: Array<keyof PollData<StreamChatGenerics>>;\n};\n\nexport type PollOptionData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollOptionType'] & {\n  text: string;\n  id?: string;\n  position?: number;\n};\n\nexport type PartialPollOptionUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<PollOptionResponse<StreamChatGenerics>>;\n  unset?: Array<keyof PollOptionResponse<StreamChatGenerics>>;\n};\n\nexport type PollVoteData = {\n  answer_text?: string;\n  is_answer?: boolean;\n  option_id?: string;\n};\n\nexport type PollPaginationOptions = {\n  limit?: number;\n  next?: string;\n};\n\nexport type CreatePollOptionAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  poll_option: PollOptionResponse<StreamChatGenerics>;\n};\n\nexport type GetPollOptionAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = CreatePollOptionAPIResponse<StreamChatGenerics>;\nexport type UpdatePollOptionAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = CreatePollOptionAPIResponse<StreamChatGenerics>;\n\nexport type PollOptionResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['pollType'] & {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  position: number;\n  text: string;\n  updated_at: string;\n  vote_count: number;\n  votes?: PollVote<StreamChatGenerics>[];\n};\n\nexport type PollVote<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  updated_at: string;\n  option_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PollAnswer<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Exclude<\n  PollVote<StreamChatGenerics>,\n  'option_id'\n> & {\n  answer_text: string;\n  is_answer: boolean; // this is absolutely redundant prop as answer_text indicates that a vote is an answer\n};\n\nexport type PollVotesAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  votes: (PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>)[];\n  next?: string;\n};\n\nexport type PollAnswersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  votes: PollAnswer<StreamChatGenerics>[]; // todo: should be changes to answers?\n  next?: string;\n};\n\nexport type CastVoteAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  vote: PollVote<StreamChatGenerics> | PollAnswer<StreamChatGenerics>;\n};\n\nexport type QueryMessageHistoryFilters = QueryFilters<\n  {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageHistoryEntry['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageHistoryEntry['message_id']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageHistoryEntry['message_updated_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageHistoryEntry['message_updated_by_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageHistoryEntry['message_updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>\n        >\n      | PrimitiveFilter<MessageHistoryEntry['message_updated_at']>;\n  }\n>;\n\nexport type QueryMessageHistorySort = QueryMessageHistorySortBase | Array<QueryMessageHistorySortBase>;\n\nexport type QueryMessageHistorySortBase = {\n  message_updated_at?: AscDesc;\n  message_updated_by_id?: AscDesc;\n};\n\nexport type QueryMessageHistoryOptions = Pager;\n\nexport type MessageHistoryEntry<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message_id: string;\n  message_updated_at: string;\n  attachments?: Attachment<StreamChatGenerics>[];\n  message_updated_by_id?: string;\n  text?: string;\n};\n\nexport type QueryMessageHistoryResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message_history: MessageHistoryEntry<StreamChatGenerics>[];\n  next?: string;\n  prev?: string;\n};\n\n// Moderation v2\nexport type ModerationPayload = {\n  created_at: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom?: Record<string, any>;\n  images?: string[];\n  texts?: string[];\n  videos?: string[];\n};\n\nexport type ModV2ReviewStatus = 'complete' | 'flagged' | 'partial';\n\nexport type ModerationFlag = {\n  created_at: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom: Record<string, any>;\n  entity_creator_id: string;\n  entity_id: string;\n  entity_type: string;\n  id: string;\n  reason: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  result: Record<string, any>[];\n  review_queue_item_id: string;\n  updated_at: string;\n  user: UserResponse;\n  moderation_payload?: ModerationPayload;\n  moderation_payload_hash?: string;\n};\n\nexport type ReviewQueueItem = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  actions_taken: any[];\n  appealed_by: string;\n  assigned_to: string;\n  completed_at: string;\n  config_key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  context: any[];\n  created_at: string;\n  created_by: string;\n  entity_id: string;\n  entity_type: string;\n  flags: ModerationFlag[];\n  has_image: boolean;\n  has_text: boolean;\n  has_video: boolean;\n  id: string;\n  moderation_payload: ModerationPayload;\n  moderation_payload_hash: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options: any;\n  recommended_action: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  results: any;\n  reviewed_at: string;\n  status: string;\n  updated_at: string;\n};\n\nexport type CustomCheckFlag = {\n  type: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom?: Record<string, any>[];\n  labels?: string[];\n  reason?: string;\n};\n\nexport type SubmitActionOptions = {\n  ban?: {\n    channel_ban_only?: boolean;\n    reason?: string;\n    timeout?: number;\n  };\n  delete_message?: {\n    hard_delete?: boolean;\n  };\n  delete_user?: {\n    delete_conversation_channels?: boolean;\n    hard_delete?: boolean;\n    mark_messages_deleted?: boolean;\n  };\n  restore?: {};\n  unban?: {\n    channel_cid?: string;\n  };\n  user_id?: string;\n};\n\nexport type GetUserModerationReportResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  user_blocks?: Array<{\n    blocked_at: string;\n    blocked_by_user_id: string;\n    blocked_user_id: string;\n  }>;\n  user_mutes?: Mute<StreamChatGenerics>[];\n};\n\nexport type QueryModerationConfigsFilters = QueryFilters<\n  {\n    key?: string;\n  } & {\n    created_at?: PrimitiveFilter<string>;\n  } & {\n    updated_at?: PrimitiveFilter<string>;\n  } & {\n    team?: string;\n  }\n>;\n\nexport type ReviewQueueFilters = QueryFilters<\n  {\n    assigned_to?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['assigned_to']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['assigned_to']>;\n  } & {\n    completed_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['completed_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['completed_at']>;\n  } & {\n    config_key?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['config_key']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['config_key']>;\n  } & {\n    entity_type?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['entity_type']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['entity_type']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['created_at']>;\n  } & {\n    id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['id']>;\n  } & {\n    entity_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['entity_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['entity_id']>;\n  } & {\n    reviewed?: boolean;\n  } & {\n    reviewed_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['reviewed_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['reviewed_at']>;\n  } & {\n    status?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['status']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['status']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ReviewQueueItem['updated_at']>;\n  } & {\n    has_image?: boolean;\n  } & {\n    has_text?: boolean;\n  } & {\n    has_video?: boolean;\n  } & {\n    has_media?: boolean;\n  } & {\n    language?: RequireOnlyOne<{\n      $contains?: string;\n      $eq?: string;\n      $in?: string[];\n    }>;\n  } & {\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<string>;\n          $in?: PrimitiveFilter<string>;\n        }>\n      | PrimitiveFilter<string>;\n  } & {\n    user_report_reason?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    recommended_action?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    flagged_user_id?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    category?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    label?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    reporter_type?: RequireOnlyOne<{\n      $eq?: 'automod' | 'user' | 'moderator' | 'admin' | 'velocity_filter';\n    }>;\n  } & {\n    reporter_id?: RequireOnlyOne<{\n      $eq?: string;\n      $in?: string[];\n    }>;\n  } & {\n    date_range?: RequireOnlyOne<{\n      $eq?: string; // Format: \"date1_date2\"\n    }>;\n  }\n>;\n\nexport type ReviewQueueSort =\n  | Sort<Pick<ReviewQueueItem, 'id' | 'created_at' | 'updated_at'>>\n  | Array<Sort<Pick<ReviewQueueItem, 'id' | 'created_at' | 'updated_at'>>>;\n\nexport type QueryModerationConfigsSort = Array<Sort<'key' | 'created_at' | 'updated_at'>>;\n\nexport type ReviewQueuePaginationOptions = Pager;\n\nexport type ReviewQueueResponse = {\n  items: ReviewQueueItem[];\n  next?: string;\n  prev?: string;\n};\n\nexport type ModerationConfig = {\n  key: string;\n  ai_image_config?: AIImageConfig;\n  ai_text_config?: AITextConfig;\n  ai_video_config?: AIVideoConfig;\n  automod_platform_circumvention_config?: AutomodPlatformCircumventionConfig;\n  automod_semantic_filters_config?: AutomodSemanticFiltersConfig;\n  automod_toxicity_config?: AutomodToxicityConfig;\n  block_list_config?: BlockListConfig;\n  team?: string;\n};\n\nexport type ModerationConfigResponse = ModerationConfig & {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type GetConfigResponse = {\n  config: ModerationConfigResponse;\n};\n\nexport type QueryConfigsResponse = {\n  configs: ModerationConfigResponse[];\n  next?: string;\n  prev?: string;\n};\n\nexport type UpsertConfigResponse = {\n  config: ModerationConfigResponse;\n};\n\nexport type ModerationFlagOptions = {\n  custom?: Record<string, unknown>;\n  moderation_payload?: ModerationPayload;\n  user_id?: string;\n};\n\nexport type ModerationMuteOptions = {\n  timeout?: number;\n  user_id?: string;\n};\nexport type GetUserModerationReportOptions = {\n  create_user_if_not_exists?: boolean;\n  include_user_blocks?: boolean;\n  include_user_mutes?: boolean;\n};\n\nexport type AIState =\n  | 'AI_STATE_ERROR'\n  | 'AI_STATE_CHECKING_SOURCES'\n  | 'AI_STATE_THINKING'\n  | 'AI_STATE_GENERATING'\n  | (string & {});\n\nexport type ModerationActionType = 'flag' | 'shadow' | 'remove' | 'bounce' | 'bounce_flag' | 'bounce_remove';\n\nexport type AutomodRule = {\n  action: ModerationActionType;\n  label: string;\n  threshold: number;\n};\n\nexport type BlockListRule = {\n  action: ModerationActionType;\n  name?: string;\n};\n\nexport type BlockListConfig = {\n  enabled: boolean;\n  rules: BlockListRule[];\n  async?: boolean;\n};\n\nexport type AutomodToxicityConfig = {\n  enabled: boolean;\n  rules: AutomodRule[];\n  async?: boolean;\n};\n\nexport type AutomodPlatformCircumventionConfig = {\n  enabled: boolean;\n  rules: AutomodRule[];\n  async?: boolean;\n};\n\nexport type AutomodSemanticFiltersRule = {\n  action: ModerationActionType;\n  name: string;\n  threshold: number;\n};\n\nexport type AutomodSemanticFiltersConfig = {\n  enabled: boolean;\n  rules: AutomodSemanticFiltersRule[];\n  async?: boolean;\n};\n\nexport type AITextSeverityRule = {\n  action: ModerationActionType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n};\n\nexport type AITextRule = {\n  label: string;\n  action?: ModerationActionType;\n  severity_rules?: AITextSeverityRule[];\n};\n\nexport type AITextConfig = {\n  enabled: boolean;\n  rules: AITextRule[];\n  async?: boolean;\n  profile?: string;\n  severity_rules?: AITextSeverityRule[]; // Deprecated: use rules instead\n};\n\nexport type AIImageRule = {\n  action: ModerationActionType;\n  label: string;\n  min_confidence?: number;\n};\n\nexport type AIImageConfig = {\n  enabled: boolean;\n  rules: AIImageRule[];\n  async?: boolean;\n};\n\nexport type AIVideoRule = {\n  action: ModerationActionType;\n  label: string;\n  min_confidence?: number;\n};\n\nexport type AIVideoConfig = {\n  enabled: boolean;\n  rules: AIVideoRule[];\n  async?: boolean;\n};\n\nexport type VelocityFilterConfigRule = {\n  action: 'flag' | 'shadow' | 'remove' | 'ban';\n  ban_duration?: number;\n  cascading_action?: 'flag' | 'shadow' | 'remove' | 'ban';\n  cascading_threshold?: number;\n  check_message_context?: boolean;\n  fast_spam_threshold?: number;\n  fast_spam_ttl?: number;\n  ip_ban?: boolean;\n  shadow_ban?: boolean;\n  slow_spam_ban_duration?: number;\n  slow_spam_threshold?: number;\n  slow_spam_ttl?: number;\n};\n\nexport type VelocityFilterConfig = {\n  cascading_actions: boolean;\n  enabled: boolean;\n  first_message_only: boolean;\n  rules: VelocityFilterConfigRule[];\n  async?: boolean;\n};\n\nexport type PromoteChannelParams<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  channels: Array<Channel<SCG>>;\n  channelToMove: Channel<SCG>;\n  sort: ChannelSort<SCG>;\n  /**\n   * If the index of the channel within `channels` list which is being moved upwards\n   * (`channelToMove`) is known, you can supply it to skip extra calculation.\n   */\n  channelToMoveIndexWithinChannels?: number;\n};\n\n/**\n * An identifier containing information about the downstream SDK using stream-chat. It\n * is used to resolve the user agent.\n */\nexport type SdkIdentifier = { name: 'react' | 'react-native' | 'expo' | 'angular'; version: string };\n\n/**\n * An identifier containing information about the downstream device using stream-chat, if\n * available. Is used by the react-native SDKs to enrich the user agent further.\n */\nexport type DeviceIdentifier = { os: string; model?: string };\n\nexport type DraftResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel_cid: string;\n  created_at: string;\n  message: DraftMessage<StreamChatGenerics>;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  parent_id?: string;\n  parent_message?: MessageResponseBase<StreamChatGenerics>;\n  quoted_message?: MessageResponseBase<StreamChatGenerics>;\n};\nexport type CreateDraftResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  draft: DraftResponse<StreamChatGenerics>;\n};\n\nexport type GetDraftResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  draft: DraftResponse<StreamChatGenerics>;\n};\n\nexport type QueryDraftsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  drafts: DraftResponse<StreamChatGenerics>[];\n} & Omit<Pager, 'limit'>;\n\nexport type DraftMessagePayload<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = PartializeKeys<\n  DraftMessage<StreamChatGenerics>,\n  'id'\n> & { user_id?: string };\n\nexport type DraftMessage<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  text: string;\n  attachments?: Attachment<StreamChatGenerics>[];\n  custom?: {};\n  html?: string;\n  mentioned_users?: string[];\n  mml?: string;\n  parent_id?: string;\n  poll_id?: string;\n  quoted_message_id?: string;\n  show_in_channel?: boolean;\n  silent?: boolean;\n  type?: MessageLabel;\n};\n\nexport type ThreadSort = ThreadSortBase | Array<ThreadSortBase>;\n\nexport type ThreadSortBase = {\n  active_participant_count?: AscDesc;\n  created_at?: AscDesc;\n  last_message_at?: AscDesc;\n  parent_message_id?: AscDesc;\n  participant_count?: AscDesc;\n  reply_count?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type ThreadFilters = QueryFilters<\n  {\n    channel_cid?: RequireOnlyOne<Pick<QueryFilter<string>, '$eq' | '$in'>> | PrimitiveFilter<string>;\n  } & {\n    parent_message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ThreadResponse['parent_message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ThreadResponse['parent_message_id']>;\n  } & {\n    created_by_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ThreadResponse['created_by_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ThreadResponse['created_by_user_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ThreadResponse['created_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ThreadResponse['created_at']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ThreadResponse['updated_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ThreadResponse['updated_at']>;\n  } & {\n    last_message_at?:\n      | RequireOnlyOne<Pick<QueryFilter<ThreadResponse['last_message_at']>, '$eq' | '$gt' | '$lt' | '$gte' | '$lte'>>\n      | PrimitiveFilter<ThreadResponse['last_message_at']>;\n  }\n>;\n", "export type Patch<T> = (value: T) => T;\nexport type ValueOrPatch<T> = T | Patch<T>;\nexport type Handler<T> = (nextValue: T, previousValue: T | undefined) => void;\nexport type Unsubscribe = () => void;\n\nexport const isPatch = <T>(value: ValueOrPatch<T>): value is Patch<T> => {\n  return typeof value === 'function';\n};\n\nexport class StateStore<T extends Record<string, unknown>> {\n  private handlerSet = new Set<Handler<T>>();\n\n  private static logCount = 5;\n\n  constructor(private value: T) {}\n\n  public next = (newValueOrPatch: ValueOrPatch<T>): void => {\n    // newValue (or patch output) should never be mutated previous value\n    const newValue = isPatch(newValueOrPatch) ? newValueOrPatch(this.value) : newValueOrPatch;\n\n    // do not notify subscribers if the value hasn't changed\n    if (newValue === this.value) return;\n\n    const oldValue = this.value;\n    this.value = newValue;\n\n    this.handlerSet.forEach((handler) => handler(this.value, oldValue));\n  };\n\n  public partialNext = (partial: Partial<T>): void => this.next((current) => ({ ...current, ...partial }));\n\n  public getLatestValue = (): T => this.value;\n\n  public subscribe = (handler: Handler<T>): Unsubscribe => {\n    handler(this.value, undefined);\n    this.handlerSet.add(handler);\n    return () => {\n      this.handlerSet.delete(handler);\n    };\n  };\n\n  public subscribeWithSelector = <O extends Readonly<Record<string, unknown>> | Readonly<unknown[]>>(\n    selector: (nextValue: T) => O,\n    handler: Handler<O>,\n  ) => {\n    // begin with undefined to reduce amount of selector calls\n    let selectedValues: O | undefined;\n\n    const wrappedHandler: Handler<T> = (nextValue) => {\n      const newlySelectedValues = selector(nextValue);\n\n      let hasUpdatedValues = !selectedValues;\n\n      if (Array.isArray(newlySelectedValues) && StateStore.logCount > 0) {\n        console.warn(\n          '[StreamChat]: The API of our StateStore has changed. Instead of returning an array in the selector, please return a named object of properties.',\n        );\n        StateStore.logCount--;\n      }\n\n      for (const key in selectedValues) {\n        // @ts-ignore TODO: remove array support (Readonly<unknown[]>)\n        if (selectedValues[key] === newlySelectedValues[key]) continue;\n        hasUpdatedValues = true;\n        break;\n      }\n\n      if (!hasUpdatedValues) return;\n\n      const oldSelectedValues = selectedValues;\n      selectedValues = newlySelectedValues;\n\n      handler(newlySelectedValues, oldSelectedValues);\n    };\n\n    return this.subscribe(wrappedHandler);\n  };\n}\n", "import type { Channel } from './channel';\nimport type { StreamChat } from './client';\nimport { StateStore } from './store';\nimport type {\n  AscDesc,\n  DefaultGenerics,\n  EventTypes,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  MessagePaginationOptions,\n  MessageResponse,\n  ReadResponse,\n  ThreadResponse,\n  ThreadResponseCustomData,\n  UserResponse,\n} from './types';\nimport { addToMessageList, findIndexInSortedArray, formatMessage, throttle } from './utils';\n\ntype QueryRepliesOptions<SCG extends ExtendableGenerics> = {\n  sort?: { created_at: AscDesc }[];\n} & MessagePaginationOptions & { user?: UserResponse<SCG>; user_id?: string };\n\nexport type ThreadState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  /**\n   * Determines if the thread is currently opened and on-screen. When the thread is active,\n   * all new messages are immediately marked as read.\n   */\n  active: boolean;\n  channel: Channel<SCG>;\n  createdAt: Date;\n  custom: ThreadResponseCustomData;\n  deletedAt: Date | null;\n  isLoading: boolean;\n  isStateStale: boolean;\n  pagination: ThreadRepliesPagination;\n  /**\n   * Thread is identified by and has a one-to-one relation with its parent message.\n   * We use parent message id as a thread id.\n   */\n  parentMessage: FormatMessageResponse<SCG>;\n  participants: ThreadResponse<SCG>['thread_participants'];\n  read: ThreadReadState;\n  replies: Array<FormatMessageResponse<SCG>>;\n  replyCount: number;\n  title: string;\n  updatedAt: Date | null;\n};\n\nexport type ThreadRepliesPagination = {\n  isLoadingNext: boolean;\n  isLoadingPrev: boolean;\n  nextCursor: string | null;\n  prevCursor: string | null;\n};\n\nexport type ThreadUserReadState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  lastReadAt: Date;\n  unreadMessageCount: number;\n  user: UserResponse<SCG>;\n  lastReadMessageId?: string;\n};\n\nexport type ThreadReadState<SCG extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  ThreadUserReadState<SCG> | undefined\n>;\n\nconst DEFAULT_PAGE_LIMIT = 50;\nconst DEFAULT_SORT: { created_at: AscDesc }[] = [{ created_at: -1 }];\nconst MARK_AS_READ_THROTTLE_TIMEOUT = 1000;\n// TODO: remove this once we move to API v2\nexport const THREAD_RESPONSE_RESERVED_KEYS: Record<keyof ThreadResponse, true> = {\n  channel: true,\n  channel_cid: true,\n  created_at: true,\n  created_by_user_id: true,\n  parent_message_id: true,\n  title: true,\n  updated_at: true,\n  latest_replies: true,\n  active_participant_count: true,\n  deleted_at: true,\n  last_message_at: true,\n  participant_count: true,\n  reply_count: true,\n  read: true,\n  thread_participants: true,\n  created_by: true,\n  parent_message: true,\n};\n\n// TODO: remove this once we move to API v2\nconst constructCustomDataObject = <T extends ThreadResponse>(threadData: T) => {\n  const custom: ThreadResponseCustomData = {};\n\n  for (const key in threadData) {\n    if (THREAD_RESPONSE_RESERVED_KEYS[key as keyof ThreadResponse]) {\n      continue;\n    }\n\n    const customKey = key as keyof ThreadResponseCustomData;\n\n    custom[customKey] = threadData[customKey];\n  }\n\n  return custom;\n};\n\nexport class Thread<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<ThreadState<SCG>>;\n  public readonly id: string;\n\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n  private failedRepliesMap: Map<string, FormatMessageResponse<SCG>> = new Map();\n\n  constructor({ client, threadData }: { client: StreamChat<SCG>; threadData: ThreadResponse<SCG> }) {\n    const channel = client.channel(threadData.channel.type, threadData.channel.id, {\n      name: threadData.channel.name,\n    });\n    channel._hydrateMembers({ members: threadData.channel.members ?? [], overrideCurrentState: false });\n\n    // For when read object is undefined and due to that unreadMessageCount for\n    // the current user isn't being incremented on message.new\n    const placeholderReadResponse: ReadResponse[] = client.userID\n      ? [{ user: { id: client.userID }, unread_messages: 0, last_read: new Date().toISOString() }]\n      : [];\n\n    this.state = new StateStore<ThreadState<SCG>>({\n      // local only\n      active: false,\n      isLoading: false,\n      isStateStale: false,\n      // 99.9% should never change\n      channel,\n      createdAt: new Date(threadData.created_at),\n      // rest\n      deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n      pagination: repliesPaginationFromInitialThread(threadData),\n      parentMessage: formatMessage(threadData.parent_message),\n      participants: threadData.thread_participants,\n      read: formatReadState(\n        !threadData.read || threadData.read.length === 0 ? placeholderReadResponse : threadData.read,\n      ),\n      replies: threadData.latest_replies.map(formatMessage),\n      replyCount: threadData.reply_count ?? 0,\n      updatedAt: threadData.updated_at ? new Date(threadData.updated_at) : null,\n      title: threadData.title,\n      custom: constructCustomDataObject(threadData),\n    });\n\n    this.id = threadData.parent_message_id;\n    this.client = client;\n  }\n\n  get channel() {\n    return this.state.getLatestValue().channel;\n  }\n\n  get hasStaleState() {\n    return this.state.getLatestValue().isStateStale;\n  }\n\n  get ownUnreadCount() {\n    return ownUnreadCountSelector(this.client.userID)(this.state.getLatestValue());\n  }\n\n  public activate = () => {\n    this.state.partialNext({ active: true });\n  };\n\n  public deactivate = () => {\n    this.state.partialNext({ active: false });\n  };\n\n  public reload = async () => {\n    if (this.state.getLatestValue().isLoading) {\n      return;\n    }\n\n    this.state.partialNext({ isLoading: true });\n\n    try {\n      const thread = await this.client.getThread(this.id, { watch: true });\n      this.hydrateState(thread);\n    } finally {\n      this.state.partialNext({ isLoading: false });\n    }\n  };\n\n  public hydrateState = (thread: Thread<SCG>) => {\n    if (thread === this) {\n      // skip if the instances are the same\n      return;\n    }\n\n    if (thread.id !== this.id) {\n      throw new Error(\"Cannot hydrate thread state with using thread's state\");\n    }\n\n    const {\n      read,\n      replyCount,\n      replies,\n      parentMessage,\n      participants,\n      createdAt,\n      deletedAt,\n      updatedAt,\n    } = thread.state.getLatestValue();\n\n    // Preserve pending replies and append them to the updated list of replies\n    const pendingReplies = Array.from(this.failedRepliesMap.values());\n\n    this.state.partialNext({\n      read,\n      replyCount,\n      replies: pendingReplies.length ? replies.concat(pendingReplies) : replies,\n      parentMessage,\n      participants,\n      createdAt,\n      deletedAt,\n      updatedAt,\n      isStateStale: false,\n    });\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) {\n      // Thread is already listening for events and changes\n      return;\n    }\n\n    this.unsubscribeFunctions.add(this.subscribeThreadUpdated());\n    this.unsubscribeFunctions.add(this.subscribeMarkActiveThreadRead());\n    this.unsubscribeFunctions.add(this.subscribeReloadActiveStaleThread());\n    this.unsubscribeFunctions.add(this.subscribeMarkThreadStale());\n    this.unsubscribeFunctions.add(this.subscribeNewReplies());\n    this.unsubscribeFunctions.add(this.subscribeRepliesRead());\n    this.unsubscribeFunctions.add(this.subscribeMessageDeleted());\n    this.unsubscribeFunctions.add(this.subscribeMessageUpdated());\n  };\n\n  private subscribeThreadUpdated = () => {\n    return this.client.on('thread.updated', (event) => {\n      if (!event.thread || event.thread.parent_message_id !== this.id) {\n        return;\n      }\n\n      const threadData = event.thread;\n\n      this.state.partialNext({\n        title: threadData.title,\n        updatedAt: new Date(threadData.updated_at),\n        deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n        // TODO: use threadData.custom once we move to API v2\n        custom: constructCustomDataObject(threadData),\n      });\n    }).unsubscribe;\n  };\n\n  private subscribeMarkActiveThreadRead = () => {\n    return this.state.subscribeWithSelector(\n      (nextValue) => ({\n        active: nextValue.active,\n        unreadMessageCount: ownUnreadCountSelector(this.client.userID)(nextValue),\n      }),\n      ({ active, unreadMessageCount }) => {\n        if (!active || !unreadMessageCount) return;\n        this.throttledMarkAsRead();\n      },\n    );\n  };\n\n  private subscribeReloadActiveStaleThread = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ active: nextValue.active, isStateStale: nextValue.isStateStale }),\n      ({ active, isStateStale }) => {\n        if (active && isStateStale) {\n          this.reload();\n        }\n      },\n    );\n\n  private subscribeMarkThreadStale = () =>\n    this.client.on('user.watching.stop', (event) => {\n      const { channel } = this.state.getLatestValue();\n\n      if (!this.client.userID || this.client.userID !== event.user?.id || event.channel?.cid !== channel.cid) {\n        return;\n      }\n\n      this.state.partialNext({ isStateStale: true });\n    }).unsubscribe;\n\n  private subscribeNewReplies = () =>\n    this.client.on('message.new', (event) => {\n      if (!this.client.userID || event.message?.parent_id !== this.id) {\n        return;\n      }\n\n      const isOwnMessage = event.message.user?.id === this.client.userID;\n      const { active, read } = this.state.getLatestValue();\n\n      this.upsertReplyLocally({\n        message: event.message,\n        // Message from current user could have been added optimistically,\n        // so the actual timestamp might differ in the event\n        timestampChanged: isOwnMessage,\n      });\n\n      if (active) {\n        this.throttledMarkAsRead();\n      }\n\n      const nextRead: ThreadReadState = {};\n\n      for (const userId of Object.keys(read)) {\n        const userRead = read[userId];\n\n        if (userRead) {\n          let nextUserRead: ThreadUserReadState = userRead;\n\n          if (userId === event.user?.id) {\n            // The user who just sent a message to the thread has no unread messages\n            // in that thread\n            nextUserRead = {\n              ...nextUserRead,\n              lastReadAt: event.created_at ? new Date(event.created_at) : new Date(),\n              user: event.user,\n              unreadMessageCount: 0,\n            };\n          } else if (active && userId === this.client.userID) {\n            // Do not increment unread count for the current user in an active thread\n          } else {\n            // Increment unread count for all users except the author of the new message\n            nextUserRead = {\n              ...nextUserRead,\n              unreadMessageCount: userRead.unreadMessageCount + 1,\n            };\n          }\n\n          nextRead[userId] = nextUserRead;\n        }\n      }\n\n      this.state.partialNext({ read: nextRead });\n    }).unsubscribe;\n\n  private subscribeRepliesRead = () =>\n    this.client.on('message.read', (event) => {\n      if (!event.user || !event.created_at || !event.thread) return;\n      if (event.thread.parent_message_id !== this.id) return;\n\n      const userId = event.user.id;\n      const createdAt = event.created_at;\n      const user = event.user;\n\n      this.state.next((current) => ({\n        ...current,\n        read: {\n          ...current.read,\n          [userId]: {\n            lastReadAt: new Date(createdAt),\n            user,\n            lastReadMessageId: event.last_read_message_id,\n            unreadMessageCount: 0,\n          },\n        },\n      }));\n    }).unsubscribe;\n\n  private subscribeMessageDeleted = () =>\n    this.client.on('message.deleted', (event) => {\n      if (!event.message) return;\n\n      // Deleted message is a reply of this thread\n      if (event.message.parent_id === this.id) {\n        if (event.hard_delete) {\n          this.deleteReplyLocally({ message: event.message });\n        } else {\n          // Handle soft delete (updates deleted_at timestamp)\n          this.upsertReplyLocally({ message: event.message });\n        }\n      }\n\n      // Deleted message is parent message of this thread\n      if (event.message.id === this.id) {\n        this.updateParentMessageLocally({ message: event.message });\n      }\n    }).unsubscribe;\n\n  private subscribeMessageUpdated = () => {\n    const eventTypes: EventTypes[] = ['message.updated', 'reaction.new', 'reaction.deleted', 'reaction.updated'];\n\n    const unsubscribeFunctions = eventTypes.map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          if (event.message) {\n            this.updateParentMessageOrReplyLocally(event.message);\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  public unregisterSubscriptions = () => {\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n\n  public deleteReplyLocally = ({ message }: { message: MessageResponse<SCG> }) => {\n    const { replies } = this.state.getLatestValue();\n\n    const index = findIndexInSortedArray({\n      needle: formatMessage(message),\n      sortedArray: replies,\n      sortDirection: 'ascending',\n      selectValueToCompare: (reply) => reply.created_at.getTime(),\n      selectKey: (reply) => reply.id,\n    });\n\n    if (replies[index]?.id !== message.id) {\n      return;\n    }\n\n    const updatedReplies = [...replies];\n    updatedReplies.splice(index, 1);\n\n    this.state.partialNext({\n      replies: updatedReplies,\n    });\n  };\n\n  public upsertReplyLocally = ({\n    message,\n    timestampChanged = false,\n  }: {\n    message: MessageResponse<SCG>;\n    timestampChanged?: boolean;\n  }) => {\n    if (message.parent_id !== this.id) {\n      throw new Error('Reply does not belong to this thread');\n    }\n\n    const formattedMessage = formatMessage(message);\n\n    if (message.status === 'failed') {\n      // store failed reply so that it's not lost when reloading or hydrating\n      this.failedRepliesMap.set(formattedMessage.id, formattedMessage);\n    } else if (this.failedRepliesMap.has(message.id)) {\n      this.failedRepliesMap.delete(message.id);\n    }\n\n    this.state.next((current) => ({\n      ...current,\n      replies: addToMessageList(current.replies, formattedMessage, timestampChanged),\n    }));\n  };\n\n  public updateParentMessageLocally = ({ message }: { message: MessageResponse<SCG> }) => {\n    if (message.id !== this.id) {\n      throw new Error('Message does not belong to this thread');\n    }\n\n    this.state.next((current) => {\n      const formattedMessage = formatMessage(message);\n\n      return {\n        ...current,\n        deletedAt: formattedMessage.deleted_at,\n        parentMessage: formattedMessage,\n        replyCount: message.reply_count ?? current.replyCount,\n      };\n    });\n  };\n\n  public updateParentMessageOrReplyLocally = (message: MessageResponse<SCG>) => {\n    if (message.parent_id === this.id) {\n      this.upsertReplyLocally({ message });\n    }\n\n    if (!message.parent_id && message.id === this.id) {\n      this.updateParentMessageLocally({ message });\n    }\n  };\n\n  public markAsRead = async ({ force = false }: { force?: boolean } = {}) => {\n    if (this.ownUnreadCount === 0 && !force) {\n      return null;\n    }\n\n    return await this.channel.markRead({ thread_id: this.id });\n  };\n\n  private throttledMarkAsRead = throttle(() => this.markAsRead(), MARK_AS_READ_THROTTLE_TIMEOUT, { trailing: true });\n\n  public queryReplies = ({\n    limit = DEFAULT_PAGE_LIMIT,\n    sort = DEFAULT_SORT,\n    ...otherOptions\n  }: QueryRepliesOptions<SCG> = {}) => {\n    return this.channel.getReplies(this.id, { limit, ...otherOptions }, sort);\n  };\n\n  public loadNextPage = ({ limit = DEFAULT_PAGE_LIMIT }: { limit?: number } = {}) => {\n    return this.loadPage(limit);\n  };\n\n  public loadPrevPage = ({ limit = DEFAULT_PAGE_LIMIT }: { limit?: number } = {}) => {\n    return this.loadPage(-limit);\n  };\n\n  private loadPage = async (count: number) => {\n    const { pagination } = this.state.getLatestValue();\n    const [loadingKey, cursorKey, insertionMethodKey] =\n      count > 0\n        ? (['isLoadingNext', 'nextCursor', 'push'] as const)\n        : (['isLoadingPrev', 'prevCursor', 'unshift'] as const);\n\n    if (pagination[loadingKey] || pagination[cursorKey] === null) return;\n\n    const queryOptions = { [count > 0 ? 'id_gt' : 'id_lt']: pagination[cursorKey] };\n    const limit = Math.abs(count);\n\n    this.state.partialNext({ pagination: { ...pagination, [loadingKey]: true } });\n\n    try {\n      const data = await this.queryReplies({ ...queryOptions, limit });\n      const replies = data.messages.map(formatMessage);\n      const maybeNextCursor = replies.at(count > 0 ? -1 : 0)?.id ?? null;\n\n      this.state.next((current) => {\n        let nextReplies = current.replies;\n\n        // prevent re-creating array if there's nothing to add to the current one\n        if (replies.length > 0) {\n          nextReplies = [...current.replies];\n          nextReplies[insertionMethodKey](...replies);\n        }\n\n        return {\n          ...current,\n          replies: nextReplies,\n          pagination: {\n            ...current.pagination,\n            [cursorKey]: data.messages.length < limit ? null : maybeNextCursor,\n            [loadingKey]: false,\n          },\n        };\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          [loadingKey]: false,\n        },\n      }));\n    }\n  };\n}\n\nconst formatReadState = (read: ReadResponse[]): ThreadReadState =>\n  read.reduce<ThreadReadState>((state, userRead) => {\n    state[userRead.user.id] = {\n      user: userRead.user,\n      lastReadMessageId: userRead.last_read_message_id,\n      unreadMessageCount: userRead.unread_messages ?? 0,\n      lastReadAt: new Date(userRead.last_read),\n    };\n    return state;\n  }, {});\n\nconst repliesPaginationFromInitialThread = (thread: ThreadResponse): ThreadRepliesPagination => {\n  const latestRepliesContainsAllReplies = thread.latest_replies.length === thread.reply_count;\n\n  return {\n    nextCursor: null,\n    prevCursor: latestRepliesContainsAllReplies ? null : thread.latest_replies.at(0)?.id ?? null,\n    isLoadingNext: false,\n    isLoadingPrev: false,\n  };\n};\n\nconst ownUnreadCountSelector = (currentUserId: string | undefined) => <\n  SCG extends ExtendableGenerics = DefaultGenerics\n>(\n  state: ThreadState<SCG>,\n) => (currentUserId && state.read[currentUserId]?.unreadMessageCount) || 0;\n", "import {\n  APIResponse,\n  ModerationConfig,\n  DefaultGenerics,\n  ExtendableGenerics,\n  GetConfigResponse,\n  GetUserModerationReportResponse,\n  MuteUserResponse,\n  ReviewQueueFilters,\n  ReviewQueuePaginationOptions,\n  ReviewQueueResponse,\n  ReviewQueueSort,\n  UpsertConfigResponse,\n  ModerationFlagOptions,\n  ModerationMuteOptions,\n  GetUserModerationReportOptions,\n  SubmitActionOptions,\n  QueryModerationConfigsFilters,\n  QueryModerationConfigsSort,\n  Pager,\n  CustomCheckFlag,\n  ReviewQueueItem,\n  QueryConfigsResponse,\n  RequireAtLeastOne,\n} from './types';\nimport { StreamChat } from './client';\nimport { normalizeQuerySort } from './utils';\n\nexport const MODERATION_ENTITY_TYPES = {\n  user: 'stream:user',\n  message: 'stream:chat:v1:message',\n  userprofile: 'stream:v1:user_profile',\n};\n\n// Moderation class provides all the endpoints related to moderation v2.\nexport class Moderation<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  client: StreamChat<StreamChatGenerics>;\n\n  constructor(client: StreamChat<StreamChatGenerics>) {\n    this.client = client;\n  }\n\n  /**\n   * Flag a user\n   *\n   * @param {string} flaggedUserID User ID to be flagged\n   * @param {string} reason Reason for flagging the user\n   * @param {Object} options Additional options for flagging the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target user\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flagUser(flaggedUserID: string, reason: string, options: ModerationFlagOptions = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.user, flaggedUserID, '', reason, options);\n  }\n\n  /**\n   * Flag a message\n   *\n   * @param {string} messageID Message ID to be flagged\n   * @param {string} reason Reason for flagging the message\n   * @param {Object} options Additional options for flagging the message\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target message\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flagMessage(messageID: string, reason: string, options: ModerationFlagOptions = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.message, messageID, '', reason, options);\n  }\n\n  /**\n   * Flag a user\n   *\n   * @param {string} entityType Entity type to be flagged\n   * @param {string} entityId Entity ID to be flagged\n   * @param {string} entityCreatorID User ID of the entity creator\n   * @param {string} reason Reason for flagging the entity\n   * @param {Object} options Additional options for flagging the entity\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target entity\n   * @param {Object} options.moderation_payload Content to be flagged e.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flag(\n    entityType: string,\n    entityId: string,\n    entityCreatorID: string,\n    reason: string,\n    options: ModerationFlagOptions = {},\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(this.client.baseURL + '/api/v2/moderation/flag', {\n      entity_type: entityType,\n      entity_id: entityId,\n      entity_creator_id: entityCreatorID,\n      reason,\n      ...options,\n    });\n  }\n\n  /**\n   * Mute a user\n   * @param {string} targetID  User ID to be muted\n   * @param {Object} options Additional options for muting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is muting the target user\n   * @param {number} options.timeout Timeout for the mute in minutes\n   * @returns\n   */\n  async muteUser(targetID: string, options: ModerationMuteOptions = {}) {\n    return await this.client.post<MuteUserResponse<StreamChatGenerics> & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/mute',\n      {\n        target_ids: [targetID],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Unmute a user\n   * @param {string} targetID  User ID to be unmuted\n   * @param {Object} options Additional options for unmuting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is unmuting the target user\n   * @returns\n   */\n  async unmuteUser(\n    targetID: string,\n    options: {\n      user_id?: string;\n    },\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/unmute',\n      {\n        target_ids: [targetID],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Get moderation report for a user\n   * @param {string} userID User ID for which moderation report is to be fetched\n   * @param {Object} options Additional options for fetching the moderation report\n   * @param {boolean} options.create_user_if_not_exists Create user if not exists\n   * @param {boolean} options.include_user_blocks Include user blocks\n   * @param {boolean} options.include_user_mutes Include user mutes\n   */\n  async getUserModerationReport(userID: string, options: GetUserModerationReportOptions = {}) {\n    return await this.client.get<GetUserModerationReportResponse<StreamChatGenerics>>(\n      this.client.baseURL + `/api/v2/moderation/user_report`,\n      {\n        user_id: userID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Query review queue\n   * @param {Object} filterConditions Filter conditions for querying review queue\n   * @param {Object} sort Sort conditions for querying review queue\n   * @param {Object} options Pagination options for querying review queue\n   */\n  async queryReviewQueue(\n    filterConditions: ReviewQueueFilters = {},\n    sort: ReviewQueueSort = [],\n    options: ReviewQueuePaginationOptions = {},\n  ) {\n    return await this.client.post<ReviewQueueResponse>(this.client.baseURL + '/api/v2/moderation/review_queue', {\n      filter: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    });\n  }\n\n  /**\n   * Upsert moderation config\n   * @param {Object} config Moderation config to be upserted\n   */\n  async upsertConfig(config: ModerationConfig) {\n    return await this.client.post<UpsertConfigResponse>(this.client.baseURL + '/api/v2/moderation/config', config);\n  }\n\n  /**\n   * Get moderation config\n   * @param {string} key Key for which moderation config is to be fetched\n   */\n  async getConfig(key: string, data?: { team?: string }) {\n    return await this.client.get<GetConfigResponse>(this.client.baseURL + '/api/v2/moderation/config/' + key, data);\n  }\n\n  async deleteConfig(key: string, data?: { team?: string }) {\n    return await this.client.delete(this.client.baseURL + '/api/v2/moderation/config/' + key, data);\n  }\n\n  /**\n   * Query moderation configs\n   * @param {Object} filterConditions Filter conditions for querying moderation configs\n   * @param {Object} sort Sort conditions for querying moderation configs\n   * @param {Object} options Additional options for querying moderation configs\n   */\n  async queryConfigs(\n    filterConditions: QueryModerationConfigsFilters,\n    sort: QueryModerationConfigsSort,\n    options: Pager = {},\n  ) {\n    return await this.client.post<QueryConfigsResponse>(this.client.baseURL + '/api/v2/moderation/configs', {\n      filter: filterConditions,\n      sort,\n      ...options,\n    });\n  }\n\n  async submitAction(actionType: string, itemID: string, options: SubmitActionOptions = {}) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/submit_action',\n      {\n        action_type: actionType,\n        item_id: itemID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param configKey\n   * @param options\n   * @returns\n   */\n  async check(\n    entityType: string,\n    entityID: string,\n    entityCreatorID: string,\n    moderationPayload: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      custom?: Record<string, any>;\n      images?: string[];\n      texts?: string[];\n      videos?: string[];\n    },\n    configKey: string,\n    options?: {\n      force_sync?: boolean;\n      test_mode?: boolean;\n    },\n  ) {\n    return await this.client.post(this.client.baseURL + `/api/v2/moderation/check`, {\n      entity_type: entityType,\n      entity_id: entityID,\n      entity_creator_id: entityCreatorID,\n      moderation_payload: moderationPayload,\n      config_key: configKey,\n      options,\n    });\n  }\n\n  /**\n   * Experimental: Check user profile\n   *\n   * Warning: This is an experimental feature and the API is subject to change.\n   *\n   * This function is used to check a user profile for moderation.\n   * This will not create any review queue items for the user profile.\n   * You can just use this to check whether to allow a certain user profile to be created or not.\n   *\n   * Example:\n   *\n   * ```ts\n   * const res = await client.moderation.checkUserProfile(userId, { username: \"fuck_boy_001\", image: \"https://example.com/profile.jpg\" });\n   * if (res.recommended_action === \"remove\") {\n   *   // Block the user profile from being created\n   * } else {\n   *   // Allow the user profile to be created\n   * }\n   * ```\n   *\n   * @param userId\n   * @param profile.username\n   * @param profile.image\n   * @returns\n   */\n  async checkUserProfile(userId: string, profile: RequireAtLeastOne<{ image?: string; username?: string }>) {\n    if (!profile.username && !profile.image) {\n      throw new Error('Either username or image must be provided');\n    }\n\n    const moderationPayload: { images?: string[]; texts?: string[] } = {};\n    if (profile.username) {\n      moderationPayload.texts = [profile.username];\n    }\n    if (profile.image) {\n      moderationPayload.images = [profile.image];\n    }\n\n    return await this.check(\n      MODERATION_ENTITY_TYPES.userprofile,\n      userId,\n      userId,\n      moderationPayload,\n      'user_profile:default',\n      {\n        force_sync: true,\n        test_mode: true,\n      },\n    );\n  }\n\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the entity\n   * @returns\n   */\n  async addCustomFlags(\n    entityType: string,\n    entityID: string,\n    entityCreatorID: string,\n    moderationPayload: {\n      images?: string[];\n      texts?: string[];\n      videos?: string[];\n    },\n    flags: CustomCheckFlag[],\n  ) {\n    return await this.client.post<{ id: string; item: ReviewQueueItem; status: string } & APIResponse>(\n      this.client.baseURL + `/api/v2/moderation/custom_check`,\n      {\n        entity_type: entityType,\n        entity_id: entityID,\n        entity_creator_id: entityCreatorID,\n        moderation_payload: moderationPayload,\n        flags,\n      },\n    );\n  }\n\n  /**\n   * Add custom flags to a message\n   * @param {string} messageID Message ID to be flagged\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the message\n   * @returns\n   */\n  async addCustomMessageFlags(messageID: string, flags: CustomCheckFlag[]) {\n    return await this.addCustomFlags(MODERATION_ENTITY_TYPES.message, messageID, '', {}, flags);\n  }\n}\n", "import { StateStore } from './store';\nimport { throttle } from './utils';\n\nimport type { StreamChat } from './client';\nimport type { Thread } from './thread';\nimport type { DefaultGenerics, Event, ExtendableGenerics, OwnUserResponse, QueryThreadsOptions } from './types';\n\nconst DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION = 1000;\nconst MAX_QUERY_THREADS_LIMIT = 25;\nexport const THREAD_MANAGER_INITIAL_STATE = {\n  active: false,\n  isThreadOrderStale: false,\n  threads: [],\n  unreadThreadCount: 0,\n  unseenThreadIds: [],\n  lastConnectionDropAt: null,\n  pagination: {\n    isLoading: false,\n    isLoadingNext: false,\n    nextCursor: null,\n  },\n  ready: false,\n};\n\nexport type ThreadManagerState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  active: boolean;\n  isThreadOrderStale: boolean;\n  lastConnectionDropAt: Date | null;\n  pagination: ThreadManagerPagination;\n  ready: boolean;\n  threads: Thread<SCG>[];\n  unreadThreadCount: number;\n  /**\n   * List of threads that haven't been loaded in the list, but have received new messages\n   * since the latest reload. Useful to display a banner prompting to reload the thread list.\n   */\n  unseenThreadIds: string[];\n};\n\nexport type ThreadManagerPagination = {\n  isLoading: boolean;\n  isLoadingNext: boolean;\n  nextCursor: string | null;\n};\n\nexport class ThreadManager<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<ThreadManagerState<SCG>>;\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n  private threadsByIdGetterCache: {\n    threads: ThreadManagerState<SCG>['threads'];\n    threadsById: Record<string, Thread<SCG> | undefined>;\n  };\n\n  constructor({ client }: { client: StreamChat<SCG> }) {\n    this.client = client;\n    this.state = new StateStore<ThreadManagerState<SCG>>(THREAD_MANAGER_INITIAL_STATE);\n\n    this.threadsByIdGetterCache = { threads: [], threadsById: {} };\n  }\n\n  public get threadsById() {\n    const { threads } = this.state.getLatestValue();\n\n    if (threads === this.threadsByIdGetterCache.threads) {\n      return this.threadsByIdGetterCache.threadsById;\n    }\n\n    const threadsById = threads.reduce<Record<string, Thread<SCG>>>((newThreadsById, thread) => {\n      newThreadsById[thread.id] = thread;\n      return newThreadsById;\n    }, {});\n\n    this.threadsByIdGetterCache.threads = threads;\n    this.threadsByIdGetterCache.threadsById = threadsById;\n\n    return threadsById;\n  }\n\n  public resetState = () => {\n    this.state.next(THREAD_MANAGER_INITIAL_STATE);\n  };\n\n  public activate = () => {\n    this.state.partialNext({ active: true });\n  };\n\n  public deactivate = () => {\n    this.state.partialNext({ active: false });\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) return;\n\n    this.unsubscribeFunctions.add(this.subscribeUnreadThreadsCountChange());\n    this.unsubscribeFunctions.add(this.subscribeManageThreadSubscriptions());\n    this.unsubscribeFunctions.add(this.subscribeReloadOnActivation());\n    this.unsubscribeFunctions.add(this.subscribeNewReplies());\n    this.unsubscribeFunctions.add(this.subscribeRecoverAfterConnectionDrop());\n    this.unsubscribeFunctions.add(this.subscribeChannelDeleted());\n  };\n\n  private subscribeUnreadThreadsCountChange = () => {\n    // initiate\n    const { unread_threads: unreadThreadCount = 0 } = (this.client.user as OwnUserResponse<SCG>) ?? {};\n    this.state.partialNext({ unreadThreadCount });\n\n    const unsubscribeFunctions = [\n      'health.check',\n      'notification.mark_read',\n      'notification.thread_message_new',\n      'notification.channel_deleted',\n    ].map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          const { unread_threads: unreadThreadCount } = event.me ?? event;\n          if (typeof unreadThreadCount === 'number') {\n            this.state.partialNext({ unreadThreadCount });\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  private subscribeChannelDeleted = () =>\n    this.client.on('notification.channel_deleted', (event) => {\n      const { cid } = event;\n      const { threads } = this.state.getLatestValue();\n\n      const newThreads = threads.filter((thread) => thread.channel.cid !== cid);\n      this.state.partialNext({ threads: newThreads });\n    }).unsubscribe;\n\n  private subscribeManageThreadSubscriptions = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ threads: nextValue.threads }),\n      ({ threads: nextThreads }, prev) => {\n        const { threads: prevThreads = [] } = prev ?? {};\n        // Thread instance was removed if there's no thread with the given id at all,\n        // or it was replaced with a new instance\n        const removedThreads = prevThreads.filter((thread) => thread !== this.threadsById[thread.id]);\n\n        nextThreads.forEach((thread) => thread.registerSubscriptions());\n        removedThreads.forEach((thread) => thread.unregisterSubscriptions());\n      },\n    );\n\n  private subscribeReloadOnActivation = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ active: nextValue.active }),\n      ({ active }) => {\n        if (active) this.reload();\n      },\n    );\n\n  private subscribeNewReplies = () =>\n    this.client.on('notification.thread_message_new', (event: Event<SCG>) => {\n      const parentId = event.message?.parent_id;\n      if (!parentId) return;\n\n      const { unseenThreadIds, ready } = this.state.getLatestValue();\n      if (!ready) return;\n\n      if (this.threadsById[parentId]) {\n        this.state.partialNext({ isThreadOrderStale: true });\n      } else if (!unseenThreadIds.includes(parentId)) {\n        this.state.partialNext({ unseenThreadIds: unseenThreadIds.concat(parentId) });\n      }\n    }).unsubscribe;\n\n  private subscribeRecoverAfterConnectionDrop = () => {\n    const unsubscribeConnectionDropped = this.client.on('connection.changed', (event) => {\n      if (event.online === false) {\n        this.state.next((current) =>\n          current.lastConnectionDropAt\n            ? current\n            : {\n                ...current,\n                lastConnectionDropAt: new Date(),\n              },\n        );\n      }\n    }).unsubscribe;\n\n    const throttledHandleConnectionRecovered = throttle(\n      () => {\n        const { lastConnectionDropAt } = this.state.getLatestValue();\n        if (!lastConnectionDropAt) return;\n        this.reload({ force: true });\n      },\n      DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION,\n      { trailing: true },\n    );\n\n    const unsubscribeConnectionRecovered = this.client.on('connection.recovered', throttledHandleConnectionRecovered)\n      .unsubscribe;\n\n    return () => {\n      unsubscribeConnectionDropped();\n      unsubscribeConnectionRecovered();\n    };\n  };\n\n  public unregisterSubscriptions = () => {\n    this.state.getLatestValue().threads.forEach((thread) => thread.unregisterSubscriptions());\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n\n  public reload = async ({ force = false } = {}) => {\n    const { threads, unseenThreadIds, isThreadOrderStale, pagination, ready } = this.state.getLatestValue();\n    if (pagination.isLoading) return;\n    if (!force && ready && !unseenThreadIds.length && !isThreadOrderStale) return;\n    const limit = threads.length + unseenThreadIds.length;\n\n    try {\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoading: true,\n        },\n      }));\n\n      const response = await this.queryThreads({\n        limit: Math.min(limit, MAX_QUERY_THREADS_LIMIT) || MAX_QUERY_THREADS_LIMIT,\n      });\n\n      const currentThreads = this.threadsById;\n      const nextThreads: Thread<SCG>[] = [];\n\n      for (const incomingThread of response.threads) {\n        const existingThread = currentThreads[incomingThread.id];\n\n        if (existingThread) {\n          // Reuse thread instances if possible\n          nextThreads.push(existingThread);\n          if (existingThread.hasStaleState) {\n            existingThread.hydrateState(incomingThread);\n          }\n        } else {\n          nextThreads.push(incomingThread);\n        }\n      }\n\n      this.state.next((current) => ({\n        ...current,\n        threads: nextThreads,\n        unseenThreadIds: [],\n        isThreadOrderStale: false,\n        pagination: {\n          ...current.pagination,\n          isLoading: false,\n          nextCursor: response.next ?? null,\n        },\n        ready: true,\n      }));\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoading: false,\n        },\n      }));\n    }\n  };\n\n  public queryThreads = (options: QueryThreadsOptions = {}) => {\n    return this.client.queryThreads({\n      limit: 25,\n      participant_limit: 10,\n      reply_limit: 10,\n      watch: true,\n      ...options,\n    });\n  };\n\n  public loadNextPage = async (options: Omit<QueryThreadsOptions, 'next'> = {}) => {\n    const { pagination } = this.state.getLatestValue();\n\n    if (pagination.isLoadingNext || !pagination.nextCursor) return;\n\n    try {\n      this.state.partialNext({ pagination: { ...pagination, isLoadingNext: true } });\n\n      const response = await this.queryThreads({\n        ...options,\n        next: pagination.nextCursor,\n      });\n\n      this.state.next((current) => ({\n        ...current,\n        threads: response.threads.length ? current.threads.concat(response.threads) : current.threads,\n        pagination: {\n          ...current.pagination,\n          nextCursor: response.next ?? null,\n          isLoadingNext: false,\n        },\n      }));\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoadingNext: false,\n        },\n      }));\n    }\n  };\n}\n", "import { StateStore } from './store';\nimport type { StreamChat } from './client';\nimport type {\n  DefaultGenerics,\n  Event,\n  ExtendableGenerics,\n  PartialPollUpdate,\n  PollAnswer,\n  PollData,\n  PollEnrichData,\n  PollOptionData,\n  PollResponse,\n  PollVote,\n  QueryVotesFilters,\n  QueryVotesOptions,\n  VoteSort,\n} from './types';\n\ntype PollEvent<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  cid: string;\n  created_at: string;\n  poll: PollResponse<SCG>;\n};\n\ntype PollUpdatedEvent<SCG extends ExtendableGenerics = DefaultGenerics> = PollEvent<SCG> & {\n  type: 'poll.updated';\n};\n\ntype PollClosedEvent<SCG extends ExtendableGenerics = DefaultGenerics> = PollEvent<SCG> & {\n  type: 'poll.closed';\n};\n\ntype PollVoteEvent<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  cid: string;\n  created_at: string;\n  poll: PollResponse<SCG>;\n  poll_vote: PollVote<SCG> | PollAnswer<SCG>;\n};\n\ntype PollVoteCastedEvent<SCG extends ExtendableGenerics = DefaultGenerics> = PollVoteEvent<SCG> & {\n  type: 'poll.vote_casted';\n};\n\ntype PollVoteCastedChanged<SCG extends ExtendableGenerics = DefaultGenerics> = PollVoteEvent<SCG> & {\n  type: 'poll.vote_removed';\n};\n\ntype PollVoteCastedRemoved<SCG extends ExtendableGenerics = DefaultGenerics> = PollVoteEvent<SCG> & {\n  type: 'poll.vote_removed';\n};\n\nconst isPollUpdatedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollUpdatedEvent<SCG> => e.type === 'poll.updated';\nconst isPollClosedEventEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollClosedEvent<SCG> => e.type === 'poll.closed';\nconst isPollVoteCastedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollVoteCastedEvent<SCG> => e.type === 'poll.vote_casted';\nconst isPollVoteChangedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollVoteCastedChanged<SCG> => e.type === 'poll.vote_changed';\nconst isPollVoteRemovedEvent = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  e: Event<SCG>,\n): e is PollVoteCastedRemoved<SCG> => e.type === 'poll.vote_removed';\n\nexport const isVoteAnswer = <SCG extends ExtendableGenerics = DefaultGenerics>(\n  vote: PollVote<SCG> | PollAnswer<SCG>,\n): vote is PollAnswer<SCG> => !!(vote as PollAnswer<SCG>)?.answer_text;\n\nexport type PollAnswersQueryParams = {\n  filter?: QueryVotesFilters;\n  options?: QueryVotesOptions;\n  sort?: VoteSort;\n};\n\nexport type PollOptionVotesQueryParams = {\n  filter: { option_id: string } & QueryVotesFilters;\n  options?: QueryVotesOptions;\n  sort?: VoteSort;\n};\n\ntype OptionId = string;\n\nexport type PollState<SCG extends ExtendableGenerics = DefaultGenerics> = SCG['pollType'] &\n  Omit<PollResponse<SCG>, 'own_votes' | 'id'> & {\n    lastActivityAt: Date; // todo: would be ideal to get this from the BE\n    maxVotedOptionIds: OptionId[];\n    ownVotesByOptionId: Record<OptionId, PollVote<SCG>>;\n    ownAnswer?: PollAnswer; // each user can have only one answer\n  };\n\ntype PollInitOptions<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  client: StreamChat<SCG>;\n  poll: PollResponse<SCG>;\n};\n\nexport class Poll<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<PollState<SCG>>;\n  public id: string;\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n\n  constructor({ client, poll }: PollInitOptions<SCG>) {\n    this.client = client;\n    this.id = poll.id;\n\n    this.state = new StateStore<PollState<SCG>>(this.getInitialStateFromPollResponse(poll));\n  }\n\n  private getInitialStateFromPollResponse = (poll: PollInitOptions<SCG>['poll']) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { own_votes, id, ...pollResponseForState } = poll;\n    const { ownAnswer, ownVotes } = own_votes?.reduce<{ ownVotes: PollVote<SCG>[]; ownAnswer?: PollAnswer }>(\n      (acc, voteOrAnswer) => {\n        if (isVoteAnswer(voteOrAnswer)) {\n          acc.ownAnswer = voteOrAnswer;\n        } else {\n          acc.ownVotes.push(voteOrAnswer);\n        }\n        return acc;\n      },\n      { ownVotes: [] },\n    ) ?? { ownVotes: [] };\n\n    return {\n      ...pollResponseForState,\n      lastActivityAt: new Date(),\n      maxVotedOptionIds: getMaxVotedOptionIds(\n        pollResponseForState.vote_counts_by_option as PollResponse<SCG>['vote_counts_by_option'],\n      ),\n      ownAnswer,\n      ownVotesByOptionId: getOwnVotesByOptionId(ownVotes),\n    };\n  };\n\n  public reinitializeState = (poll: PollInitOptions<SCG>['poll']) => {\n    this.state.partialNext(this.getInitialStateFromPollResponse(poll));\n  };\n\n  get data(): PollState<SCG> {\n    return this.state.getLatestValue();\n  }\n\n  public handlePollUpdated = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollUpdatedEvent(event)) return;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...pollData } = extractPollData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({ ...pollData, lastActivityAt: new Date(event.created_at) });\n  };\n\n  public handlePollClosed = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollClosedEventEvent(event)) return;\n    // @ts-ignore\n    this.state.partialNext({ is_closed: true, lastActivityAt: new Date(event.created_at) });\n  };\n\n  public handleVoteCasted = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteCastedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    const ownVotesByOptionId = currentState.ownVotesByOptionId;\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isOwnVote) {\n      if (isVoteAnswer(event.poll_vote)) {\n        ownAnswer = event.poll_vote;\n      } else if (event.poll_vote.option_id) {\n        ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n      }\n    }\n\n    if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = [event.poll_vote, ...latestAnswers];\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n  };\n\n  public handleVoteChanged = (event: Event<SCG>) => {\n    // this event is triggered only when event.poll.enforce_unique_vote === true\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteChangedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    let ownVotesByOptionId = currentState.ownVotesByOptionId;\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isOwnVote) {\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [event.poll_vote, ...latestAnswers.filter((answer) => answer.id !== event.poll_vote.id)];\n        ownAnswer = event.poll_vote;\n      } else if (event.poll_vote.option_id) {\n        if (event.poll.enforce_unique_votes) {\n          ownVotesByOptionId = { [event.poll_vote.option_id]: event.poll_vote };\n        } else {\n          ownVotesByOptionId = Object.entries(ownVotesByOptionId).reduce<Record<OptionId, PollVote<SCG>>>(\n            (acc, [optionId, vote]) => {\n              if (optionId !== event.poll_vote.option_id && vote.id === event.poll_vote.id) {\n                return acc;\n              }\n              acc[optionId] = vote;\n              return acc;\n            },\n            {},\n          );\n          ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n        }\n\n        if (ownAnswer?.id === event.poll_vote.id) {\n          ownAnswer = undefined;\n        }\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n    } else if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = [event.poll_vote, ...latestAnswers];\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n  };\n\n  public handleVoteRemoved = (event: Event<SCG>) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteRemovedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    const ownVotesByOptionId = { ...currentState.ownVotesByOptionId };\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = latestAnswers.filter((answer) => answer.id !== event.poll_vote.id);\n      if (isOwnVote) {\n        ownAnswer = undefined;\n      }\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      if (isOwnVote && event.poll_vote.option_id) {\n        delete ownVotesByOptionId[event.poll_vote.option_id];\n      }\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    // @ts-ignore\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n  };\n\n  query = async (id: string) => {\n    const { poll } = await this.client.getPoll(id);\n    // @ts-ignore\n    this.state.partialNext({ ...poll, lastActivityAt: new Date() });\n    return poll;\n  };\n\n  update = async (data: Exclude<PollData<SCG>, 'id'>) => {\n    return await this.client.updatePoll({ ...data, id: this.id });\n  };\n\n  partialUpdate = async (partialPollObject: PartialPollUpdate<SCG>) => {\n    return await this.client.partialUpdatePoll(this.id as string, partialPollObject);\n  };\n\n  close = async () => {\n    return await this.client.closePoll(this.id as string);\n  };\n\n  delete = async () => {\n    return await this.client.deletePoll(this.id as string);\n  };\n\n  createOption = async (option: PollOptionData) => {\n    return await this.client.createPollOption(this.id as string, option);\n  };\n\n  updateOption = async (option: PollOptionData) => {\n    return await this.client.updatePollOption(this.id as string, option);\n  };\n\n  deleteOption = async (optionId: string) => {\n    return await this.client.deletePollOption(this.id as string, optionId);\n  };\n\n  castVote = async (optionId: string, messageId: string) => {\n    const { max_votes_allowed, ownVotesByOptionId } = this.data;\n\n    const reachedVoteLimit = max_votes_allowed && max_votes_allowed === Object.keys(ownVotesByOptionId).length;\n\n    if (reachedVoteLimit) {\n      let oldestVote = Object.values(ownVotesByOptionId)[0];\n      Object.values(ownVotesByOptionId)\n        .slice(1)\n        .forEach((vote) => {\n          if (!oldestVote?.created_at || new Date(vote.created_at) < new Date(oldestVote.created_at)) {\n            oldestVote = vote;\n          }\n        });\n      if (oldestVote?.id) {\n        await this.removeVote(oldestVote.id, messageId);\n      }\n    }\n    return await this.client.castPollVote(messageId, this.id as string, { option_id: optionId });\n  };\n\n  removeVote = async (voteId: string, messageId: string) => {\n    return await this.client.removePollVote(messageId, this.id as string, voteId);\n  };\n\n  addAnswer = async (answerText: string, messageId: string) => {\n    return await this.client.addPollAnswer(messageId, this.id as string, answerText);\n  };\n\n  removeAnswer = async (answerId: string, messageId: string) => {\n    return await this.client.removePollVote(messageId, this.id as string, answerId);\n  };\n\n  queryAnswers = async (params: PollAnswersQueryParams) => {\n    return await this.client.queryPollAnswers(this.id as string, params.filter, params.sort, params.options);\n  };\n\n  queryOptionVotes = async (params: PollOptionVotesQueryParams) => {\n    return await this.client.queryPollVotes(this.id as string, params.filter, params.sort, params.options);\n  };\n}\n\nfunction getMaxVotedOptionIds(voteCountsByOption: PollResponse['vote_counts_by_option']) {\n  let maxVotes = 0;\n  let winningOptions: string[] = [];\n  for (const [id, count] of Object.entries(voteCountsByOption ?? {})) {\n    if (count > maxVotes) {\n      winningOptions = [id];\n      maxVotes = count;\n    } else if (count === maxVotes) {\n      winningOptions.push(id);\n    }\n  }\n  return winningOptions;\n}\n\nfunction getOwnVotesByOptionId<SCG extends ExtendableGenerics = DefaultGenerics>(ownVotes: PollVote<SCG>[]) {\n  return !ownVotes\n    ? ({} as Record<OptionId, PollVote<SCG>>)\n    : ownVotes.reduce<Record<OptionId, PollVote<SCG>>>((acc, vote) => {\n        if (isVoteAnswer(vote) || !vote.option_id) return acc;\n        acc[vote.option_id] = vote;\n        return acc;\n      }, {});\n}\n\nexport function extractPollData<SCG extends ExtendableGenerics = DefaultGenerics>(\n  pollResponse: PollResponse<SCG>,\n): PollData<SCG> {\n  return {\n    allow_answers: pollResponse.allow_answers,\n    allow_user_suggested_options: pollResponse.allow_user_suggested_options,\n    description: pollResponse.description,\n    enforce_unique_vote: pollResponse.enforce_unique_vote,\n    id: pollResponse.id,\n    is_closed: pollResponse.is_closed,\n    max_votes_allowed: pollResponse.max_votes_allowed,\n    name: pollResponse.name,\n    options: pollResponse.options,\n    voting_visibility: pollResponse.voting_visibility,\n  };\n}\n\nexport function extractPollEnrichedData<SCG extends ExtendableGenerics = DefaultGenerics>(\n  pollResponse: PollResponse<SCG>,\n): Omit<PollEnrichData<SCG>, 'own_votes' | 'latest_answers'> {\n  return {\n    answers_count: pollResponse.answers_count,\n    latest_votes_by_option: pollResponse.latest_votes_by_option,\n    vote_count: pollResponse.vote_count,\n    vote_counts_by_option: pollResponse.vote_counts_by_option,\n  };\n}\n", "import type { StreamChat } from './client';\nimport type {\n  CreatePollData,\n  DefaultGenerics,\n  ExtendableGenerics,\n  MessageResponse,\n  PollResponse,\n  PollSort,\n  QueryPollsFilters,\n  QueryPollsOptions,\n} from './types';\nimport { Poll } from './poll';\nimport { FormatMessageResponse } from './types';\nimport { formatMessage } from './utils';\n\nexport class PollManager<SCG extends ExtendableGenerics = DefaultGenerics> {\n  private client: StreamChat<SCG>;\n  // The pollCache contains only polls that have been created and sent as messages\n  // (i.e only polls that are coupled with a message, can be voted on and require a\n  // reactive state). It shall work as a basic look-up table for our SDK to be able\n  // to quickly consume poll state that will be reactive even without the polls being\n  // rendered within the UI.\n  private pollCache = new Map<string, Poll<SCG>>();\n  private unsubscribeFunctions: Set<() => void> = new Set();\n\n  constructor({ client }: { client: StreamChat<SCG> }) {\n    this.client = client;\n  }\n\n  get data(): Map<string, Poll<SCG>> {\n    return this.pollCache;\n  }\n\n  public fromState = (id: string) => {\n    return this.pollCache.get(id);\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) {\n      // Already listening for events and changes\n      return;\n    }\n\n    this.unsubscribeFunctions.add(this.subscribeMessageNew());\n    this.unsubscribeFunctions.add(this.subscribePollUpdated());\n    this.unsubscribeFunctions.add(this.subscribePollClosed());\n    this.unsubscribeFunctions.add(this.subscribeVoteCasted());\n    this.unsubscribeFunctions.add(this.subscribeVoteChanged());\n    this.unsubscribeFunctions.add(this.subscribeVoteRemoved());\n  };\n\n  public unregisterSubscriptions = () => {\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n\n  public createPoll = async (poll: CreatePollData<SCG>) => {\n    const { poll: createdPoll } = await this.client.createPoll(poll);\n\n    return new Poll({ client: this.client, poll: createdPoll });\n  };\n\n  public getPoll = async (id: string) => {\n    const cachedPoll = this.fromState(id);\n\n    // optimistically return the cached poll if it exists and update in the background\n    if (cachedPoll) {\n      this.client.getPoll(id).then(({ poll }) => this.setOrOverwriteInCache(poll, true));\n      return cachedPoll;\n    }\n    // fetch it, write to the cache and return otherwise\n    const { poll } = await this.client.getPoll(id);\n\n    this.setOrOverwriteInCache(poll);\n\n    return this.fromState(id);\n  };\n\n  public queryPolls = async (filter: QueryPollsFilters, sort: PollSort = [], options: QueryPollsOptions = {}) => {\n    const { polls, next } = await this.client.queryPolls(filter, sort, options);\n\n    const pollInstances = polls.map((poll) => {\n      this.setOrOverwriteInCache(poll, true);\n\n      return this.fromState(poll.id);\n    });\n\n    return {\n      polls: pollInstances,\n      next,\n    };\n  };\n\n  public hydratePollCache = (\n    messages: FormatMessageResponse<SCG>[] | MessageResponse<SCG>[],\n    overwriteState?: boolean,\n  ) => {\n    for (const message of messages) {\n      if (!message.poll) {\n        continue;\n      }\n      const pollResponse = message.poll as PollResponse<SCG>;\n      this.setOrOverwriteInCache(pollResponse, overwriteState);\n    }\n  };\n\n  private setOrOverwriteInCache = (pollResponse: PollResponse<SCG>, overwriteState?: boolean) => {\n    if (!this.client._cacheEnabled()) {\n      return;\n    }\n    const pollFromCache = this.fromState(pollResponse.id);\n    if (!pollFromCache) {\n      const poll = new Poll<SCG>({ client: this.client, poll: pollResponse });\n      this.pollCache.set(poll.id, poll);\n    } else if (overwriteState) {\n      pollFromCache.reinitializeState(pollResponse);\n    }\n  };\n\n  private subscribePollUpdated = () => {\n    return this.client.on('poll.updated', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollUpdated(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribePollClosed = () => {\n    return this.client.on('poll.closed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollClosed(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeVoteCasted = () => {\n    return this.client.on('poll.vote_casted', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteCasted(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeVoteChanged = () => {\n    return this.client.on('poll.vote_changed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteChanged(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeVoteRemoved = () => {\n    return this.client.on('poll.vote_removed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteRemoved(event);\n      }\n    }).unsubscribe;\n  };\n\n  private subscribeMessageNew = () => {\n    return this.client.on('message.new', (event) => {\n      const { message } = event;\n      if (message) {\n        const formattedMessage = formatMessage(message);\n        this.hydratePollCache([formattedMessage]);\n      }\n    }).unsubscribe;\n  };\n}\n", "import type { StreamChat } from './client';\nimport type {\n  DefaultGenerics,\n  ExtendableGenerics,\n  Event,\n  ChannelOptions,\n  ChannelStateOptions,\n  ChannelFilters,\n  ChannelSort,\n} from './types';\nimport { StateStore, ValueOrPatch, isPatch } from './store';\nimport { Channel } from './channel';\nimport {\n  extractSortValue,\n  findLastPinnedChannelIndex,\n  getAndWatchChannel,\n  isChannelArchived,\n  isChannelPinned,\n  promoteChannel,\n  shouldConsiderArchivedChannels,\n  shouldConsiderPinnedChannels,\n  uniqBy,\n} from './utils';\n\nexport type ChannelManagerPagination<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  filters: ChannelFilters<SCG>;\n  hasNext: boolean;\n  isLoading: boolean;\n  isLoadingNext: boolean;\n  options: ChannelOptions;\n  sort: ChannelSort<SCG>;\n};\n\nexport type ChannelManagerState<SCG extends ExtendableGenerics = DefaultGenerics> = {\n  channels: Channel<SCG>[];\n  /**\n   * This value will become true the first time queryChannels is successfully executed and\n   * will remain false otherwise. It's used as a control property regarding whether the list\n   * has been initialized yet (i.e a query has already been done at least once) or not. We do\n   * this to prevent state.channels from being forced to be nullable.\n   */\n  initialized: boolean;\n  pagination: ChannelManagerPagination<SCG>;\n};\n\nexport type ChannelSetterParameterType<SCG extends ExtendableGenerics = DefaultGenerics> = ValueOrPatch<\n  ChannelManagerState<SCG>['channels']\n>;\nexport type ChannelSetterType<SCG extends ExtendableGenerics = DefaultGenerics> = (\n  arg: ChannelSetterParameterType<SCG>,\n) => void;\n\nexport type GenericEventHandlerType<T extends unknown[]> = (\n  ...args: T\n) => void | (() => void) | ((...args: T) => Promise<void>) | Promise<void>;\nexport type EventHandlerType<SCG extends ExtendableGenerics = DefaultGenerics> = GenericEventHandlerType<[Event<SCG>]>;\nexport type EventHandlerOverrideType<SCG extends ExtendableGenerics = DefaultGenerics> = GenericEventHandlerType<\n  [ChannelSetterType<SCG>, Event<SCG>]\n>;\n\nexport type ChannelManagerEventTypes =\n  | 'notification.added_to_channel'\n  | 'notification.message_new'\n  | 'notification.removed_from_channel'\n  | 'message.new'\n  | 'member.updated'\n  | 'channel.deleted'\n  | 'channel.hidden'\n  | 'channel.truncated'\n  | 'channel.visible'\n  | 'channel.updated';\n\nexport type ChannelManagerEventHandlerNames =\n  | 'channelDeletedHandler'\n  | 'channelHiddenHandler'\n  | 'channelTruncatedHandler'\n  | 'channelUpdatedHandler'\n  | 'channelVisibleHandler'\n  | 'newMessageHandler'\n  | 'memberUpdatedHandler'\n  | 'notificationAddedToChannelHandler'\n  | 'notificationNewMessageHandler'\n  | 'notificationRemovedFromChannelHandler';\n\nexport type ChannelManagerEventHandlerOverrides<SCG extends ExtendableGenerics = DefaultGenerics> = Partial<\n  Record<ChannelManagerEventHandlerNames, EventHandlerOverrideType<SCG>>\n>;\n\nexport const channelManagerEventToHandlerMapping: {\n  [key in ChannelManagerEventTypes]: ChannelManagerEventHandlerNames;\n} = {\n  'channel.deleted': 'channelDeletedHandler',\n  'channel.hidden': 'channelHiddenHandler',\n  'channel.truncated': 'channelTruncatedHandler',\n  'channel.updated': 'channelUpdatedHandler',\n  'channel.visible': 'channelVisibleHandler',\n  'message.new': 'newMessageHandler',\n  'member.updated': 'memberUpdatedHandler',\n  'notification.added_to_channel': 'notificationAddedToChannelHandler',\n  'notification.message_new': 'notificationNewMessageHandler',\n  'notification.removed_from_channel': 'notificationRemovedFromChannelHandler',\n};\n\nexport type ChannelManagerOptions = {\n  /**\n   * Aborts a channels query that is already in progress and runs the new one.\n   */\n  abortInFlightQuery?: boolean;\n  /**\n   * Allows channel promotion to be applied where applicable for channels that are\n   * currently not part of the channel list within the state. A good example of\n   * this would be a channel that is being watched and it receives a new message,\n   * but is not part of the list initially.\n   */\n  allowNotLoadedChannelPromotionForEvent?: {\n    'channel.visible': boolean;\n    'message.new': boolean;\n    'notification.added_to_channel': boolean;\n    'notification.message_new': boolean;\n  };\n  /**\n   * Allows us to lock the order of channels within the list. Any event that would\n   * change the order of channels within the list will do nothing.\n   */\n  lockChannelOrder?: boolean;\n};\n\nexport const DEFAULT_CHANNEL_MANAGER_OPTIONS = {\n  abortInFlightQuery: false,\n  allowNotLoadedChannelPromotionForEvent: {\n    'channel.visible': true,\n    'message.new': true,\n    'notification.added_to_channel': true,\n    'notification.message_new': true,\n  },\n  lockChannelOrder: false,\n};\n\nexport const DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = {\n  limit: 10,\n  offset: 0,\n};\n\n/**\n * A class that manages a list of channels and changes it based on configuration and WS events. The\n * list of channels is reactive as well as the pagination and it can be subscribed to for state updates.\n *\n * @internal\n */\nexport class ChannelManager<SCG extends ExtendableGenerics = DefaultGenerics> {\n  public readonly state: StateStore<ChannelManagerState<SCG>>;\n  private client: StreamChat<SCG>;\n  private unsubscribeFunctions: Set<() => void> = new Set();\n  private eventHandlers: Map<string, EventHandlerType<SCG>> = new Map();\n  private eventHandlerOverrides: Map<string, EventHandlerOverrideType<SCG>> = new Map();\n  private options: ChannelManagerOptions = {};\n  private stateOptions: ChannelStateOptions = {};\n\n  constructor({\n    client,\n    eventHandlerOverrides = {},\n    options = {},\n  }: {\n    client: StreamChat<SCG>;\n    eventHandlerOverrides?: ChannelManagerEventHandlerOverrides<SCG>;\n    options?: ChannelManagerOptions;\n  }) {\n    this.client = client;\n    this.state = new StateStore<ChannelManagerState<SCG>>({\n      channels: [],\n      pagination: {\n        isLoading: false,\n        isLoadingNext: false,\n        hasNext: false,\n        filters: {},\n        sort: {},\n        options: DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n      },\n      initialized: false,\n    });\n    this.setEventHandlerOverrides(eventHandlerOverrides);\n    this.setOptions(options);\n    this.eventHandlers = new Map(\n      Object.entries<EventHandlerType<SCG>>({\n        channelDeletedHandler: this.channelDeletedHandler,\n        channelHiddenHandler: this.channelHiddenHandler,\n        channelVisibleHandler: this.channelVisibleHandler,\n        memberUpdatedHandler: this.memberUpdatedHandler,\n        newMessageHandler: this.newMessageHandler,\n        notificationAddedToChannelHandler: this.notificationAddedToChannelHandler,\n        notificationNewMessageHandler: this.notificationNewMessageHandler,\n        notificationRemovedFromChannelHandler: this.notificationRemovedFromChannelHandler,\n      }),\n    );\n  }\n\n  public setChannels = (valueOrFactory: ChannelSetterParameterType<SCG>) => {\n    this.state.next((current) => {\n      const { channels: currentChannels } = current;\n      const newChannels = isPatch(valueOrFactory) ? valueOrFactory(currentChannels) : valueOrFactory;\n\n      // If the references between the two values are the same, just return the\n      // current state; otherwise trigger a state change.\n      if (currentChannels === newChannels) {\n        return current;\n      }\n      return { ...current, channels: newChannels };\n    });\n  };\n\n  public setEventHandlerOverrides = (eventHandlerOverrides: ChannelManagerEventHandlerOverrides<SCG> = {}) => {\n    const truthyEventHandlerOverrides = Object.entries(eventHandlerOverrides).reduce<\n      Partial<ChannelManagerEventHandlerOverrides<SCG>>\n    >((acc, [key, value]) => {\n      if (value) {\n        acc[key as keyof ChannelManagerEventHandlerOverrides<SCG>] = value;\n      }\n      return acc;\n    }, {});\n    this.eventHandlerOverrides = new Map(Object.entries<EventHandlerOverrideType<SCG>>(truthyEventHandlerOverrides));\n  };\n\n  public setOptions = (options: ChannelManagerOptions = {}) => {\n    this.options = { ...DEFAULT_CHANNEL_MANAGER_OPTIONS, ...options };\n  };\n\n  public queryChannels = async (\n    filters: ChannelFilters<SCG>,\n    sort: ChannelSort<SCG> = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) => {\n    const { offset, limit } = { ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS, ...options };\n    const {\n      pagination: { isLoading },\n    } = this.state.getLatestValue();\n\n    if (isLoading && !this.options.abortInFlightQuery) {\n      return;\n    }\n\n    try {\n      this.stateOptions = stateOptions;\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: {\n          ...currentState.pagination,\n          isLoading: true,\n          isLoadingNext: false,\n          filters,\n          sort,\n          options,\n        },\n      }));\n\n      const channels = await this.client.queryChannels(filters, sort, options, stateOptions);\n      const newOffset = offset + (channels?.length ?? 0);\n      const newOptions = { ...options, offset: newOffset };\n      const { pagination } = this.state.getLatestValue();\n\n      this.state.partialNext({\n        channels,\n        pagination: {\n          ...pagination,\n          hasNext: (channels?.length ?? 0) >= limit,\n          isLoading: false,\n          options: newOptions,\n        },\n        initialized: true,\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: { ...currentState.pagination, isLoading: false },\n      }));\n      throw error;\n    }\n  };\n\n  public loadNext = async () => {\n    const { pagination, initialized } = this.state.getLatestValue();\n    const { filters, sort, options, isLoadingNext, hasNext } = pagination;\n\n    if (!initialized || isLoadingNext || !hasNext) {\n      return;\n    }\n\n    try {\n      const { offset, limit } = { ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS, ...options };\n      this.state.partialNext({\n        pagination: { ...pagination, isLoading: false, isLoadingNext: true },\n      });\n      const nextChannels = await this.client.queryChannels(filters, sort, options, this.stateOptions);\n      const { channels } = this.state.getLatestValue();\n      const newOffset = offset + (nextChannels?.length ?? 0);\n      const newOptions = { ...options, offset: newOffset };\n\n      this.state.partialNext({\n        channels: uniqBy<Channel<SCG>>([...(channels || []), ...nextChannels], 'cid'),\n        pagination: {\n          ...pagination,\n          hasNext: (nextChannels?.length ?? 0) >= limit,\n          isLoading: false,\n          isLoadingNext: false,\n          options: newOptions,\n        },\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: { ...currentState.pagination, isLoadingNext: false },\n      }));\n      throw error;\n    }\n  };\n\n  private notificationAddedToChannelHandler = async (event: Event<SCG>) => {\n    const { id, type, members } = event?.channel ?? {};\n\n    if (!type || !this.options.allowNotLoadedChannelPromotionForEvent?.['notification.added_to_channel']) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id,\n      members: members?.reduce<string[]>((acc, { user, user_id }) => {\n        const userId = user_id || user?.id;\n        if (userId) {\n          acc.push(userId);\n        }\n        return acc;\n      }, []),\n      type,\n    });\n\n    const { pagination, channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n\n    const { sort } = pagination ?? {};\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private channelDeletedHandler = (event: Event<SCG>) => {\n    const { channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n\n    const newChannels = [...channels];\n    const channelIndex = newChannels.findIndex((channel) => channel.cid === (event.cid || event.channel?.cid));\n\n    if (channelIndex < 0) {\n      return;\n    }\n\n    newChannels.splice(channelIndex, 1);\n    this.setChannels(newChannels);\n  };\n\n  private channelHiddenHandler = this.channelDeletedHandler;\n\n  private newMessageHandler = (event: Event<SCG>) => {\n    const { pagination, channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n    const { filters, sort } = pagination ?? {};\n\n    const channelType = event.channel_type;\n    const channelId = event.channel_id;\n\n    if (!channelType || !channelId) {\n      return;\n    }\n\n    const targetChannel = this.client.channel(channelType, channelId);\n    const targetChannelIndex = channels.indexOf(targetChannel);\n    const targetChannelExistsWithinList = targetChannelIndex >= 0;\n\n    const isTargetChannelPinned = isChannelPinned(targetChannel);\n    const isTargetChannelArchived = isChannelArchived(targetChannel);\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n\n    if (\n      // filter is defined, target channel is archived and filter option is set to false\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      // filter is defined, target channel isn't archived and filter option is set to true\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      // sort option is defined, target channel is pinned\n      (considerPinnedChannels && isTargetChannelPinned) ||\n      // list order is locked\n      this.options.lockChannelOrder ||\n      // target channel is not within the loaded list and loading from cache is disallowed\n      (!targetChannelExistsWithinList && !this.options.allowNotLoadedChannelPromotionForEvent?.['message.new'])\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: targetChannel,\n        channelToMoveIndexWithinChannels: targetChannelIndex,\n        sort,\n      }),\n    );\n  };\n\n  private notificationNewMessageHandler = async (event: Event<SCG>) => {\n    const { id, type } = event?.channel ?? {};\n\n    if (!id || !type) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id,\n      type,\n    });\n\n    const { channels, pagination } = this.state.getLatestValue();\n    const { filters, sort } = pagination ?? {};\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const isTargetChannelArchived = isChannelArchived(channel);\n\n    if (\n      !channels ||\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.['notification.message_new']\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private channelVisibleHandler = async (event: Event<SCG>) => {\n    const { channel_type: channelType, channel_id: channelId } = event;\n\n    if (!channelType || !channelId) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id: event.channel_id,\n      type: event.channel_type,\n    });\n\n    const { channels, pagination } = this.state.getLatestValue();\n    const { sort, filters } = pagination ?? {};\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const isTargetChannelArchived = isChannelArchived(channel);\n\n    if (\n      !channels ||\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.['channel.visible']\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private notificationRemovedFromChannelHandler = this.channelDeletedHandler;\n\n  private memberUpdatedHandler = (event: Event<SCG>) => {\n    const { pagination, channels } = this.state.getLatestValue();\n    const { filters, sort } = pagination;\n    if (\n      !event.member?.user ||\n      event.member.user.id !== this.client.userID ||\n      !event.channel_type ||\n      !event.channel_id\n    ) {\n      return;\n    }\n    const channelType = event.channel_type;\n    const channelId = event.channel_id;\n\n    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const pinnedAtSort = extractSortValue({ atIndex: 0, sort, targetKey: 'pinned_at' });\n\n    if (!channels || (!considerPinnedChannels && !considerArchivedChannels) || this.options.lockChannelOrder) {\n      return;\n    }\n\n    const targetChannel = this.client.channel(channelType, channelId);\n    // assumes that channel instances are not changing\n    const targetChannelIndex = channels.indexOf(targetChannel);\n    const targetChannelExistsWithinList = targetChannelIndex >= 0;\n\n    const isTargetChannelPinned = isChannelPinned(targetChannel);\n    const isTargetChannelArchived = isChannelArchived(targetChannel);\n\n    const newChannels = [...channels];\n\n    if (targetChannelExistsWithinList) {\n      newChannels.splice(targetChannelIndex, 1);\n    }\n\n    // handle archiving (remove channel)\n    if (\n      // When archived filter true, and channel is unarchived\n      (considerArchivedChannels && !isTargetChannelArchived && filters?.archived) ||\n      // When archived filter false, and channel is archived\n      (considerArchivedChannels && isTargetChannelArchived && !filters?.archived)\n    ) {\n      this.setChannels(newChannels);\n      return;\n    }\n\n    // handle pinning\n    let lastPinnedChannelIndex: number | null = null;\n\n    if (pinnedAtSort === 1 || (pinnedAtSort === -1 && !isTargetChannelPinned)) {\n      lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });\n    }\n    const newTargetChannelIndex = typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0;\n\n    // skip state update if the position of the channel does not change\n    if (channels[newTargetChannelIndex] === targetChannel) {\n      return;\n    }\n\n    newChannels.splice(newTargetChannelIndex, 0, targetChannel);\n    this.setChannels(newChannels);\n  };\n\n  private subscriptionOrOverride = (event: Event<SCG>) => {\n    const handlerName = channelManagerEventToHandlerMapping[event.type as ChannelManagerEventTypes];\n    const defaultEventHandler = this.eventHandlers.get(handlerName);\n    const eventHandlerOverride = this.eventHandlerOverrides.get(handlerName);\n    if (eventHandlerOverride && typeof eventHandlerOverride === 'function') {\n      eventHandlerOverride(this.setChannels, event);\n      return;\n    }\n\n    if (defaultEventHandler && typeof defaultEventHandler === 'function') {\n      defaultEventHandler(event);\n    }\n  };\n\n  public registerSubscriptions = () => {\n    if (this.unsubscribeFunctions.size) {\n      // Already listening for events and changes\n      return;\n    }\n\n    for (const eventType of Object.keys(channelManagerEventToHandlerMapping)) {\n      this.unsubscribeFunctions.add(this.client.on(eventType, this.subscriptionOrOverride).unsubscribe);\n    }\n  };\n\n  public unregisterSubscriptions = () => {\n    this.unsubscribeFunctions.forEach((cleanupFunction) => cleanupFunction());\n    this.unsubscribeFunctions.clear();\n  };\n}\n", "/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport https from 'https';\nimport WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { CheckSignature, DevToken, JWTUserToken } from './signing';\nimport { TokenManager } from './token_manager';\nimport { WSConnectionFallback } from './connection_fallback';\nimport { Campaign } from './campaign';\nimport { Segment } from './segment';\nimport { isErrorResponse, isWSFailure } from './errors';\nimport {\n  addFileToFormData,\n  axiosParamsSerializer,\n  chatCodes,\n  generateChannelTempCid,\n  isFunction,\n  isOnline,\n  isOwnUserBaseProperty,\n  messageSetPagination,\n  normalizeQuerySort,\n  randomId,\n  retryInterval,\n  sleep,\n} from './utils';\n\nimport {\n  APIErrorResponse,\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BannedUsersFilters,\n  BannedUsersPaginationOptions,\n  BannedUsersResponse,\n  BannedUsersSort,\n  BanUserOptions,\n  BaseDeviceFields,\n  BlockList,\n  BlockListResponse,\n  BlockUserAPIResponse,\n  CampaignData,\n  CampaignFilters,\n  CampaignQueryOptions,\n  CampaignResponse,\n  CampaignSort,\n  CastVoteAPIResponse,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelResponse,\n  ChannelSort,\n  ChannelStateOptions,\n  CheckPushResponse,\n  CheckSNSResponse,\n  CheckSQSResponse,\n  Configs,\n  ConnectAPIResponse,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CreateImportOptions,\n  CreateImportResponse,\n  CreateImportURLResponse,\n  CreatePollAPIResponse,\n  CreatePollData,\n  CreatePollOptionAPIResponse,\n  CustomPermissionOptions,\n  DeactivateUsersOptions,\n  DefaultGenerics,\n  DeleteChannelsResponse,\n  DeleteCommandResponse,\n  DeleteUserOptions,\n  Device,\n  DeviceIdentifier,\n  EndpointName,\n  ErrorFromResponse,\n  Event,\n  EventHandler,\n  ExportChannelOptions,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  ExportUsersRequest,\n  ExportUsersResponse,\n  ExtendableGenerics,\n  FlagMessageResponse,\n  FlagReportsFilters,\n  FlagReportsPaginationOptions,\n  FlagReportsResponse,\n  FlagsFilters,\n  FlagsPaginationOptions,\n  FlagsResponse,\n  FlagUserResponse,\n  GetBlockedUsersAPIResponse,\n  GetCallTokenResponse,\n  GetCampaignOptions,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  GetImportResponse,\n  GetMessageAPIResponse,\n  GetMessageOptions,\n  GetPollAPIResponse,\n  GetPollOptionAPIResponse,\n  GetRateLimitsResponse,\n  GetThreadAPIResponse,\n  GetThreadOptions,\n  GetUnreadCountAPIResponse,\n  GetUnreadCountBatchAPIResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  ListImportsPaginationOptions,\n  ListImportsResponse,\n  Logger,\n  MarkChannelsReadOptions,\n  Message,\n  MessageFilters,\n  MessageFlagsFilters,\n  MessageFlagsPaginationOptions,\n  MessageFlagsResponse,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  NewMemberPayload,\n  OGAttachment,\n  OwnUserResponse,\n  PartialMessageUpdate,\n  PartialPollUpdate,\n  PartialThreadUpdate,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  PollAnswersAPIResponse,\n  PollData,\n  PollOptionData,\n  PollSort,\n  PollVote,\n  PollVoteData,\n  PollVotesAPIResponse,\n  PushPreference,\n  PushProvider,\n  PushProviderConfig,\n  PushProviderID,\n  PushProviderListResponse,\n  PushProviderUpsertResponse,\n  QueryChannelsAPIResponse,\n  QueryMessageHistoryFilters,\n  QueryMessageHistoryOptions,\n  QueryMessageHistoryResponse,\n  QueryMessageHistorySort,\n  QueryPollsFilters,\n  QueryPollsOptions,\n  QueryPollsResponse,\n  QueryReactionsAPIResponse,\n  QueryReactionsOptions,\n  QuerySegmentsOptions,\n  QuerySegmentTargetsFilter,\n  QueryThreadsAPIResponse,\n  QueryThreadsOptions,\n  QueryVotesFilters,\n  QueryVotesOptions,\n  ReactionFilters,\n  ReactionResponse,\n  ReactionSort,\n  ReactivateUserOptions,\n  ReactivateUsersOptions,\n  ReservedMessageFields,\n  ReviewFlagReportOptions,\n  ReviewFlagReportResponse,\n  SdkIdentifier,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SegmentData,\n  SegmentResponse,\n  SegmentTargetsResponse,\n  SegmentType,\n  SendFileAPIResponse,\n  SortParam,\n  StreamChatOptions,\n  SyncOptions,\n  SyncResponse,\n  TaskResponse,\n  TaskStatus,\n  TestPushDataInput,\n  TestSNSDataInput,\n  TestSQSDataInput,\n  TokenOrProvider,\n  TranslateResponse,\n  UnBanUserOptions,\n  UpdateChannelOptions,\n  UpdateChannelResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdatedMessage,\n  UpdateMessageAPIResponse,\n  UpdateMessageOptions,\n  UpdatePollAPIResponse,\n  UpdatePollOptionAPIResponse,\n  UpdateSegmentData,\n  UpsertPushPreferencesResponse,\n  UserCustomEvent,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n  VoteSort,\n  QueryDraftsResponse,\n  DraftFilters,\n  DraftSort,\n  Pager,\n} from './types';\nimport { InsightMetrics, postInsights } from './insights';\nimport { Thread } from './thread';\nimport { Moderation } from './moderation';\nimport { ThreadManager } from './thread_manager';\nimport { DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE } from './constants';\nimport { PollManager } from './poll_manager';\nimport { ChannelManager, ChannelManagerEventHandlerOverrides, ChannelManagerOptions } from './channel_manager';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\nexport class StreamChat<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  private static _instance?: unknown | StreamChat; // type is undefined|StreamChat, unknown is due to TS limitations with statics\n\n  _user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>;\n  activeChannels: {\n    [key: string]: Channel<StreamChatGenerics>;\n  };\n  threads: ThreadManager<StreamChatGenerics>;\n  polls: PollManager<StreamChatGenerics>;\n  anonymous: boolean;\n  persistUserOnConnectionFailure?: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs<StreamChatGenerics>;\n  key: string;\n  listeners: Record<string, Array<(event: Event<StreamChatGenerics>) => void>>;\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  moderation: Moderation<StreamChatGenerics>;\n  mutedChannels: ChannelMute<StreamChatGenerics>[];\n  mutedUsers: Mute<StreamChatGenerics>[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse<StreamChatGenerics> | null;\n  state: ClientState<StreamChatGenerics>;\n  tokenManager: TokenManager<StreamChatGenerics>;\n  user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection<StreamChatGenerics> | null;\n  wsFallback?: WSConnectionFallback<StreamChatGenerics>;\n  wsPromise: ConnectAPIResponse<StreamChatGenerics> | null;\n  consecutiveFailures: number;\n  insightMetrics: InsightMetrics;\n  defaultWSTimeoutWithFallback: number;\n  defaultWSTimeout: number;\n  sdkIdentifier?: SdkIdentifier;\n  deviceIdentifier?: DeviceIdentifier;\n  private nextRequestAbortController: AbortController | null = null;\n\n  /**\n   * Initialize a client\n   *\n   * **Only use constructor for advanced usages. It is strongly advised to use `StreamChat.getInstance()` instead of `new StreamChat()` to reduce integration issues due to multiple WebSocket connections**\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(key: string, secretOrOptions?: StreamChatOptions | string, options?: StreamChatOptions) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState<StreamChatGenerics>({ client: this });\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    this.moderation = new Moderation(this);\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options ? options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n\n    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      disableCache: false,\n      wsUrlParams: new URLSearchParams({}),\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL(this.options.baseURL || 'https://chat.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    if (typeof process !== 'undefined' && 'env' in process && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n\n    this.defaultWSTimeoutWithFallback = 6 * 1000;\n    this.defaultWSTimeout = 15 * 1000;\n\n    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    this.threads = new ThreadManager({ client: this });\n    this.polls = new PollManager({ client: this });\n  }\n\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics>;\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    secret?: string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics>;\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics> {\n    if (!StreamChat._instance) {\n      if (typeof secretOrOptions === 'string') {\n        StreamChat._instance = new StreamChat<StreamChatGenerics>(key, secretOrOptions, options);\n      } else {\n        StreamChat._instance = new StreamChat<StreamChatGenerics>(key, secretOrOptions);\n      }\n    }\n\n    return StreamChat._instance as StreamChat<StreamChatGenerics>;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n  }\n\n  _getConnectionID = () => this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n\n  _hasConnectionID = () => Boolean(this._getConnectionID());\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>,\n    userTokenOrProvider: TokenOrProvider,\n  ) => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      console.warn(\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    try {\n      return await this.setUserPromise;\n    } catch (err) {\n      if (this.persistUserOnConnectionFailure) {\n        // cleanup client to allow the user to retry connectUser again\n        this.closeConnection();\n      } else {\n        this.disconnectUser();\n      }\n      throw err;\n    }\n  };\n\n  /**\n   * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n   *\n   * setUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  setUser = this.connectUser;\n\n  _setToken = (user: UserResponse<StreamChatGenerics>, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(user: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>) {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    this.userID = user.id;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  }\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = async (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    await Promise.all([this.wsConnection?.disconnect(timeout), this.wsFallback?.disconnect(timeout)]);\n    return Promise.resolve();\n  };\n\n  /**\n   * Creates an instance of ChannelManager.\n   *\n   * @internal\n   *\n   * @param eventHandlerOverrides - the overrides for event handlers to be used\n   * @param options - the options used for the channel manager\n   */\n  createChannelManager = ({\n    eventHandlerOverrides = {},\n    options = {},\n  }: {\n    eventHandlerOverrides?: ChannelManagerEventHandlerOverrides<StreamChatGenerics>;\n    options?: ChannelManagerOptions;\n  }) => {\n    return new ChannelManager({ client: this, eventHandlerOverrides, options });\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n    }\n\n    if (this.wsConnection?.isConnecting && this.wsPromise) {\n      this.logger('info', 'client:openConnection() - connection already in progress', {\n        tags: ['connection', 'client'],\n      });\n      return this.wsPromise;\n    }\n\n    if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n      this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {\n        tags: ['connection', 'client'],\n      });\n\n      return;\n    }\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  /**\n   * @deprecated Please use client.openConnction instead.\n   * @private\n   *\n   * Creates a new websocket connection with current user.\n   */\n  _setupConnection = this.openConnection;\n\n  /**\n   * updateAppSettings - updates application settings\n   *\n   * @param {AppSettings} options App settings.\n   * IE: {\n      'apn_config': {\n        'auth_type': 'token',\n        'auth_key\": fs.readFileSync(\n          './apn-push-auth-key.p8',\n          'utf-8',\n        ),\n        'key_id': 'keyid',\n        'team_id': 'teamid',\n        'notification_template\": 'notification handlebars template',\n        'bundle_id': 'com.apple.your.app',\n        'development': true\n      },\n      'firebase_config': {\n        'server_key': 'server key from fcm',\n        'notification_template': 'notification handlebars template',\n        'data_template': 'data handlebars template',\n        'apn_template': 'apn notification handlebars template under v2'\n      },\n      'webhook_url': 'https://acme.com/my/awesome/webhook/'\n    }\n   */\n  async updateAppSettings(options: AppSettings) {\n    const apn_config = options.apn_config;\n    if (apn_config?.p12_cert) {\n      options = {\n        ...options,\n        apn_config: {\n          ...apn_config,\n          p12_cert: Buffer.from(apn_config.p12_cert).toString('base64'),\n        },\n      };\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n    }\n\n    return before;\n  };\n\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before: Date | string | null) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before),\n    });\n  }\n\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID: string, before?: Date | string | null) {\n    return await this.revokeUsersToken([userID], before);\n  }\n\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs: string[], before?: Date | string | null) {\n    if (before === undefined) {\n      before = new Date().toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n\n    const users: PartialUserUpdate<StreamChatGenerics>[] = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: <Partial<UserResponse<StreamChatGenerics>>>{\n          revoke_tokens_issued_before: before,\n        },\n      });\n    }\n\n    return await this.partialUpdateUsers(users);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    return await this.get<AppSettingsAPIResponse<StreamChatGenerics>>(this.baseURL + '/app');\n  }\n\n  /**\n   * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   *  IE: {\n        messageID: 'id-of-message', // will error if message does not exist\n        apnTemplate: '{}', // if app doesn't have apn configured it will error\n        firebaseTemplate: '{}', // if app doesn't have firebase configured it will error\n        firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error\n        skipDevices: true, // skip config/device checks and sending to real devices\n        pushProviderName: 'staging' // one of your configured push providers\n        pushProviderType: 'apn' // one of supported provider types\n      }\n  */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate ? { firebase_data_template: data.firebaseDataTemplate } : {}),\n      ...(data.skipDevices ? { skip_devices: true } : {}),\n      ...(data.pushProviderName ? { push_provider_name: data.pushProviderName } : {}),\n      ...(data.pushProviderType ? { push_provider_type: data.pushProviderType } : {}),\n    });\n  }\n\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed\n   *  IE: {\n        sqs_key: 'auth_key',\n        sqs_secret: 'auth_secret',\n        sqs_url: 'url_to_queue',\n      }\n   */\n  async testSQSSettings(data: TestSQSDataInput = {}) {\n    return await this.post<CheckSQSResponse>(this.baseURL + '/check_sqs', data);\n  }\n\n  /**\n   * testSNSSettings - Tests that the given or configured SNS configuration is valid\n   *\n   * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed\n   *  IE: {\n        sns_key: 'auth_key',\n        sns_secret: 'auth_secret',\n        sns_topic_arn: 'topic_to_publish_to',\n      }\n   */\n  async testSNSSettings(data: TestSNSDataInput = {}) {\n    return await this.post<CheckSNSResponse>(this.baseURL + '/check_sns', data);\n  }\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    const closePromise = this.closeConnection(timeout);\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState({ client: this });\n    // reset thread manager\n    this.threads.resetState();\n    // reset token manager\n    setTimeout(this.tokenManager.reset); // delay reseting to use token for disconnect calls\n\n    // close the WS connection\n    return closePromise;\n  };\n\n  /**\n   *\n   * @deprecated Please use client.disconnectUser instead.\n   *\n   * Disconnects the websocket and removes the user from client.\n   */\n  disconnect = this.disconnectUser;\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = () => {\n    if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse<StreamChatGenerics>;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n   */\n  setAnonymousUser = this.connectAnonymousUser;\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse<StreamChatGenerics>) {\n    let response: { access_token: string; user: UserResponse<StreamChatGenerics> } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & {\n          access_token: string;\n          user: UserResponse<StreamChatGenerics>;\n        }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.connectUser(guestUser as UserResponse<StreamChatGenerics>, response.access_token);\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in.\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number, iat?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number; iat?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    if (iat) {\n      extra.iat = iat;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<StreamChatGenerics> | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(eventType: string, callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler<StreamChatGenerics> | string,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : (callbackOrString as EventHandler<StreamChatGenerics>);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger('info', `Removing listener for ${key} event`, {\n          tags: ['event', 'client'],\n        });\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(callback: EventHandler<StreamChatGenerics>): void;\n  off(eventType: string, callback: EventHandler<StreamChatGenerics>): void;\n  off(\n    callbackOrString: EventHandler<StreamChatGenerics> | string,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : (callbackOrString as EventHandler<StreamChatGenerics>);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger('info', `client:${type} - Response - url: ${url} > status ${response.status}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      response,\n    });\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'postForm':\n          response = await this.axiosInstance.postForm(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any /**TODO: generalize error types  */) {\n      e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n      this._logApiError(type, url, e);\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        /** connection_fallback depends on this token expiration logic */\n        if (e.response.data.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e as AxiosError<APIErrorResponse>;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    const data = addFileToFormData(uri, name, contentType || 'multipart/form-data');\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('postForm', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse(response: AxiosResponse<APIErrorResponse>): ErrorFromResponse<APIErrorResponse> {\n    let err: ErrorFromResponse<APIErrorResponse>;\n    err = new ErrorFromResponse(`StreamChat error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(`StreamChat error code ${response.data.code}: ${response.data.message}`);\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (event: Event<StreamChatGenerics>) => {\n    if (!event.received_at) event.received_at = new Date();\n\n    // client event handlers\n    const postListenerCallbacks = this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n\n    postListenerCallbacks.forEach((c) => c());\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event<StreamChatGenerics>;\n    this.dispatchEvent(event);\n  };\n\n  /**\n   * Updates the members, watchers and read references of the currently active channels that contain this user\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  _updateMemberWatcherReferences = (user: UserResponse<StreamChatGenerics>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      if (channel?.state) {\n        if (channel.state.members[user.id]) {\n          channel.state.members[user.id].user = user;\n        }\n        if (channel.state.watchers[user.id]) {\n          channel.state.watchers[user.id] = user;\n        }\n        if (channel.state.read[user.id]) {\n          channel.state.read[user.id].user = user;\n        }\n      }\n    }\n  };\n\n  /**\n   * @deprecated Please _updateMemberWatcherReferences instead.\n   * @private\n   */\n  _updateUserReferences = this._updateMemberWatcherReferences;\n\n  /**\n   * @private\n   *\n   * Updates the messages from the currently active channels that contain this user,\n   * with updated user object.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  _updateUserMessageReferences = (user: UserResponse<StreamChatGenerics>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n\n      if (!channel) continue;\n\n      const state = channel.state;\n\n      /** update the messages from this user. */\n      state?.updateUserMessages(user);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Deletes the messages from the currently active channels that contain this user\n   *\n   * If hardDelete is true, all the content of message will be stripped down.\n   * Otherwise, only 'message.type' will be set as 'deleted'.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   * @param {boolean} hardDelete\n   */\n  _deleteUserMessageReference = (user: UserResponse<StreamChatGenerics>, hardDelete = false) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      if (channel) {\n        const state = channel.state;\n\n        /** deleted the messages from this user. */\n        state?.deleteUserMessages(user, hardDelete);\n      }\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Handle following user related events:\n   * - user.presence.changed\n   * - user.updated\n   * - user.deleted\n   *\n   * @param {Event} event\n   */\n  _handleUserEvent = (event: Event<StreamChatGenerics>) => {\n    if (!event.user) {\n      return;\n    }\n\n    /** update the client.state with any changes to users */\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n      if (event.user.id === this.userID) {\n        const user = { ...(this.user || {}) };\n        const _user = { ...(this._user || {}) };\n\n        // Remove deleted properties from user objects.\n        for (const key in this.user) {\n          if (key in event.user || isOwnUserBaseProperty(key)) {\n            continue;\n          }\n\n          delete user[key];\n          delete _user[key];\n        }\n\n        /** Updating only available properties in _user object. */\n        for (const key in event.user) {\n          if (_user && key in _user) {\n            _user[key] = event.user[key];\n          }\n        }\n\n        // @ts-expect-error\n        this._user = { ..._user };\n        this.user = { ...user, ...event.user };\n      }\n\n      this.state.updateUser(event.user);\n      this._updateMemberWatcherReferences(event.user);\n    }\n\n    if (event.type === 'user.updated') {\n      this._updateUserMessageReferences(event.user);\n    }\n\n    if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n      this._deleteUserMessageReference(event.user, event.hard_delete);\n    }\n  };\n\n  _handleClientEvent(event: Event<StreamChatGenerics>) {\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger('info', `client:_handleClientEvent - Received event of type { ${event.type} }`, {\n      tags: ['event', 'client'],\n      event,\n    });\n\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {\n      this._handleUserEvent(event);\n    }\n\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      this._addChannelConfig(event.channel);\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n\n    if (event.type === 'notification.mark_read' && event.unread_channels === 0) {\n      const activeChannelKeys = Object.keys(this.activeChannels);\n      activeChannelKeys.forEach((activeChannelKey) => (this.activeChannels[activeChannelKey].state.unreadCount = 0));\n    }\n\n    if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {\n      client.state.deleteAllChannelReference(event.cid);\n      this.activeChannels[event.cid]?._disconnect();\n\n      postListenerCallbacks.push(() => {\n        if (!event.cid) return;\n\n        delete this.activeChannels[event.cid];\n      });\n    }\n\n    return postListenerCallbacks;\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n        break;\n      }\n    }\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (event: Event<StreamChatGenerics>) => {\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<(event: Event<StreamChatGenerics>) => void> = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger('info', `client:recoverState() - Start of recoverState with connectionID ${this._getConnectionID()}`, {\n      tags: ['connection'],\n    });\n\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger('info', `client:recoverState() - Start the querying of ${cids.length} channels`, {\n        tags: ['connection', 'client'],\n      });\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters<StreamChatGenerics>,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', { tags: ['connection', 'client'] });\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<StreamChatGenerics>);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<StreamChatGenerics>);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /**\n   * @private\n   */\n  async connect() {\n    if (!this.userID || !this._user) {\n      throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n    }\n    if (!this.wsBaseURL) {\n      throw Error('Websocket base url not set');\n    }\n    if (!this.clientID) {\n      throw Error('clientID is not set');\n    }\n\n    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n      this._sayHi();\n    }\n    // The StableWSConnection handles all the reconnection logic.\n    if (this.options.wsConnection && this.node) {\n      // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n      ((this.options.wsConnection as unknown) as StableWSConnection<StreamChatGenerics>).setClient(this);\n      this.wsConnection = (this.options.wsConnection as unknown) as StableWSConnection<StreamChatGenerics>;\n    } else {\n      this.wsConnection = new StableWSConnection<StreamChatGenerics>({\n        client: this,\n      });\n    }\n\n    try {\n      // if fallback is used before, continue using it instead of waiting for WS to fail\n      if (this.wsFallback) {\n        return await this.wsFallback.connect();\n      }\n\n      // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n      return await this.wsConnection.connect(\n        this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout,\n      );\n    } catch (err) {\n      // run fallback only if it's WS/Network error and not a normal API error\n      // make sure browser is online before even trying the longpoll\n      if (this.options.enableWSFallback && isWSFailure(err) && isOnline()) {\n        this.logger('info', 'client:connect() - WS failed, fallback to longpoll', { tags: ['connection', 'client'] });\n        this.dispatchEvent({ type: 'transport.changed', mode: 'longpoll' });\n\n        this.wsConnection._destroyCurrentWSConnection();\n        this.wsConnection.disconnect().then(); // close WS so no retry\n        this.wsFallback = new WSConnectionFallback<StreamChatGenerics>({\n          client: this,\n        });\n        return await this.wsFallback.connect();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Check the connectivity with server for warmup purpose.\n   *\n   * @private\n   */\n  _sayHi() {\n    const client_request_id = randomId();\n    const opts = { headers: { 'x-client-request-id': client_request_id } };\n    this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch((e) => {\n      if (this.options.enableInsights) {\n        postInsights('http_hi_failed', {\n          api_key: this.key,\n          err: e,\n          client_request_id,\n        });\n      }\n    });\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n   * @param {UserSort<StreamChatGenerics>} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<{ users: Array<UserResponse<StreamChatGenerics>> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters<StreamChatGenerics>,\n    sort: UserSort<StreamChatGenerics> = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<APIResponse & { users: Array<UserResponse<StreamChatGenerics>> }>(\n      this.baseURL + '/users',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          sort: normalizeQuerySort(sort),\n          ...defaultOptions,\n          ...options,\n        },\n      },\n    );\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}\n   *\n   * @return {Promise<BannedUsersResponse<StreamChatGenerics>>} Ban Query Response\n   */\n  async queryBannedUsers(\n    filterConditions: BannedUsersFilters = {},\n    sort: BannedUsersSort = [],\n    options: BannedUsersPaginationOptions = {},\n  ) {\n    // Return a list of user bans\n    return await this.get<BannedUsersResponse<StreamChatGenerics>>(this.baseURL + '/query_banned_users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse<StreamChatGenerics>>} Message Flags Response\n   */\n  async queryMessageFlags(filterConditions: MessageFlagsFilters = {}, options: MessageFlagsPaginationOptions = {}) {\n    // Return a list of message flags\n    return await this.get<MessageFlagsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flags/message', {\n      payload: { filter_conditions: filterConditions, ...options },\n    });\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters<StreamChatGenerics>} filterConditions object MongoDB style filters\n   * @param {ChannelSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n   * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n   *\n   * @return {Promise<{ channels: Array<ChannelAPIResponse<AStreamChatGenerics>>}> } search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters<StreamChatGenerics>,\n    sort: ChannelSort<StreamChatGenerics> = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) {\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.post<QueryChannelsAPIResponse<StreamChatGenerics>>(this.baseURL + '/channels', payload);\n\n    this.dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: data.channels,\n        isLatestMessageSet: true,\n      },\n    });\n\n    return this.hydrateActiveChannels(data.channels, stateOptions, options);\n  }\n\n  /**\n   * queryReactions - Query reactions\n   *\n   * @param {ReactionFilters<StreamChatGenerics>} filter object MongoDB style filters\n   * @param {ReactionSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n   * @param {QueryReactionsOptions} [options] Pagination object\n   *\n   * @return {Promise<{ QueryReactionsAPIResponse } search channels response\n   */\n  async queryReactions(\n    messageID: string,\n    filter: ReactionFilters<StreamChatGenerics>,\n    sort: ReactionSort<StreamChatGenerics> = [],\n    options: QueryReactionsOptions = {},\n  ) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    // Return a list of channels\n    const payload = {\n      filter,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    };\n\n    return await this.post<QueryReactionsAPIResponse<StreamChatGenerics>>(\n      this.baseURL + '/messages/' + encodeURIComponent(messageID) + '/reactions',\n      payload,\n    );\n  }\n\n  hydrateActiveChannels(\n    channelsFromApi: ChannelAPIResponse<StreamChatGenerics>[] = [],\n    stateOptions: ChannelStateOptions = {},\n    queryChannelsOptions?: ChannelOptions,\n  ) {\n    const { skipInitialization, offlineMode = false } = stateOptions;\n    const channels: Channel<StreamChatGenerics>[] = [];\n\n    for (const channelState of channelsFromApi) {\n      this._addChannelConfig(channelState.channel);\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.offlineMode = offlineMode;\n      c.initialized = !offlineMode;\n      c.push_preferences = channelState.push_preferences;\n\n      let updatedMessagesSet;\n      if (skipInitialization === undefined) {\n        const { messageSet } = c._initializeState(channelState, 'latest');\n        updatedMessagesSet = messageSet;\n      } else if (!skipInitialization.includes(channelState.channel.id)) {\n        c.state.clearMessages();\n        const { messageSet } = c._initializeState(channelState, 'latest');\n        updatedMessagesSet = messageSet;\n      }\n\n      if (updatedMessagesSet) {\n        updatedMessagesSet.pagination = {\n          ...updatedMessagesSet.pagination,\n          ...messageSetPagination({\n            parentSet: updatedMessagesSet,\n            requestedPageSize: queryChannelsOptions?.message_limit || DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE,\n            returnedPage: channelState.messages,\n            logger: this.logger,\n          }),\n        };\n        this.polls.hydratePollCache(channelState.messages, true);\n      }\n\n      channels.push(c);\n    }\n\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters<StreamChatGenerics> | string} query search query or object MongoDB style filters\n   * @param {SearchOptions<StreamChatGenerics>} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters<StreamChatGenerics>,\n    query: string | MessageFilters<StreamChatGenerics>,\n    options: SearchOptions<StreamChatGenerics> = {},\n  ) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    const payload: SearchPayload<StreamChatGenerics> = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort ? normalizeQuerySort<SearchMessageSortBase<StreamChatGenerics>>(options.sort) : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    return await this.get<SearchAPIResponse<StreamChatGenerics>>(this.baseURL + '/search', { payload });\n  }\n\n  /**\n   * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n   *\n   * @param {BaseDeviceFields} device the device object\n   * @param {string} device.id device id\n   * @param {string} device.push_provider the push provider\n   *\n   */\n  setLocalDevice(device: BaseDeviceFields) {\n    if (\n      (this.wsConnection?.isConnecting && this.wsPromise) ||\n      ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID())\n    ) {\n      throw new Error('you can only set device before opening a websocket connection');\n    }\n\n    this.options.device = device;\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {PushProvider} push_provider the push provider\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {string} [push_provider_name] user provided push provider name for multi bundle support\n   *\n   */\n  async addDevice(id: string, push_provider: PushProvider, userID?: string, push_provider_name?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n      ...(push_provider_name != null ? { push_provider_name } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {Device<StreamChatGenerics>[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device<StreamChatGenerics>[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * getUnreadCount - Returns unread counts for a single user\n   *\n   * @param {string} [userID] User ID.\n   *\n   * @return {<GetUnreadCountAPIResponse>}\n   */\n  async getUnreadCount(userID?: string) {\n    return await this.get<GetUnreadCountAPIResponse>(this.baseURL + '/unread', userID ? { user_id: userID } : {});\n  }\n\n  /**\n   * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.\n   *\n   * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.\n   *\n   * @return {<GetUnreadCountBatchAPIResponse>}\n   */\n  async getUnreadCountBatch(userIDs: string[]) {\n    return await this.post<GetUnreadCountBatchAPIResponse>(this.baseURL + '/unread_batch', { user_ids: userIDs });\n  }\n\n  /**\n   * setPushPreferences - Applies the list of push preferences.\n   *\n   * @param {PushPreference[]} A list of push preferences.\n   *\n   * @return {<UpsertPushPreferencesResponse>}\n   */\n  async setPushPreferences(preferences: PushPreference[]) {\n    return await this.post<UpsertPushPreferencesResponse>(this.baseURL + '/push_preferences', { preferences });\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  async getRateLimits(params?: {\n    android?: boolean;\n    endpoints?: EndpointName[];\n    ios?: boolean;\n    serverSide?: boolean;\n    web?: boolean;\n  }) {\n    const { serverSide, web, android, ios, endpoints } = params || {};\n    return this.get<GetRateLimitsResponse>(this.baseURL + '/rate_limits', {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(',') : undefined,\n    });\n  }\n\n  _addChannelConfig({ cid, config }: ChannelResponse<StreamChatGenerics>) {\n    if (this._cacheEnabled()) {\n      this.configs[cid] = config;\n    }\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData<StreamChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(\n    channelType: string,\n    channelID?: string | null,\n    custom?: ChannelData<StreamChatGenerics>,\n  ): Channel<StreamChatGenerics>;\n  channel(channelType: string, custom?: ChannelData<StreamChatGenerics>): Channel<StreamChatGenerics>;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData<StreamChatGenerics> | null,\n    custom: ChannelData<StreamChatGenerics> = {} as ChannelData<StreamChatGenerics>,\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n\n    // support channel(\"messaging\", {options})\n    if (channelIDOrCustom && typeof channelIDOrCustom === 'object') {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n\n    // // support channel(\"messaging\", undefined, {options})\n    if (!channelIDOrCustom && typeof custom === 'object' && custom.members?.length) {\n      return this.getChannelByMembers(channelType, custom);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (!channelIDOrCustom) {\n      return new Channel<StreamChatGenerics>(this, channelType, undefined, custom);\n    }\n\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n\n  /**\n   * It's a helper method for `client.channel()` method, used to create unique conversation or\n   * channel based on member list instead of id.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelByMembers = (channelType: string, custom: ChannelData<StreamChatGenerics>) => {\n    // Check if the channel already exists.\n    // Only allow 1 channel object per cid\n    const memberIds = (custom.members ?? []).map((member: string | NewMemberPayload<StreamChatGenerics>) =>\n      typeof member === 'string' ? member : member.user_id ?? '',\n    );\n    const membersStr = memberIds.sort().join(',');\n    const tempCid = generateChannelTempCid(channelType, memberIds);\n\n    if (!tempCid) {\n      throw Error('Please specify atleast one member when creating unique conversation');\n    }\n\n    // channel could exist in `activeChannels` list with either one of the following two keys:\n    // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n    // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n    //                        This is set when you create a channel, but haven't queried yet. After query,\n    //                        we will replace it with `cid`\n    for (const key in this.activeChannels) {\n      const channel = this.activeChannels[key];\n      if (channel.disconnected) {\n        continue;\n      }\n\n      if (key === tempCid) {\n        return channel;\n      }\n\n      if (key.indexOf(`${channelType}:!members-`) === 0) {\n        const membersStrInExistingChannel = Object.keys(channel.state.members).sort().join(',');\n        if (membersStrInExistingChannel === membersStr) {\n          return channel;\n        }\n      }\n    }\n\n    const channel = new Channel<StreamChatGenerics>(this, channelType, undefined, custom);\n\n    // For the time being set the key as membersStr, since we don't know the cid yet.\n    // In channel.query, we will replace it with 'cid'.\n    if (this._cacheEnabled()) {\n      this.activeChannels[tempCid] = channel;\n    }\n\n    return channel;\n  };\n\n  /**\n   * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {string} [channelID] The channel ID\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelById = (channelType: string, channelID: string, custom: ChannelData<StreamChatGenerics>) => {\n    if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n      throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelID}`;\n    if (cid in this.activeChannels && this.activeChannels[cid] && !this.activeChannels[cid].disconnected) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = { ...channel.data, ...custom };\n        channel._data = { ...channel._data, ...custom };\n      }\n      return channel;\n    }\n    const channel = new Channel<StreamChatGenerics>(this, channelType, channelID, custom);\n    if (this._cacheEnabled()) {\n      this.activeChannels[channel.cid] = channel;\n    }\n\n    return channel;\n  };\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate<StreamChatGenerics>) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse<StreamChatGenerics>[]} users list of users\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  async upsertUsers(users: UserResponse<StreamChatGenerics>[]) {\n    const userMap: { [key: string]: UserResponse<StreamChatGenerics> } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse<StreamChatGenerics> };\n      }\n    >(this.baseURL + '/users', { users: userMap });\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse<StreamChatGenerics>[]} users list of users\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  updateUsers = this.upsertUsers;\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  upsertUser(userObject: UserResponse<StreamChatGenerics>) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  updateUser = this.upsertUser;\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate<StreamChatGenerics>[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse<StreamChatGenerics> };\n      }\n    >(this.baseURL + '/users', { users });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: {\n      delete_conversation_channels?: boolean;\n      hard_delete?: boolean;\n      mark_messages_deleted?: boolean;\n    },\n  ) {\n    return await this.delete<\n      APIResponse & { user: UserResponse<StreamChatGenerics> } & {\n        task_id?: string;\n      }\n    >(this.baseURL + `/users/${encodeURIComponent(userID)}`, params);\n  }\n\n  /**\n   * restoreUsers - Restore soft deleted users\n   *\n   * @param {string[]} user_ids which users to restore\n   *\n   * @return {APIResponse} An API response\n   */\n  async restoreUsers(user_ids: string[]) {\n    return await this.post<APIResponse>(this.baseURL + `/users/restore`, {\n      user_ids,\n    });\n  }\n\n  /**\n   * reactivateUser - Reactivate one user\n   *\n   * @param {string} userID which user to reactivate\n   * @param {ReactivateUserOptions} [options]\n   *\n   * @return {UserResponse} Reactivated user\n   */\n  async reactivateUser(userID: string, options?: ReactivateUserOptions) {\n    return await this.post<APIResponse & { user: UserResponse<StreamChatGenerics> }>(\n      this.baseURL + `/users/${encodeURIComponent(userID)}/reactivate`,\n      { ...options },\n    );\n  }\n\n  /**\n   * reactivateUsers - Reactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to reactivate\n   * @param {ReactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async reactivateUsers(user_ids: string[], options?: ReactivateUsersOptions) {\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/reactivate`, { user_ids, ...options });\n  }\n\n  /**\n   * deactivateUser - Deactivate one user\n   *\n   * @param {string} userID which user to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {UserResponse} Deactivated user\n   */\n  async deactivateUser(userID: string, options?: DeactivateUsersOptions) {\n    return await this.post<APIResponse & { user: UserResponse<StreamChatGenerics> }>(\n      this.baseURL + `/users/${encodeURIComponent(userID)}/deactivate`,\n      { ...options },\n    );\n  }\n\n  /**\n   * deactivateUsers - Deactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deactivateUsers(user_ids: string[], options?: DeactivateUsersOptions) {\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/deactivate`, { user_ids, ...options });\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse<StreamChatGenerics>[];\n        reactions: ReactionResponse<StreamChatGenerics>[];\n        user: UserResponse<StreamChatGenerics>;\n      }\n    >(this.baseURL + `/users/${encodeURIComponent(userID)}/export`, { ...options });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions<StreamChatGenerics>) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions<StreamChatGenerics>) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n  async blockUser(blockedUserID: string, user_id?: string) {\n    return await this.post<BlockUserAPIResponse>(this.baseURL + '/users/block', {\n      blocked_user_id: blockedUserID,\n      ...(user_id ? { user_id } : {}),\n    });\n  }\n\n  async getBlockedUsers(user_id?: string) {\n    return await this.get<GetBlockedUsersAPIResponse>(this.baseURL + '/users/block', {\n      ...(user_id ? { user_id } : {}),\n    });\n  }\n  async unBlockUser(blockedUserID: string, userID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/users/unblock', {\n      blocked_user_id: blockedUserID,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<MuteUserResponse<StreamChatGenerics>>}\n   */\n  async muteUser(targetID: string, userID?: string, options: MuteUserOptions<StreamChatGenerics> = {}) {\n    return await this.post<MuteUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/mute', {\n      target_id: targetID,\n      ...(userID ? { user_id: userID } : {}),\n      ...options,\n    });\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error('Make sure to await connectUser() first.');\n    }\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID: string, options: { reason?: string; user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { reason?: string; user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<StreamChatGenerics>>(this.baseURL + '/moderation/unflag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/unflag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * getCallToken - retrieves the auth token needed to join a call\n   *\n   * @param {string} callID\n   * @param {object} options\n   * @returns {Promise<GetCallTokenResponse>}\n   */\n  async getCallToken(callID: string, options: { user_id?: string } = {}) {\n    return await this.post<GetCallTokenResponse>(this.baseURL + `/calls/${encodeURIComponent(callID)}`, { ...options });\n  }\n\n  /**\n   * _queryFlags - Query flags.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagsResponse<StreamChatGenerics>>} Flags Response\n   */\n  async _queryFlags(filterConditions: FlagsFilters = {}, options: FlagsPaginationOptions = {}) {\n    // Return a list of flags\n    return await this.post<FlagsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flags', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _queryFlagReports - Query flag reports.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagReportsResponse<StreamChatGenerics>>} Flag Reports Response\n   */\n  async _queryFlagReports(filterConditions: FlagReportsFilters = {}, options: FlagReportsPaginationOptions = {}) {\n    // Return a list of message flags\n    return await this.post<FlagReportsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/reports', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _reviewFlagReport - review flag report\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} [id] flag report to review\n   * @param {string} [reviewResult] flag report review result\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @param {string} [options.review_details] custom information about review result\n   * @returns {Promise<ReviewFlagReportResponse>>}\n   */\n  async _reviewFlagReport(id: string, reviewResult: string, options: ReviewFlagReportOptions = {}) {\n    return await this.patch<ReviewFlagReportResponse<StreamChatGenerics>>(\n      this.baseURL + `/moderation/reports/${encodeURIComponent(id)}`,\n      {\n        review_result: reviewResult,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unblockMessage - unblocks message blocked by automod\n   *\n   *\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unblockMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unblock_message', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n  // alias for backwards compatibility\n  _unblockMessage = this.unblockMessage;\n\n  /**\n   * @deprecated use markChannelsRead instead\n   *\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions<StreamChatGenerics>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  markAllRead = this.markChannelsRead;\n\n  /**\n   * markChannelsRead - marks channels read -\n   * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n   *\n   * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markChannelsRead(data: MarkChannelsReadOptions<StreamChatGenerics> = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', { ...data });\n  }\n\n  createCommand(data: CreateCommandOptions<StreamChatGenerics>) {\n    return this.post<CreateCommandResponse<StreamChatGenerics>>(this.baseURL + '/commands', data);\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse<StreamChatGenerics>>(this.baseURL + `/commands/${encodeURIComponent(name)}`);\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions<StreamChatGenerics>) {\n    return this.put<UpdateCommandResponse<StreamChatGenerics>>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse<StreamChatGenerics>>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n    );\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse<StreamChatGenerics>>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions<StreamChatGenerics>) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse<StreamChatGenerics>>(this.baseURL + '/channeltypes', channelData);\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse<StreamChatGenerics>>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n    );\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelOptions<StreamChatGenerics>) {\n    return this.put<UpdateChannelResponse<StreamChatGenerics>>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n      data,\n    );\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`);\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse<StreamChatGenerics>>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {MessageResponse<StreamChatGenerics>} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<APIResponse & MessageResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(messageId)}/translate`,\n      { language },\n    );\n  }\n\n  /**\n   * translate - translates the given text to provided language\n   *\n   * @param {string} text\n   * @param {string} destination_language\n   * @param {string} source_language\n   *\n   * @return {TranslateResponse} Response that includes the message\n   */\n  async translate(text: string, destination_language: string, source_language: string) {\n    return await this.post<APIResponse & TranslateResponse>(this.baseURL + `/translate`, {\n      text,\n      source_language,\n      destination_language,\n    });\n  }\n\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate?: null | number | string | Date) {\n    let pinExpires: null | string = null;\n    if (typeof timeoutOrExpirationDate === 'number') {\n      const now = new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(messageOrMessageId: string | { id: string }, errorText: string) {\n    let messageId: string;\n    if (typeof messageOrMessageId === 'string') {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side\n   * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin\n   */\n  pinMessage(\n    messageOrMessageId: string | { id: string },\n    timeoutOrExpirationDate?: null | number | string | Date,\n    pinnedBy?: string | { id: string },\n    pinnedAt?: number | string | Date,\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      ({\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n          pinned_at: this._normalizeExpiration(pinnedAt),\n        },\n      } as unknown) as PartialMessageUpdate<StreamChatGenerics>,\n      pinnedBy,\n    );\n  }\n\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(messageOrMessageId: string | { id: string }, userId?: string | { id: string }) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      ({\n        set: { pinned: false },\n      } as unknown) as PartialMessageUpdate<StreamChatGenerics>,\n      userId,\n    );\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse<StreamChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [userId]\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n   */\n  async updateMessage(\n    message: UpdatedMessage<StreamChatGenerics>,\n    userId?: string | { id: string },\n    options?: UpdateMessageOptions,\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message id when calling updateMessage');\n    }\n\n    const clonedMessage: Message = Object.assign({}, message);\n    delete clonedMessage.id;\n\n    const reservedMessageFields: Array<ReservedMessageFields> = [\n      'command',\n      'created_at',\n      'html',\n      'latest_reactions',\n      'own_reactions',\n      'quoted_message',\n      'reaction_counts',\n      'reply_count',\n      'type',\n      'updated_at',\n      'user',\n      'pinned_at',\n      '__html',\n    ];\n\n    reservedMessageFields.forEach(function (item) {\n      if (clonedMessage[item] != null) {\n        delete clonedMessage[item];\n      }\n    });\n\n    if (userId != null) {\n      if (isString(userId)) {\n        clonedMessage.user_id = userId;\n      } else {\n        clonedMessage.user = {\n          id: userId.id,\n        } as UserResponse<StreamChatGenerics>;\n      }\n    }\n\n    /**\n     * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n     * SDK missed this conversion.\n     */\n    if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n      clonedMessage.mentioned_users = clonedMessage.mentioned_users.map((mu) => ((mu as unknown) as UserResponse).id);\n    }\n\n    return await this.post<UpdateMessageAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(message.id as string)}`,\n      {\n        message: clonedMessage,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage<StreamChatGenerics>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the updated message\n   */\n  async partialUpdateMessage(\n    id: string,\n    partialMessageObject: PartialMessageUpdate<StreamChatGenerics>,\n    userId?: string | { id: string },\n    options?: UpdateMessageOptions,\n  ) {\n    if (!id) {\n      throw Error('Please specify the message id when calling partialUpdateMessage');\n    }\n    let user = userId;\n    if (userId != null && isString(userId)) {\n      user = { id: userId };\n    }\n    return await this.put<UpdateMessageAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(id)}`,\n      {\n        ...partialMessageObject,\n        ...options,\n        user,\n      },\n    );\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<APIResponse & { message: MessageResponse<StreamChatGenerics> }>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}`,\n      params,\n    );\n  }\n\n  /**\n   * undeleteMessage - Undelete a message\n   *\n   * undeletes a message that was previous soft deleted. Hard deleted messages\n   * cannot be undeleted. This is only allowed to be called from server-side\n   * clients.\n   *\n   * @param {string} messageID The id of the message to undelete\n   * @param {string} userID The id of the user who undeleted the message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n   */\n  async undeleteMessage(messageID: string, userID: string) {\n    return await this.post<APIResponse & { message: MessageResponse<StreamChatGenerics> }>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}/undelete`,\n      { undeleted_by: userID },\n    );\n  }\n\n  async getMessage(messageID: string, options?: GetMessageOptions) {\n    return await this.get<GetMessageAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}`,\n      { ...options },\n    );\n  }\n\n  /**\n   * queryThreads - returns the list of threads of current user.\n   *\n   * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.\n   * @param {number}  options.limit Limits the number of threads to be returned.\n   * @param {boolean} options.watch Subscribes the user to the channels of the threads.\n   * @param {number}  options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}  options.reply_limit Limits the number of replies returned per threads.\n   * @param {ThreadFilters} options.filter MongoDB style filters for threads\n   * @param {ThreadSort} options.sort MongoDB style sort for threads\n   *\n   * @returns {{ threads: Thread<StreamChatGenerics>[], next: string }} Returns the list of threads and the next cursor.\n   */\n  async queryThreads(options: QueryThreadsOptions = {}) {\n    const optionsWithDefaults = {\n      limit: 10,\n      participant_limit: 10,\n      reply_limit: 3,\n      watch: true,\n      ...options,\n    };\n\n    const requestBody: Record<string, unknown> = {\n      ...optionsWithDefaults,\n    };\n\n    if (optionsWithDefaults.filter && Object.keys(optionsWithDefaults.filter).length > 0) {\n      requestBody.filter = optionsWithDefaults.filter;\n    }\n\n    if (\n      optionsWithDefaults.sort &&\n      (Array.isArray(optionsWithDefaults.sort)\n        ? optionsWithDefaults.sort.length > 0\n        : Object.keys(optionsWithDefaults.sort).length > 0)\n    ) {\n      requestBody.sort = normalizeQuerySort(optionsWithDefaults.sort);\n    }\n\n    const response = await this.post<QueryThreadsAPIResponse<StreamChatGenerics>>(\n      `${this.baseURL}/threads`,\n      requestBody,\n    );\n\n    return {\n      threads: response.threads.map(\n        (thread) => new Thread<StreamChatGenerics>({ client: this, threadData: thread }),\n      ),\n      next: response.next,\n    };\n  }\n\n  /**\n   * getThread - returns the thread of a message by its id.\n   *\n   * @param {string}            messageId The message id\n   * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.\n   * @param {boolean}           options.watch Subscribes the user to the channel of the thread.\n   * @param {number}            options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}            options.reply_limit Limits the number of replies returned per threads.\n   *\n   * @returns {Thread<StreamChatGenerics>} Returns the thread.\n   */\n  async getThread(messageId: string, options: GetThreadOptions = {}) {\n    if (!messageId) {\n      throw Error('Please specify the messageId when calling getThread');\n    }\n\n    const optionsWithDefaults = {\n      participant_limit: 100,\n      reply_limit: 3,\n      watch: true,\n      ...options,\n    };\n\n    const response = await this.get<GetThreadAPIResponse<StreamChatGenerics>>(\n      `${this.baseURL}/threads/${encodeURIComponent(messageId)}`,\n      optionsWithDefaults,\n    );\n\n    return new Thread<StreamChatGenerics>({ client: this, threadData: response.thread });\n  }\n\n  /**\n   * partialUpdateThread - updates the given thread\n   *\n   * @param {string}              messageId The id of the thread message which needs to be updated.\n   * @param {PartialThreadUpdate} partialThreadObject should contain \"set\" or \"unset\" params for any of the thread's non-reserved fields.\n   *\n   * @returns {GetThreadAPIResponse<StreamChatGenerics>} Returns the updated thread.\n   */\n  async partialUpdateThread(messageId: string, partialThreadObject: PartialThreadUpdate) {\n    if (!messageId) {\n      throw Error('Please specify the message id when calling partialUpdateThread');\n    }\n\n    // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.\n    // Throw error if any of the reserved field is found.\n    const reservedThreadFields = [\n      'created_at',\n      'id',\n      'last_message_at',\n      'type',\n      'updated_at',\n      'user',\n      'reply_count',\n      'participants',\n      'channel',\n      'custom',\n    ];\n\n    for (const key in { ...partialThreadObject.set, ...partialThreadObject.unset }) {\n      if (reservedThreadFields.includes(key)) {\n        throw Error(\n          `You cannot set ${key} field on Thread object. ${key} is reserved for server-side use. Please omit ${key} from your set object.`,\n        );\n      }\n    }\n\n    return await this.patch<GetThreadAPIResponse<StreamChatGenerics>>(\n      `${this.baseURL}/threads/${encodeURIComponent(messageId)}`,\n      partialThreadObject,\n    );\n  }\n\n  getUserAgent() {\n    if (this.userAgent) {\n      return this.userAgent;\n    }\n\n    const version = process.env.PKG_VERSION;\n    const clientBundle = process.env.CLIENT_BUNDLE;\n\n    let userAgentString = '';\n    if (this.sdkIdentifier) {\n      userAgentString = `stream-chat-${this.sdkIdentifier.name}-v${this.sdkIdentifier.version}-llc-v${version}`;\n    } else {\n      userAgentString = `stream-chat-js-v${version}-${this.node ? 'node' : 'browser'}`;\n    }\n\n    const { os, model } = this.deviceIdentifier ?? {};\n\n    return ([\n      // reports the device OS, if provided\n      ['os', os],\n      // reports the device model, if provided\n      ['device_model', model],\n      // reports which bundle is being picked from the exports\n      ['client_bundle', clientBundle],\n    ] as const).reduce(\n      (withArguments, [key, value]) =>\n        value && value.length > 0 ? withArguments.concat(`|${key}=${value}`) : withArguments,\n      userAgentString,\n    );\n  }\n\n  /**\n   * @deprecated use sdkIdentifier instead\n   * @param userAgent\n   */\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _cacheEnabled = () => !this._isUsingServerAuth() || !this.options.disableCache;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ): AxiosRequestConfig {\n    const token = this._getToken();\n    const authorization = token ? { Authorization: token } : undefined;\n    let signal: AbortSignal | null = null;\n    if (this.nextRequestAbortController !== null) {\n      signal = this.nextRequestAbortController.signal;\n      this.nextRequestAbortController = null;\n    }\n\n    if (!options.headers?.['x-client-request-id']) {\n      options.headers = {\n        ...options.headers,\n        'x-client-request-id': randomId(),\n      };\n    }\n\n    const { params: axiosRequestConfigParams, headers: axiosRequestConfigHeaders, ...axiosRequestConfigRest } =\n      this.options.axiosRequestConfig || {};\n\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n        ...(axiosRequestConfigParams || {}),\n      },\n      headers: {\n        ...authorization,\n        'stream-auth-type': this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n        ...(axiosRequestConfigHeaders || {}),\n      },\n      ...(signal ? { signal } : {}),\n      ...options.config,\n      ...(axiosRequestConfigRest || {}),\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  /**\n   * encode ws url payload\n   * @private\n   * @returns json string\n   */\n  _buildWSPayload = (client_request_id?: string) => {\n    return JSON.stringify({\n      user_id: this.userID,\n      user_details: this._user,\n      device: this.options.device,\n      client_request_id,\n    });\n  };\n\n  /**\n   * checks signature of a request\n   * @param {string | Buffer} rawBody\n   * @param {string} signature from HTTP header\n   * @returns {boolean}\n   */\n  verifyWebhook(requestBody: string | Buffer, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(`${this.baseURL}/permissions/${encodeURIComponent(name)}`);\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/permissions`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id: string, permissionData: Omit<CustomPermissionOptions, 'id'>) {\n    return this.put<APIResponse>(`${this.baseURL}/permissions/${encodeURIComponent(id)}`, {\n      ...permissionData,\n    });\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/permissions/${encodeURIComponent(name)}`);\n  }\n\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/permissions`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/roles`, { name });\n  }\n\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/roles`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/roles/${encodeURIComponent(name)}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   * @param {SyncOptions} options See JSDoc in the type fields for more info\n   *\n   * @returns {Promise<SyncResponse>}\n   */\n  sync(channel_cids: string[], last_sync_at: string, options: SyncOptions = {}) {\n    return this.post<SyncResponse>(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n      ...options,\n    });\n  }\n\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID: string, event: UserCustomEvent) {\n    return await this.post<APIResponse>(`${this.baseURL}/users/${encodeURIComponent(targetUserID)}/event`, {\n      event,\n    });\n  }\n\n  /**\n   * Creates a new block list\n   *\n   * @param {BlockList} blockList - The block list to create\n   * @param {string} blockList.name - The name of the block list\n   * @param {string[]} blockList.words - List of words to block\n   * @param {string} [blockList.team] - Team ID the block list belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  /**\n   * Lists all block lists\n   *\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID to filter block lists by\n   *\n   * @returns {Promise<APIResponse & {blocklists: BlockListResponse[]}>} Response containing array of block lists\n   */\n  listBlockLists(data?: { team?: string }) {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(`${this.baseURL}/blocklists`, data);\n  }\n\n  /**\n   * Gets a specific block list\n   *\n   * @param {string} name - The name of the block list to retrieve\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse & {blocklist: BlockListResponse}>} Response containing the block list\n   */\n  getBlockList(name: string, data?: { team?: string }) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(\n      `${this.baseURL}/blocklists/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  /**\n   * Updates an existing block list\n   *\n   * @param {string} name - The name of the block list to update\n   * @param {Object} data - The update data\n   * @param {string[]} data.words - New list of words to block\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  updateBlockList(name: string, data: { words: string[]; team?: string }) {\n    return this.put<APIResponse>(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n\n  /**\n   * Deletes a block list\n   *\n   * @param {string} name - The name of the block list to delete\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  deleteBlockList(name: string, data?: { team?: string }) {\n    return this.delete<APIResponse>(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n\n  exportChannels(request: Array<ExportChannelRequest>, options: ExportChannelOptions = {}) {\n    const payload = { channels: request, ...options };\n    return this.post<APIResponse & ExportChannelResponse>(`${this.baseURL}/export_channels`, payload);\n  }\n\n  exportUsers(request: ExportUsersRequest) {\n    return this.post<APIResponse & ExportUsersResponse>(`${this.baseURL}/export/users`, request);\n  }\n\n  exportChannel(request: ExportChannelRequest, options?: ExportChannelOptions) {\n    return this.exportChannels([request], options);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(\n      `${this.baseURL}/export_channels/${encodeURIComponent(id)}`,\n    );\n  }\n\n  campaign(idOrData: string | CampaignData, data?: CampaignData) {\n    if (idOrData && typeof idOrData === 'object') {\n      return new Campaign(this, null, idOrData);\n    }\n\n    return new Campaign(this, idOrData, data);\n  }\n\n  segment(type: SegmentType, idOrData: string | SegmentData, data?: SegmentData) {\n    if (typeof idOrData === 'string') {\n      return new Segment(this, type, idOrData, data);\n    }\n\n    return new Segment(this, type, null, idOrData);\n  }\n\n  validateServerSideAuth() {\n    if (!this.secret) {\n      throw new Error(\n        'Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.',\n      );\n    }\n  }\n\n  /**\n   * createSegment - Creates a segment\n   *\n   * @private\n   * @param {SegmentType} type Segment type\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} params Segment data\n   *\n   * @return {{segment: SegmentResponse} & APIResponse} The created Segment\n   */\n  async createSegment(type: SegmentType, id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    const body = {\n      id,\n      type,\n      ...data,\n    };\n    return this.post<{ segment: SegmentResponse }>(this.baseURL + `/segments`, body);\n  }\n\n  /**\n   * createUserSegment - Creates a user segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  async createUserSegment(id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    return this.createSegment('user', id, data);\n  }\n\n  /**\n   * createChannelSegment - Creates a channel segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  async createChannelSegment(id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    return this.createSegment('channel', id, data);\n  }\n\n  async getSegment(id: string) {\n    this.validateServerSideAuth();\n    return this.get<{ segment: SegmentResponse } & APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * updateSegment - Update a segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<UpdateSegmentData>} data Data to update\n   *\n   * @return {Segment} Updated Segment\n   */\n  async updateSegment(id: string, data: Partial<UpdateSegmentData>) {\n    this.validateServerSideAuth();\n    return this.put<{ segment: SegmentResponse }>(this.baseURL + `/segments/${encodeURIComponent(id)}`, data);\n  }\n\n  /**\n   * addSegmentTargets - Add targets to a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  async addSegmentTargets(id: string, targets: string[]) {\n    this.validateServerSideAuth();\n    const body = { target_ids: targets };\n    return this.post<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}/addtargets`, body);\n  }\n\n  async querySegmentTargets(\n    id: string,\n    filter: QuerySegmentTargetsFilter | null = {},\n    sort: SortParam[] | null | [] = [],\n    options = {},\n  ) {\n    this.validateServerSideAuth();\n    return this.post<{ targets: SegmentTargetsResponse[]; next?: string } & APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}/targets/query`,\n      {\n        filter: filter || {},\n        sort: sort || [],\n        ...options,\n      },\n    );\n  }\n  /**\n   * removeSegmentTargets - Remove targets from a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  async removeSegmentTargets(id: string, targets: string[]) {\n    this.validateServerSideAuth();\n    const body = { target_ids: targets };\n    return this.post<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}/deletetargets`, body);\n  }\n\n  /**\n   * querySegments - Query Segments\n   *\n   * @param {filter} filter MongoDB style filter conditions\n   * @param {QuerySegmentsOptions} options Options for sorting/paginating the results\n   *\n   * @return {Segment[]} Segments\n   */\n  async querySegments(filter: {}, sort?: SortParam[], options: QuerySegmentsOptions = {}) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        segments: SegmentResponse[];\n        next?: string;\n        prev?: string;\n      } & APIResponse\n    >(this.baseURL + `/segments/query`, {\n      filter,\n      sort,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteSegment(id: string) {\n    this.validateServerSideAuth();\n    return this.delete<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * segmentTargetExists - Check if a target exists in a segment\n   *\n   * @param {string} segmentId Segment ID\n   * @param {string} targetId Target ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async segmentTargetExists(segmentId: string, targetId: string) {\n    this.validateServerSideAuth();\n    return this.get<APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(segmentId)}/target/${encodeURIComponent(targetId)}`,\n    );\n  }\n\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  async createCampaign(params: CampaignData) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns`, { ...params });\n  }\n\n  async getCampaign(id: string, options?: GetCampaignOptions) {\n    this.validateServerSideAuth();\n    return this.get<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, { ...options?.users });\n  }\n\n  async startCampaign(id: string, options?: { scheduledFor?: string; stopAt?: string }) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns/${encodeURIComponent(id)}/start`, {\n      scheduled_for: options?.scheduledFor,\n      stop_at: options?.stopAt,\n    });\n  }\n  /**\n   * queryCampaigns - Query Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async queryCampaigns(filter: CampaignFilters, sort?: CampaignSort, options?: CampaignQueryOptions) {\n    this.validateServerSideAuth();\n    return await this.post<\n      {\n        campaigns: CampaignResponse[];\n        next?: string;\n        prev?: string;\n      } & APIResponse\n    >(this.baseURL + `/campaigns/query`, {\n      filter,\n      sort,\n      ...(options || {}),\n    });\n  }\n\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  async updateCampaign(id: string, params: Partial<CampaignData>) {\n    this.validateServerSideAuth();\n    return this.put<{\n      campaign: CampaignResponse;\n      users: {\n        next?: string;\n        prev?: string;\n      };\n    }>(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, params);\n  }\n\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteCampaign(id: string) {\n    this.validateServerSideAuth();\n    return this.delete<APIResponse>(this.baseURL + `/campaigns/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  async stopCampaign(id: string) {\n    this.validateServerSideAuth();\n    return this.post<{ campaign: CampaignResponse }>(this.baseURL + `/campaigns/${encodeURIComponent(id)}/stop`);\n  }\n\n  /**\n   * enrichURL - Get OpenGraph data of the given link\n   *\n   * @param {string} url link\n   * @return {OGAttachment} OG Attachment\n   */\n  async enrichURL(url: string) {\n    return this.get<APIResponse & OGAttachment>(this.baseURL + `/og`, { url });\n  }\n\n  /**\n   * getTask - Gets status of a long running task\n   *\n   * @param {string} id Task ID\n   *\n   * @return {TaskStatus} The task status\n   */\n  async getTask(id: string) {\n    return this.get<APIResponse & TaskStatus>(`${this.baseURL}/tasks/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * deleteChannels - Deletes a list of channel\n   *\n   * @param {string[]} cids Channel CIDs\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well\n   */\n  async deleteChannels(cids: string[], options: { hard_delete?: boolean } = {}) {\n    return await this.post<APIResponse & DeleteChannelsResponse>(this.baseURL + `/channels/delete`, {\n      cids,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteUsers - Batch Delete Users\n   *\n   * @param {string[]} user_ids which users to delete\n   * @param {DeleteUserOptions} options Configuration how to delete users\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deleteUsers(user_ids: string[], options: DeleteUserOptions = {}) {\n    if (typeof options.user !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.user)) {\n      throw new Error('Invalid delete user options. user must be one of [soft hard pruning]');\n    }\n    if (typeof options.conversations !== 'undefined' && !['soft', 'hard'].includes(options.conversations)) {\n      throw new Error('Invalid delete user options. conversations must be one of [soft hard]');\n    }\n    if (typeof options.messages !== 'undefined' && !['soft', 'hard', 'pruning'].includes(options.messages)) {\n      throw new Error('Invalid delete user options. messages must be one of [soft hard pruning]');\n    }\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/delete`, {\n      user_ids,\n      ...options,\n    });\n  }\n\n  /**\n   * _createImportURL - Create an Import upload url.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} filename filename of uploaded data\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImportURL(filename: string) {\n    return await this.post<APIResponse & CreateImportURLResponse>(this.baseURL + `/import_urls`, {\n      filename,\n    });\n  }\n\n  /**\n   * _createImport - Create an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} path path of uploaded data\n   * @param {CreateImportOptions} options import options\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImport(path: string, options: CreateImportOptions = { mode: 'upsert' }) {\n    return await this.post<APIResponse & CreateImportResponse>(this.baseURL + `/imports`, {\n      path,\n      ...options,\n    });\n  }\n\n  /**\n   * _getImport - Get an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} id id of Import Task\n   *\n   * @return {APIResponse & GetImportResponse} An ImportTask\n   */\n  async _getImport(id: string) {\n    return await this.get<APIResponse & GetImportResponse>(this.baseURL + `/imports/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * _listImports - Lists Import Tasks.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {ListImportsPaginationOptions} options pagination options\n   *\n   * @return {APIResponse & ListImportsResponse} An ImportTask\n   */\n  async _listImports(options: ListImportsPaginationOptions) {\n    return await this.get<APIResponse & ListImportsResponse>(this.baseURL + `/imports`, options);\n  }\n\n  /**\n   * upsertPushProvider - Create or Update a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderConfig} configuration of the provider you want to create or update\n   *\n   * @return {APIResponse & PushProviderUpsertResponse} A push provider\n   */\n  async upsertPushProvider(pushProvider: PushProviderConfig) {\n    return await this.post<APIResponse & PushProviderUpsertResponse>(this.baseURL + `/push_providers`, {\n      push_provider: pushProvider,\n    });\n  }\n\n  /**\n   * deletePushProvider - Delete a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderID} type and foreign id of the push provider to be deleted\n   *\n   * @return {APIResponse} An API response\n   */\n  async deletePushProvider({ type, name }: PushProviderID) {\n    return await this.delete<APIResponse>(\n      this.baseURL + `/push_providers/${encodeURIComponent(type)}/${encodeURIComponent(name)}`,\n    );\n  }\n\n  /**\n   * listPushProviders - Get all push providers in the app\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @return {APIResponse & PushProviderListResponse} A push provider\n   */\n  async listPushProviders() {\n    return await this.get<APIResponse & PushProviderListResponse>(this.baseURL + `/push_providers`);\n  }\n\n  /**\n   * creates an abort controller that will be used by the next HTTP Request.\n   */\n  createAbortControllerForNextRequest() {\n    return (this.nextRequestAbortController = new AbortController());\n  }\n\n  /**\n   * commits a pending message, making it visible in the channel and for other users\n   * @param id the message id\n   *\n   * @return {APIResponse & MessageResponse} The message\n   */\n  async commitMessage(id: string) {\n    return await this.post<APIResponse & MessageResponse>(this.baseURL + `/messages/${encodeURIComponent(id)}/commit`);\n  }\n\n  /**\n   * Creates a poll\n   * @param poll PollData The poll that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CreatePollAPIResponse} The poll\n   */\n  async createPoll(poll: CreatePollData<StreamChatGenerics>, userId?: string) {\n    return await this.post<APIResponse & CreatePollAPIResponse<StreamChatGenerics>>(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Retrieves a poll\n   * @param id string The poll id\n   *  @param userId string The user id (only serverside)\n   * @returns {APIResponse & GetPollAPIResponse} The poll\n   */\n  async getPoll(id: string, userId?: string): Promise<APIResponse & GetPollAPIResponse<StreamChatGenerics>> {\n    return await this.get<APIResponse & GetPollAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Updates a poll\n   * @param poll PollData The poll that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollResponse} The poll\n   */\n  async updatePoll(poll: PollData<StreamChatGenerics>, userId?: string) {\n    return await this.put<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>>(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Partially updates a poll\n   * @param id string The poll id\n   * @param {PartialPollUpdate<StreamChatGenerics>} partialPollObject which should contain id and any of \"set\" or \"unset\" params;\n   * @param userId string The user id (only serverside)\n   * example: {id: \"44f26af5-f2be-4fa7-9dac-71cf893781de\", set:{field: value}, unset:[\"field2\"]}\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  async partialUpdatePoll(\n    id: string,\n    partialPollObject: PartialPollUpdate<StreamChatGenerics>,\n    userId?: string,\n  ): Promise<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>> {\n    return await this.patch<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      {\n        ...partialPollObject,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Delete a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async deletePoll(id: string, userId?: string): Promise<APIResponse> {\n    return await this.delete<APIResponse>(this.baseURL + `/polls/${encodeURIComponent(id)}`, {\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Close a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  async closePoll(id: string, userId?: string): Promise<APIResponse & UpdatePollAPIResponse<StreamChatGenerics>> {\n    return this.partialUpdatePoll(\n      id,\n      {\n        set: {\n          is_closed: true,\n        } as PartialPollUpdate<StreamChatGenerics>['set'],\n      },\n      userId,\n    );\n  }\n\n  /**\n   * Creates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async createPollOption(pollId: string, option: PollOptionData<StreamChatGenerics>, userId?: string) {\n    return await this.post<APIResponse & CreatePollOptionAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`,\n      {\n        ...option,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Retrieves a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async getPollOption(pollId: string, optionId: string, userId?: string) {\n    return await this.get<APIResponse & GetPollOptionAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Updates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async updatePollOption(pollId: string, option: PollOptionData<StreamChatGenerics>, userId?: string) {\n    return await this.put<APIResponse & UpdatePollOptionAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`,\n      {\n        ...option,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Delete a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse} The poll option\n   */\n  async deletePollOption(pollId: string, optionId: string, userId?: string) {\n    return await this.delete<APIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Cast vote on a poll\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param vote PollVoteData The vote that will be casted\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CastVoteAPIResponse} The poll vote\n   */\n  async castPollVote(messageId: string, pollId: string, vote: PollVoteData, userId?: string) {\n    return await this.post<APIResponse & CastVoteAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote`,\n      {\n        vote,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Add a poll answer\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param answerText string The answer text\n   * @param userId string The user id (only serverside)\n   */\n  async addPollAnswer(messageId: string, pollId: string, answerText: string, userId?: string) {\n    return this.castPollVote(\n      messageId,\n      pollId,\n      {\n        answer_text: answerText,\n      },\n      userId,\n    );\n  }\n\n  async removePollVote(messageId: string, pollId: string, voteId: string, userId?: string) {\n    return await this.delete<APIResponse & { vote: PollVote }>(\n      this.baseURL +\n        `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote/${encodeURIComponent(\n          voteId,\n        )}`,\n      {\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Queries polls\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & QueryPollsResponse} The polls\n   */\n  async queryPolls(\n    filter: QueryPollsFilters = {},\n    sort: PollSort = [],\n    options: QueryPollsOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & QueryPollsResponse<StreamChatGenerics>> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & QueryPollsResponse<StreamChatGenerics>>(this.baseURL + `/polls/query${q}`, {\n      filter,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    });\n  }\n\n  /**\n   * Queries poll votes\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollVotesAPIResponse} The poll votes\n   */\n  async queryPollVotes(\n    pollId: string,\n    filter: QueryVotesFilters = {},\n    sort: VoteSort = [],\n    options: QueryVotesOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & PollVotesAPIResponse<StreamChatGenerics>> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & PollVotesAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`,\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Queries poll answers\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollAnswersAPIResponse} The poll votes\n   */\n  async queryPollAnswers(\n    pollId: string,\n    filter: QueryVotesFilters = {},\n    sort: VoteSort = [],\n    options: QueryVotesOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & PollAnswersAPIResponse<StreamChatGenerics>> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & PollAnswersAPIResponse<StreamChatGenerics>>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`,\n      {\n        filter: { ...filter, is_answer: true },\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Query message history\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10}\n   * @returns {APIResponse & QueryMessageHistoryResponse} The message histories\n   */\n  async queryMessageHistory(\n    filter: QueryMessageHistoryFilters = {},\n    sort: QueryMessageHistorySort = [],\n    options: QueryMessageHistoryOptions = {},\n  ): Promise<APIResponse & QueryMessageHistoryResponse<StreamChatGenerics>> {\n    return await this.post<APIResponse & QueryMessageHistoryResponse<StreamChatGenerics>>(\n      this.baseURL + '/messages/history',\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * updateFlags - reviews/unflags flagged message\n   *\n   * @param {string[]} message_ids list of message IDs\n   * @param {string} options Option object in case user ID is set to review all the flagged messages by the user\n   * @param {string} reviewed_by user ID who reviewed the flagged message\n   * @returns {APIResponse}\n   */\n  async updateFlags(message_ids: string[], reviewed_by: string, options: { user_id?: string } = {}) {\n    return await this.post<APIResponse>(this.baseURL + '/automod/v1/moderation/update_flags', {\n      message_ids,\n      reviewed_by,\n      ...options,\n    });\n  }\n\n  /**\n   * queryDrafts - Queries drafts for the current user\n   *\n   * @param {object} [options] Query options\n   * @param {object} [options.filter] Filters for the query\n   * @param {number} [options.sort] Sort parameters\n   * @param {number} [options.limit] Limit the number of results\n   * @param {string} [options.next] Pagination parameter\n   * @param {string} [options.prev] Pagination parameter\n   * @param {string} [options.user_id] Has to be provided when called server-side\n   *\n   * @return {Promise<APIResponse & { drafts: DraftResponse<StreamChatGenerics>[]; next?: string }>} Response containing the drafts\n   */\n  async queryDrafts(\n    options: Pager & {\n      filter?: DraftFilters<StreamChatGenerics>;\n      sort?: DraftSort;\n      user_id?: string;\n    } = {},\n  ) {\n    const payload = {\n      ...options,\n      sort: options.sort ? normalizeQuerySort(options.sort) : undefined,\n    };\n\n    return await this.post<QueryDraftsResponse<StreamChatGenerics>>(this.baseURL + '/drafts/query', payload);\n  }\n}\n", "export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.kicked': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'message.undeleted': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.mark_unread': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'notification.thread_message_new': true,\n  'poll.closed': true,\n  'poll.updated': true,\n  'poll.vote_casted': true,\n  'poll.vote_changed': true,\n  'poll.vote_removed': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'thread.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.unread_message_reminder': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n  // AI events\n  'ai_indicator.update': true,\n  'ai_indicator.stop': true,\n  'ai_indicator.clear': true,\n\n  // local events\n  'channels.queried': true,\n  'connection.changed': true,\n  'connection.recovered': true,\n  'transport.changed': true,\n  'capabilities.changed': true,\n};\n", "import { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow);\n\n// deprecated\nexport const DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);\n\nexport type Role = 'admin' | 'user' | 'guest' | 'anonymous' | 'channel_member' | 'channel_moderator' | string;\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n", "import { debounce, DebouncedFunc } from './utils';\nimport { StateStore } from './store';\nimport type { Channel } from './channel';\nimport type { StreamChat } from './client';\nimport type {\n  ChannelFilters,\n  ChannelOptions,\n  ChannelSort,\n  DefaultGenerics,\n  ExtendableGenerics,\n  MessageFilters,\n  MessageResponse,\n  SearchMessageSort,\n  SearchOptions,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n} from './types';\n\nexport type SearchSourceType = 'channels' | 'users' | 'messages' | (string & {});\nexport type QueryReturnValue<T> = { items: T[]; next?: string };\nexport type DebounceOptions = {\n  debounceMs: number;\n};\ntype DebouncedExecQueryFunction = DebouncedFunc<(searchString?: string) => Promise<void>>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface SearchSource<T = any> {\n  activate(): void;\n  deactivate(): void;\n  readonly hasNext: boolean;\n  readonly hasResults: boolean;\n  readonly initialState: SearchSourceState<T>;\n  readonly isActive: boolean;\n  readonly isLoading: boolean;\n  readonly items: T[] | undefined;\n  readonly lastQueryError: Error | undefined;\n  readonly next: string | undefined;\n  readonly offset: number | undefined;\n  resetState(): void;\n  search(text?: string): void;\n  searchDebounced: DebouncedExecQueryFunction;\n  readonly searchQuery: string;\n  setDebounceOptions(options: DebounceOptions): void;\n  readonly state: StateStore<SearchSourceState<T>>;\n  readonly type: SearchSourceType;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type SearchSourceState<T = any> = {\n  hasNext: boolean;\n  isActive: boolean;\n  isLoading: boolean;\n  items: T[] | undefined;\n  searchQuery: string;\n  lastQueryError?: Error;\n  next?: string;\n  offset?: number;\n};\n\nexport type SearchSourceOptions = {\n  /** The number of milliseconds to debounce the search query. The default interval is 300ms. */\n  debounceMs?: number;\n  pageSize?: number;\n};\n\nconst DEFAULT_SEARCH_SOURCE_OPTIONS: Required<SearchSourceOptions> = {\n  debounceMs: 300,\n  pageSize: 10,\n} as const;\n\nexport abstract class BaseSearchSource<T> implements SearchSource<T> {\n  state: StateStore<SearchSourceState<T>>;\n  protected pageSize: number;\n  abstract readonly type: SearchSourceType;\n  searchDebounced!: DebouncedExecQueryFunction;\n\n  protected constructor(options?: SearchSourceOptions) {\n    const { debounceMs, pageSize } = { ...DEFAULT_SEARCH_SOURCE_OPTIONS, ...options };\n    this.pageSize = pageSize;\n    this.state = new StateStore<SearchSourceState<T>>(this.initialState);\n    this.setDebounceOptions({ debounceMs });\n  }\n\n  get lastQueryError() {\n    return this.state.getLatestValue().lastQueryError;\n  }\n\n  get hasNext() {\n    return this.state.getLatestValue().hasNext;\n  }\n\n  get hasResults() {\n    return Array.isArray(this.state.getLatestValue().items);\n  }\n\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n\n  get isLoading() {\n    return this.state.getLatestValue().isLoading;\n  }\n\n  get initialState() {\n    return {\n      hasNext: true,\n      isActive: false,\n      isLoading: false,\n      items: undefined,\n      lastQueryError: undefined,\n      next: undefined,\n      offset: 0,\n      searchQuery: '',\n    };\n  }\n\n  get items() {\n    return this.state.getLatestValue().items;\n  }\n\n  get next() {\n    return this.state.getLatestValue().next;\n  }\n\n  get offset() {\n    return this.state.getLatestValue().offset;\n  }\n\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n\n  protected abstract query(searchQuery: string): Promise<QueryReturnValue<T>>;\n\n  protected abstract filterQueryResults(items: T[]): T[] | Promise<T[]>;\n\n  setDebounceOptions = ({ debounceMs }: DebounceOptions) => {\n    this.searchDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n  };\n\n  activate = () => {\n    if (this.isActive) return;\n    this.state.partialNext({ isActive: true });\n  };\n\n  deactivate = () => {\n    if (!this.isActive) return;\n    this.state.partialNext({ isActive: false });\n  };\n\n  async executeQuery(newSearchString?: string) {\n    const hasNewSearchQuery = typeof newSearchString !== 'undefined';\n    const searchString = newSearchString ?? this.searchQuery;\n    if (!this.isActive || this.isLoading || (!this.hasNext && !hasNewSearchQuery) || !searchString) return;\n\n    if (hasNewSearchQuery) {\n      this.state.next({\n        ...this.initialState,\n        isActive: this.isActive,\n        isLoading: true,\n        searchQuery: newSearchString ?? '',\n      });\n    } else {\n      this.state.partialNext({ isLoading: true });\n    }\n\n    const stateUpdate: Partial<SearchSourceState<T>> = {};\n    try {\n      const results = await this.query(searchString);\n      if (!results) return;\n      const { items, next } = results;\n\n      if (next) {\n        stateUpdate.next = next;\n        stateUpdate.hasNext = !!next;\n      } else {\n        stateUpdate.offset = (this.offset ?? 0) + items.length;\n        stateUpdate.hasNext = items.length === this.pageSize;\n      }\n\n      stateUpdate.items = await this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e as Error;\n    } finally {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      this.state.next(({ lastQueryError, ...current }: SearchSourceState<T>) => ({\n        ...current,\n        ...stateUpdate,\n        isLoading: false,\n        items: [...(current.items ?? []), ...(stateUpdate.items || [])],\n      }));\n    }\n  }\n\n  search = (searchQuery?: string) => {\n    this.searchDebounced(searchQuery);\n  };\n\n  resetState() {\n    this.state.next(this.initialState);\n  }\n}\n\nexport class UserSearchSource<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> extends BaseSearchSource<\n  UserResponse<StreamChatGenerics>\n> {\n  readonly type = 'users';\n  private client: StreamChat<StreamChatGenerics>;\n  filters: UserFilters<StreamChatGenerics> | undefined;\n  sort: UserSort<StreamChatGenerics> | undefined;\n  searchOptions: Omit<UserOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat<StreamChatGenerics>, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    const filters = {\n      $or: [{ id: { $autocomplete: searchQuery } }, { name: { $autocomplete: searchQuery } }],\n      ...this.filters,\n    } as UserFilters<StreamChatGenerics>;\n    const sort = { id: 1, ...this.sort } as UserSort<StreamChatGenerics>;\n    const options = { ...this.searchOptions, limit: this.pageSize, offset: this.offset };\n    const { users } = await this.client.queryUsers(filters, sort, options);\n    return { items: users };\n  }\n\n  protected filterQueryResults(items: UserResponse<StreamChatGenerics>[]) {\n    return items.filter((u) => u.id !== this.client.user?.id);\n  }\n}\n\nexport class ChannelSearchSource<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> extends BaseSearchSource<Channel<StreamChatGenerics>> {\n  readonly type = 'channels';\n  private client: StreamChat<StreamChatGenerics>;\n  filters: ChannelFilters<StreamChatGenerics> | undefined;\n  sort: ChannelSort<StreamChatGenerics> | undefined;\n  searchOptions: Omit<ChannelOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat<StreamChatGenerics>, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    const filters = {\n      members: { $in: [this.client.userID] },\n      name: { $autocomplete: searchQuery },\n      ...this.filters,\n    } as ChannelFilters<StreamChatGenerics>;\n    const sort = this.sort ?? {};\n    const options = { ...this.searchOptions, limit: this.pageSize, offset: this.offset };\n    const items = await this.client.queryChannels(filters, sort, options);\n    return { items };\n  }\n\n  protected filterQueryResults(items: Channel<StreamChatGenerics>[]) {\n    return items;\n  }\n}\n\nexport class MessageSearchSource<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> extends BaseSearchSource<MessageResponse<StreamChatGenerics>> {\n  readonly type = 'messages';\n  private client: StreamChat<StreamChatGenerics>;\n  messageSearchChannelFilters: ChannelFilters<StreamChatGenerics> | undefined;\n  messageSearchFilters: MessageFilters<StreamChatGenerics> | undefined;\n  messageSearchSort: SearchMessageSort<StreamChatGenerics> | undefined;\n  channelQueryFilters: ChannelFilters<StreamChatGenerics> | undefined;\n  channelQuerySort: ChannelSort<StreamChatGenerics> | undefined;\n  channelQueryOptions: Omit<ChannelOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat<StreamChatGenerics>, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    if (!this.client.userID) return { items: [] };\n\n    const channelFilters: ChannelFilters<StreamChatGenerics> = {\n      members: { $in: [this.client.userID] },\n      ...this.messageSearchChannelFilters,\n    } as ChannelFilters<StreamChatGenerics>;\n\n    const messageFilters: MessageFilters<StreamChatGenerics> = {\n      text: searchQuery,\n      type: 'regular', // FIXME: type: 'reply' resp. do not filter by type and allow to jump to a message in a thread - missing support\n      ...this.messageSearchFilters,\n    } as MessageFilters<StreamChatGenerics>;\n\n    const sort: SearchMessageSort<StreamChatGenerics> = {\n      created_at: -1,\n      ...this.messageSearchSort,\n    };\n\n    const options = {\n      limit: this.pageSize,\n      next: this.next,\n      sort,\n    } as SearchOptions<StreamChatGenerics>;\n\n    const { next, results } = await this.client.search(channelFilters, messageFilters, options);\n    const items = results.map(({ message }) => message);\n\n    const cids = Array.from(\n      items.reduce((acc, message) => {\n        if (message.cid && !this.client.activeChannels[message.cid]) acc.add(message.cid);\n        return acc;\n      }, new Set<string>()), // keep the cids unique\n    );\n    const allChannelsLoadedLocally = cids.length === 0;\n    if (!allChannelsLoadedLocally) {\n      await this.client.queryChannels(\n        {\n          cid: { $in: cids },\n          ...this.channelQueryFilters,\n        } as ChannelFilters<StreamChatGenerics>,\n        {\n          last_message_at: -1,\n          ...this.channelQuerySort,\n        },\n        this.channelQueryOptions,\n      );\n    }\n\n    return { items, next };\n  }\n\n  protected filterQueryResults(items: MessageResponse<StreamChatGenerics>[]) {\n    return items;\n  }\n}\n\nexport type DefaultSearchSources<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = [\n  UserSearchSource<StreamChatGenerics>,\n  ChannelSearchSource<StreamChatGenerics>,\n  MessageSearchSource<StreamChatGenerics>,\n];\n\nexport type SearchControllerState = {\n  isActive: boolean;\n  searchQuery: string;\n  sources: SearchSource[];\n};\n\nexport type InternalSearchControllerState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  // FIXME: focusedMessage should live in a MessageListController class that does not exist yet.\n  //  This state prop should be then removed\n  focusedMessage?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type SearchControllerConfig = {\n  // The controller will make sure there is always exactly one active source. Enabled by default.\n  keepSingleActiveSource: boolean;\n};\n\nexport type SearchControllerOptions = {\n  config?: Partial<SearchControllerConfig>;\n  sources?: SearchSource[];\n};\n\nexport class SearchController<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  /**\n   * Not intended for direct use by integrators, might be removed without notice resulting in\n   * broken integrations.\n   */\n  _internalState: StateStore<InternalSearchControllerState<StreamChatGenerics>>;\n  state: StateStore<SearchControllerState>;\n  config: SearchControllerConfig;\n\n  constructor({ config, sources }: SearchControllerOptions = {}) {\n    this.state = new StateStore<SearchControllerState>({\n      isActive: false,\n      searchQuery: '',\n      sources: sources ?? [],\n    });\n    this._internalState = new StateStore<InternalSearchControllerState<StreamChatGenerics>>({});\n    this.config = { keepSingleActiveSource: true, ...config };\n  }\n  get hasNext() {\n    return this.sources.some((source) => source.hasNext);\n  }\n\n  get sources() {\n    return this.state.getLatestValue().sources;\n  }\n\n  get activeSources() {\n    return this.state.getLatestValue().sources.filter((s) => s.isActive);\n  }\n\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n\n  get searchSourceTypes(): Array<SearchSource['type']> {\n    return this.sources.map((s) => s.type);\n  }\n\n  addSource = (source: SearchSource) => {\n    this.state.partialNext({\n      sources: [...this.sources, source],\n    });\n  };\n\n  getSource = (sourceType: SearchSource['type']) => this.sources.find((s) => s.type === sourceType);\n\n  removeSource = (sourceType: SearchSource['type']) => {\n    const newSources = this.sources.filter((s) => s.type !== sourceType);\n    if (newSources.length === this.sources.length) return;\n    this.state.partialNext({ sources: newSources });\n  };\n\n  activateSource = (sourceType: SearchSource['type']) => {\n    const source = this.getSource(sourceType);\n    if (!source || source.isActive) return;\n    if (this.config.keepSingleActiveSource) {\n      this.sources.forEach((s) => {\n        if (s.type !== sourceType) {\n          s.deactivate();\n        }\n      });\n    }\n    source.activate();\n    this.state.partialNext({ sources: [...this.sources] });\n  };\n\n  deactivateSource = (sourceType: SearchSource['type']) => {\n    const source = this.getSource(sourceType);\n    if (!source?.isActive) return;\n    if (this.activeSources.length === 1) return;\n    source.deactivate();\n    this.state.partialNext({ sources: [...this.sources] });\n  };\n\n  activate = () => {\n    if (!this.activeSources.length) {\n      const sourcesToActivate = this.config.keepSingleActiveSource ? this.sources.slice(0, 1) : this.sources;\n      sourcesToActivate.forEach((s) => s.activate());\n    }\n    if (this.isActive) return;\n    this.state.partialNext({ isActive: true });\n  };\n\n  search = async (searchQuery?: string) => {\n    const searchedSources = this.activeSources;\n    this.state.partialNext({\n      searchQuery,\n    });\n    await Promise.all(searchedSources.map((source) => source.search(searchQuery)));\n  };\n\n  cancelSearchQueries = () => {\n    this.activeSources.forEach((s) => s.searchDebounced.cancel());\n  };\n\n  clear = () => {\n    this.cancelSearchQueries();\n    this.sources.forEach((source) => source.state.next({ ...source.initialState, isActive: source.isActive }));\n    this.state.next((current) => ({\n      ...current,\n      isActive: true,\n      queriesInProgress: [],\n      searchQuery: '',\n    }));\n  };\n\n  exit = () => {\n    this.cancelSearchQueries();\n    this.sources.forEach((source) => source.state.next({ ...source.initialState, isActive: source.isActive }));\n    this.state.next((current) => ({\n      ...current,\n      isActive: false,\n      queriesInProgress: [],\n      searchQuery: '',\n    }));\n  };\n}\n"],
  "mappings": "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",
  "names": ["fromByteArray", "len", "i", "len2", "_typeof", "o", "_typeof", "_regeneratorRuntime", "t", "e", "r", "define", "n", "i", "a", "c", "o", "u", "h", "p", "require_browser", "n", "o", "r", "t", "e", "t", "t", "_isNativeReflectConstruct", "_wrapNativeSuper", "t", "isString", "arrayOrString", "isMapStringCallback", "callback", "map", "res", "k", "len", "length", "charAt", "kValue", "mappedValue", "encodeBase64", "data", "fromByteArray", "Uint8Array", "char", "charCodeAt", "decodeBase64", "s", "e", "w", "String", "fromCharCode", "L", "i", "b", "c", "x", "l", "a", "r", "A", "Campaign", "client", "id", "_regeneratorRuntime", "body", "message_template", "segment_ids", "sender_id", "sender_mode", "channel_template", "create_channels", "show_channels", "description", "name", "skip_push", "skip_webhook", "user_ids", "createCampaign", "result", "campaign", "Error", "options", "verifyCampaignId", "startCampaign", "updateCampaign", "deleteCampaign", "stopCampaign", "getCampaign", "get", "logChatPromiseExecution", "promise", "then", "catch", "error", "console", "warn", "sleep", "m", "Promise", "setTimeout", "isFunction", "value", "Object", "prototype", "toString", "call", "Function", "chatCodes", "TOKEN_EXPIRED", "WS_CLOSED_SUCCESS", "isReadableStream", "obj", "readable", "_read", "isBuffer", "constructor", "isFileWebAPI", "uri", "window", "File", "isOwnUser", "user", "total_unread_count", "undefined", "isBlobWebAPI", "Blob", "isOwnUserBaseProperty", "property", "ownUserBaseProperties", "channel_mutes", "devices", "mutes", "unread_channels", "unread_count", "unread_threads", "invisible", "privacy_settings", "roles", "push_preferences", "addFileToFormData", "contentType", "FormData", "append", "split", "reverse", "type", "normalizeQuerySort", "sort", "sortFields", "sortArr", "Array", "isArray", "item", "entries", "field", "direction", "push", "retryInterval", "numberOfFailures", "max", "Math", "min", "floor", "random", "randomId", "generateUUIDv4", "hex", "bytes", "padStart", "getRandomBytes", "subarray", "getRandomValuesWithMathRandom", "pow", "byteLength", "getRandomValues", "crypto", "bind", "msCrypto", "convertErrorToJson", "err", "jsonObj", "getOwnPropertyNames", "forEach", "key", "getOwnPropertyDescriptor", "_", "isOnline", "nav", "navigator", "onLine", "addConnectionEventListeners", "cb", "addEventListener", "removeConnectionEventListeners", "removeEventListener", "axiosParamsSerializer", "params", "newParams", "encodeURIComponent", "JSON", "stringify", "join", "formatMessage", "message", "__html", "html", "pinned_at", "Date", "created_at", "updated_at", "deleted_at", "status", "reaction_groups", "maybeGetReactionGroupsFallback", "reaction_counts", "reaction_scores", "findIndexInSortedArray", "needle", "sortedArray", "selectKey", "selectValueToCompare", "sortDirection", "left", "right", "middle", "recalculateMiddle", "round", "comparableNeedle", "comparableMiddle", "needleKey", "step", "addToMessageList", "messages", "newMessage", "timestampChanged", "sortBy", "addIfDoesNotExist", "addMessageToList", "newMessages", "filter", "concat", "messageTime", "getTime", "messageIsNewest", "at", "insertionIndex", "splice", "groups", "counts", "scores", "fallback", "keys", "count", "sum_scores", "debounce", "fn", "timeout", "leading", "trailing", "runningTimeout", "argsForTrailingExecution", "lastResult", "debouncedFn", "args", "clearTimeout", "timeoutHandler", "cancel", "flush", "throttle", "storedArgs", "path", "reduce", "acc", "uniqBy", "array", "iteratee", "seen", "Set", "has", "add", "binarySearchByDateEqualOrNearestGreater", "targetDate", "mid", "midCreatedAt", "midDate", "messagePaginationCreatedAtAround", "parentSet", "requestedPageSize", "returnedPage", "messagePaginationOptions", "newPagination", "pagination", "created_at_around", "hasPrev", "hasNext", "updateHasPrev", "updateHasNext", "createdAtAroundDate", "slice", "firstPageMsg", "lastPageMsg", "wholePageHasNewerMessages", "wholePageHasOlderMessages", "requestedPageSizeNotMet", "noMoreMessages", "firstPageMsgIsFirstInSet", "lastPageMsgIsLastInSet", "midPointByCount", "midPointByCreationDate", "messagePaginationIdAround", "id_around", "midPoint", "targetMsg", "halves", "find", "messagePaginationLinear", "queriedNextMessages", "created_at_after_or_equal", "created_at_after", "id_gt", "id_gte", "queriedPrevMessages", "created_at_before_or_equal", "created_at_before", "id_lt", "id_lte", "offset", "containsUnrecognizedOptionsOnly", "hasMore", "returnedPageIsEmpty", "messageSetPagination", "logger", "WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL", "getAndWatchChannel", "channel", "members", "channelToWatch", "originalCid", "cid", "generateChannelTempCid", "queryPromise", "watch", "channelType", "membersStr", "isChannelPinned", "member", "state", "membership", "isChannelArchived", "archived_at", "shouldConsiderArchivedChannels", "filters", "archived", "extractSortValue", "atIndex", "targetKey", "option", "index", "shouldConsiderPinnedChannels", "findPinnedAtSortOrder", "abs", "findLastPinnedChannelIndex", "channels", "lastPinnedChannelIndex", "promoteChannel", "channelToMove", "channelToMoveIndexWithinChannels", "targetChannelIndex", "findIndex", "targetChannelExistsWithinList", "targetChannelAlreadyAtTheTop", "considerPinnedChannels", "isTargetChannelPinned", "newChannels", "DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE", "DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE", "DEFAULT_MESSAGE_SET_PAGINATION", "ChannelState", "isUpToDate", "msgArray", "msg", "removed", "_updateUserMessages", "messageSets", "set", "parentId", "threads", "pinnedMessages", "hardDelete", "_deleteUserMessages", "latest_reactions", "mentioned_users", "own_reactions", "parent_id", "reply_count", "thread_participants", "_channel", "watcher_count", "typing", "read", "initMessages", "pending_messages", "mutedUsers", "watchers", "unreadCount", "last_message_at", "isCurrent", "isLatest", "messageSetToAddToIfDoesNotExist", "addMessagesSorted", "initializing", "findTargetMessageSet", "messagesToAdd", "targetMessageSetIndex", "isFromShadowBannedUser", "shadowed", "isMessageFormatted", "getClient", "updateUserReference", "parentID", "show_in_channel", "_addToMessageList", "thread", "messageSet", "addPinnedMessage", "pinnedMessage", "removeMessageFromArray", "reaction", "enforce_unique", "messageWithReaction", "_updateMessage", "_addOwnReactionToMessage", "ownReactions", "_removeOwnReactionFromMessage", "userID", "user_id", "remove", "parseMessage", "toISOString", "update", "updatedMessages", "quoted_message_id", "quoted_message", "attachments", "_updateQuotedMessageReferences", "updateFunc", "pinned", "msgIndex", "messageSetIndex", "findMessageSetIndex", "messageToRemove", "isRemoved", "threadMessages", "filteredMessages", "latestMessages", "now", "lastEvent", "receivedAt", "received_at", "dispatchEvent", "messageId", "parentMessageId", "limit", "switchedToMessageSet", "loadedMessageThread", "messageIdToFind", "switchToMessageSet", "query", "getReplies", "currentMessages", "messages1", "messages2", "some", "m1", "m2", "overlappingMessageSetIndices", "areMessageSetsOverlap", "mergeTargetMessageSetIndex", "mergeSourceMessageSetIndices", "target", "sources", "indexOf", "overlappingMessageSetIndex", "Channel", "defaultOptions", "presence", "event", "listeners", "all", "listener", "baseURL", "validTypeRe", "validIDRe", "test", "_client", "_data", "initialized", "offlineMode", "lastTypingEvent", "isTyping", "disconnected", "configs", "post", "_channelURL", "sendFile", "url", "delete", "_checkInitialized", "next", "payload", "filter_conditions", "message_filter_conditions", "wsPromise", "filterConditions", "updates", "URL", "userId", "searchParams", "patch", "messageID", "reactionType", "channelData", "updateMessage", "reserved", "_update", "areCapabilitiesChanged", "own_capabilities", "coolDownInterval", "cooldown", "accept_invite", "reject_invite", "add_members", "add_moderators", "assign_roles", "invites", "remove_members", "demote_moderators", "opts", "channel_cid", "cli", "uid", "partialUpdateMember", "resp", "channel_member", "_muteStatus", "formData", "message_id", "form_data", "_isTypingIndicatorsEnabled", "diff", "lastKeyStroke", "sendEvent", "ai_state", "getConfig", "typing_events", "typing_indicators", "enabled", "messageSlice", "read_events", "_isUsingServerAuth", "resolve", "stopTyping", "clean", "_hasConnectionID", "combined", "tags", "response", "normalizedSort", "messageIds", "ids", "last_read", "silent", "userMuteStatus", "includes", "muteStatus", "muted", "lastRead", "_countMessageAsUnread", "queryURL", "tempChannelCid", "activeChannels", "_cacheEnabled", "_addChannelConfig", "_initializeState", "polls", "hydratePollCache", "queriedChannels", "isLatestMessageSet", "targetUserID", "banUser", "clearHistory", "clear_history", "unbanUser", "shadowBan", "removeShadowBan", "pollId", "vote", "castPollVote", "voteId", "removePollVote", "callbackOrString", "callbackOrNothing", "unsubscribe", "el", "channelState", "last_read_message_id", "unread_messages", "_extendEventWithOwnReactions", "hard_delete", "removeMessage", "addMessageSorted", "removeQuotedMessageReferences", "removePinnedMessage", "ownMessage", "isThreadMessage", "preventUnreadCountUpdate", "truncated_at", "truncatedAt", "createdAt", "clearMessages", "memberCopy", "currentUserId", "newMembers", "first_unread_message_id", "last_read_at", "isFrozenChanged", "frozen", "hidden", "addReaction", "removeReaction", "shadow_banned", "shadow", "banned", "clientState", "_hydrateMembers", "addPinnedMessages", "pinned_messages", "watcher", "findMessage", "overrideCurrentState", "newMembersById", "membersById", "setIsUpToDate", "ClientState", "users", "userChannelReferences", "updateUser", "channelID", "InsightMetrics", "connectionStartTimestamp", "wsTotalFailures", "wsConsecutiveFailures", "instanceClientId", "postInsights", "insightType", "insights", "maxAttempts", "axios", "buildWsFatalInsight", "connection", "buildWsBaseInsight", "ready_state", "ws", "readyState", "_buildUrl", "api_key", "start_ts", "insightMetrics", "end_ts", "auth_type", "getAuthType", "token", "tokenManager", "user_details", "_user", "device", "client_id", "connectionID", "ws_details", "ws_consecutive_failures", "ws_total_failures", "request_id", "requestID", "online", "user_agent", "userAgent", "instance_client_id", "buildWsSuccessAfterFailureInsight", "isCloseEvent", "code", "isErrorEvent", "StableWSConnection", "qs", "_buildWSPayload", "getToken", "wsUrlParams", "URLSearchParams", "getUserAgent", "wsBaseURL", "_log", "_setHealth", "isHealthy", "_reconnect", "interval", "wsID", "parse", "isResolved", "rejectPromise", "_errorFromWSEvent", "resolvePromise", "scheduleNextPing", "handleEvent", "scheduleConnectionCheck", "reason", "wasClean", "consecutiveFailures", "totalFailures", "isConnecting", "healthy", "isWSFailure", "statusCode", "StatusCode", "connectionOpen", "reject", "healthCheckTimeoutRef", "clientID", "send", "pingInterval", "connectionCheckTimeoutRef", "connectionCheckTimeout", "isDisconnected", "onlineStatusChanged", "extra", "level", "_connect", "healthCheck", "isStatic", "refreshToken", "_waitForHealthy", "race", "clearInterval", "removeAllListeners", "isClosedPromise", "close", "OPEN", "onclose", "enableWSFallback", "isTokenReady", "tokenReady", "loadToken", "_setupConnectionPromise", "wsURL", "WebSocket", "onopen", "onerror", "onmessage", "connection_id", "enableInsights", "_destroyCurrentWSConnection", "recoverState", "JWTUserToken", "apiSecret", "extraData", "jwtOptions", "TypeError", "algorithm", "noTimestamp", "JWTServerToken", "server", "jwt", "sign", "UserFromToken", "fragments", "b64Payload", "DevToken", "CheckSignature", "secret", "signature", "Buffer", "from", "hash", "createHmac", "digest", "timingSafeEqual", "TokenManager", "tokenOrProvider", "validateToken", "tokenProvider", "loadTokenPromise", "anon", "tokenUserId", "APIErrorCodes", "retryable", "isAPIError", "isErrorRetryable", "isConnectionIDError", "isErrorResponse", "ConnectionState", "WSConnectionFallback", "_setState", "Closed", "cancelToken", "connect", "config", "retry", "CancelToken", "source", "doAxiosRequest", "replace", "_req", "Connected", "events", "isCancel", "Disconnected", "reconnect", "Connecting", "json", "_poll", "_onlineStatusChanged", "Init", "Segment", "all_sender_channels", "all_users", "createSegment", "verifySegmentId", "getSegment", "updateSegment", "targets", "addSegmentTargets", "removeSegmentTargets", "deleteSegment", "targetId", "segmentTargetExists", "querySegmentTargets", "ErrorFromResponse", "VotingVisibility", "isPatch", "StateStore", "newValueOrPatch", "newValue", "oldValue", "handlerSet", "handler", "partial", "current", "selector", "selectedValues", "wrappedHandler", "nextValue", "newlySelectedValues", "hasUpdatedValues", "logCount", "oldSelectedValues", "subscribe", "DEFAULT_PAGE_LIMIT", "DEFAULT_SORT", "MARK_AS_READ_THROTTLE_TIMEOUT", "THREAD_RESPONSE_RESERVED_KEYS", "created_by_user_id", "parent_message_id", "title", "latest_replies", "active_participant_count", "participant_count", "created_by", "parent_message", "constructCustomDataObject", "threadData", "custom", "customKey", "Thread", "Map", "partialNext", "active", "getLatestValue", "isLoading", "getThread", "hydrateState", "replyCount", "replies", "parentMessage", "participants", "deletedAt", "updatedAt", "pendingReplies", "failedRepliesMap", "values", "isStateStale", "unsubscribeFunctions", "size", "subscribeThreadUpdated", "subscribeMarkActiveThreadRead", "subscribeReloadActiveStaleThread", "subscribeMarkThreadStale", "subscribeNewReplies", "subscribeRepliesRead", "subscribeMessageDeleted", "subscribeMessageUpdated", "on", "subscribeWithSelector", "unreadMessageCount", "ownUnreadCountSelector", "throttledMarkAsRead", "reload", "isOwnMessage", "upsertReplyLocally", "nextRead", "userRead", "nextUserRead", "lastReadAt", "lastReadMessageId", "deleteReplyLocally", "updateParentMessageLocally", "eventTypes", "eventType", "updateParentMessageOrReplyLocally", "cleanupFunction", "clear", "reply", "updatedReplies", "formattedMessage", "force", "ownUnreadCount", "markRead", "thread_id", "markAsRead", "otherOptions", "loadPage", "loadingKey", "cursorKey", "insertionMethodKey", "queryOptions", "queryReplies", "maybeNextCursor", "nextReplies", "placeholderReadResponse", "repliesPaginationFromInitialThread", "formatReadState", "latestRepliesContainsAllReplies", "nextCursor", "prevCursor", "isLoadingNext", "isLoadingPrev", "MODERATION_ENTITY_TYPES", "userprofile", "Moderation", "flaggedUserID", "flag", "entityType", "entityId", "entityCreatorID", "entity_type", "entity_id", "entity_creator_id", "targetID", "target_ids", "actionType", "itemID", "action_type", "item_id", "entityID", "moderationPayload", "configKey", "moderation_payload", "config_key", "profile", "username", "image", "texts", "images", "check", "force_sync", "test_mode", "flags", "addCustomFlags", "DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION", "MAX_QUERY_THREADS_LIMIT", "THREAD_MANAGER_INITIAL_STATE", "isThreadOrderStale", "unreadThreadCount", "unseenThreadIds", "lastConnectionDropAt", "ready", "ThreadManager", "subscribeUnreadThreadsCountChange", "subscribeManageThreadSubscriptions", "subscribeReloadOnActivation", "subscribeRecoverAfterConnectionDrop", "subscribeChannelDeleted", "me", "newThreads", "prev", "nextThreads", "prevThreads", "removedThreads", "threadsById", "registerSubscriptions", "unregisterSubscriptions", "unsubscribeConnectionDropped", "throttledHandleConnectionRecovered", "unsubscribeConnectionRecovered", "queryThreads", "currentThreads", "incomingThread", "existingThread", "hasStaleState", "participant_limit", "reply_limit", "threadsByIdGetterCache", "newThreadsById", "isPollUpdatedEvent", "isPollClosedEventEvent", "isPollVoteCastedEvent", "isPollVoteChangedEvent", "isPollVoteRemovedEvent", "isVoteAnswer", "answer_text", "Poll", "poll", "own_votes", "pollResponseForState", "voteOrAnswer", "ownAnswer", "ownVotes", "lastActivityAt", "maxVotedOptionIds", "getMaxVotedOptionIds", "vote_counts_by_option", "ownVotesByOptionId", "getOwnVotesByOptionId", "getInitialStateFromPollResponse", "extractPollData", "pollData", "is_closed", "currentState", "isOwnVote", "poll_vote", "latestAnswers", "latest_answers", "option_id", "pollEnrichData", "extractPollEnrichedData", "answer", "enforce_unique_votes", "optionId", "getPoll", "updatePoll", "partialPollObject", "partialUpdatePoll", "closePoll", "deletePoll", "createPollOption", "updatePollOption", "deletePollOption", "max_votes_allowed", "reachedVoteLimit", "oldestVote", "removeVote", "answerText", "addPollAnswer", "answerId", "queryPollAnswers", "queryPollVotes", "voteCountsByOption", "maxVotes", "winningOptions", "pollResponse", "allow_answers", "allow_user_suggested_options", "enforce_unique_vote", "voting_visibility", "answers_count", "latest_votes_by_option", "vote_count", "PollManager", "pollCache", "subscribeMessageNew", "subscribePollUpdated", "subscribePollClosed", "subscribeVoteCasted", "subscribeVoteChanged", "subscribeVoteRemoved", "createPoll", "createdPoll", "cachedPoll", "fromState", "setOrOverwriteInCache", "queryPolls", "pollInstances", "overwriteState", "pollFromCache", "reinitializeState", "handlePollUpdated", "handlePollClosed", "handleVoteCasted", "handleVoteChanged", "handleVoteRemoved", "channelManagerEventToHandlerMapping", "DEFAULT_CHANNEL_MANAGER_OPTIONS", "abortInFlightQuery", "allowNotLoadedChannelPromotionForEvent", "lockChannelOrder", "DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS", "ChannelManager", "eventHandlerOverrides", "valueOrFactory", "currentChannels", "truthyEventHandlerOverrides", "stateOptions", "queryChannels", "newOffset", "newOptions", "nextChannels", "setChannels", "channelIndex", "channelDeletedHandler", "channel_type", "channelId", "channel_id", "targetChannel", "isTargetChannelArchived", "considerArchivedChannels", "pinnedAtSort", "newTargetChannelIndex", "handlerName", "defaultEventHandler", "eventHandlers", "eventHandlerOverride", "subscriptionOrOverride", "setEventHandlerOverrides", "setOptions", "channelHiddenHandler", "channelVisibleHandler", "memberUpdatedHandler", "newMessageHandler", "notificationAddedToChannelHandler", "notificationNewMessageHandler", "notificationRemovedFromChannelHandler", "StreamChat", "secretOrOptions", "wsConnection", "wsFallback", "Boolean", "_getConnectionID", "userTokenOrProvider", "setUserPromise", "node", "allowServerSideConnect", "anonymous", "setTokenPromise", "_setToken", "_setUser", "openConnection", "persistUserOnConnectionFailure", "closeConnection", "disconnectUser", "connectUser", "setTokenOrProvider", "cleaningIntervalRef", "disconnect", "_startCleaning", "before", "closePromise", "_disconnect", "resetState", "reset", "anonymousUser", "_setupConnection", "connectAnonymousUser", "requestConfig", "_enrichAxiosOptions", "_logApiRequest", "axiosInstance", "postForm", "put", "_logApiResponse", "handleResponse", "client_request_id", "headers", "_logApiError", "postListenerCallbacks", "_handleClientEvent", "_handleChannelEvent", "_callClientListeners", "_callChannelListeners", "messageEvent", "jsonString", "refMap", "_updateMemberWatcherReferences", "updateUserMessages", "deleteUserMessages", "_updateUserMessageReferences", "mark_messages_deleted", "_deleteUserMessageReference", "cids", "recoverStateOnReconnect", "$in", "memberIds", "tempCid", "membersStrInExistingChannel", "upsertUsers", "upsertUser", "unblockMessage", "markChannelsRead", "disableCache", "mutedChannels", "moderation", "inputOptions", "browser", "withCredentials", "warmUp", "httpsAgent", "https", "Agent", "keepAlive", "keepAliveMsecs", "create", "setBaseURL", "process", "env", "STREAM_LOCAL_TEST_RUN", "STREAM_LOCAL_TEST_HOST", "defaultWSTimeoutWithFallback", "defaultWSTimeout", "defaults", "paramsSerializer", "apn_config", "p12_cert", "updateAppSettings", "revoke_tokens_issued_before", "_normalizeDate", "revokeUsersToken", "userIDs", "partialUpdateUsers", "apnTemplate", "apn_template", "firebaseTemplate", "firebase_template", "firebaseDataTemplate", "firebase_data_template", "skipDevices", "skip_devices", "pushProviderName", "push_provider_name", "pushProviderType", "push_provider_type", "last_active", "guestUser", "access_token", "exp", "iat", "getHeaders", "maxContentLength", "Infinity", "maxBodyLength", "errorFromResponse", "_handleUserEvent", "activeChannelKeys", "activeChannelKey", "deleteAllChannelReference", "mute", "expires", "expiresAt", "_sayHi", "setClient", "mode", "updateUsers", "hydrateActiveChannels", "channelsFromApi", "queryChannelsOptions", "skipInitialization", "updatedMessagesSet", "message_limit", "push_provider", "preferences", "serverSide", "web", "android", "ios", "endpoints", "server_side", "channelIDOrCustom", "getChannelByMembers", "getChannelById", "partialUserObject", "userMap", "userObject", "target_user_id", "blockedUserID", "blocked_user_id", "target_id", "currentUserID", "targetMessageID", "target_message_id", "callID", "reviewResult", "review_result", "commands", "language", "text", "destination_language", "source_language", "timeoutOrExpirationDate", "pinExpires", "setSeconds", "getSeconds", "messageOrMessageId", "errorText", "pinnedBy", "pinnedAt", "_validateAndGetMessageId", "partialUpdateMessage", "pin_expires", "_normalizeExpiration", "clonedMessage", "reservedMessageFields", "mu", "partialMessageObject", "hard", "undeleted_by", "optionsWithDefaults", "requestBody", "partialThreadObject", "reservedThreadFields", "unset", "version", "clientBundle", "userAgentString", "sdkIdentifier", "deviceIdentifier", "os", "model", "withArguments", "_getToken", "authorization", "Authorization", "signal", "nextRequestAbortController", "axiosRequestConfig", "axiosRequestConfigParams", "axiosRequestConfigHeaders", "axiosRequestConfigRest", "that", "setInterval", "xSignature", "permissionData", "channel_cids", "last_sync_at", "blockList", "request", "exportChannels", "idOrData", "validateServerSideAuth", "segmentId", "scheduled_for", "scheduledFor", "stop_at", "stopAt", "conversations", "filename", "pushProvider", "AbortController", "q", "is_answer", "message_ids", "reviewed_by", "_instance", "EVENT_MAP", "Allow", "Deny", "AnyResource", "AnyRole", "MaxPriority", "MinPriority", "Permission", "priority", "resources", "owner", "action", "AllowAll", "DenyAll", "BuiltinRoles", "Admin", "Anonymous", "ChannelMember", "ChannelModerator", "Guest", "User", "BuiltinPermissions", "AddLinks", "BanUser", "CreateChannel", "CreateMessage", "CreateReaction", "DeleteAnyAttachment", "DeleteAnyChannel", "DeleteAnyMessage", "DeleteAnyReaction", "DeleteOwnAttachment", "DeleteOwnChannel", "DeleteOwnMessage", "DeleteOwnReaction", "ReadAnyChannel", "ReadOwnChannel", "RunMessageAction", "UpdateAnyChannel", "UpdateAnyMessage", "UpdateMembersAnyChannel", "UpdateMembersOwnChannel", "UpdateOwnChannel", "UpdateOwnMessage", "UploadAttachment", "UseFrozenChannel", "DEFAULT_SEARCH_SOURCE_OPTIONS", "debounceMs", "pageSize", "BaseSearchSource", "searchDebounced", "executeQuery", "isActive", "searchQuery", "initialState", "setDebounceOptions", "lastQueryError", "items", "newSearchString", "hasNewSearchQuery", "searchString", "stateUpdate", "results", "filterQueryResults", "UserSearchSource", "$or", "$autocomplete", "searchOptions", "queryUsers", "u", "ChannelSearchSource", "MessageSearchSource", "channelFilters", "messageSearchChannelFilters", "messageFilters", "messageSearchFilters", "messageSearchSort", "search", "allChannelsLoadedLocally", "channelQueryFilters", "channelQuerySort", "channelQueryOptions", "SearchController", "sourceType", "newSources", "getSource", "keepSingleActiveSource", "deactivate", "activate", "activeSources", "sourcesToActivate", "searchedSources", "cancelSearchQueries", "queriesInProgress", "_internalState"]
}
