"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all2) => {
  for (var name2 in all2)
    __defProp(target, name2, { get: all2[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// node_modules/lodash.deburr/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.deburr/index.js"(exports, module2) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    var deburredLetters = {
      // Latin-1 Supplement block.
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      // Latin Extended-A block.
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root4 = freeGlobal || freeSelf || Function("return this")();
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root4.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    function deburr(string3) {
      string3 = toString3(string3);
      return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module2.exports = deburr;
  }
});

// node_modules/@stream-io/transliterate/dist/index.modern.js
var index_modern_exports = {};
__export(index_modern_exports, {
  default: () => h
});
function t() {
  return t = Object.assign || function(e2) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var o2 = arguments[t2];
      for (var a2 in o2) Object.prototype.hasOwnProperty.call(o2, a2) && (e2[a2] = o2[a2]);
    }
    return e2;
  }, t.apply(this, arguments);
}
function h(o2, h2) {
  if ("string" != typeof o2) throw new TypeError(`Expected a string, got \`${typeof o2}\``);
  h2 = t({ customReplacements: [] }, h2);
  const r = new Map([...s, ...h2.customReplacements]);
  return o2 = ((e2, t2) => {
    for (const [o3, s2] of t2) e2 = e2.replace(new RegExp(a(o3), "g"), s2);
    return e2;
  })(o2 = o2.normalize(), r), (0, import_lodash.default)(o2);
}
var import_lodash, o, a, s;
var init_index_modern = __esm({
  "node_modules/@stream-io/transliterate/dist/index.modern.js"() {
    import_lodash = __toESM(require_lodash(), 1);
    o = /[|\\{}()[\]^$+*?.]/g;
    a = function(e2) {
      if ("string" != typeof e2) throw new TypeError("Expected a string");
      return e2.replace(o, "\\$&");
    };
    s = [["\xDF", "ss"], ["\u1E9E", "Ss"], ["\xE4", "ae"], ["\xC4", "Ae"], ["\xF6", "oe"], ["\xD6", "Oe"], ["\xFC", "ue"], ["\xDC", "Ue"], ["\xC0", "A"], ["\xC1", "A"], ["\xC2", "A"], ["\xC3", "A"], ["\xC4", "Ae"], ["\xC5", "A"], ["\xC6", "AE"], ["\xC7", "C"], ["\xC8", "E"], ["\xC9", "E"], ["\xCA", "E"], ["\xCB", "E"], ["\xCC", "I"], ["\xCD", "I"], ["\xCE", "I"], ["\xCF", "I"], ["\xD0", "D"], ["\xD1", "N"], ["\xD2", "O"], ["\xD3", "O"], ["\xD4", "O"], ["\xD5", "O"], ["\xD6", "Oe"], ["\u0150", "O"], ["\xD8", "O"], ["\xD9", "U"], ["\xDA", "U"], ["\xDB", "U"], ["\xDC", "Ue"], ["\u0170", "U"], ["\xDD", "Y"], ["\xDE", "TH"], ["\xDF", "ss"], ["\xE0", "a"], ["\xE1", "a"], ["\xE2", "a"], ["\xE3", "a"], ["\xE4", "ae"], ["\xE5", "a"], ["\xE6", "ae"], ["\xE7", "c"], ["\xE8", "e"], ["\xE9", "e"], ["\xEA", "e"], ["\xEB", "e"], ["\xEC", "i"], ["\xED", "i"], ["\xEE", "i"], ["\xEF", "i"], ["\xF0", "d"], ["\xF1", "n"], ["\xF2", "o"], ["\xF3", "o"], ["\xF4", "o"], ["\xF5", "o"], ["\xF6", "oe"], ["\u0151", "o"], ["\xF8", "o"], ["\xF9", "u"], ["\xFA", "u"], ["\xFB", "u"], ["\xFC", "ue"], ["\u0171", "u"], ["\xFD", "y"], ["\xFE", "th"], ["\xFF", "y"], ["\u1E9E", "SS"], ["\xE0", "a"], ["\xC0", "A"], ["\xE1", "a"], ["\xC1", "A"], ["\xE2", "a"], ["\xC2", "A"], ["\xE3", "a"], ["\xC3", "A"], ["\xE8", "e"], ["\xC8", "E"], ["\xE9", "e"], ["\xC9", "E"], ["\xEA", "e"], ["\xCA", "E"], ["\xEC", "i"], ["\xCC", "I"], ["\xED", "i"], ["\xCD", "I"], ["\xF2", "o"], ["\xD2", "O"], ["\xF3", "o"], ["\xD3", "O"], ["\xF4", "o"], ["\xD4", "O"], ["\xF5", "o"], ["\xD5", "O"], ["\xF9", "u"], ["\xD9", "U"], ["\xFA", "u"], ["\xDA", "U"], ["\xFD", "y"], ["\xDD", "Y"], ["\u0103", "a"], ["\u0102", "A"], ["\u0110", "D"], ["\u0111", "d"], ["\u0129", "i"], ["\u0128", "I"], ["\u0169", "u"], ["\u0168", "U"], ["\u01A1", "o"], ["\u01A0", "O"], ["\u01B0", "u"], ["\u01AF", "U"], ["\u1EA1", "a"], ["\u1EA0", "A"], ["\u1EA3", "a"], ["\u1EA2", "A"], ["\u1EA5", "a"], ["\u1EA4", "A"], ["\u1EA7", "a"], ["\u1EA6", "A"], ["\u1EA9", "a"], ["\u1EA8", "A"], ["\u1EAB", "a"], ["\u1EAA", "A"], ["\u1EAD", "a"], ["\u1EAC", "A"], ["\u1EAF", "a"], ["\u1EAE", "A"], ["\u1EB1", "a"], ["\u1EB0", "A"], ["\u1EB3", "a"], ["\u1EB2", "A"], ["\u1EB5", "a"], ["\u1EB4", "A"], ["\u1EB7", "a"], ["\u1EB6", "A"], ["\u1EB9", "e"], ["\u1EB8", "E"], ["\u1EBB", "e"], ["\u1EBA", "E"], ["\u1EBD", "e"], ["\u1EBC", "E"], ["\u1EBF", "e"], ["\u1EBE", "E"], ["\u1EC1", "e"], ["\u1EC0", "E"], ["\u1EC3", "e"], ["\u1EC2", "E"], ["\u1EC5", "e"], ["\u1EC4", "E"], ["\u1EC7", "e"], ["\u1EC6", "E"], ["\u1EC9", "i"], ["\u1EC8", "I"], ["\u1ECB", "i"], ["\u1ECA", "I"], ["\u1ECD", "o"], ["\u1ECC", "O"], ["\u1ECF", "o"], ["\u1ECE", "O"], ["\u1ED1", "o"], ["\u1ED0", "O"], ["\u1ED3", "o"], ["\u1ED2", "O"], ["\u1ED5", "o"], ["\u1ED4", "O"], ["\u1ED7", "o"], ["\u1ED6", "O"], ["\u1ED9", "o"], ["\u1ED8", "O"], ["\u1EDB", "o"], ["\u1EDA", "O"], ["\u1EDD", "o"], ["\u1EDC", "O"], ["\u1EDF", "o"], ["\u1EDE", "O"], ["\u1EE1", "o"], ["\u1EE0", "O"], ["\u1EE3", "o"], ["\u1EE2", "O"], ["\u1EE5", "u"], ["\u1EE4", "U"], ["\u1EE7", "u"], ["\u1EE6", "U"], ["\u1EE9", "u"], ["\u1EE8", "U"], ["\u1EEB", "u"], ["\u1EEA", "U"], ["\u1EED", "u"], ["\u1EEC", "U"], ["\u1EEF", "u"], ["\u1EEE", "U"], ["\u1EF1", "u"], ["\u1EF0", "U"], ["\u1EF3", "y"], ["\u1EF2", "Y"], ["\u1EF5", "y"], ["\u1EF4", "Y"], ["\u1EF7", "y"], ["\u1EF6", "Y"], ["\u1EF9", "y"], ["\u1EF8", "Y"], ["\u0621", "e"], ["\u0622", "a"], ["\u0623", "a"], ["\u0624", "w"], ["\u0625", "i"], ["\u0626", "y"], ["\u0627", "a"], ["\u0628", "b"], ["\u0629", "t"], ["\u062A", "t"], ["\u062B", "th"], ["\u062C", "j"], ["\u062D", "h"], ["\u062E", "kh"], ["\u062F", "d"], ["\u0630", "dh"], ["\u0631", "r"], ["\u0632", "z"], ["\u0633", "s"], ["\u0634", "sh"], ["\u0635", "s"], ["\u0636", "d"], ["\u0637", "t"], ["\u0638", "z"], ["\u0639", "e"], ["\u063A", "gh"], ["\u0640", "_"], ["\u0641", "f"], ["\u0642", "q"], ["\u0643", "k"], ["\u0644", "l"], ["\u0645", "m"], ["\u0646", "n"], ["\u0647", "h"], ["\u0648", "w"], ["\u0649", "a"], ["\u064A", "y"], ["\u064E\u200E", "a"], ["\u064F", "u"], ["\u0650\u200E", "i"], ["\u0660", "0"], ["\u0661", "1"], ["\u0662", "2"], ["\u0663", "3"], ["\u0664", "4"], ["\u0665", "5"], ["\u0666", "6"], ["\u0667", "7"], ["\u0668", "8"], ["\u0669", "9"], ["\u0686", "ch"], ["\u06A9", "k"], ["\u06AF", "g"], ["\u067E", "p"], ["\u0698", "zh"], ["\u06CC", "y"], ["\u06F0", "0"], ["\u06F1", "1"], ["\u06F2", "2"], ["\u06F3", "3"], ["\u06F4", "4"], ["\u06F5", "5"], ["\u06F6", "6"], ["\u06F7", "7"], ["\u06F8", "8"], ["\u06F9", "9"], ["\u067C", "p"], ["\u0681", "z"], ["\u0685", "c"], ["\u0689", "d"], ["\uFEAB", "d"], ["\uFEAD", "r"], ["\u0693", "r"], ["\uFEAF", "z"], ["\u0696", "g"], ["\u069A", "x"], ["\u06AB", "g"], ["\u06BC", "n"], ["\u06C0", "e"], ["\u06D0", "e"], ["\u06CD", "ai"], ["\u0679", "t"], ["\u0688", "d"], ["\u0691", "r"], ["\u06BA", "n"], ["\u06C1", "h"], ["\u06BE", "h"], ["\u06D2", "e"], ["\u0410", "A"], ["\u0430", "a"], ["\u0411", "B"], ["\u0431", "b"], ["\u0412", "V"], ["\u0432", "v"], ["\u0413", "G"], ["\u0433", "g"], ["\u0414", "D"], ["\u0434", "d"], ["\u044A\u0435", "ye"], ["\u042A\u0435", "Ye"], ["\u044A\u0415", "yE"], ["\u042A\u0415", "YE"], ["\u0415", "E"], ["\u0435", "e"], ["\u0401", "Yo"], ["\u0451", "yo"], ["\u0416", "Zh"], ["\u0436", "zh"], ["\u0417", "Z"], ["\u0437", "z"], ["\u0418", "I"], ["\u0438", "i"], ["\u044B\u0439", "iy"], ["\u042B\u0439", "Iy"], ["\u042B\u0419", "IY"], ["\u044B\u0419", "iY"], ["\u0419", "Y"], ["\u0439", "y"], ["\u041A", "K"], ["\u043A", "k"], ["\u041B", "L"], ["\u043B", "l"], ["\u041C", "M"], ["\u043C", "m"], ["\u041D", "N"], ["\u043D", "n"], ["\u041E", "O"], ["\u043E", "o"], ["\u041F", "P"], ["\u043F", "p"], ["\u0420", "R"], ["\u0440", "r"], ["\u0421", "S"], ["\u0441", "s"], ["\u0422", "T"], ["\u0442", "t"], ["\u0423", "U"], ["\u0443", "u"], ["\u0424", "F"], ["\u0444", "f"], ["\u0425", "Kh"], ["\u0445", "kh"], ["\u0426", "Ts"], ["\u0446", "ts"], ["\u0427", "Ch"], ["\u0447", "ch"], ["\u0428", "Sh"], ["\u0448", "sh"], ["\u0429", "Sch"], ["\u0449", "sch"], ["\u042A", ""], ["\u044A", ""], ["\u042B", "Y"], ["\u044B", "y"], ["\u042C", ""], ["\u044C", ""], ["\u042D", "E"], ["\u044D", "e"], ["\u042E", "Yu"], ["\u044E", "yu"], ["\u042F", "Ya"], ["\u044F", "ya"], ["\u0103", "a"], ["\u0102", "A"], ["\u0219", "s"], ["\u0218", "S"], ["\u021B", "t"], ["\u021A", "T"], ["\u0163", "t"], ["\u0162", "T"], ["\u015F", "s"], ["\u015E", "S"], ["\xE7", "c"], ["\xC7", "C"], ["\u011F", "g"], ["\u011E", "G"], ["\u0131", "i"], ["\u0130", "I"], ["\u0561", "a"], ["\u0531", "A"], ["\u0562", "b"], ["\u0532", "B"], ["\u0563", "g"], ["\u0533", "G"], ["\u0564", "d"], ["\u0534", "D"], ["\u0565", "ye"], ["\u0535", "Ye"], ["\u0566", "z"], ["\u0536", "Z"], ["\u0567", "e"], ["\u0537", "E"], ["\u0568", "y"], ["\u0538", "Y"], ["\u0569", "t"], ["\u0539", "T"], ["\u056A", "zh"], ["\u053A", "Zh"], ["\u056B", "i"], ["\u053B", "I"], ["\u056C", "l"], ["\u053C", "L"], ["\u056D", "kh"], ["\u053D", "Kh"], ["\u056E", "ts"], ["\u053E", "Ts"], ["\u056F", "k"], ["\u053F", "K"], ["\u0570", "h"], ["\u0540", "H"], ["\u0571", "dz"], ["\u0541", "Dz"], ["\u0572", "gh"], ["\u0542", "Gh"], ["\u0573", "tch"], ["\u0543", "Tch"], ["\u0574", "m"], ["\u0544", "M"], ["\u0575", "y"], ["\u0545", "Y"], ["\u0576", "n"], ["\u0546", "N"], ["\u0577", "sh"], ["\u0547", "Sh"], ["\u0578", "vo"], ["\u0548", "Vo"], ["\u0579", "ch"], ["\u0549", "Ch"], ["\u057A", "p"], ["\u054A", "P"], ["\u057B", "j"], ["\u054B", "J"], ["\u057C", "r"], ["\u054C", "R"], ["\u057D", "s"], ["\u054D", "S"], ["\u057E", "v"], ["\u054E", "V"], ["\u057F", "t"], ["\u054F", "T"], ["\u0580", "r"], ["\u0550", "R"], ["\u0581", "c"], ["\u0551", "C"], ["\u0578\u0582", "u"], ["\u0548\u0552", "U"], ["\u0548\u0582", "U"], ["\u0583", "p"], ["\u0553", "P"], ["\u0584", "q"], ["\u0554", "Q"], ["\u0585", "o"], ["\u0555", "O"], ["\u0586", "f"], ["\u0556", "F"], ["\u0587", "yev"], ["\u10D0", "a"], ["\u10D1", "b"], ["\u10D2", "g"], ["\u10D3", "d"], ["\u10D4", "e"], ["\u10D5", "v"], ["\u10D6", "z"], ["\u10D7", "t"], ["\u10D8", "i"], ["\u10D9", "k"], ["\u10DA", "l"], ["\u10DB", "m"], ["\u10DC", "n"], ["\u10DD", "o"], ["\u10DE", "p"], ["\u10DF", "zh"], ["\u10E0", "r"], ["\u10E1", "s"], ["\u10E2", "t"], ["\u10E3", "u"], ["\u10E4", "ph"], ["\u10E5", "q"], ["\u10E6", "gh"], ["\u10E7", "k"], ["\u10E8", "sh"], ["\u10E9", "ch"], ["\u10EA", "ts"], ["\u10EB", "dz"], ["\u10EC", "ts"], ["\u10ED", "tch"], ["\u10EE", "kh"], ["\u10EF", "j"], ["\u10F0", "h"], ["\u010D", "c"], ["\u010F", "d"], ["\u011B", "e"], ["\u0148", "n"], ["\u0159", "r"], ["\u0161", "s"], ["\u0165", "t"], ["\u016F", "u"], ["\u017E", "z"], ["\u010C", "C"], ["\u010E", "D"], ["\u011A", "E"], ["\u0147", "N"], ["\u0158", "R"], ["\u0160", "S"], ["\u0164", "T"], ["\u016E", "U"], ["\u017D", "Z"], ["\u0780", "h"], ["\u0781", "sh"], ["\u0782", "n"], ["\u0783", "r"], ["\u0784", "b"], ["\u0785", "lh"], ["\u0786", "k"], ["\u0787", "a"], ["\u0788", "v"], ["\u0789", "m"], ["\u078A", "f"], ["\u078B", "dh"], ["\u078C", "th"], ["\u078D", "l"], ["\u078E", "g"], ["\u078F", "gn"], ["\u0790", "s"], ["\u0791", "d"], ["\u0792", "z"], ["\u0793", "t"], ["\u0794", "y"], ["\u0795", "p"], ["\u0796", "j"], ["\u0797", "ch"], ["\u0798", "tt"], ["\u0799", "hh"], ["\u079A", "kh"], ["\u079B", "th"], ["\u079C", "z"], ["\u079D", "sh"], ["\u079E", "s"], ["\u079F", "d"], ["\u07A0", "t"], ["\u07A1", "z"], ["\u07A2", "a"], ["\u07A3", "gh"], ["\u07A4", "q"], ["\u07A5", "w"], ["\u07A6", "a"], ["\u07A7", "aa"], ["\u07A8", "i"], ["\u07A9", "ee"], ["\u07AA", "u"], ["\u07AB", "oo"], ["\u07AC", "e"], ["\u07AD", "ey"], ["\u07AE", "o"], ["\u07AF", "oa"], ["\u07B0", ""], ["\u03B1", "a"], ["\u03B2", "v"], ["\u03B3", "g"], ["\u03B4", "d"], ["\u03B5", "e"], ["\u03B6", "z"], ["\u03B7", "i"], ["\u03B8", "th"], ["\u03B9", "i"], ["\u03BA", "k"], ["\u03BB", "l"], ["\u03BC", "m"], ["\u03BD", "n"], ["\u03BE", "ks"], ["\u03BF", "o"], ["\u03C0", "p"], ["\u03C1", "r"], ["\u03C3", "s"], ["\u03C4", "t"], ["\u03C5", "y"], ["\u03C6", "f"], ["\u03C7", "x"], ["\u03C8", "ps"], ["\u03C9", "o"], ["\u03AC", "a"], ["\u03AD", "e"], ["\u03AF", "i"], ["\u03CC", "o"], ["\u03CD", "y"], ["\u03AE", "i"], ["\u03CE", "o"], ["\u03C2", "s"], ["\u03CA", "i"], ["\u03B0", "y"], ["\u03CB", "y"], ["\u0390", "i"], ["\u0391", "A"], ["\u0392", "B"], ["\u0393", "G"], ["\u0394", "D"], ["\u0395", "E"], ["\u0396", "Z"], ["\u0397", "I"], ["\u0398", "TH"], ["\u0399", "I"], ["\u039A", "K"], ["\u039B", "L"], ["\u039C", "M"], ["\u039D", "N"], ["\u039E", "KS"], ["\u039F", "O"], ["\u03A0", "P"], ["\u03A1", "R"], ["\u03A3", "S"], ["\u03A4", "T"], ["\u03A5", "Y"], ["\u03A6", "F"], ["\u03A7", "X"], ["\u03A8", "PS"], ["\u03A9", "O"], ["\u0386", "A"], ["\u0388", "E"], ["\u038A", "I"], ["\u038C", "O"], ["\u038E", "Y"], ["\u0389", "I"], ["\u038F", "O"], ["\u03AA", "I"], ["\u03AB", "Y"], ["\u0101", "a"], ["\u0113", "e"], ["\u0123", "g"], ["\u012B", "i"], ["\u0137", "k"], ["\u013C", "l"], ["\u0146", "n"], ["\u016B", "u"], ["\u0100", "A"], ["\u0112", "E"], ["\u0122", "G"], ["\u012A", "I"], ["\u0136", "K"], ["\u013B", "L"], ["\u0145", "N"], ["\u016A", "U"], ["\u010D", "c"], ["\u0161", "s"], ["\u017E", "z"], ["\u010C", "C"], ["\u0160", "S"], ["\u017D", "Z"], ["\u0105", "a"], ["\u010D", "c"], ["\u0119", "e"], ["\u0117", "e"], ["\u012F", "i"], ["\u0161", "s"], ["\u0173", "u"], ["\u016B", "u"], ["\u017E", "z"], ["\u0104", "A"], ["\u010C", "C"], ["\u0118", "E"], ["\u0116", "E"], ["\u012E", "I"], ["\u0160", "S"], ["\u0172", "U"], ["\u016A", "U"], ["\u040C", "Kj"], ["\u045C", "kj"], ["\u0409", "Lj"], ["\u0459", "lj"], ["\u040A", "Nj"], ["\u045A", "nj"], ["\u0422\u0441", "Ts"], ["\u0442\u0441", "ts"], ["\u0105", "a"], ["\u0107", "c"], ["\u0119", "e"], ["\u0142", "l"], ["\u0144", "n"], ["\u015B", "s"], ["\u017A", "z"], ["\u017C", "z"], ["\u0104", "A"], ["\u0106", "C"], ["\u0118", "E"], ["\u0141", "L"], ["\u0143", "N"], ["\u015A", "S"], ["\u0179", "Z"], ["\u017B", "Z"], ["\u0404", "Ye"], ["\u0406", "I"], ["\u0407", "Yi"], ["\u0490", "G"], ["\u0454", "ye"], ["\u0456", "i"], ["\u0457", "yi"], ["\u0491", "g"], ["\u0132", "IJ"], ["\u0133", "ij"], ["\xA2", "c"], ["\xA5", "Y"], ["\u07FF", "b"], ["\u09F3", "t"], ["\u0AF1", "Bo"], ["\u0E3F", "B"], ["\u20A0", "CE"], ["\u20A1", "C"], ["\u20A2", "Cr"], ["\u20A3", "F"], ["\u20A5", "m"], ["\u20A6", "N"], ["\u20A7", "Pt"], ["\u20A8", "Rs"], ["\u20A9", "W"], ["\u20AB", "s"], ["\u20AC", "E"], ["\u20AD", "K"], ["\u20AE", "T"], ["\u20AF", "Dp"], ["\u20B0", "S"], ["\u20B1", "P"], ["\u20B2", "G"], ["\u20B3", "A"], ["\u20B4", "S"], ["\u20B5", "C"], ["\u20B6", "tt"], ["\u20B7", "S"], ["\u20B8", "T"], ["\u20B9", "R"], ["\u20BA", "L"], ["\u20BD", "P"], ["\u20BF", "B"], ["\uFE69", "$"], ["\uFFE0", "c"], ["\uFFE5", "Y"], ["\uFFE6", "W"], ["\u{1D400}", "A"], ["\u{1D401}", "B"], ["\u{1D402}", "C"], ["\u{1D403}", "D"], ["\u{1D404}", "E"], ["\u{1D405}", "F"], ["\u{1D406}", "G"], ["\u{1D407}", "H"], ["\u{1D408}", "I"], ["\u{1D409}", "J"], ["\u{1D40A}", "K"], ["\u{1D40B}", "L"], ["\u{1D40C}", "M"], ["\u{1D40D}", "N"], ["\u{1D40E}", "O"], ["\u{1D40F}", "P"], ["\u{1D410}", "Q"], ["\u{1D411}", "R"], ["\u{1D412}", "S"], ["\u{1D413}", "T"], ["\u{1D414}", "U"], ["\u{1D415}", "V"], ["\u{1D416}", "W"], ["\u{1D417}", "X"], ["\u{1D418}", "Y"], ["\u{1D419}", "Z"], ["\u{1D41A}", "a"], ["\u{1D41B}", "b"], ["\u{1D41C}", "c"], ["\u{1D41D}", "d"], ["\u{1D41E}", "e"], ["\u{1D41F}", "f"], ["\u{1D420}", "g"], ["\u{1D421}", "h"], ["\u{1D422}", "i"], ["\u{1D423}", "j"], ["\u{1D424}", "k"], ["\u{1D425}", "l"], ["\u{1D426}", "m"], ["\u{1D427}", "n"], ["\u{1D428}", "o"], ["\u{1D429}", "p"], ["\u{1D42A}", "q"], ["\u{1D42B}", "r"], ["\u{1D42C}", "s"], ["\u{1D42D}", "t"], ["\u{1D42E}", "u"], ["\u{1D42F}", "v"], ["\u{1D430}", "w"], ["\u{1D431}", "x"], ["\u{1D432}", "y"], ["\u{1D433}", "z"], ["\u{1D434}", "A"], ["\u{1D435}", "B"], ["\u{1D436}", "C"], ["\u{1D437}", "D"], ["\u{1D438}", "E"], ["\u{1D439}", "F"], ["\u{1D43A}", "G"], ["\u{1D43B}", "H"], ["\u{1D43C}", "I"], ["\u{1D43D}", "J"], ["\u{1D43E}", "K"], ["\u{1D43F}", "L"], ["\u{1D440}", "M"], ["\u{1D441}", "N"], ["\u{1D442}", "O"], ["\u{1D443}", "P"], ["\u{1D444}", "Q"], ["\u{1D445}", "R"], ["\u{1D446}", "S"], ["\u{1D447}", "T"], ["\u{1D448}", "U"], ["\u{1D449}", "V"], ["\u{1D44A}", "W"], ["\u{1D44B}", "X"], ["\u{1D44C}", "Y"], ["\u{1D44D}", "Z"], ["\u{1D44E}", "a"], ["\u{1D44F}", "b"], ["\u{1D450}", "c"], ["\u{1D451}", "d"], ["\u{1D452}", "e"], ["\u{1D453}", "f"], ["\u{1D454}", "g"], ["\u{1D456}", "i"], ["\u{1D457}", "j"], ["\u{1D458}", "k"], ["\u{1D459}", "l"], ["\u{1D45A}", "m"], ["\u{1D45B}", "n"], ["\u{1D45C}", "o"], ["\u{1D45D}", "p"], ["\u{1D45E}", "q"], ["\u{1D45F}", "r"], ["\u{1D460}", "s"], ["\u{1D461}", "t"], ["\u{1D462}", "u"], ["\u{1D463}", "v"], ["\u{1D464}", "w"], ["\u{1D465}", "x"], ["\u{1D466}", "y"], ["\u{1D467}", "z"], ["\u{1D468}", "A"], ["\u{1D469}", "B"], ["\u{1D46A}", "C"], ["\u{1D46B}", "D"], ["\u{1D46C}", "E"], ["\u{1D46D}", "F"], ["\u{1D46E}", "G"], ["\u{1D46F}", "H"], ["\u{1D470}", "I"], ["\u{1D471}", "J"], ["\u{1D472}", "K"], ["\u{1D473}", "L"], ["\u{1D474}", "M"], ["\u{1D475}", "N"], ["\u{1D476}", "O"], ["\u{1D477}", "P"], ["\u{1D478}", "Q"], ["\u{1D479}", "R"], ["\u{1D47A}", "S"], ["\u{1D47B}", "T"], ["\u{1D47C}", "U"], ["\u{1D47D}", "V"], ["\u{1D47E}", "W"], ["\u{1D47F}", "X"], ["\u{1D480}", "Y"], ["\u{1D481}", "Z"], ["\u{1D482}", "a"], ["\u{1D483}", "b"], ["\u{1D484}", "c"], ["\u{1D485}", "d"], ["\u{1D486}", "e"], ["\u{1D487}", "f"], ["\u{1D488}", "g"], ["\u{1D489}", "h"], ["\u{1D48A}", "i"], ["\u{1D48B}", "j"], ["\u{1D48C}", "k"], ["\u{1D48D}", "l"], ["\u{1D48E}", "m"], ["\u{1D48F}", "n"], ["\u{1D490}", "o"], ["\u{1D491}", "p"], ["\u{1D492}", "q"], ["\u{1D493}", "r"], ["\u{1D494}", "s"], ["\u{1D495}", "t"], ["\u{1D496}", "u"], ["\u{1D497}", "v"], ["\u{1D498}", "w"], ["\u{1D499}", "x"], ["\u{1D49A}", "y"], ["\u{1D49B}", "z"], ["\u{1D49C}", "A"], ["\u{1D49E}", "C"], ["\u{1D49F}", "D"], ["\u{1D4A2}", "g"], ["\u{1D4A5}", "J"], ["\u{1D4A6}", "K"], ["\u{1D4A9}", "N"], ["\u{1D4AA}", "O"], ["\u{1D4AB}", "P"], ["\u{1D4AC}", "Q"], ["\u{1D4AE}", "S"], ["\u{1D4AF}", "T"], ["\u{1D4B0}", "U"], ["\u{1D4B1}", "V"], ["\u{1D4B2}", "W"], ["\u{1D4B3}", "X"], ["\u{1D4B4}", "Y"], ["\u{1D4B5}", "Z"], ["\u{1D4B6}", "a"], ["\u{1D4B7}", "b"], ["\u{1D4B8}", "c"], ["\u{1D4B9}", "d"], ["\u{1D4BB}", "f"], ["\u{1D4BD}", "h"], ["\u{1D4BE}", "i"], ["\u{1D4BF}", "j"], ["\u{1D4C0}", "h"], ["\u{1D4C1}", "l"], ["\u{1D4C2}", "m"], ["\u{1D4C3}", "n"], ["\u{1D4C5}", "p"], ["\u{1D4C6}", "q"], ["\u{1D4C7}", "r"], ["\u{1D4C8}", "s"], ["\u{1D4C9}", "t"], ["\u{1D4CA}", "u"], ["\u{1D4CB}", "v"], ["\u{1D4CC}", "w"], ["\u{1D4CD}", "x"], ["\u{1D4CE}", "y"], ["\u{1D4CF}", "z"], ["\u{1D4D0}", "A"], ["\u{1D4D1}", "B"], ["\u{1D4D2}", "C"], ["\u{1D4D3}", "D"], ["\u{1D4D4}", "E"], ["\u{1D4D5}", "F"], ["\u{1D4D6}", "G"], ["\u{1D4D7}", "H"], ["\u{1D4D8}", "I"], ["\u{1D4D9}", "J"], ["\u{1D4DA}", "K"], ["\u{1D4DB}", "L"], ["\u{1D4DC}", "M"], ["\u{1D4DD}", "N"], ["\u{1D4DE}", "O"], ["\u{1D4DF}", "P"], ["\u{1D4E0}", "Q"], ["\u{1D4E1}", "R"], ["\u{1D4E2}", "S"], ["\u{1D4E3}", "T"], ["\u{1D4E4}", "U"], ["\u{1D4E5}", "V"], ["\u{1D4E6}", "W"], ["\u{1D4E7}", "X"], ["\u{1D4E8}", "Y"], ["\u{1D4E9}", "Z"], ["\u{1D4EA}", "a"], ["\u{1D4EB}", "b"], ["\u{1D4EC}", "c"], ["\u{1D4ED}", "d"], ["\u{1D4EE}", "e"], ["\u{1D4EF}", "f"], ["\u{1D4F0}", "g"], ["\u{1D4F1}", "h"], ["\u{1D4F2}", "i"], ["\u{1D4F3}", "j"], ["\u{1D4F4}", "k"], ["\u{1D4F5}", "l"], ["\u{1D4F6}", "m"], ["\u{1D4F7}", "n"], ["\u{1D4F8}", "o"], ["\u{1D4F9}", "p"], ["\u{1D4FA}", "q"], ["\u{1D4FB}", "r"], ["\u{1D4FC}", "s"], ["\u{1D4FD}", "t"], ["\u{1D4FE}", "u"], ["\u{1D4FF}", "v"], ["\u{1D500}", "w"], ["\u{1D501}", "x"], ["\u{1D502}", "y"], ["\u{1D503}", "z"], ["\u{1D504}", "A"], ["\u{1D505}", "B"], ["\u{1D507}", "D"], ["\u{1D508}", "E"], ["\u{1D509}", "F"], ["\u{1D50A}", "G"], ["\u{1D50D}", "J"], ["\u{1D50E}", "K"], ["\u{1D50F}", "L"], ["\u{1D510}", "M"], ["\u{1D511}", "N"], ["\u{1D512}", "O"], ["\u{1D513}", "P"], ["\u{1D514}", "Q"], ["\u{1D516}", "S"], ["\u{1D517}", "T"], ["\u{1D518}", "U"], ["\u{1D519}", "V"], ["\u{1D51A}", "W"], ["\u{1D51B}", "X"], ["\u{1D51C}", "Y"], ["\u{1D51E}", "a"], ["\u{1D51F}", "b"], ["\u{1D520}", "c"], ["\u{1D521}", "d"], ["\u{1D522}", "e"], ["\u{1D523}", "f"], ["\u{1D524}", "g"], ["\u{1D525}", "h"], ["\u{1D526}", "i"], ["\u{1D527}", "j"], ["\u{1D528}", "k"], ["\u{1D529}", "l"], ["\u{1D52A}", "m"], ["\u{1D52B}", "n"], ["\u{1D52C}", "o"], ["\u{1D52D}", "p"], ["\u{1D52E}", "q"], ["\u{1D52F}", "r"], ["\u{1D530}", "s"], ["\u{1D531}", "t"], ["\u{1D532}", "u"], ["\u{1D533}", "v"], ["\u{1D534}", "w"], ["\u{1D535}", "x"], ["\u{1D536}", "y"], ["\u{1D537}", "z"], ["\u{1D538}", "A"], ["\u{1D539}", "B"], ["\u{1D53B}", "D"], ["\u{1D53C}", "E"], ["\u{1D53D}", "F"], ["\u{1D53E}", "G"], ["\u{1D540}", "I"], ["\u{1D541}", "J"], ["\u{1D542}", "K"], ["\u{1D543}", "L"], ["\u{1D544}", "M"], ["\u{1D546}", "N"], ["\u{1D54A}", "S"], ["\u{1D54B}", "T"], ["\u{1D54C}", "U"], ["\u{1D54D}", "V"], ["\u{1D54E}", "W"], ["\u{1D54F}", "X"], ["\u{1D550}", "Y"], ["\u{1D552}", "a"], ["\u{1D553}", "b"], ["\u{1D554}", "c"], ["\u{1D555}", "d"], ["\u{1D556}", "e"], ["\u{1D557}", "f"], ["\u{1D558}", "g"], ["\u{1D559}", "h"], ["\u{1D55A}", "i"], ["\u{1D55B}", "j"], ["\u{1D55C}", "k"], ["\u{1D55D}", "l"], ["\u{1D55E}", "m"], ["\u{1D55F}", "n"], ["\u{1D560}", "o"], ["\u{1D561}", "p"], ["\u{1D562}", "q"], ["\u{1D563}", "r"], ["\u{1D564}", "s"], ["\u{1D565}", "t"], ["\u{1D566}", "u"], ["\u{1D567}", "v"], ["\u{1D568}", "w"], ["\u{1D569}", "x"], ["\u{1D56A}", "y"], ["\u{1D56B}", "z"], ["\u{1D56C}", "A"], ["\u{1D56D}", "B"], ["\u{1D56E}", "C"], ["\u{1D56F}", "D"], ["\u{1D570}", "E"], ["\u{1D571}", "F"], ["\u{1D572}", "G"], ["\u{1D573}", "H"], ["\u{1D574}", "I"], ["\u{1D575}", "J"], ["\u{1D576}", "K"], ["\u{1D577}", "L"], ["\u{1D578}", "M"], ["\u{1D579}", "N"], ["\u{1D57A}", "O"], ["\u{1D57B}", "P"], ["\u{1D57C}", "Q"], ["\u{1D57D}", "R"], ["\u{1D57E}", "S"], ["\u{1D57F}", "T"], ["\u{1D580}", "U"], ["\u{1D581}", "V"], ["\u{1D582}", "W"], ["\u{1D583}", "X"], ["\u{1D584}", "Y"], ["\u{1D585}", "Z"], ["\u{1D586}", "a"], ["\u{1D587}", "b"], ["\u{1D588}", "c"], ["\u{1D589}", "d"], ["\u{1D58A}", "e"], ["\u{1D58B}", "f"], ["\u{1D58C}", "g"], ["\u{1D58D}", "h"], ["\u{1D58E}", "i"], ["\u{1D58F}", "j"], ["\u{1D590}", "k"], ["\u{1D591}", "l"], ["\u{1D592}", "m"], ["\u{1D593}", "n"], ["\u{1D594}", "o"], ["\u{1D595}", "p"], ["\u{1D596}", "q"], ["\u{1D597}", "r"], ["\u{1D598}", "s"], ["\u{1D599}", "t"], ["\u{1D59A}", "u"], ["\u{1D59B}", "v"], ["\u{1D59C}", "w"], ["\u{1D59D}", "x"], ["\u{1D59E}", "y"], ["\u{1D59F}", "z"], ["\u{1D5A0}", "A"], ["\u{1D5A1}", "B"], ["\u{1D5A2}", "C"], ["\u{1D5A3}", "D"], ["\u{1D5A4}", "E"], ["\u{1D5A5}", "F"], ["\u{1D5A6}", "G"], ["\u{1D5A7}", "H"], ["\u{1D5A8}", "I"], ["\u{1D5A9}", "J"], ["\u{1D5AA}", "K"], ["\u{1D5AB}", "L"], ["\u{1D5AC}", "M"], ["\u{1D5AD}", "N"], ["\u{1D5AE}", "O"], ["\u{1D5AF}", "P"], ["\u{1D5B0}", "Q"], ["\u{1D5B1}", "R"], ["\u{1D5B2}", "S"], ["\u{1D5B3}", "T"], ["\u{1D5B4}", "U"], ["\u{1D5B5}", "V"], ["\u{1D5B6}", "W"], ["\u{1D5B7}", "X"], ["\u{1D5B8}", "Y"], ["\u{1D5B9}", "Z"], ["\u{1D5BA}", "a"], ["\u{1D5BB}", "b"], ["\u{1D5BC}", "c"], ["\u{1D5BD}", "d"], ["\u{1D5BE}", "e"], ["\u{1D5BF}", "f"], ["\u{1D5C0}", "g"], ["\u{1D5C1}", "h"], ["\u{1D5C2}", "i"], ["\u{1D5C3}", "j"], ["\u{1D5C4}", "k"], ["\u{1D5C5}", "l"], ["\u{1D5C6}", "m"], ["\u{1D5C7}", "n"], ["\u{1D5C8}", "o"], ["\u{1D5C9}", "p"], ["\u{1D5CA}", "q"], ["\u{1D5CB}", "r"], ["\u{1D5CC}", "s"], ["\u{1D5CD}", "t"], ["\u{1D5CE}", "u"], ["\u{1D5CF}", "v"], ["\u{1D5D0}", "w"], ["\u{1D5D1}", "x"], ["\u{1D5D2}", "y"], ["\u{1D5D3}", "z"], ["\u{1D5D4}", "A"], ["\u{1D5D5}", "B"], ["\u{1D5D6}", "C"], ["\u{1D5D7}", "D"], ["\u{1D5D8}", "E"], ["\u{1D5D9}", "F"], ["\u{1D5DA}", "G"], ["\u{1D5DB}", "H"], ["\u{1D5DC}", "I"], ["\u{1D5DD}", "J"], ["\u{1D5DE}", "K"], ["\u{1D5DF}", "L"], ["\u{1D5E0}", "M"], ["\u{1D5E1}", "N"], ["\u{1D5E2}", "O"], ["\u{1D5E3}", "P"], ["\u{1D5E4}", "Q"], ["\u{1D5E5}", "R"], ["\u{1D5E6}", "S"], ["\u{1D5E7}", "T"], ["\u{1D5E8}", "U"], ["\u{1D5E9}", "V"], ["\u{1D5EA}", "W"], ["\u{1D5EB}", "X"], ["\u{1D5EC}", "Y"], ["\u{1D5ED}", "Z"], ["\u{1D5EE}", "a"], ["\u{1D5EF}", "b"], ["\u{1D5F0}", "c"], ["\u{1D5F1}", "d"], ["\u{1D5F2}", "e"], ["\u{1D5F3}", "f"], ["\u{1D5F4}", "g"], ["\u{1D5F5}", "h"], ["\u{1D5F6}", "i"], ["\u{1D5F7}", "j"], ["\u{1D5F8}", "k"], ["\u{1D5F9}", "l"], ["\u{1D5FA}", "m"], ["\u{1D5FB}", "n"], ["\u{1D5FC}", "o"], ["\u{1D5FD}", "p"], ["\u{1D5FE}", "q"], ["\u{1D5FF}", "r"], ["\u{1D600}", "s"], ["\u{1D601}", "t"], ["\u{1D602}", "u"], ["\u{1D603}", "v"], ["\u{1D604}", "w"], ["\u{1D605}", "x"], ["\u{1D606}", "y"], ["\u{1D607}", "z"], ["\u{1D608}", "A"], ["\u{1D609}", "B"], ["\u{1D60A}", "C"], ["\u{1D60B}", "D"], ["\u{1D60C}", "E"], ["\u{1D60D}", "F"], ["\u{1D60E}", "G"], ["\u{1D60F}", "H"], ["\u{1D610}", "I"], ["\u{1D611}", "J"], ["\u{1D612}", "K"], ["\u{1D613}", "L"], ["\u{1D614}", "M"], ["\u{1D615}", "N"], ["\u{1D616}", "O"], ["\u{1D617}", "P"], ["\u{1D618}", "Q"], ["\u{1D619}", "R"], ["\u{1D61A}", "S"], ["\u{1D61B}", "T"], ["\u{1D61C}", "U"], ["\u{1D61D}", "V"], ["\u{1D61E}", "W"], ["\u{1D61F}", "X"], ["\u{1D620}", "Y"], ["\u{1D621}", "Z"], ["\u{1D622}", "a"], ["\u{1D623}", "b"], ["\u{1D624}", "c"], ["\u{1D625}", "d"], ["\u{1D626}", "e"], ["\u{1D627}", "f"], ["\u{1D628}", "g"], ["\u{1D629}", "h"], ["\u{1D62A}", "i"], ["\u{1D62B}", "j"], ["\u{1D62C}", "k"], ["\u{1D62D}", "l"], ["\u{1D62E}", "m"], ["\u{1D62F}", "n"], ["\u{1D630}", "o"], ["\u{1D631}", "p"], ["\u{1D632}", "q"], ["\u{1D633}", "r"], ["\u{1D634}", "s"], ["\u{1D635}", "t"], ["\u{1D636}", "u"], ["\u{1D637}", "v"], ["\u{1D638}", "w"], ["\u{1D639}", "x"], ["\u{1D63A}", "y"], ["\u{1D63B}", "z"], ["\u{1D63C}", "A"], ["\u{1D63D}", "B"], ["\u{1D63E}", "C"], ["\u{1D63F}", "D"], ["\u{1D640}", "E"], ["\u{1D641}", "F"], ["\u{1D642}", "G"], ["\u{1D643}", "H"], ["\u{1D644}", "I"], ["\u{1D645}", "J"], ["\u{1D646}", "K"], ["\u{1D647}", "L"], ["\u{1D648}", "M"], ["\u{1D649}", "N"], ["\u{1D64A}", "O"], ["\u{1D64B}", "P"], ["\u{1D64C}", "Q"], ["\u{1D64D}", "R"], ["\u{1D64E}", "S"], ["\u{1D64F}", "T"], ["\u{1D650}", "U"], ["\u{1D651}", "V"], ["\u{1D652}", "W"], ["\u{1D653}", "X"], ["\u{1D654}", "Y"], ["\u{1D655}", "Z"], ["\u{1D656}", "a"], ["\u{1D657}", "b"], ["\u{1D658}", "c"], ["\u{1D659}", "d"], ["\u{1D65A}", "e"], ["\u{1D65B}", "f"], ["\u{1D65C}", "g"], ["\u{1D65D}", "h"], ["\u{1D65E}", "i"], ["\u{1D65F}", "j"], ["\u{1D660}", "k"], ["\u{1D661}", "l"], ["\u{1D662}", "m"], ["\u{1D663}", "n"], ["\u{1D664}", "o"], ["\u{1D665}", "p"], ["\u{1D666}", "q"], ["\u{1D667}", "r"], ["\u{1D668}", "s"], ["\u{1D669}", "t"], ["\u{1D66A}", "u"], ["\u{1D66B}", "v"], ["\u{1D66C}", "w"], ["\u{1D66D}", "x"], ["\u{1D66E}", "y"], ["\u{1D66F}", "z"], ["\u{1D670}", "A"], ["\u{1D671}", "B"], ["\u{1D672}", "C"], ["\u{1D673}", "D"], ["\u{1D674}", "E"], ["\u{1D675}", "F"], ["\u{1D676}", "G"], ["\u{1D677}", "H"], ["\u{1D678}", "I"], ["\u{1D679}", "J"], ["\u{1D67A}", "K"], ["\u{1D67B}", "L"], ["\u{1D67C}", "M"], ["\u{1D67D}", "N"], ["\u{1D67E}", "O"], ["\u{1D67F}", "P"], ["\u{1D680}", "Q"], ["\u{1D681}", "R"], ["\u{1D682}", "S"], ["\u{1D683}", "T"], ["\u{1D684}", "U"], ["\u{1D685}", "V"], ["\u{1D686}", "W"], ["\u{1D687}", "X"], ["\u{1D688}", "Y"], ["\u{1D689}", "Z"], ["\u{1D68A}", "a"], ["\u{1D68B}", "b"], ["\u{1D68C}", "c"], ["\u{1D68D}", "d"], ["\u{1D68E}", "e"], ["\u{1D68F}", "f"], ["\u{1D690}", "g"], ["\u{1D691}", "h"], ["\u{1D692}", "i"], ["\u{1D693}", "j"], ["\u{1D694}", "k"], ["\u{1D695}", "l"], ["\u{1D696}", "m"], ["\u{1D697}", "n"], ["\u{1D698}", "o"], ["\u{1D699}", "p"], ["\u{1D69A}", "q"], ["\u{1D69B}", "r"], ["\u{1D69C}", "s"], ["\u{1D69D}", "t"], ["\u{1D69E}", "u"], ["\u{1D69F}", "v"], ["\u{1D6A0}", "w"], ["\u{1D6A1}", "x"], ["\u{1D6A2}", "y"], ["\u{1D6A3}", "z"], ["\u{1D6A4}", "l"], ["\u{1D6A5}", "j"], ["\u{1D6E2}", "A"], ["\u{1D6E3}", "B"], ["\u{1D6E4}", "G"], ["\u{1D6E5}", "D"], ["\u{1D6E6}", "E"], ["\u{1D6E7}", "Z"], ["\u{1D6E8}", "I"], ["\u{1D6E9}", "TH"], ["\u{1D6EA}", "I"], ["\u{1D6EB}", "K"], ["\u{1D6EC}", "L"], ["\u{1D6ED}", "M"], ["\u{1D6EE}", "N"], ["\u{1D6EF}", "KS"], ["\u{1D6F0}", "O"], ["\u{1D6F1}", "P"], ["\u{1D6F2}", "R"], ["\u{1D6F3}", "TH"], ["\u{1D6F4}", "S"], ["\u{1D6F5}", "T"], ["\u{1D6F6}", "Y"], ["\u{1D6F7}", "F"], ["\u{1D6F8}", "x"], ["\u{1D6F9}", "PS"], ["\u{1D6FA}", "O"], ["\u{1D6FB}", "D"], ["\u{1D6FC}", "a"], ["\u{1D6FD}", "b"], ["\u{1D6FE}", "g"], ["\u{1D6FF}", "d"], ["\u{1D700}", "e"], ["\u{1D701}", "z"], ["\u{1D702}", "i"], ["\u{1D703}", "th"], ["\u{1D704}", "i"], ["\u{1D705}", "k"], ["\u{1D706}", "l"], ["\u{1D707}", "m"], ["\u{1D708}", "n"], ["\u{1D709}", "ks"], ["\u{1D70A}", "o"], ["\u{1D70B}", "p"], ["\u{1D70C}", "r"], ["\u{1D70D}", "s"], ["\u{1D70E}", "s"], ["\u{1D70F}", "t"], ["\u{1D710}", "y"], ["\u{1D711}", "f"], ["\u{1D712}", "x"], ["\u{1D713}", "ps"], ["\u{1D714}", "o"], ["\u{1D715}", "d"], ["\u{1D716}", "E"], ["\u{1D717}", "TH"], ["\u{1D718}", "K"], ["\u{1D719}", "f"], ["\u{1D71A}", "r"], ["\u{1D71B}", "p"], ["\u{1D71C}", "A"], ["\u{1D71D}", "V"], ["\u{1D71E}", "G"], ["\u{1D71F}", "D"], ["\u{1D720}", "E"], ["\u{1D721}", "Z"], ["\u{1D722}", "I"], ["\u{1D723}", "TH"], ["\u{1D724}", "I"], ["\u{1D725}", "K"], ["\u{1D726}", "L"], ["\u{1D727}", "M"], ["\u{1D728}", "N"], ["\u{1D729}", "KS"], ["\u{1D72A}", "O"], ["\u{1D72B}", "P"], ["\u{1D72C}", "S"], ["\u{1D72D}", "TH"], ["\u{1D72E}", "S"], ["\u{1D72F}", "T"], ["\u{1D730}", "Y"], ["\u{1D731}", "F"], ["\u{1D732}", "X"], ["\u{1D733}", "PS"], ["\u{1D734}", "O"], ["\u{1D735}", "D"], ["\u{1D736}", "a"], ["\u{1D737}", "v"], ["\u{1D738}", "g"], ["\u{1D739}", "d"], ["\u{1D73A}", "e"], ["\u{1D73B}", "z"], ["\u{1D73C}", "i"], ["\u{1D73D}", "th"], ["\u{1D73E}", "i"], ["\u{1D73F}", "k"], ["\u{1D740}", "l"], ["\u{1D741}", "m"], ["\u{1D742}", "n"], ["\u{1D743}", "ks"], ["\u{1D744}", "o"], ["\u{1D745}", "p"], ["\u{1D746}", "r"], ["\u{1D747}", "s"], ["\u{1D748}", "s"], ["\u{1D749}", "t"], ["\u{1D74A}", "y"], ["\u{1D74B}", "f"], ["\u{1D74C}", "x"], ["\u{1D74D}", "ps"], ["\u{1D74E}", "o"], ["\u{1D74F}", "a"], ["\u{1D750}", "e"], ["\u{1D751}", "i"], ["\u{1D752}", "k"], ["\u{1D753}", "f"], ["\u{1D754}", "r"], ["\u{1D755}", "p"], ["\u{1D756}", "A"], ["\u{1D757}", "B"], ["\u{1D758}", "G"], ["\u{1D759}", "D"], ["\u{1D75A}", "E"], ["\u{1D75B}", "Z"], ["\u{1D75C}", "I"], ["\u{1D75D}", "TH"], ["\u{1D75E}", "I"], ["\u{1D75F}", "K"], ["\u{1D760}", "L"], ["\u{1D761}", "M"], ["\u{1D762}", "N"], ["\u{1D763}", "KS"], ["\u{1D764}", "O"], ["\u{1D765}", "P"], ["\u{1D766}", "R"], ["\u{1D767}", "TH"], ["\u{1D768}", "S"], ["\u{1D769}", "T"], ["\u{1D76A}", "Y"], ["\u{1D76B}", "F"], ["\u{1D76C}", "X"], ["\u{1D76D}", "PS"], ["\u{1D76E}", "O"], ["\u{1D76F}", "D"], ["\u{1D770}", "a"], ["\u{1D771}", "v"], ["\u{1D772}", "g"], ["\u{1D773}", "d"], ["\u{1D774}", "e"], ["\u{1D775}", "z"], ["\u{1D776}", "i"], ["\u{1D777}", "th"], ["\u{1D778}", "i"], ["\u{1D779}", "k"], ["\u{1D77A}", "l"], ["\u{1D77B}", "m"], ["\u{1D77C}", "n"], ["\u{1D77D}", "ks"], ["\u{1D77E}", "o"], ["\u{1D77F}", "p"], ["\u{1D780}", "r"], ["\u{1D781}", "s"], ["\u{1D782}", "s"], ["\u{1D783}", "t"], ["\u{1D784}", "y"], ["\u{1D785}", "f"], ["\u{1D786}", "x"], ["\u{1D787}", "ps"], ["\u{1D788}", "o"], ["\u{1D789}", "a"], ["\u{1D78A}", "e"], ["\u{1D78B}", "i"], ["\u{1D78C}", "k"], ["\u{1D78D}", "f"], ["\u{1D78E}", "r"], ["\u{1D78F}", "p"], ["\u{1D790}", "A"], ["\u{1D791}", "V"], ["\u{1D792}", "G"], ["\u{1D793}", "D"], ["\u{1D794}", "E"], ["\u{1D795}", "Z"], ["\u{1D796}", "I"], ["\u{1D797}", "TH"], ["\u{1D798}", "I"], ["\u{1D799}", "K"], ["\u{1D79A}", "L"], ["\u{1D79B}", "M"], ["\u{1D79C}", "N"], ["\u{1D79D}", "KS"], ["\u{1D79E}", "O"], ["\u{1D79F}", "P"], ["\u{1D7A0}", "S"], ["\u{1D7A1}", "TH"], ["\u{1D7A2}", "S"], ["\u{1D7A3}", "T"], ["\u{1D7A4}", "Y"], ["\u{1D7A5}", "F"], ["\u{1D7A6}", "X"], ["\u{1D7A7}", "PS"], ["\u{1D7A8}", "O"], ["\u{1D7A9}", "D"], ["\u{1D7AA}", "av"], ["\u{1D7AB}", "g"], ["\u{1D7AC}", "d"], ["\u{1D7AD}", "e"], ["\u{1D7AE}", "z"], ["\u{1D7AF}", "i"], ["\u{1D7B0}", "i"], ["\u{1D7B1}", "th"], ["\u{1D7B2}", "i"], ["\u{1D7B3}", "k"], ["\u{1D7B4}", "l"], ["\u{1D7B5}", "m"], ["\u{1D7B6}", "n"], ["\u{1D7B7}", "ks"], ["\u{1D7B8}", "o"], ["\u{1D7B9}", "p"], ["\u{1D7BA}", "r"], ["\u{1D7BB}", "s"], ["\u{1D7BC}", "s"], ["\u{1D7BD}", "t"], ["\u{1D7BE}", "y"], ["\u{1D7BF}", "f"], ["\u{1D7C0}", "x"], ["\u{1D7C1}", "ps"], ["\u{1D7C2}", "o"], ["\u{1D7C3}", "a"], ["\u{1D7C4}", "e"], ["\u{1D7C5}", "i"], ["\u{1D7C6}", "k"], ["\u{1D7C7}", "f"], ["\u{1D7C8}", "r"], ["\u{1D7C9}", "p"], ["\u{1D7CA}", "F"], ["\u{1D7CB}", "f"], ["\u249C", "(a)"], ["\u249D", "(b)"], ["\u249E", "(c)"], ["\u249F", "(d)"], ["\u24A0", "(e)"], ["\u24A1", "(f)"], ["\u24A2", "(g)"], ["\u24A3", "(h)"], ["\u24A4", "(i)"], ["\u24A5", "(j)"], ["\u24A6", "(k)"], ["\u24A7", "(l)"], ["\u24A8", "(m)"], ["\u24A9", "(n)"], ["\u24AA", "(o)"], ["\u24AB", "(p)"], ["\u24AC", "(q)"], ["\u24AD", "(r)"], ["\u24AE", "(s)"], ["\u24AF", "(t)"], ["\u24B0", "(u)"], ["\u24B1", "(v)"], ["\u24B2", "(w)"], ["\u24B3", "(x)"], ["\u24B4", "(y)"], ["\u24B5", "(z)"], ["\u24B6", "(A)"], ["\u24B7", "(B)"], ["\u24B8", "(C)"], ["\u24B9", "(D)"], ["\u24BA", "(E)"], ["\u24BB", "(F)"], ["\u24BC", "(G)"], ["\u24BD", "(H)"], ["\u24BE", "(I)"], ["\u24BF", "(J)"], ["\u24C0", "(K)"], ["\u24C1", "(L)"], ["\u24C3", "(N)"], ["\u24C4", "(O)"], ["\u24C5", "(P)"], ["\u24C6", "(Q)"], ["\u24C7", "(R)"], ["\u24C8", "(S)"], ["\u24C9", "(T)"], ["\u24CA", "(U)"], ["\u24CB", "(V)"], ["\u24CC", "(W)"], ["\u24CD", "(X)"], ["\u24CE", "(Y)"], ["\u24CF", "(Z)"], ["\u24D0", "(a)"], ["\u24D1", "(b)"], ["\u24D2", "(b)"], ["\u24D3", "(c)"], ["\u24D4", "(e)"], ["\u24D5", "(f)"], ["\u24D6", "(g)"], ["\u24D7", "(h)"], ["\u24D8", "(i)"], ["\u24D9", "(j)"], ["\u24DA", "(k)"], ["\u24DB", "(l)"], ["\u24DC", "(m)"], ["\u24DD", "(n)"], ["\u24DE", "(o)"], ["\u24DF", "(p)"], ["\u24E0", "(q)"], ["\u24E1", "(r)"], ["\u24E2", "(s)"], ["\u24E3", "(t)"], ["\u24E4", "(u)"], ["\u24E5", "(v)"], ["\u24E6", "(w)"], ["\u24E7", "(x)"], ["\u24E8", "(y)"], ["\u24E9", "(z)"], ["\u010A", "C"], ["\u010B", "c"], ["\u0120", "G"], ["\u0121", "g"], ["\u0126", "H"], ["\u0127", "h"], ["\u017B", "Z"], ["\u017C", "z"], ["\u{1D7CE}", "0"], ["\u{1D7CF}", "1"], ["\u{1D7D0}", "2"], ["\u{1D7D1}", "3"], ["\u{1D7D2}", "4"], ["\u{1D7D3}", "5"], ["\u{1D7D4}", "6"], ["\u{1D7D5}", "7"], ["\u{1D7D6}", "8"], ["\u{1D7D7}", "9"], ["\u{1D7D8}", "0"], ["\u{1D7D9}", "1"], ["\u{1D7DA}", "2"], ["\u{1D7DB}", "3"], ["\u{1D7DC}", "4"], ["\u{1D7DD}", "5"], ["\u{1D7DE}", "6"], ["\u{1D7DF}", "7"], ["\u{1D7E0}", "8"], ["\u{1D7E1}", "9"], ["\u{1D7E2}", "0"], ["\u{1D7E3}", "1"], ["\u{1D7E4}", "2"], ["\u{1D7E5}", "3"], ["\u{1D7E6}", "4"], ["\u{1D7E7}", "5"], ["\u{1D7E8}", "6"], ["\u{1D7E9}", "7"], ["\u{1D7EA}", "8"], ["\u{1D7EB}", "9"], ["\u{1D7EC}", "0"], ["\u{1D7ED}", "1"], ["\u{1D7EE}", "2"], ["\u{1D7EF}", "3"], ["\u{1D7F0}", "4"], ["\u{1D7F1}", "5"], ["\u{1D7F2}", "6"], ["\u{1D7F3}", "7"], ["\u{1D7F4}", "8"], ["\u{1D7F5}", "9"], ["\u{1D7F6}", "0"], ["\u{1D7F7}", "1"], ["\u{1D7F8}", "2"], ["\u{1D7F9}", "3"], ["\u{1D7FA}", "4"], ["\u{1D7FB}", "5"], ["\u{1D7FC}", "6"], ["\u{1D7FD}", "7"], ["\u{1D7FE}", "8"], ["\u{1D7FF}", "9"], ["\u2460", "1"], ["\u2461", "2"], ["\u2462", "3"], ["\u2463", "4"], ["\u2464", "5"], ["\u2465", "6"], ["\u2466", "7"], ["\u2467", "8"], ["\u2468", "9"], ["\u2469", "10"], ["\u246A", "11"], ["\u246B", "12"], ["\u246C", "13"], ["\u246D", "14"], ["\u246E", "15"], ["\u246F", "16"], ["\u2470", "17"], ["\u2471", "18"], ["\u2472", "19"], ["\u2473", "20"], ["\u2474", "1"], ["\u2475", "2"], ["\u2476", "3"], ["\u2477", "4"], ["\u2478", "5"], ["\u2479", "6"], ["\u247A", "7"], ["\u247B", "8"], ["\u247C", "9"], ["\u247D", "10"], ["\u247E", "11"], ["\u247F", "12"], ["\u2480", "13"], ["\u2481", "14"], ["\u2482", "15"], ["\u2483", "16"], ["\u2484", "17"], ["\u2485", "18"], ["\u2486", "19"], ["\u2487", "20"], ["\u2488", "1."], ["\u2489", "2."], ["\u248A", "3."], ["\u248B", "4."], ["\u248C", "5."], ["\u248D", "6."], ["\u248E", "7."], ["\u248F", "8."], ["\u2490", "9."], ["\u2491", "10."], ["\u2492", "11."], ["\u2493", "12."], ["\u2494", "13."], ["\u2495", "14."], ["\u2496", "15."], ["\u2497", "16."], ["\u2498", "17."], ["\u2499", "18."], ["\u249A", "19."], ["\u249B", "20."], ["\u24EA", "0"], ["\u24EB", "11"], ["\u24EC", "12"], ["\u24ED", "13"], ["\u24EE", "14"], ["\u24EF", "15"], ["\u24F0", "16"], ["\u24F1", "17"], ["\u24F2", "18"], ["\u24F3", "19"], ["\u24F4", "20"], ["\u24F5", "1"], ["\u24F6", "2"], ["\u24F7", "3"], ["\u24F8", "4"], ["\u24F9", "5"], ["\u24FA", "6"], ["\u24FB", "7"], ["\u24FC", "8"], ["\u24FD", "9"], ["\u24FE", "10"], ["\u24FF", "0"], ["\u{1F670}", "&"], ["\u{1F671}", "&"], ["\u{1F672}", "&"], ["\u{1F673}", "&"], ["\u{1F674}", "&"], ["\u{1F675}", "&"], ["\u{1F676}", '"'], ["\u{1F677}", '"'], ["\u{1F678}", '"'], ["\u203D", "?!"], ["\u{1F679}", "?!"], ["\u{1F67A}", "?!"], ["\u{1F67B}", "?!"], ["\u{1F67C}", "/"], ["\u{1F67D}", "\\"], ["\u{1F707}", "AR"], ["\u{1F708}", "V"], ["\u{1F709}", "V"], ["\u{1F706}", "VR"], ["\u{1F705}", "VF"], ["\u{1F729}", "2"], ["\u{1F72A}", "5"], ["\u{1F761}", "f"], ["\u{1F762}", "W"], ["\u{1F763}", "U"], ["\u{1F767}", "V"], ["\u{1F768}", "T"], ["\u{1F76A}", "V"], ["\u{1F76B}", "MB"], ["\u{1F76C}", "VB"], ["\u{1F772}", "3B"], ["\u{1F773}", "3B"], ["\u{1F4AF}", "100"], ["\u{1F519}", "BACK"], ["\u{1F51A}", "END"], ["\u{1F51B}", "ON!"], ["\u{1F51C}", "SOON"], ["\u{1F51D}", "TOP"], ["\u{1F51E}", "18"], ["\u{1F524}", "abc"], ["\u{1F520}", "ABCD"], ["\u{1F521}", "abcd"], ["\u{1F522}", "1234"], ["\u{1F523}", "T&@%"], ["#\uFE0F\u20E3", "#"], ["*\uFE0F\u20E3", "*"], ["0\uFE0F\u20E3", "0"], ["1\uFE0F\u20E3", "1"], ["2\uFE0F\u20E3", "2"], ["3\uFE0F\u20E3", "3"], ["4\uFE0F\u20E3", "4"], ["5\uFE0F\u20E3", "5"], ["6\uFE0F\u20E3", "6"], ["7\uFE0F\u20E3", "7"], ["8\uFE0F\u20E3", "8"], ["9\uFE0F\u20E3", "9"], ["\u{1F51F}", "10"], ["\u{1F170}\uFE0F", "A"], ["\u{1F171}\uFE0F", "B"], ["\u{1F18E}", "AB"], ["\u{1F191}", "CL"], ["\u{1F17E}\uFE0F", "O"], ["\u{1F17F}", "P"], ["\u{1F198}", "SOS"], ["\u{1F172}", "C"], ["\u{1F173}", "D"], ["\u{1F174}", "E"], ["\u{1F175}", "F"], ["\u{1F176}", "G"], ["\u{1F177}", "H"], ["\u{1F178}", "I"], ["\u{1F179}", "J"], ["\u{1F17A}", "K"], ["\u{1F17B}", "L"], ["\u{1F17C}", "M"], ["\u{1F17D}", "N"], ["\u{1F180}", "Q"], ["\u{1F181}", "R"], ["\u{1F182}", "S"], ["\u{1F183}", "T"], ["\u{1F184}", "U"], ["\u{1F185}", "V"], ["\u{1F186}", "W"], ["\u{1F187}", "X"], ["\u{1F188}", "Y"], ["\u{1F189}", "Z"]];
  }
});

// node_modules/inline-style-parser/index.js
var require_inline_style_parser = __commonJS({
  "node_modules/inline-style-parser/index.js"(exports, module2) {
    var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
    var NEWLINE_REGEX = /\n/g;
    var WHITESPACE_REGEX = /^\s*/;
    var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
    var COLON_REGEX = /^:\s*/;
    var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
    var SEMICOLON_REGEX = /^[;\s]*/;
    var TRIM_REGEX = /^\s+|\s+$/g;
    var NEWLINE = "\n";
    var FORWARD_SLASH = "/";
    var ASTERISK = "*";
    var EMPTY_STRING = "";
    var TYPE_COMMENT = "comment";
    var TYPE_DECLARATION = "declaration";
    module2.exports = function(style, options) {
      if (typeof style !== "string") {
        throw new TypeError("First argument must be a string");
      }
      if (!style) return [];
      options = options || {};
      var lineno = 1;
      var column = 1;
      function updatePosition(str) {
        var lines = str.match(NEWLINE_REGEX);
        if (lines) lineno += lines.length;
        var i = str.lastIndexOf(NEWLINE);
        column = ~i ? str.length - i : column + str.length;
      }
      function position4() {
        var start2 = { line: lineno, column };
        return function(node2) {
          node2.position = new Position(start2);
          whitespace2();
          return node2;
        };
      }
      function Position(start2) {
        this.start = start2;
        this.end = { line: lineno, column };
        this.source = options.source;
      }
      Position.prototype.content = style;
      var errorsList = [];
      function error(msg) {
        var err = new Error(
          options.source + ":" + lineno + ":" + column + ": " + msg
        );
        err.reason = msg;
        err.filename = options.source;
        err.line = lineno;
        err.column = column;
        err.source = style;
        if (options.silent) {
          errorsList.push(err);
        } else {
          throw err;
        }
      }
      function match(re2) {
        var m = re2.exec(style);
        if (!m) return;
        var str = m[0];
        updatePosition(str);
        style = style.slice(str.length);
        return m;
      }
      function whitespace2() {
        match(WHITESPACE_REGEX);
      }
      function comments(rules) {
        var c;
        rules = rules || [];
        while (c = comment()) {
          if (c !== false) {
            rules.push(c);
          }
        }
        return rules;
      }
      function comment() {
        var pos = position4();
        if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;
        var i = 2;
        while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {
          ++i;
        }
        i += 2;
        if (EMPTY_STRING === style.charAt(i - 1)) {
          return error("End of comment missing");
        }
        var str = style.slice(2, i - 2);
        column += 2;
        updatePosition(str);
        style = style.slice(i);
        column += 2;
        return pos({
          type: TYPE_COMMENT,
          comment: str
        });
      }
      function declaration() {
        var pos = position4();
        var prop = match(PROPERTY_REGEX);
        if (!prop) return;
        comment();
        if (!match(COLON_REGEX)) return error("property missing ':'");
        var val = match(VALUE_REGEX);
        var ret = pos({
          type: TYPE_DECLARATION,
          property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
          value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
        });
        match(SEMICOLON_REGEX);
        return ret;
      }
      function declarations() {
        var decls = [];
        comments(decls);
        var decl;
        while (decl = declaration()) {
          if (decl !== false) {
            decls.push(decl);
            comments(decls);
          }
        }
        return decls;
      }
      whitespace2();
      return declarations();
    };
    function trim(str) {
      return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
    }
  }
});

// node_modules/style-to-object/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/style-to-object/cjs/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = StyleToObject2;
    var inline_style_parser_1 = __importDefault(require_inline_style_parser());
    function StyleToObject2(style, iterator) {
      var styleObject = null;
      if (!style || typeof style !== "string") {
        return styleObject;
      }
      var declarations = (0, inline_style_parser_1.default)(style);
      var hasIterator = typeof iterator === "function";
      declarations.forEach(function(declaration) {
        if (declaration.type !== "declaration") {
          return;
        }
        var property = declaration.property, value = declaration.value;
        if (hasIterator) {
          iterator(property, value, declaration);
        } else if (value) {
          styleObject = styleObject || {};
          styleObject[property] = value;
        }
      });
      return styleObject;
    }
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module2) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject2 = function isPlainObject3(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name2) {
      if (name2 === "__proto__") {
        if (!hasOwn.call(obj, name2)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name2).value;
        }
      }
      return obj[name2];
    };
    module2.exports = function extend2() {
      var options, name2, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name2 in options) {
            src = getProperty(target, name2);
            copy = getProperty(options, name2);
            if (target !== copy) {
              if (deep && copy && (isPlainObject2(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject2(src) ? src : {};
                }
                setProperty(target, { name: name2, newValue: extend2(deep, clone, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name: name2, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/@rgrove/parse-xml/src/lib/StringScanner.js
var require_StringScanner = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/StringScanner.js"(exports, module2) {
    "use strict";
    var emptyString = "";
    var StringScanner = class {
      /**
      @param {string} string
      */
      constructor(string3) {
        this.chars = [...string3];
        this.charCount = this.chars.length;
        this.charIndex = 0;
        this.charsToBytes = new Array(this.charCount);
        this.multiByteMode = false;
        this.string = string3;
        let { chars, charCount, charsToBytes } = this;
        if (charCount === string3.length) {
          for (let i = 0; i < charCount; ++i) {
            charsToBytes[i] = i;
          }
        } else {
          for (let byteIndex = 0, charIndex = 0; charIndex < charCount; ++charIndex) {
            charsToBytes[charIndex] = byteIndex;
            byteIndex += chars[charIndex].length;
          }
          this.multiByteMode = true;
        }
      }
      /**
        Whether the current character index is at the end of the input string.
      
        @type {boolean}
        */
      get isEnd() {
        return this.charIndex >= this.charCount;
      }
      // -- Protected Methods ------------------------------------------------------
      /**
        Returns the number of characters in the given _string_, which may differ from
        the byte length if the string contains multibyte characters.
      
        @param {string} string
        @returns {number}
        */
      _charLength(string3) {
        let { length } = string3;
        if (length < 2 || !this.multiByteMode) {
          return length;
        }
        return string3.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "_").length;
      }
      // -- Public Methods ---------------------------------------------------------
      /**
        Advances the scanner by the given number of characters, stopping if the end of
        the string is reached.
      
        @param {number} [count]
        */
      advance(count = 1) {
        this.charIndex = Math.min(this.charCount, this.charIndex + count);
      }
      /**
        Consumes and returns the given number of characters if possible, advancing the
        scanner and stopping if the end of the string is reached.
      
        If no characters could be consumed, an empty string will be returned.
      
        @param {number} [count]
        @returns {string}
        */
      consume(count = 1) {
        let chars = this.peek(count);
        this.advance(count);
        return chars;
      }
      /**
        Consumes a match for the given sticky regex, advances the scanner, updates the
        `lastIndex` property of the regex, and returns the matching string.
      
        The regex must have a sticky flag ("y") so that its `lastIndex` prop can be
        used to anchor the match at the current scanner position.
      
        Returns the consumed string, or an empty string if nothing was consumed.
      
        @param {RegExp} regex
        @returns {string}
        */
      consumeMatch(regex) {
        if (!regex.sticky) {
          throw new Error('`regex` must have a sticky flag ("y")');
        }
        regex.lastIndex = this.charsToBytes[this.charIndex];
        let result = regex.exec(this.string);
        if (result === null) {
          return emptyString;
        }
        let match = result[0];
        this.advance(this._charLength(match));
        return match;
      }
      /**
        Consumes and returns all characters for which the given function returns a
        truthy value, stopping on the first falsy return value or if the end of the
        input is reached.
      
        @param {(char: string) => boolean} fn
        @returns {string}
        */
      consumeMatchFn(fn) {
        let startIndex = this.charIndex;
        while (!this.isEnd && fn(this.peek())) {
          this.advance();
        }
        return this.charIndex > startIndex ? this.string.slice(this.charsToBytes[startIndex], this.charsToBytes[this.charIndex]) : emptyString;
      }
      /**
        Consumes the given string if it exists at the current character index, and
        advances the scanner.
      
        If the given string doesn't exist at the current character index, an empty
        string will be returned and the scanner will not be advanced.
      
        @param {string} stringToConsume
        @returns {string}
        */
      consumeString(stringToConsume) {
        if (this.consumeStringFast(stringToConsume)) {
          return stringToConsume;
        }
        if (!this.multiByteMode) {
          return emptyString;
        }
        let { length } = stringToConsume;
        let charLengthToMatch = this._charLength(stringToConsume);
        if (charLengthToMatch !== length && stringToConsume === this.peek(charLengthToMatch)) {
          this.advance(charLengthToMatch);
          return stringToConsume;
        }
        return emptyString;
      }
      /**
       * Does the same thing as `consumeString()`, but doesn't support consuming
       * multibyte characters. This can be much faster if you only need to match
       * single byte characters.
       *
       * @param {string} stringToConsume
       * @returns {string}
       */
      consumeStringFast(stringToConsume) {
        if (this.peek() === stringToConsume[0]) {
          let { length } = stringToConsume;
          if (length === 1) {
            this.advance();
            return stringToConsume;
          }
          if (this.peek(length) === stringToConsume) {
            this.advance(length);
            return stringToConsume;
          }
        }
        return emptyString;
      }
      /**
        Consumes characters until the given global regex is matched, advancing the
        scanner up to (but not beyond) the beginning of the match and updating the
        `lastIndex` property of the regex.
      
        The regex must have a global flag ("g") so that its `lastIndex` prop can be
        used to begin the search at the current scanner position.
      
        Returns the consumed string, or an empty string if nothing was consumed.
      
        @param {RegExp} regex
        @returns {string}
        */
      consumeUntilMatch(regex) {
        if (!regex.global) {
          throw new Error('`regex` must have a global flag ("g")');
        }
        let byteIndex = this.charsToBytes[this.charIndex];
        regex.lastIndex = byteIndex;
        let match = regex.exec(this.string);
        if (match === null || match.index === byteIndex) {
          return emptyString;
        }
        let result = this.string.slice(byteIndex, match.index);
        this.advance(this._charLength(result));
        return result;
      }
      /**
        Consumes characters until the given string is found, advancing the scanner up
        to (but not beyond) that point.
      
        Returns the consumed string, or an empty string if nothing was consumed.
      
        @param {string} searchString
        @returns {string}
        */
      consumeUntilString(searchString) {
        let { charIndex, charsToBytes, string: string3 } = this;
        let byteIndex = charsToBytes[charIndex];
        let matchByteIndex = string3.indexOf(searchString, byteIndex);
        if (matchByteIndex <= 0) {
          return emptyString;
        }
        let result = string3.slice(byteIndex, matchByteIndex);
        this.advance(this._charLength(result));
        return result;
      }
      /**
        Returns the given number of characters starting at the current character
        index, without advancing the scanner and without exceeding the end of the
        input string.
      
        @param {number} [count]
        @returns {string}
        */
      peek(count = 1) {
        if (this.charIndex >= this.charCount) {
          return emptyString;
        }
        if (count === 1) {
          return this.chars[this.charIndex];
        }
        let { charsToBytes, charIndex } = this;
        return this.string.slice(charsToBytes[charIndex], charsToBytes[charIndex + count]);
      }
      /**
        Resets the scanner position to the given character _index_, or to the start of
        the input string if no index is given.
      
        If _index_ is negative, the scanner position will be moved backward by that
        many characters, stopping if the beginning of the string is reached.
      
        @param {number} [index]
        */
      reset(index3 = 0) {
        this.charIndex = index3 >= 0 ? Math.min(this.charCount, index3) : Math.max(0, this.charIndex + index3);
      }
    };
    module2.exports = StringScanner;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/syntax.js
var require_syntax = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/syntax.js"(exports) {
    "use strict";
    var predefinedEntities = Object.freeze(Object.assign(/* @__PURE__ */ Object.create(null), {
      amp: "&",
      apos: "'",
      gt: ">",
      lt: "<",
      quot: '"'
    }));
    exports.predefinedEntities = predefinedEntities;
    function isNameChar(char) {
      if (isNameStartChar(char)) {
        return true;
      }
      let cp = getCodePoint(char);
      return cp === 45 || cp === 46 || cp >= 48 && cp <= 57 || cp === 183 || cp >= 768 && cp <= 879 || cp >= 8255 && cp <= 8256;
    }
    exports.isNameChar = isNameChar;
    function isNameStartChar(char) {
      let cp = getCodePoint(char);
      return cp === 58 || cp === 95 || cp >= 65 && cp <= 90 || cp >= 97 && cp <= 122 || cp >= 192 && cp <= 214 || cp >= 216 && cp <= 246 || cp >= 248 && cp <= 767 || cp >= 880 && cp <= 893 || cp >= 895 && cp <= 8191 || cp >= 8204 && cp <= 8205 || cp >= 8304 && cp <= 8591 || cp >= 11264 && cp <= 12271 || cp >= 12289 && cp <= 55295 || cp >= 63744 && cp <= 64975 || cp >= 65008 && cp <= 65533 || cp >= 65536 && cp <= 983039;
    }
    exports.isNameStartChar = isNameStartChar;
    function isNotXmlChar(char) {
      return !isXmlChar(char);
    }
    exports.isNotXmlChar = isNotXmlChar;
    function isReferenceChar(char) {
      return char === "#" || isNameChar(char);
    }
    exports.isReferenceChar = isReferenceChar;
    function isWhitespace(char) {
      let cp = getCodePoint(char);
      return cp === 32 || cp === 9 || cp === 10 || cp === 13;
    }
    exports.isWhitespace = isWhitespace;
    function isXmlChar(char) {
      let cp = getCodePoint(char);
      return cp === 9 || cp === 10 || cp === 13 || cp >= 32 && cp <= 55295 || cp >= 57344 && cp <= 65533 || cp >= 65536 && cp <= 1114111;
    }
    exports.isXmlChar = isXmlChar;
    function getCodePoint(char) {
      return char.codePointAt(0) || -1;
    }
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlNode.js
var require_XmlNode = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlNode.js"(exports, module2) {
    "use strict";
    var XmlNode = class {
      constructor() {
        this.parent = null;
      }
      /**
        Document that contains this node, or `null` if this node is not associated
        with a document.
      
        @type {XmlDocument?}
        @public
        */
      get document() {
        return this.parent ? this.parent.document : null;
      }
      /**
        Whether this node is the root node of the document.
      
        @returns {boolean}
        @public
        */
      get isRootNode() {
        return this.parent ? this.parent === this.document : false;
      }
      /**
        Whether whitespace should be preserved in the content of this element and
        its children.
      
        This is influenced by the value of the special `xml:space` attribute, and
        will be `true` for any node whose `xml:space` attribute is set to
        "preserve". If a node has no such attribute, it will inherit the value of
        the nearest ancestor that does (if any).
      
        @type {boolean}
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space
        @public
        */
      get preserveWhitespace() {
        return Boolean(this.parent && this.parent.preserveWhitespace);
      }
      /**
        Type of this node.
      
        The value of this property is a string that matches one of the static `TYPE_*`
        properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).
      
        The `XmlNode` class itself is a base class and doesn't have its own type name.
      
        @type {string}
        @public
        */
      get type() {
        return "";
      }
      /**
        Returns a JSON-serializable object representing this node, minus properties
        that could result in circular references.
      
        @returns {{[key: string]: any}}
        @public
        */
      toJSON() {
        let json = {
          type: this.type
        };
        if (this.isRootNode) {
          json.isRootNode = true;
        }
        if (this.preserveWhitespace) {
          json.preserveWhitespace = true;
        }
        return json;
      }
    };
    XmlNode.TYPE_CDATA = "cdata";
    XmlNode.TYPE_COMMENT = "comment";
    XmlNode.TYPE_DOCUMENT = "document";
    XmlNode.TYPE_ELEMENT = "element";
    XmlNode.TYPE_PROCESSING_INSTRUCTION = "pi";
    XmlNode.TYPE_TEXT = "text";
    module2.exports = XmlNode;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlText.js
var require_XmlText = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlText.js"(exports, module2) {
    "use strict";
    var XmlNode = require_XmlNode();
    var XmlText = class extends XmlNode {
      /**
      @param {string} [text]
      */
      constructor(text8 = "") {
        super();
        this.text = text8;
      }
      get type() {
        return XmlNode.TYPE_TEXT;
      }
      toJSON() {
        return Object.assign(XmlNode.prototype.toJSON.call(this), {
          text: this.text
        });
      }
    };
    module2.exports = XmlText;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlCdata.js
var require_XmlCdata = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlCdata.js"(exports, module2) {
    "use strict";
    var XmlNode = require_XmlNode();
    var XmlText = require_XmlText();
    var XmlCdata = class extends XmlText {
      get type() {
        return XmlNode.TYPE_CDATA;
      }
    };
    module2.exports = XmlCdata;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlComment.js
var require_XmlComment = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlComment.js"(exports, module2) {
    "use strict";
    var XmlNode = require_XmlNode();
    var XmlComment = class extends XmlNode {
      /**
      @param {string} [content]
      */
      constructor(content3 = "") {
        super();
        this.content = content3;
      }
      get type() {
        return XmlNode.TYPE_COMMENT;
      }
      toJSON() {
        return Object.assign(XmlNode.prototype.toJSON.call(this), {
          content: this.content
        });
      }
    };
    module2.exports = XmlComment;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlElement.js
var require_XmlElement = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlElement.js"(exports, module2) {
    "use strict";
    var XmlNode = require_XmlNode();
    var XmlElement = class _XmlElement extends XmlNode {
      /**
      @param {string} name
      @param {{[attrName: string]: string}} [attributes]
      @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]
      */
      constructor(name2, attributes = /* @__PURE__ */ Object.create(null), children = []) {
        super();
        this.name = name2;
        this.attributes = attributes;
        this.children = children;
      }
      /**
        Whether this node is empty (meaning it has no children).
      
        @type {boolean}
        @public
        */
      get isEmpty() {
        return this.children.length === 0;
      }
      /** @type {boolean} */
      get preserveWhitespace() {
        let node2 = this;
        while (node2 instanceof _XmlElement) {
          if ("xml:space" in node2.attributes) {
            return node2.attributes["xml:space"] === "preserve";
          }
          node2 = node2.parent;
        }
        return false;
      }
      /**
        Text content of this element and all its descendants.
      
        @type {string}
        @public
        */
      get text() {
        return this.children.map((child) => "text" in child ? child.text : "").join("");
      }
      get type() {
        return XmlNode.TYPE_ELEMENT;
      }
      /** @returns {{[key: string]: any}} */
      toJSON() {
        return Object.assign(XmlNode.prototype.toJSON.call(this), {
          name: this.name,
          attributes: this.attributes,
          children: this.children.map((child) => child.toJSON())
        });
      }
    };
    module2.exports = XmlElement;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlDocument.js
var require_XmlDocument = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlDocument.js"(exports, module2) {
    "use strict";
    var XmlElement = require_XmlElement();
    var XmlNode = require_XmlNode();
    var XmlDocument = class extends XmlNode {
      /**
      @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]
      */
      constructor(children = []) {
        super();
        this.children = children;
      }
      get document() {
        return this;
      }
      /**
        Root element of this document, or `null` if this document is empty.
      
        @type {XmlElement?}
        @public
        */
      get root() {
        return this.children.find((child) => child instanceof XmlElement) || null;
      }
      /**
        Text content of this document and all its descendants.
      
        @type {string}
        @public
        */
      get text() {
        return this.children.map((child) => "text" in child ? child.text : "").join("");
      }
      get type() {
        return XmlNode.TYPE_DOCUMENT;
      }
      toJSON() {
        return Object.assign(XmlNode.prototype.toJSON.call(this), {
          children: this.children.map((child) => child.toJSON())
        });
      }
    };
    module2.exports = XmlDocument;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/XmlProcessingInstruction.js
var require_XmlProcessingInstruction = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/XmlProcessingInstruction.js"(exports, module2) {
    "use strict";
    var XmlNode = require_XmlNode();
    var XmlProcessingInstruction = class extends XmlNode {
      /**
      @param {string} name
      @param {string} [content]
      */
      constructor(name2, content3 = "") {
        super();
        this.name = name2;
        this.content = content3;
      }
      get type() {
        return XmlNode.TYPE_PROCESSING_INSTRUCTION;
      }
      toJSON() {
        return Object.assign(XmlNode.prototype.toJSON.call(this), {
          name: this.name,
          content: this.content
        });
      }
    };
    module2.exports = XmlProcessingInstruction;
  }
});

// node_modules/@rgrove/parse-xml/src/lib/Parser.js
var require_Parser = __commonJS({
  "node_modules/@rgrove/parse-xml/src/lib/Parser.js"(exports, module2) {
    "use strict";
    var StringScanner = require_StringScanner();
    var syntax = require_syntax();
    var XmlCdata = require_XmlCdata();
    var XmlComment = require_XmlComment();
    var XmlDocument = require_XmlDocument();
    var XmlElement = require_XmlElement();
    var XmlProcessingInstruction = require_XmlProcessingInstruction();
    var XmlText = require_XmlText();
    var emptyString = "";
    var Parser = class {
      /**
        @param {string} xml
          XML string to parse.
      
        @param {object} [options]
          Parsing options.
      
          @param {boolean} [options.ignoreUndefinedEntities=false]
          @param {boolean} [options.preserveCdata=false]
          @param {boolean} [options.preserveComments=false]
          @param {(entity: string) => string?} [options.resolveUndefinedEntity]
          @param {boolean} [options.sortAttributes=false]
        */
      constructor(xml2, options = {}) {
        this.document = new XmlDocument();
        this.currentNode = this.document;
        this.options = options;
        this.scanner = new StringScanner(normalizeXmlString(xml2));
        this.consumeProlog();
        if (!this.consumeElement()) {
          this.error("Root element is missing or invalid");
        }
        while (this.consumeMisc()) {
        }
        if (!this.scanner.isEnd) {
          this.error("Extra content at the end of the document");
        }
      }
      /**
        Adds the given `XmlNode` as a child of `this.currentNode`.
      
        @param {XmlNode} node
        */
      addNode(node2) {
        node2.parent = this.currentNode;
        this.currentNode.children.push(node2);
      }
      /**
        Adds the given _text_ to the document, either by appending it to a preceding
        `XmlText` node (if possible) or by creating a new `XmlText` node.
      
        @param {string} text
        */
      addText(text8) {
        let { children } = this.currentNode;
        if (children.length > 0) {
          let prevNode = children[children.length - 1];
          if (prevNode instanceof XmlText) {
            prevNode.text += text8;
            return;
          }
        }
        this.addNode(new XmlText(text8));
      }
      /**
        Consumes an `AttValue` (attribute value) if possible.
      
        @returns {string|false}
          Contents of the `AttValue` minus quotes, or `false` if nothing was consumed.
          An empty string indicates that an `AttValue` was consumed but was empty.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-AttValue
        */
      consumeAttributeValue() {
        let { scanner } = this;
        let quote = scanner.peek();
        if (quote !== '"' && quote !== "'") {
          return false;
        }
        scanner.advance();
        let chars;
        let isClosed = false;
        let value = emptyString;
        let regex = quote === '"' ? /[^"&<]+/y : /[^'&<]+/y;
        matchLoop: while (!scanner.isEnd) {
          chars = scanner.consumeMatch(regex);
          if (chars) {
            this.validateChars(chars);
            value += chars.replace(/[\t\r\n]/g, " ");
          }
          let nextChar = scanner.peek();
          switch (nextChar) {
            case quote:
              isClosed = true;
              break matchLoop;
            case "&":
              value += this.consumeReference();
              continue;
            case "<":
              this.error("Unescaped `<` is not allowed in an attribute value");
              break;
            case emptyString:
              this.error("Unclosed attribute");
              break;
          }
        }
        if (!isClosed) {
          this.error("Unclosed attribute");
        }
        scanner.advance();
        return value;
      }
      /**
        Consumes a CDATA section if possible.
      
        @returns {boolean}
          Whether a CDATA section was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-cdata-sect
        */
      consumeCdataSection() {
        let { scanner } = this;
        if (!scanner.consumeStringFast("<![CDATA[")) {
          return false;
        }
        let text8 = scanner.consumeUntilString("]]>");
        this.validateChars(text8);
        if (!scanner.consumeStringFast("]]>")) {
          this.error("Unclosed CDATA section");
        }
        if (this.options.preserveCdata) {
          this.addNode(new XmlCdata(text8));
        } else {
          this.addText(text8);
        }
        return true;
      }
      /**
        Consumes character data if possible.
      
        @returns {boolean}
          Whether character data was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#dt-chardata
        */
      consumeCharData() {
        let { scanner } = this;
        let charData = scanner.consumeUntilMatch(/<|&|]]>/g);
        if (!charData) {
          return false;
        }
        this.validateChars(charData);
        if (scanner.peek() === "]" && scanner.peek(3) === "]]>") {
          this.error("Element content may not contain the CDATA section close delimiter `]]>`");
        }
        this.addText(charData);
        return true;
      }
      /**
        Consumes a comment if possible.
      
        @returns {boolean}
          Whether a comment was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Comment
        */
      consumeComment() {
        let { scanner } = this;
        if (!scanner.consumeStringFast("<!--")) {
          return false;
        }
        let content3 = scanner.consumeUntilString("--");
        this.validateChars(content3);
        if (!scanner.consumeStringFast("-->")) {
          if (scanner.peek(2) === "--") {
            this.error("The string `--` isn't allowed inside a comment");
          } else {
            this.error("Unclosed comment");
          }
        }
        if (this.options.preserveComments) {
          this.addNode(new XmlComment(content3.trim()));
        }
        return true;
      }
      /**
        Consumes a reference in a content context if possible.
      
        This differs from `consumeReference()` in that a consumed reference will be
        added to the document as a text node instead of returned.
      
        @returns {boolean}
          Whether a reference was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#entproc
        */
      consumeContentReference() {
        let ref = this.consumeReference();
        if (ref) {
          this.addText(ref);
          return true;
        }
        return false;
      }
      /**
        Consumes a doctype declaration if possible.
      
        This is a loose implementation since doctype declarations are currently
        discarded without further parsing.
      
        @returns {boolean}
          Whether a doctype declaration was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#dtd
        */
      consumeDoctypeDeclaration() {
        let { scanner } = this;
        if (!scanner.consumeStringFast("<!DOCTYPE") || !this.consumeWhitespace()) {
          return false;
        }
        scanner.consumeMatch(/[^[>]+/y);
        if (scanner.consumeMatch(/\[[\s\S]+?\][\x20\t\r\n]*>/y)) {
          return true;
        }
        if (!scanner.consumeStringFast(">")) {
          this.error("Unclosed doctype declaration");
        }
        return true;
      }
      /**
        Consumes an element if possible.
      
        @returns {boolean}
          Whether an element was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-element
        */
      consumeElement() {
        let { scanner } = this;
        let mark2 = scanner.charIndex;
        if (scanner.peek() !== "<") {
          return false;
        }
        scanner.advance();
        let name2 = this.consumeName();
        if (!name2) {
          scanner.reset(mark2);
          return false;
        }
        let attributes = /* @__PURE__ */ Object.create(null);
        while (this.consumeWhitespace()) {
          let attrName = this.consumeName();
          if (!attrName) {
            continue;
          }
          let attrValue = this.consumeEqual() && this.consumeAttributeValue();
          if (attrValue === false) {
            this.error("Attribute value expected");
          }
          if (attrName in attributes) {
            this.error(`Duplicate attribute: ${attrName}`);
          }
          if (attrName === "xml:space" && attrValue !== "default" && attrValue !== "preserve") {
            this.error('Value of the `xml:space` attribute must be "default" or "preserve"');
          }
          attributes[attrName] = attrValue;
        }
        if (this.options.sortAttributes) {
          let attrNames = Object.keys(attributes).sort();
          let sortedAttributes = /* @__PURE__ */ Object.create(null);
          for (let i = 0; i < attrNames.length; ++i) {
            let attrName = attrNames[i];
            sortedAttributes[attrName] = attributes[attrName];
          }
          attributes = sortedAttributes;
        }
        let isEmpty = Boolean(scanner.consumeStringFast("/>"));
        let element4 = new XmlElement(name2, attributes);
        element4.parent = this.currentNode;
        if (!isEmpty) {
          if (!scanner.consumeStringFast(">")) {
            this.error(`Unclosed start tag for element \`${name2}\``);
          }
          this.currentNode = element4;
          this.consumeCharData();
          while (this.consumeElement() || this.consumeContentReference() || this.consumeCdataSection() || this.consumeProcessingInstruction() || this.consumeComment()) {
            this.consumeCharData();
          }
          let endTagMark = scanner.charIndex;
          let endTagName;
          if (!scanner.consumeStringFast("</") || !(endTagName = this.consumeName()) || endTagName !== name2) {
            scanner.reset(endTagMark);
            this.error(`Missing end tag for element ${name2}`);
          }
          this.consumeWhitespace();
          if (!scanner.consumeStringFast(">")) {
            this.error(`Unclosed end tag for element ${name2}`);
          }
          this.currentNode = element4.parent;
        }
        this.addNode(element4);
        return true;
      }
      /**
        Consumes an `Eq` production if possible.
      
        @returns {boolean}
          Whether an `Eq` production was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Eq
        */
      consumeEqual() {
        this.consumeWhitespace();
        if (this.scanner.consumeStringFast("=")) {
          this.consumeWhitespace();
          return true;
        }
        return false;
      }
      /**
        Consumes `Misc` content if possible.
      
        @returns {boolean}
          Whether anything was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Misc
        */
      consumeMisc() {
        return this.consumeComment() || this.consumeProcessingInstruction() || this.consumeWhitespace();
      }
      /**
        Consumes one or more `Name` characters if possible.
      
        @returns {string}
          `Name` characters, or an empty string if none were consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Name
        */
      consumeName() {
        return syntax.isNameStartChar(this.scanner.peek()) ? this.scanner.consumeMatchFn(syntax.isNameChar) : emptyString;
      }
      /**
        Consumes a processing instruction if possible.
      
        @returns {boolean}
          Whether a processing instruction was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-pi
        */
      consumeProcessingInstruction() {
        let { scanner } = this;
        let mark2 = scanner.charIndex;
        if (!scanner.consumeStringFast("<?")) {
          return false;
        }
        let name2 = this.consumeName();
        if (name2) {
          if (name2.toLowerCase() === "xml") {
            scanner.reset(mark2);
            this.error("XML declaration isn't allowed here");
          }
        } else {
          this.error("Invalid processing instruction");
        }
        if (!this.consumeWhitespace()) {
          if (scanner.consumeStringFast("?>")) {
            this.addNode(new XmlProcessingInstruction(name2));
            return true;
          }
          this.error("Whitespace is required after a processing instruction name");
        }
        let content3 = scanner.consumeUntilString("?>");
        this.validateChars(content3);
        if (!scanner.consumeStringFast("?>")) {
          this.error("Unterminated processing instruction");
        }
        this.addNode(new XmlProcessingInstruction(name2, content3));
        return true;
      }
      /**
        Consumes a prolog if possible.
      
        @returns {boolean}
          Whether a prolog was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-prolog-dtd
        */
      consumeProlog() {
        let { scanner } = this;
        let mark2 = scanner.charIndex;
        this.consumeXmlDeclaration();
        while (this.consumeMisc()) {
        }
        if (this.consumeDoctypeDeclaration()) {
          while (this.consumeMisc()) {
          }
        }
        return mark2 < scanner.charIndex;
      }
      /**
        Consumes a reference if possible.
      
        This differs from `consumeContentReference()` in that a consumed reference
        will be returned rather than added to the document.
      
        @returns {string|false}
          Parsed reference value, or `false` if nothing was consumed (to distinguish
          from a reference that resolves to an empty string).
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Reference
        */
      consumeReference() {
        let { scanner } = this;
        if (scanner.peek() !== "&") {
          return false;
        }
        scanner.advance();
        let ref = scanner.consumeMatchFn(syntax.isReferenceChar);
        if (scanner.consume() !== ";") {
          this.error("Unterminated reference (a reference must end with `;`)");
        }
        let parsedValue;
        if (ref[0] === "#") {
          let codePoint = ref[1] === "x" ? parseInt(ref.slice(2), 16) : parseInt(ref.slice(1), 10);
          if (isNaN(codePoint)) {
            this.error("Invalid character reference");
          }
          parsedValue = String.fromCodePoint(codePoint);
          if (!syntax.isXmlChar(parsedValue)) {
            this.error("Character reference resolves to an invalid character");
          }
        } else {
          parsedValue = syntax.predefinedEntities[ref];
          if (parsedValue === void 0) {
            let {
              ignoreUndefinedEntities,
              resolveUndefinedEntity
            } = this.options;
            let wrappedRef = `&${ref};`;
            if (resolveUndefinedEntity) {
              let resolvedValue = resolveUndefinedEntity(wrappedRef);
              if (resolvedValue !== null && resolvedValue !== void 0) {
                let type = typeof resolvedValue;
                if (type !== "string") {
                  throw new TypeError(`\`resolveUndefinedEntity()\` must return a string, \`null\`, or \`undefined\`, but returned a value of type ${type}`);
                }
                return resolvedValue;
              }
            }
            if (ignoreUndefinedEntities) {
              return wrappedRef;
            }
            scanner.reset(-wrappedRef.length);
            this.error(`Named entity isn't defined: ${wrappedRef}`);
          }
        }
        return parsedValue;
      }
      /**
        Consumes a `SystemLiteral` if possible.
      
        A `SystemLiteral` is similar to an attribute value, but allows the characters
        `<` and `&` and doesn't replace references.
      
        @returns {string|false}
          Value of the `SystemLiteral` minus quotes, or `false` if nothing was
          consumed. An empty string indicates that a `SystemLiteral` was consumed but
          was empty.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-SystemLiteral
        */
      consumeSystemLiteral() {
        let { scanner } = this;
        let quote = scanner.consumeStringFast('"') || scanner.consumeStringFast("'");
        if (!quote) {
          return false;
        }
        let value = scanner.consumeUntilString(quote);
        this.validateChars(value);
        if (!scanner.consumeStringFast(quote)) {
          this.error("Missing end quote");
        }
        return value;
      }
      /**
        Consumes one or more whitespace characters if possible.
      
        @returns {boolean}
          Whether any whitespace characters were consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#white
        */
      consumeWhitespace() {
        return Boolean(this.scanner.consumeMatchFn(syntax.isWhitespace));
      }
      /**
        Consumes an XML declaration if possible.
      
        @returns {boolean}
          Whether an XML declaration was consumed.
      
        @see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-XMLDecl
        */
      consumeXmlDeclaration() {
        let { scanner } = this;
        if (!scanner.consumeStringFast("<?xml")) {
          return false;
        }
        if (!this.consumeWhitespace()) {
          this.error("Invalid XML declaration");
        }
        let version = Boolean(scanner.consumeStringFast("version")) && this.consumeEqual() && this.consumeSystemLiteral();
        if (version === false) {
          this.error("XML version is missing or invalid");
        } else if (!/^1\.[0-9]+$/.test(version)) {
          this.error("Invalid character in version number");
        }
        if (this.consumeWhitespace()) {
          let encoding = Boolean(scanner.consumeStringFast("encoding")) && this.consumeEqual() && this.consumeSystemLiteral();
          if (encoding) {
            this.consumeWhitespace();
          }
          let standalone = Boolean(scanner.consumeStringFast("standalone")) && this.consumeEqual() && this.consumeSystemLiteral();
          if (standalone) {
            if (standalone !== "yes" && standalone !== "no") {
              this.error('Only "yes" and "no" are permitted as values of `standalone`');
            }
            this.consumeWhitespace();
          }
        }
        if (!scanner.consumeStringFast("?>")) {
          this.error("Invalid or unclosed XML declaration");
        }
        return true;
      }
      /**
        Throws an error at the current scanner position.
      
        @param {string} message
        */
      error(message) {
        let { charIndex, string: xml2 } = this.scanner;
        let column = 1;
        let excerpt = "";
        let line = 1;
        for (let i = 0; i < charIndex; ++i) {
          let char = xml2[i];
          if (char === "\n") {
            column = 1;
            excerpt = "";
            line += 1;
          } else {
            column += 1;
            excerpt += char;
          }
        }
        let eol = xml2.indexOf("\n", charIndex);
        excerpt += eol === -1 ? xml2.slice(charIndex) : xml2.slice(charIndex, eol);
        let excerptStart = 0;
        if (excerpt.length > 50) {
          if (column < 40) {
            excerpt = excerpt.slice(0, 50);
          } else {
            excerptStart = column - 20;
            excerpt = excerpt.slice(excerptStart, column + 30);
          }
        }
        let err = new Error(
          `${message} (line ${line}, column ${column})
  ${excerpt}
` + " ".repeat(column - excerptStart + 1) + "^\n"
        );
        Object.assign(err, {
          column,
          excerpt,
          line,
          pos: charIndex
        });
        throw err;
      }
      /**
        Throws an invalid character error if any character in the given _string_ isn't
        a valid XML character.
      
        @param {string} string
        */
      validateChars(string3) {
        let charIndex = 0;
        for (let char of string3) {
          if (syntax.isNotXmlChar(char)) {
            this.scanner.reset(-([...string3].length - charIndex));
            this.error("Invalid character");
          }
          charIndex += 1;
        }
      }
    };
    module2.exports = Parser;
    function normalizeXmlString(xml2) {
      if (xml2[0] === "\uFEFF") {
        xml2 = xml2.slice(1);
      }
      return xml2.replace(/\r\n?/g, "\n");
    }
  }
});

// node_modules/@rgrove/parse-xml/src/index.js
var require_src = __commonJS({
  "node_modules/@rgrove/parse-xml/src/index.js"(exports, module2) {
    "use strict";
    var Parser = require_Parser();
    var XmlCdata = require_XmlCdata();
    var XmlComment = require_XmlComment();
    var XmlDocument = require_XmlDocument();
    var XmlElement = require_XmlElement();
    var XmlNode = require_XmlNode();
    var XmlProcessingInstruction = require_XmlProcessingInstruction();
    var XmlText = require_XmlText();
    function parseXml2(xml2, options) {
      return new Parser(xml2, options).document;
    }
    parseXml2.XmlCdata = XmlCdata;
    parseXml2.XmlComment = XmlComment;
    parseXml2.XmlDocument = XmlDocument;
    parseXml2.XmlElement = XmlElement;
    parseXml2.XmlNode = XmlNode;
    parseXml2.XmlProcessingInstruction = XmlProcessingInstruction;
    parseXml2.XmlText = XmlText;
    module2.exports = parseXml2;
  }
});

// node_modules/xtend/immutable.js
var require_immutable = __commonJS({
  "node_modules/xtend/immutable.js"(exports, module2) {
    module2.exports = extend2;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function extend2() {
      var target = {};
      for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (hasOwnProperty2.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    }
  }
});

// node_modules/mml-react/node_modules/bail/index.js
var require_bail = __commonJS({
  "node_modules/mml-react/node_modules/bail/index.js"(exports, module2) {
    "use strict";
    module2.exports = bail2;
    function bail2(err) {
      if (err) {
        throw err;
      }
    }
  }
});

// node_modules/mml-react/node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/mml-react/node_modules/is-buffer/index.js"(exports, module2) {
    module2.exports = function isBuffer(obj) {
      return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    };
  }
});

// node_modules/mml-react/node_modules/is-plain-obj/index.js
var require_is_plain_obj = __commonJS({
  "node_modules/mml-react/node_modules/is-plain-obj/index.js"(exports, module2) {
    "use strict";
    module2.exports = (value) => {
      if (Object.prototype.toString.call(value) !== "[object Object]") {
        return false;
      }
      const prototype = Object.getPrototypeOf(value);
      return prototype === null || prototype === Object.prototype;
    };
  }
});

// node_modules/mml-react/node_modules/trough/wrap.js
var require_wrap = __commonJS({
  "node_modules/mml-react/node_modules/trough/wrap.js"(exports, module2) {
    "use strict";
    var slice = [].slice;
    module2.exports = wrap3;
    function wrap3(fn, callback) {
      var invoked;
      return wrapped;
      function wrapped() {
        var params = slice.call(arguments, 0);
        var callback2 = fn.length > params.length;
        var result;
        if (callback2) {
          params.push(done);
        }
        try {
          result = fn.apply(null, params);
        } catch (error) {
          if (callback2 && invoked) {
            throw error;
          }
          return done(error);
        }
        if (!callback2) {
          if (result && typeof result.then === "function") {
            result.then(then, done);
          } else if (result instanceof Error) {
            done(result);
          } else {
            then(result);
          }
        }
      }
      function done() {
        if (!invoked) {
          invoked = true;
          callback.apply(null, arguments);
        }
      }
      function then(value) {
        done(null, value);
      }
    }
  }
});

// node_modules/mml-react/node_modules/trough/index.js
var require_trough = __commonJS({
  "node_modules/mml-react/node_modules/trough/index.js"(exports, module2) {
    "use strict";
    var wrap3 = require_wrap();
    module2.exports = trough2;
    trough2.wrap = wrap3;
    var slice = [].slice;
    function trough2() {
      var fns = [];
      var middleware = {};
      middleware.run = run;
      middleware.use = use;
      return middleware;
      function run() {
        var index3 = -1;
        var input2 = slice.call(arguments, 0, -1);
        var done = arguments[arguments.length - 1];
        if (typeof done !== "function") {
          throw new Error("Expected function as last argument, not " + done);
        }
        next.apply(null, [null].concat(input2));
        function next(err) {
          var fn = fns[++index3];
          var params = slice.call(arguments, 0);
          var values = params.slice(1);
          var length = input2.length;
          var pos = -1;
          if (err) {
            done(err);
            return;
          }
          while (++pos < length) {
            if (values[pos] === null || values[pos] === void 0) {
              values[pos] = input2[pos];
            }
          }
          input2 = values;
          if (fn) {
            wrap3(fn, next).apply(null, input2);
          } else {
            done.apply(null, [null].concat(input2));
          }
        }
      }
      function use(fn) {
        if (typeof fn !== "function") {
          throw new Error("Expected `fn` to be a function, not " + fn);
        }
        fns.push(fn);
        return middleware;
      }
    }
  }
});

// node_modules/unist-util-stringify-position/index.js
var require_unist_util_stringify_position = __commonJS({
  "node_modules/unist-util-stringify-position/index.js"(exports, module2) {
    "use strict";
    var own6 = {}.hasOwnProperty;
    module2.exports = stringify3;
    function stringify3(value) {
      if (!value || typeof value !== "object") {
        return "";
      }
      if (own6.call(value, "position") || own6.call(value, "type")) {
        return position4(value.position);
      }
      if (own6.call(value, "start") || own6.call(value, "end")) {
        return position4(value);
      }
      if (own6.call(value, "line") || own6.call(value, "column")) {
        return point5(value);
      }
      return "";
    }
    function point5(point6) {
      if (!point6 || typeof point6 !== "object") {
        point6 = {};
      }
      return index3(point6.line) + ":" + index3(point6.column);
    }
    function position4(pos) {
      if (!pos || typeof pos !== "object") {
        pos = {};
      }
      return point5(pos.start) + "-" + point5(pos.end);
    }
    function index3(value) {
      return value && typeof value === "number" ? value : 1;
    }
  }
});

// node_modules/mml-react/node_modules/vfile-message/index.js
var require_vfile_message = __commonJS({
  "node_modules/mml-react/node_modules/vfile-message/index.js"(exports, module2) {
    "use strict";
    var stringify3 = require_unist_util_stringify_position();
    module2.exports = VMessage;
    function VMessagePrototype() {
    }
    VMessagePrototype.prototype = Error.prototype;
    VMessage.prototype = new VMessagePrototype();
    var proto = VMessage.prototype;
    proto.file = "";
    proto.name = "";
    proto.reason = "";
    proto.message = "";
    proto.stack = "";
    proto.fatal = null;
    proto.column = null;
    proto.line = null;
    function VMessage(reason, position4, origin) {
      var parts;
      var range;
      var location;
      if (typeof position4 === "string") {
        origin = position4;
        position4 = null;
      }
      parts = parseOrigin(origin);
      range = stringify3(position4) || "1:1";
      location = {
        start: { line: null, column: null },
        end: { line: null, column: null }
      };
      if (position4 && position4.position) {
        position4 = position4.position;
      }
      if (position4) {
        if (position4.start) {
          location = position4;
          position4 = position4.start;
        } else {
          location.start = position4;
        }
      }
      if (reason.stack) {
        this.stack = reason.stack;
        reason = reason.message;
      }
      this.message = reason;
      this.name = range;
      this.reason = reason;
      this.line = position4 ? position4.line : null;
      this.column = position4 ? position4.column : null;
      this.location = location;
      this.source = parts[0];
      this.ruleId = parts[1];
    }
    function parseOrigin(origin) {
      var result = [null, null];
      var index3;
      if (typeof origin === "string") {
        index3 = origin.indexOf(":");
        if (index3 === -1) {
          result[1] = origin;
        } else {
          result[0] = origin.slice(0, index3);
          result[1] = origin.slice(index3 + 1);
        }
      }
      return result;
    }
  }
});

// node_modules/mml-react/node_modules/vfile/lib/minpath.browser.js
var require_minpath_browser = __commonJS({
  "node_modules/mml-react/node_modules/vfile/lib/minpath.browser.js"(exports) {
    "use strict";
    exports.basename = basename2;
    exports.dirname = dirname2;
    exports.extname = extname2;
    exports.join = join2;
    exports.sep = "/";
    function basename2(path2, ext) {
      var start2 = 0;
      var end = -1;
      var index3;
      var firstNonSlashEnd;
      var seenNonSlash;
      var extIndex;
      if (ext !== void 0 && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
      }
      assertPath3(path2);
      index3 = path2.length;
      if (ext === void 0 || !ext.length || ext.length > path2.length) {
        while (index3--) {
          if (path2.charCodeAt(index3) === 47) {
            if (seenNonSlash) {
              start2 = index3 + 1;
              break;
            }
          } else if (end < 0) {
            seenNonSlash = true;
            end = index3 + 1;
          }
        }
        return end < 0 ? "" : path2.slice(start2, end);
      }
      if (ext === path2) {
        return "";
      }
      firstNonSlashEnd = -1;
      extIndex = ext.length - 1;
      while (index3--) {
        if (path2.charCodeAt(index3) === 47) {
          if (seenNonSlash) {
            start2 = index3 + 1;
            break;
          }
        } else {
          if (firstNonSlashEnd < 0) {
            seenNonSlash = true;
            firstNonSlashEnd = index3 + 1;
          }
          if (extIndex > -1) {
            if (path2.charCodeAt(index3) === ext.charCodeAt(extIndex--)) {
              if (extIndex < 0) {
                end = index3;
              }
            } else {
              extIndex = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }
      if (start2 === end) {
        end = firstNonSlashEnd;
      } else if (end < 0) {
        end = path2.length;
      }
      return path2.slice(start2, end);
    }
    function dirname2(path2) {
      var end;
      var unmatchedSlash;
      var index3;
      assertPath3(path2);
      if (!path2.length) {
        return ".";
      }
      end = -1;
      index3 = path2.length;
      while (--index3) {
        if (path2.charCodeAt(index3) === 47) {
          if (unmatchedSlash) {
            end = index3;
            break;
          }
        } else if (!unmatchedSlash) {
          unmatchedSlash = true;
        }
      }
      return end < 0 ? path2.charCodeAt(0) === 47 ? "/" : "." : end === 1 && path2.charCodeAt(0) === 47 ? "//" : path2.slice(0, end);
    }
    function extname2(path2) {
      var startDot = -1;
      var startPart = 0;
      var end = -1;
      var preDotState = 0;
      var unmatchedSlash;
      var code4;
      var index3;
      assertPath3(path2);
      index3 = path2.length;
      while (index3--) {
        code4 = path2.charCodeAt(index3);
        if (code4 === 47) {
          if (unmatchedSlash) {
            startPart = index3 + 1;
            break;
          }
          continue;
        }
        if (end < 0) {
          unmatchedSlash = true;
          end = index3 + 1;
        }
        if (code4 === 46) {
          if (startDot < 0) {
            startDot = index3;
          } else if (preDotState !== 1) {
            preDotState = 1;
          }
        } else if (startDot > -1) {
          preDotState = -1;
        }
      }
      if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
      preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
      }
      return path2.slice(startDot, end);
    }
    function join2() {
      var index3 = -1;
      var joined;
      while (++index3 < arguments.length) {
        assertPath3(arguments[index3]);
        if (arguments[index3]) {
          joined = joined === void 0 ? arguments[index3] : joined + "/" + arguments[index3];
        }
      }
      return joined === void 0 ? "." : normalize3(joined);
    }
    function normalize3(path2) {
      var absolute;
      var value;
      assertPath3(path2);
      absolute = path2.charCodeAt(0) === 47;
      value = normalizeString2(path2, !absolute);
      if (!value.length && !absolute) {
        value = ".";
      }
      if (value.length && path2.charCodeAt(path2.length - 1) === 47) {
        value += "/";
      }
      return absolute ? "/" + value : value;
    }
    function normalizeString2(path2, allowAboveRoot) {
      var result = "";
      var lastSegmentLength = 0;
      var lastSlash = -1;
      var dots = 0;
      var index3 = -1;
      var code4;
      var lastSlashIndex;
      while (++index3 <= path2.length) {
        if (index3 < path2.length) {
          code4 = path2.charCodeAt(index3);
        } else if (code4 === 47) {
          break;
        } else {
          code4 = 47;
        }
        if (code4 === 47) {
          if (lastSlash === index3 - 1 || dots === 1) {
          } else if (lastSlash !== index3 - 1 && dots === 2) {
            if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
              if (result.length > 2) {
                lastSlashIndex = result.lastIndexOf("/");
                if (lastSlashIndex !== result.length - 1) {
                  if (lastSlashIndex < 0) {
                    result = "";
                    lastSegmentLength = 0;
                  } else {
                    result = result.slice(0, lastSlashIndex);
                    lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                  }
                  lastSlash = index3;
                  dots = 0;
                  continue;
                }
              } else if (result.length) {
                result = "";
                lastSegmentLength = 0;
                lastSlash = index3;
                dots = 0;
                continue;
              }
            }
            if (allowAboveRoot) {
              result = result.length ? result + "/.." : "..";
              lastSegmentLength = 2;
            }
          } else {
            if (result.length) {
              result += "/" + path2.slice(lastSlash + 1, index3);
            } else {
              result = path2.slice(lastSlash + 1, index3);
            }
            lastSegmentLength = index3 - lastSlash - 1;
          }
          lastSlash = index3;
          dots = 0;
        } else if (code4 === 46 && dots > -1) {
          dots++;
        } else {
          dots = -1;
        }
      }
      return result;
    }
    function assertPath3(path2) {
      if (typeof path2 !== "string") {
        throw new TypeError(
          "Path must be a string. Received " + JSON.stringify(path2)
        );
      }
    }
  }
});

// node_modules/mml-react/node_modules/vfile/lib/minproc.browser.js
var require_minproc_browser = __commonJS({
  "node_modules/mml-react/node_modules/vfile/lib/minproc.browser.js"(exports) {
    "use strict";
    exports.cwd = cwd2;
    function cwd2() {
      return "/";
    }
  }
});

// node_modules/mml-react/node_modules/vfile/lib/core.js
var require_core = __commonJS({
  "node_modules/mml-react/node_modules/vfile/lib/core.js"(exports, module2) {
    "use strict";
    var p = require_minpath_browser();
    var proc = require_minproc_browser();
    var buffer = require_is_buffer();
    module2.exports = VFile2;
    var own6 = {}.hasOwnProperty;
    var order2 = ["history", "path", "basename", "stem", "extname", "dirname"];
    VFile2.prototype.toString = toString3;
    Object.defineProperty(VFile2.prototype, "path", { get: getPath, set: setPath });
    Object.defineProperty(VFile2.prototype, "dirname", {
      get: getDirname,
      set: setDirname
    });
    Object.defineProperty(VFile2.prototype, "basename", {
      get: getBasename,
      set: setBasename
    });
    Object.defineProperty(VFile2.prototype, "extname", {
      get: getExtname,
      set: setExtname
    });
    Object.defineProperty(VFile2.prototype, "stem", { get: getStem, set: setStem });
    function VFile2(options) {
      var prop;
      var index3;
      if (!options) {
        options = {};
      } else if (typeof options === "string" || buffer(options)) {
        options = { contents: options };
      } else if ("message" in options && "messages" in options) {
        return options;
      }
      if (!(this instanceof VFile2)) {
        return new VFile2(options);
      }
      this.data = {};
      this.messages = [];
      this.history = [];
      this.cwd = proc.cwd();
      index3 = -1;
      while (++index3 < order2.length) {
        prop = order2[index3];
        if (own6.call(options, prop)) {
          this[prop] = options[prop];
        }
      }
      for (prop in options) {
        if (order2.indexOf(prop) < 0) {
          this[prop] = options[prop];
        }
      }
    }
    function getPath() {
      return this.history[this.history.length - 1];
    }
    function setPath(path2) {
      assertNonEmpty2(path2, "path");
      if (this.path !== path2) {
        this.history.push(path2);
      }
    }
    function getDirname() {
      return typeof this.path === "string" ? p.dirname(this.path) : void 0;
    }
    function setDirname(dirname2) {
      assertPath3(this.path, "dirname");
      this.path = p.join(dirname2 || "", this.basename);
    }
    function getBasename() {
      return typeof this.path === "string" ? p.basename(this.path) : void 0;
    }
    function setBasename(basename2) {
      assertNonEmpty2(basename2, "basename");
      assertPart2(basename2, "basename");
      this.path = p.join(this.dirname || "", basename2);
    }
    function getExtname() {
      return typeof this.path === "string" ? p.extname(this.path) : void 0;
    }
    function setExtname(extname2) {
      assertPart2(extname2, "extname");
      assertPath3(this.path, "extname");
      if (extname2) {
        if (extname2.charCodeAt(0) !== 46) {
          throw new Error("`extname` must start with `.`");
        }
        if (extname2.indexOf(".", 1) > -1) {
          throw new Error("`extname` cannot contain multiple dots");
        }
      }
      this.path = p.join(this.dirname, this.stem + (extname2 || ""));
    }
    function getStem() {
      return typeof this.path === "string" ? p.basename(this.path, this.extname) : void 0;
    }
    function setStem(stem) {
      assertNonEmpty2(stem, "stem");
      assertPart2(stem, "stem");
      this.path = p.join(this.dirname || "", stem + (this.extname || ""));
    }
    function toString3(encoding) {
      return (this.contents || "").toString(encoding);
    }
    function assertPart2(part, name2) {
      if (part && part.indexOf(p.sep) > -1) {
        throw new Error(
          "`" + name2 + "` cannot be a path: did not expect `" + p.sep + "`"
        );
      }
    }
    function assertNonEmpty2(part, name2) {
      if (!part) {
        throw new Error("`" + name2 + "` cannot be empty");
      }
    }
    function assertPath3(path2, name2) {
      if (!path2) {
        throw new Error("Setting `" + name2 + "` requires `path` to be set too");
      }
    }
  }
});

// node_modules/mml-react/node_modules/vfile/lib/index.js
var require_lib = __commonJS({
  "node_modules/mml-react/node_modules/vfile/lib/index.js"(exports, module2) {
    "use strict";
    var VMessage = require_vfile_message();
    var VFile2 = require_core();
    module2.exports = VFile2;
    VFile2.prototype.message = message;
    VFile2.prototype.info = info;
    VFile2.prototype.fail = fail;
    function message(reason, position4, origin) {
      var message2 = new VMessage(reason, position4, origin);
      if (this.path) {
        message2.name = this.path + ":" + message2.name;
        message2.file = this.path;
      }
      message2.fatal = false;
      this.messages.push(message2);
      return message2;
    }
    function fail() {
      var message2 = this.message.apply(this, arguments);
      message2.fatal = true;
      throw message2;
    }
    function info() {
      var message2 = this.message.apply(this, arguments);
      message2.fatal = null;
      return message2;
    }
  }
});

// node_modules/mml-react/node_modules/vfile/index.js
var require_vfile = __commonJS({
  "node_modules/mml-react/node_modules/vfile/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_lib();
  }
});

// node_modules/mml-react/node_modules/unified/index.js
var require_unified = __commonJS({
  "node_modules/mml-react/node_modules/unified/index.js"(exports, module2) {
    "use strict";
    var bail2 = require_bail();
    var buffer = require_is_buffer();
    var extend2 = require_extend();
    var plain = require_is_plain_obj();
    var trough2 = require_trough();
    var vfile2 = require_vfile();
    module2.exports = unified2().freeze();
    var slice = [].slice;
    var own6 = {}.hasOwnProperty;
    var pipeline = trough2().use(pipelineParse).use(pipelineRun).use(pipelineStringify);
    function pipelineParse(p, ctx) {
      ctx.tree = p.parse(ctx.file);
    }
    function pipelineRun(p, ctx, next) {
      p.run(ctx.tree, ctx.file, done);
      function done(error, tree, file) {
        if (error) {
          next(error);
        } else {
          ctx.tree = tree;
          ctx.file = file;
          next();
        }
      }
    }
    function pipelineStringify(p, ctx) {
      var result = p.stringify(ctx.tree, ctx.file);
      if (result === void 0 || result === null) {
      } else if (typeof result === "string" || buffer(result)) {
        ctx.file.contents = result;
      } else {
        ctx.file.result = result;
      }
    }
    function unified2() {
      var attachers = [];
      var transformers = trough2();
      var namespace = {};
      var freezeIndex = -1;
      var frozen;
      processor.data = data;
      processor.freeze = freeze;
      processor.attachers = attachers;
      processor.use = use;
      processor.parse = parse2;
      processor.stringify = stringify3;
      processor.run = run;
      processor.runSync = runSync;
      processor.process = process2;
      processor.processSync = processSync;
      return processor;
      function processor() {
        var destination = unified2();
        var index3 = -1;
        while (++index3 < attachers.length) {
          destination.use.apply(null, attachers[index3]);
        }
        destination.data(extend2(true, {}, namespace));
        return destination;
      }
      function freeze() {
        var values;
        var transformer;
        if (frozen) {
          return processor;
        }
        while (++freezeIndex < attachers.length) {
          values = attachers[freezeIndex];
          if (values[1] === false) {
            continue;
          }
          if (values[1] === true) {
            values[1] = void 0;
          }
          transformer = values[0].apply(processor, values.slice(1));
          if (typeof transformer === "function") {
            transformers.use(transformer);
          }
        }
        frozen = true;
        freezeIndex = Infinity;
        return processor;
      }
      function data(key, value) {
        if (typeof key === "string") {
          if (arguments.length === 2) {
            assertUnfrozen2("data", frozen);
            namespace[key] = value;
            return processor;
          }
          return own6.call(namespace, key) && namespace[key] || null;
        }
        if (key) {
          assertUnfrozen2("data", frozen);
          namespace = key;
          return processor;
        }
        return namespace;
      }
      function use(value) {
        var settings;
        assertUnfrozen2("use", frozen);
        if (value === null || value === void 0) {
        } else if (typeof value === "function") {
          addPlugin.apply(null, arguments);
        } else if (typeof value === "object") {
          if ("length" in value) {
            addList(value);
          } else {
            addPreset(value);
          }
        } else {
          throw new Error("Expected usable value, not `" + value + "`");
        }
        if (settings) {
          namespace.settings = extend2(namespace.settings || {}, settings);
        }
        return processor;
        function addPreset(result) {
          addList(result.plugins);
          if (result.settings) {
            settings = extend2(settings || {}, result.settings);
          }
        }
        function add(value2) {
          if (typeof value2 === "function") {
            addPlugin(value2);
          } else if (typeof value2 === "object") {
            if ("length" in value2) {
              addPlugin.apply(null, value2);
            } else {
              addPreset(value2);
            }
          } else {
            throw new Error("Expected usable value, not `" + value2 + "`");
          }
        }
        function addList(plugins) {
          var index3 = -1;
          if (plugins === null || plugins === void 0) {
          } else if (typeof plugins === "object" && "length" in plugins) {
            while (++index3 < plugins.length) {
              add(plugins[index3]);
            }
          } else {
            throw new Error("Expected a list of plugins, not `" + plugins + "`");
          }
        }
        function addPlugin(plugin, value2) {
          var entry = find5(plugin);
          if (entry) {
            if (plain(entry[1]) && plain(value2)) {
              value2 = extend2(true, entry[1], value2);
            }
            entry[1] = value2;
          } else {
            attachers.push(slice.call(arguments));
          }
        }
      }
      function find5(plugin) {
        var index3 = -1;
        while (++index3 < attachers.length) {
          if (attachers[index3][0] === plugin) {
            return attachers[index3];
          }
        }
      }
      function parse2(doc) {
        var file = vfile2(doc);
        var Parser;
        freeze();
        Parser = processor.Parser;
        assertParser2("parse", Parser);
        if (newable(Parser, "parse")) {
          return new Parser(String(file), file).parse();
        }
        return Parser(String(file), file);
      }
      function run(node2, file, cb) {
        assertNode2(node2);
        freeze();
        if (!cb && typeof file === "function") {
          cb = file;
          file = null;
        }
        if (!cb) {
          return new Promise(executor);
        }
        executor(null, cb);
        function executor(resolve, reject) {
          transformers.run(node2, vfile2(file), done);
          function done(error, tree, file2) {
            tree = tree || node2;
            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(tree);
            } else {
              cb(null, tree, file2);
            }
          }
        }
      }
      function runSync(node2, file) {
        var result;
        var complete;
        run(node2, file, done);
        assertDone2("runSync", "run", complete);
        return result;
        function done(error, tree) {
          complete = true;
          result = tree;
          bail2(error);
        }
      }
      function stringify3(node2, doc) {
        var file = vfile2(doc);
        var Compiler;
        freeze();
        Compiler = processor.Compiler;
        assertCompiler2("stringify", Compiler);
        assertNode2(node2);
        if (newable(Compiler, "compile")) {
          return new Compiler(node2, file).compile();
        }
        return Compiler(node2, file);
      }
      function process2(doc, cb) {
        freeze();
        assertParser2("process", processor.Parser);
        assertCompiler2("process", processor.Compiler);
        if (!cb) {
          return new Promise(executor);
        }
        executor(null, cb);
        function executor(resolve, reject) {
          var file = vfile2(doc);
          pipeline.run(processor, { file }, done);
          function done(error) {
            if (error) {
              reject(error);
            } else if (resolve) {
              resolve(file);
            } else {
              cb(null, file);
            }
          }
        }
      }
      function processSync(doc) {
        var file;
        var complete;
        freeze();
        assertParser2("processSync", processor.Parser);
        assertCompiler2("processSync", processor.Compiler);
        file = vfile2(doc);
        process2(file, done);
        assertDone2("processSync", "process", complete);
        return file;
        function done(error) {
          complete = true;
          bail2(error);
        }
      }
    }
    function newable(value, name2) {
      return typeof value === "function" && value.prototype && // A function with keys in its prototype is probably a constructor.
      // Classes’ prototype methods are not enumerable, so we check if some value
      // exists in the prototype.
      (keys3(value.prototype) || name2 in value.prototype);
    }
    function keys3(value) {
      var key;
      for (key in value) {
        return true;
      }
      return false;
    }
    function assertParser2(name2, Parser) {
      if (typeof Parser !== "function") {
        throw new Error("Cannot `" + name2 + "` without `Parser`");
      }
    }
    function assertCompiler2(name2, Compiler) {
      if (typeof Compiler !== "function") {
        throw new Error("Cannot `" + name2 + "` without `Compiler`");
      }
    }
    function assertUnfrozen2(name2, frozen) {
      if (frozen) {
        throw new Error(
          "Cannot invoke `" + name2 + "` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`."
        );
      }
    }
    function assertNode2(node2) {
      if (!node2 || typeof node2.type !== "string") {
        throw new Error("Expected node, got `" + node2 + "`");
      }
    }
    function assertDone2(name2, asyncName, complete) {
      if (!complete) {
        throw new Error(
          "`" + name2 + "` finished async. Use `" + asyncName + "` instead"
        );
      }
    }
  }
});

// node_modules/mml-react/node_modules/mdast-util-to-string/index.js
var require_mdast_util_to_string = __commonJS({
  "node_modules/mml-react/node_modules/mdast-util-to-string/index.js"(exports, module2) {
    "use strict";
    module2.exports = toString3;
    function toString3(node2) {
      return node2 && (node2.value || node2.alt || node2.title || "children" in node2 && all2(node2.children) || "length" in node2 && all2(node2)) || "";
    }
    function all2(values) {
      var result = [];
      var index3 = -1;
      while (++index3 < values.length) {
        result[index3] = toString3(values[index3]);
      }
      return result.join("");
    }
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/assign.js
var require_assign = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/assign.js"(exports, module2) {
    "use strict";
    var assign = Object.assign;
    module2.exports = assign;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/has-own-property.js"(exports, module2) {
    "use strict";
    var own6 = {}.hasOwnProperty;
    module2.exports = own6;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/normalize-identifier.js
var require_normalize_identifier = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/normalize-identifier.js"(exports, module2) {
    "use strict";
    function normalizeIdentifier2(value) {
      return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
    }
    module2.exports = normalizeIdentifier2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/from-char-code.js
var require_from_char_code = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/from-char-code.js"(exports, module2) {
    "use strict";
    var fromCharCode = String.fromCharCode;
    module2.exports = fromCharCode;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/safe-from-int.js
var require_safe_from_int = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/safe-from-int.js"(exports, module2) {
    "use strict";
    var fromCharCode = require_from_char_code();
    function safeFromInt(value, base) {
      var code4 = parseInt(value, base);
      if (
        // C0 except for HT, LF, FF, CR, space
        code4 < 9 || code4 === 11 || code4 > 13 && code4 < 32 || // Control character (DEL) of the basic block and C1 controls.
        code4 > 126 && code4 < 160 || // Lone high surrogates and low surrogates.
        code4 > 55295 && code4 < 57344 || // Noncharacters.
        code4 > 64975 && code4 < 65008 || (code4 & 65535) === 65535 || (code4 & 65535) === 65534 || // Out of range
        code4 > 1114111
      ) {
        return "\uFFFD";
      }
      return fromCharCode(code4);
    }
    module2.exports = safeFromInt;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/markdown-line-ending.js
var require_markdown_line_ending = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/markdown-line-ending.js"(exports, module2) {
    "use strict";
    function markdownLineEnding2(code4) {
      return code4 < -2;
    }
    module2.exports = markdownLineEnding2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/markdown-space.js
var require_markdown_space = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/markdown-space.js"(exports, module2) {
    "use strict";
    function markdownSpace2(code4) {
      return code4 === -2 || code4 === -1 || code4 === 32;
    }
    module2.exports = markdownSpace2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-space.js
var require_factory_space = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-space.js"(exports, module2) {
    "use strict";
    var markdownSpace2 = require_markdown_space();
    function spaceFactory(effects, ok3, type, max) {
      var limit = max ? max - 1 : Infinity;
      var size = 0;
      return start2;
      function start2(code4) {
        if (markdownSpace2(code4)) {
          effects.enter(type);
          return prefix(code4);
        }
        return ok3(code4);
      }
      function prefix(code4) {
        if (markdownSpace2(code4) && size++ < limit) {
          effects.consume(code4);
          return prefix;
        }
        effects.exit(type);
        return ok3(code4);
      }
    }
    module2.exports = spaceFactory;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/initialize/content.js
var require_content = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/initialize/content.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var markdownLineEnding2 = require_markdown_line_ending();
    var factorySpace2 = require_factory_space();
    var tokenize = initializeContent2;
    function initializeContent2(effects) {
      var contentStart = effects.attempt(
        this.parser.constructs.contentInitial,
        afterContentStartConstruct,
        paragraphInitial
      );
      var previous3;
      return contentStart;
      function afterContentStartConstruct(code4) {
        if (code4 === null) {
          effects.consume(code4);
          return;
        }
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        return factorySpace2(effects, contentStart, "linePrefix");
      }
      function paragraphInitial(code4) {
        effects.enter("paragraph");
        return lineStart(code4);
      }
      function lineStart(code4) {
        var token = effects.enter("chunkText", {
          contentType: "text",
          previous: previous3
        });
        if (previous3) {
          previous3.next = token;
        }
        previous3 = token;
        return data(code4);
      }
      function data(code4) {
        if (code4 === null) {
          effects.exit("chunkText");
          effects.exit("paragraph");
          effects.consume(code4);
          return;
        }
        if (markdownLineEnding2(code4)) {
          effects.consume(code4);
          effects.exit("chunkText");
          return lineStart;
        }
        effects.consume(code4);
        return data;
      }
    }
    exports.tokenize = tokenize;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/partial-blank-line.js
var require_partial_blank_line = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/partial-blank-line.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var factorySpace2 = require_factory_space();
    var partialBlankLine = {
      tokenize: tokenizePartialBlankLine,
      partial: true
    };
    function tokenizePartialBlankLine(effects, ok3, nok) {
      return factorySpace2(effects, afterWhitespace, "linePrefix");
      function afterWhitespace(code4) {
        return code4 === null || markdownLineEnding2(code4) ? ok3(code4) : nok(code4);
      }
    }
    module2.exports = partialBlankLine;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/initialize/document.js
var require_document = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/initialize/document.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var markdownLineEnding2 = require_markdown_line_ending();
    var factorySpace2 = require_factory_space();
    var partialBlankLine = require_partial_blank_line();
    var tokenize = initializeDocument2;
    var containerConstruct2 = {
      tokenize: tokenizeContainer2
    };
    var lazyFlowConstruct = {
      tokenize: tokenizeLazyFlow
    };
    function initializeDocument2(effects) {
      var self2 = this;
      var stack = [];
      var continued = 0;
      var inspectConstruct = {
        tokenize: tokenizeInspect,
        partial: true
      };
      var inspectResult;
      var childFlow;
      var childToken;
      return start2;
      function start2(code4) {
        if (continued < stack.length) {
          self2.containerState = stack[continued][1];
          return effects.attempt(
            stack[continued][0].continuation,
            documentContinue,
            documentContinued
          )(code4);
        }
        return documentContinued(code4);
      }
      function documentContinue(code4) {
        continued++;
        return start2(code4);
      }
      function documentContinued(code4) {
        if (inspectResult && inspectResult.flowContinue) {
          return flowStart(code4);
        }
        self2.interrupt = childFlow && childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
        self2.containerState = {};
        return effects.attempt(
          containerConstruct2,
          containerContinue,
          flowStart
        )(code4);
      }
      function containerContinue(code4) {
        stack.push([self2.currentConstruct, self2.containerState]);
        self2.containerState = void 0;
        return documentContinued(code4);
      }
      function flowStart(code4) {
        if (code4 === null) {
          exitContainers(0, true);
          effects.consume(code4);
          return;
        }
        childFlow = childFlow || self2.parser.flow(self2.now());
        effects.enter("chunkFlow", {
          contentType: "flow",
          previous: childToken,
          _tokenizer: childFlow
        });
        return flowContinue(code4);
      }
      function flowContinue(code4) {
        if (code4 === null) {
          continueFlow(effects.exit("chunkFlow"));
          return flowStart(code4);
        }
        if (markdownLineEnding2(code4)) {
          effects.consume(code4);
          continueFlow(effects.exit("chunkFlow"));
          return effects.check(inspectConstruct, documentAfterPeek);
        }
        effects.consume(code4);
        return flowContinue;
      }
      function documentAfterPeek(code4) {
        exitContainers(
          inspectResult.continued,
          inspectResult && inspectResult.flowEnd
        );
        continued = 0;
        return start2(code4);
      }
      function continueFlow(token) {
        if (childToken) childToken.next = token;
        childToken = token;
        childFlow.lazy = inspectResult && inspectResult.lazy;
        childFlow.defineSkip(token.start);
        childFlow.write(self2.sliceStream(token));
      }
      function exitContainers(size, end) {
        var index3 = stack.length;
        if (childFlow && end) {
          childFlow.write([null]);
          childToken = childFlow = void 0;
        }
        while (index3-- > size) {
          self2.containerState = stack[index3][1];
          stack[index3][0].exit.call(self2, effects);
        }
        stack.length = size;
      }
      function tokenizeInspect(effects2, ok3) {
        var subcontinued = 0;
        inspectResult = {};
        return inspectStart;
        function inspectStart(code4) {
          if (subcontinued < stack.length) {
            self2.containerState = stack[subcontinued][1];
            return effects2.attempt(
              stack[subcontinued][0].continuation,
              inspectContinue,
              inspectLess
            )(code4);
          }
          if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
            inspectResult.flowContinue = true;
            return inspectDone(code4);
          }
          self2.interrupt = childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
          self2.containerState = {};
          return effects2.attempt(
            containerConstruct2,
            inspectFlowEnd,
            inspectDone
          )(code4);
        }
        function inspectContinue(code4) {
          subcontinued++;
          return self2.containerState._closeFlow ? inspectFlowEnd(code4) : inspectStart(code4);
        }
        function inspectLess(code4) {
          if (childFlow.currentConstruct && childFlow.currentConstruct.lazy) {
            self2.containerState = {};
            return effects2.attempt(
              containerConstruct2,
              inspectFlowEnd,
              // Maybe flow, or a blank line?
              effects2.attempt(
                lazyFlowConstruct,
                inspectFlowEnd,
                effects2.check(partialBlankLine, inspectFlowEnd, inspectLazy)
              )
            )(code4);
          }
          return inspectFlowEnd(code4);
        }
        function inspectLazy(code4) {
          subcontinued = stack.length;
          inspectResult.lazy = true;
          inspectResult.flowContinue = true;
          return inspectDone(code4);
        }
        function inspectFlowEnd(code4) {
          inspectResult.flowEnd = true;
          return inspectDone(code4);
        }
        function inspectDone(code4) {
          inspectResult.continued = subcontinued;
          self2.interrupt = self2.containerState = void 0;
          return ok3(code4);
        }
      }
    }
    function tokenizeContainer2(effects, ok3, nok) {
      return factorySpace2(
        effects,
        effects.attempt(this.parser.constructs.document, ok3, nok),
        "linePrefix",
        this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4
      );
    }
    function tokenizeLazyFlow(effects, ok3, nok) {
      return factorySpace2(
        effects,
        effects.lazy(this.parser.constructs.flow, ok3, nok),
        "linePrefix",
        this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4
      );
    }
    exports.tokenize = tokenize;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/size-chunks.js
var require_size_chunks = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/size-chunks.js"(exports, module2) {
    "use strict";
    function sizeChunks(chunks) {
      var index3 = -1;
      var size = 0;
      while (++index3 < chunks.length) {
        size += typeof chunks[index3] === "string" ? chunks[index3].length : 1;
      }
      return size;
    }
    module2.exports = sizeChunks;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/prefix-size.js
var require_prefix_size = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/prefix-size.js"(exports, module2) {
    "use strict";
    var sizeChunks = require_size_chunks();
    function prefixSize(events, type) {
      var tail = events[events.length - 1];
      if (!tail || tail[1].type !== type) return 0;
      return sizeChunks(tail[2].sliceStream(tail[1]));
    }
    module2.exports = prefixSize;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/splice.js
var require_splice = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/splice.js"(exports, module2) {
    "use strict";
    var splice2 = [].splice;
    module2.exports = splice2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/chunked-splice.js
var require_chunked_splice = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/chunked-splice.js"(exports, module2) {
    "use strict";
    var splice2 = require_splice();
    function chunkedSplice(list4, start2, remove, items) {
      var end = list4.length;
      var chunkStart = 0;
      var parameters;
      if (start2 < 0) {
        start2 = -start2 > end ? 0 : end + start2;
      } else {
        start2 = start2 > end ? end : start2;
      }
      remove = remove > 0 ? remove : 0;
      if (items.length < 1e4) {
        parameters = Array.from(items);
        parameters.unshift(start2, remove);
        splice2.apply(list4, parameters);
      } else {
        if (remove) splice2.apply(list4, [start2, remove]);
        while (chunkStart < items.length) {
          parameters = items.slice(chunkStart, chunkStart + 1e4);
          parameters.unshift(start2, 0);
          splice2.apply(list4, parameters);
          chunkStart += 1e4;
          start2 += 1e4;
        }
      }
    }
    module2.exports = chunkedSplice;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/shallow.js
var require_shallow = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/shallow.js"(exports, module2) {
    "use strict";
    var assign = require_assign();
    function shallow(object) {
      return assign({}, object);
    }
    module2.exports = shallow;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/subtokenize.js
var require_subtokenize = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/subtokenize.js"(exports, module2) {
    "use strict";
    var assign = require_assign();
    var chunkedSplice = require_chunked_splice();
    var shallow = require_shallow();
    function subtokenize2(events) {
      var jumps = {};
      var index3 = -1;
      var event;
      var lineIndex;
      var otherIndex;
      var otherEvent;
      var parameters;
      var subevents;
      var more;
      while (++index3 < events.length) {
        while (index3 in jumps) {
          index3 = jumps[index3];
        }
        event = events[index3];
        if (index3 && event[1].type === "chunkFlow" && events[index3 - 1][1].type === "listItemPrefix") {
          subevents = event[1]._tokenizer.events;
          otherIndex = 0;
          if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
            otherIndex += 2;
          }
          if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
            while (++otherIndex < subevents.length) {
              if (subevents[otherIndex][1].type === "content") {
                break;
              }
              if (subevents[otherIndex][1].type === "chunkText") {
                subevents[otherIndex][1].isInFirstContentOfListItem = true;
                otherIndex++;
              }
            }
          }
        }
        if (event[0] === "enter") {
          if (event[1].contentType) {
            assign(jumps, subcontent2(events, index3));
            index3 = jumps[index3];
            more = true;
          }
        } else if (event[1]._container || event[1]._movePreviousLineEndings) {
          otherIndex = index3;
          lineIndex = void 0;
          while (otherIndex--) {
            otherEvent = events[otherIndex];
            if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
              if (otherEvent[0] === "enter") {
                if (lineIndex) {
                  events[lineIndex][1].type = "lineEndingBlank";
                }
                otherEvent[1].type = "lineEnding";
                lineIndex = otherIndex;
              }
            } else {
              break;
            }
          }
          if (lineIndex) {
            event[1].end = shallow(events[lineIndex][1].start);
            parameters = events.slice(lineIndex, index3);
            parameters.unshift(event);
            chunkedSplice(events, lineIndex, index3 - lineIndex + 1, parameters);
          }
        }
      }
      return !more;
    }
    function subcontent2(events, eventIndex) {
      var token = events[eventIndex][1];
      var context = events[eventIndex][2];
      var startPosition = eventIndex - 1;
      var startPositions = [];
      var tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
      var childEvents = tokenizer.events;
      var jumps = [];
      var gaps = {};
      var stream;
      var previous3;
      var index3;
      var entered;
      var end;
      var adjust;
      while (token) {
        while (events[++startPosition][1] !== token) {
        }
        startPositions.push(startPosition);
        if (!token._tokenizer) {
          stream = context.sliceStream(token);
          if (!token.next) {
            stream.push(null);
          }
          if (previous3) {
            tokenizer.defineSkip(token.start);
          }
          if (token.isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = true;
          }
          tokenizer.write(stream);
          if (token.isInFirstContentOfListItem) {
            tokenizer._gfmTasklistFirstContentOfListItem = void 0;
          }
        }
        previous3 = token;
        token = token.next;
      }
      token = previous3;
      index3 = childEvents.length;
      while (index3--) {
        if (childEvents[index3][0] === "enter") {
          entered = true;
        } else if (
          // Find a void token that includes a break.
          entered && childEvents[index3][1].type === childEvents[index3 - 1][1].type && childEvents[index3][1].start.line !== childEvents[index3][1].end.line
        ) {
          add(childEvents.slice(index3 + 1, end));
          token._tokenizer = token.next = void 0;
          token = token.previous;
          end = index3 + 1;
        }
      }
      tokenizer.events = token._tokenizer = token.next = void 0;
      add(childEvents.slice(0, end));
      index3 = -1;
      adjust = 0;
      while (++index3 < jumps.length) {
        gaps[adjust + jumps[index3][0]] = adjust + jumps[index3][1];
        adjust += jumps[index3][1] - jumps[index3][0] - 1;
      }
      return gaps;
      function add(slice) {
        var start2 = startPositions.pop();
        jumps.unshift([start2, start2 + slice.length - 1]);
        chunkedSplice(events, start2, 2, slice);
      }
    }
    module2.exports = subtokenize2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/content.js
var require_content2 = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/content.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var prefixSize = require_prefix_size();
    var subtokenize2 = require_subtokenize();
    var factorySpace2 = require_factory_space();
    var content3 = {
      tokenize: tokenizeContent2,
      resolve: resolveContent2,
      interruptible: true,
      lazy: true
    };
    var continuationConstruct2 = {
      tokenize: tokenizeContinuation2,
      partial: true
    };
    function resolveContent2(events) {
      subtokenize2(events);
      return events;
    }
    function tokenizeContent2(effects, ok3) {
      var previous3;
      return start2;
      function start2(code4) {
        effects.enter("content");
        previous3 = effects.enter("chunkContent", {
          contentType: "content"
        });
        return data(code4);
      }
      function data(code4) {
        if (code4 === null) {
          return contentEnd(code4);
        }
        if (markdownLineEnding2(code4)) {
          return effects.check(
            continuationConstruct2,
            contentContinue,
            contentEnd
          )(code4);
        }
        effects.consume(code4);
        return data;
      }
      function contentEnd(code4) {
        effects.exit("chunkContent");
        effects.exit("content");
        return ok3(code4);
      }
      function contentContinue(code4) {
        effects.consume(code4);
        effects.exit("chunkContent");
        previous3 = previous3.next = effects.enter("chunkContent", {
          contentType: "content",
          previous: previous3
        });
        return data;
      }
    }
    function tokenizeContinuation2(effects, ok3, nok) {
      var self2 = this;
      return startLookahead;
      function startLookahead(code4) {
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        return factorySpace2(effects, prefixed, "linePrefix");
      }
      function prefixed(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          return nok(code4);
        }
        if (self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 || prefixSize(self2.events, "linePrefix") < 4) {
          return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code4);
        }
        return ok3(code4);
      }
    }
    module2.exports = content3;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/initialize/flow.js
var require_flow = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/initialize/flow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var content3 = require_content2();
    var factorySpace2 = require_factory_space();
    var partialBlankLine = require_partial_blank_line();
    var tokenize = initializeFlow2;
    function initializeFlow2(effects) {
      var self2 = this;
      var initial = effects.attempt(
        // Try to parse a blank line.
        partialBlankLine,
        atBlankEnding,
        // Try to parse initial flow (essentially, only code).
        effects.attempt(
          this.parser.constructs.flowInitial,
          afterConstruct,
          factorySpace2(
            effects,
            effects.attempt(
              this.parser.constructs.flow,
              afterConstruct,
              effects.attempt(content3, afterConstruct)
            ),
            "linePrefix"
          )
        )
      );
      return initial;
      function atBlankEnding(code4) {
        if (code4 === null) {
          effects.consume(code4);
          return;
        }
        effects.enter("lineEndingBlank");
        effects.consume(code4);
        effects.exit("lineEndingBlank");
        self2.currentConstruct = void 0;
        return initial;
      }
      function afterConstruct(code4) {
        if (code4 === null) {
          effects.consume(code4);
          return;
        }
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        self2.currentConstruct = void 0;
        return initial;
      }
    }
    exports.tokenize = tokenize;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/initialize/text.js
var require_text = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/initialize/text.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var assign = require_assign();
    var shallow = require_shallow();
    var text8 = initializeFactory2("text");
    var string3 = initializeFactory2("string");
    var resolver2 = {
      resolveAll: createResolver2()
    };
    function initializeFactory2(field) {
      return {
        tokenize: initializeText,
        resolveAll: createResolver2(
          field === "text" ? resolveAllLineSuffixes2 : void 0
        )
      };
      function initializeText(effects) {
        var self2 = this;
        var constructs2 = this.parser.constructs[field];
        var text9 = effects.attempt(constructs2, start2, notText);
        return start2;
        function start2(code4) {
          return atBreak(code4) ? text9(code4) : notText(code4);
        }
        function notText(code4) {
          if (code4 === null) {
            effects.consume(code4);
            return;
          }
          effects.enter("data");
          effects.consume(code4);
          return data;
        }
        function data(code4) {
          if (atBreak(code4)) {
            effects.exit("data");
            return text9(code4);
          }
          effects.consume(code4);
          return data;
        }
        function atBreak(code4) {
          var list4 = constructs2[code4];
          var index3 = -1;
          if (code4 === null) {
            return true;
          }
          if (list4) {
            while (++index3 < list4.length) {
              if (!list4[index3].previous || list4[index3].previous.call(self2, self2.previous)) {
                return true;
              }
            }
          }
        }
      }
    }
    function createResolver2(extraResolver) {
      return resolveAllText;
      function resolveAllText(events, context) {
        var index3 = -1;
        var enter;
        while (++index3 <= events.length) {
          if (enter === void 0) {
            if (events[index3] && events[index3][1].type === "data") {
              enter = index3;
              index3++;
            }
          } else if (!events[index3] || events[index3][1].type !== "data") {
            if (index3 !== enter + 2) {
              events[enter][1].end = events[index3 - 1][1].end;
              events.splice(enter + 2, index3 - enter - 2);
              index3 = enter + 2;
            }
            enter = void 0;
          }
        }
        return extraResolver ? extraResolver(events, context) : events;
      }
    }
    function resolveAllLineSuffixes2(events, context) {
      var eventIndex = -1;
      var chunks;
      var data;
      var chunk;
      var index3;
      var bufferIndex;
      var size;
      var tabs;
      var token;
      while (++eventIndex <= events.length) {
        if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
          data = events[eventIndex - 1][1];
          chunks = context.sliceStream(data);
          index3 = chunks.length;
          bufferIndex = -1;
          size = 0;
          tabs = void 0;
          while (index3--) {
            chunk = chunks[index3];
            if (typeof chunk === "string") {
              bufferIndex = chunk.length;
              while (chunk.charCodeAt(bufferIndex - 1) === 32) {
                size++;
                bufferIndex--;
              }
              if (bufferIndex) break;
              bufferIndex = -1;
            } else if (chunk === -2) {
              tabs = true;
              size++;
            } else if (chunk === -1) ;
            else {
              index3++;
              break;
            }
          }
          if (size) {
            token = {
              type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
              start: {
                line: data.end.line,
                column: data.end.column - size,
                offset: data.end.offset - size,
                _index: data.start._index + index3,
                _bufferIndex: index3 ? bufferIndex : data.start._bufferIndex + bufferIndex
              },
              end: shallow(data.end)
            };
            data.end = shallow(token.start);
            if (data.start.offset === data.end.offset) {
              assign(data, token);
            } else {
              events.splice(
                eventIndex,
                0,
                ["enter", token, context],
                ["exit", token, context]
              );
              eventIndex += 2;
            }
          }
          eventIndex++;
        }
      }
      return events;
    }
    exports.resolver = resolver2;
    exports.string = string3;
    exports.text = text8;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/miniflat.js
var require_miniflat = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/miniflat.js"(exports, module2) {
    "use strict";
    function miniflat(value) {
      return value === null || value === void 0 ? [] : "length" in value ? value : [value];
    }
    module2.exports = miniflat;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/combine-extensions.js
var require_combine_extensions = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/combine-extensions.js"(exports, module2) {
    "use strict";
    var hasOwnProperty2 = require_has_own_property();
    var chunkedSplice = require_chunked_splice();
    var miniflat = require_miniflat();
    function combineExtensions2(extensions) {
      var all2 = {};
      var index3 = -1;
      while (++index3 < extensions.length) {
        extension2(all2, extensions[index3]);
      }
      return all2;
    }
    function extension2(all2, extension3) {
      var hook;
      var left;
      var right;
      var code4;
      for (hook in extension3) {
        left = hasOwnProperty2.call(all2, hook) ? all2[hook] : all2[hook] = {};
        right = extension3[hook];
        for (code4 in right) {
          left[code4] = constructs2(
            miniflat(right[code4]),
            hasOwnProperty2.call(left, code4) ? left[code4] : []
          );
        }
      }
    }
    function constructs2(list4, existing) {
      var index3 = -1;
      var before = [];
      while (++index3 < list4.length) {
        ;
        (list4[index3].add === "after" ? existing : before).push(list4[index3]);
      }
      chunkedSplice(existing, 0, 0, before);
      return existing;
    }
    module2.exports = combineExtensions2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/chunked-push.js
var require_chunked_push = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/chunked-push.js"(exports, module2) {
    "use strict";
    var chunkedSplice = require_chunked_splice();
    function chunkedPush2(list4, items) {
      if (list4.length) {
        chunkedSplice(list4, list4.length, 0, items);
        return list4;
      }
      return items;
    }
    module2.exports = chunkedPush2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/resolve-all.js
var require_resolve_all = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/resolve-all.js"(exports, module2) {
    "use strict";
    function resolveAll2(constructs2, events, context) {
      var called = [];
      var index3 = -1;
      var resolve;
      while (++index3 < constructs2.length) {
        resolve = constructs2[index3].resolveAll;
        if (resolve && called.indexOf(resolve) < 0) {
          events = resolve(events, context);
          called.push(resolve);
        }
      }
      return events;
    }
    module2.exports = resolveAll2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/serialize-chunks.js
var require_serialize_chunks = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/serialize-chunks.js"(exports, module2) {
    "use strict";
    var fromCharCode = require_from_char_code();
    function serializeChunks2(chunks) {
      var index3 = -1;
      var result = [];
      var chunk;
      var value;
      var atTab;
      while (++index3 < chunks.length) {
        chunk = chunks[index3];
        if (typeof chunk === "string") {
          value = chunk;
        } else if (chunk === -5) {
          value = "\r";
        } else if (chunk === -4) {
          value = "\n";
        } else if (chunk === -3) {
          value = "\r\n";
        } else if (chunk === -2) {
          value = "	";
        } else if (chunk === -1) {
          if (atTab) continue;
          value = " ";
        } else {
          value = fromCharCode(chunk);
        }
        atTab = chunk === -2;
        result.push(value);
      }
      return result.join("");
    }
    module2.exports = serializeChunks2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/slice-chunks.js
var require_slice_chunks = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/slice-chunks.js"(exports, module2) {
    "use strict";
    function sliceChunks2(chunks, token) {
      var startIndex = token.start._index;
      var startBufferIndex = token.start._bufferIndex;
      var endIndex = token.end._index;
      var endBufferIndex = token.end._bufferIndex;
      var view;
      if (startIndex === endIndex) {
        view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
      } else {
        view = chunks.slice(startIndex, endIndex);
        if (startBufferIndex > -1) {
          view[0] = view[0].slice(startBufferIndex);
        }
        if (endBufferIndex > 0) {
          view.push(chunks[endIndex].slice(0, endBufferIndex));
        }
      }
      return view;
    }
    module2.exports = sliceChunks2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/create-tokenizer.js
var require_create_tokenizer = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/create-tokenizer.js"(exports, module2) {
    "use strict";
    var assign = require_assign();
    var markdownLineEnding2 = require_markdown_line_ending();
    var chunkedPush2 = require_chunked_push();
    var chunkedSplice = require_chunked_splice();
    var miniflat = require_miniflat();
    var resolveAll2 = require_resolve_all();
    var serializeChunks2 = require_serialize_chunks();
    var shallow = require_shallow();
    var sliceChunks2 = require_slice_chunks();
    function createTokenizer2(parser, initialize, from) {
      var point5 = from ? shallow(from) : {
        line: 1,
        column: 1,
        offset: 0
      };
      var columnStart = {};
      var resolveAllConstructs = [];
      var chunks = [];
      var stack = [];
      var effects = {
        consume,
        enter,
        exit: exit3,
        attempt: constructFactory(onsuccessfulconstruct),
        check: constructFactory(onsuccessfulcheck),
        interrupt: constructFactory(onsuccessfulcheck, {
          interrupt: true
        }),
        lazy: constructFactory(onsuccessfulcheck, {
          lazy: true
        })
      };
      var context = {
        previous: null,
        events: [],
        parser,
        sliceStream,
        sliceSerialize,
        now,
        defineSkip: skip,
        write
      };
      var state = initialize.tokenize.call(context, effects);
      if (initialize.resolveAll) {
        resolveAllConstructs.push(initialize);
      }
      point5._index = 0;
      point5._bufferIndex = -1;
      return context;
      function write(slice) {
        chunks = chunkedPush2(chunks, slice);
        main();
        if (chunks[chunks.length - 1] !== null) {
          return [];
        }
        addResult(initialize, 0);
        context.events = resolveAll2(resolveAllConstructs, context.events, context);
        return context.events;
      }
      function sliceSerialize(token) {
        return serializeChunks2(sliceStream(token));
      }
      function sliceStream(token) {
        return sliceChunks2(chunks, token);
      }
      function now() {
        return shallow(point5);
      }
      function skip(value) {
        columnStart[value.line] = value.column;
        accountForPotentialSkip();
      }
      function main() {
        var chunkIndex;
        var chunk;
        while (point5._index < chunks.length) {
          chunk = chunks[point5._index];
          if (typeof chunk === "string") {
            chunkIndex = point5._index;
            if (point5._bufferIndex < 0) {
              point5._bufferIndex = 0;
            }
            while (point5._index === chunkIndex && point5._bufferIndex < chunk.length) {
              go(chunk.charCodeAt(point5._bufferIndex));
            }
          } else {
            go(chunk);
          }
        }
      }
      function go(code4) {
        state = state(code4);
      }
      function consume(code4) {
        if (markdownLineEnding2(code4)) {
          point5.line++;
          point5.column = 1;
          point5.offset += code4 === -3 ? 2 : 1;
          accountForPotentialSkip();
        } else if (code4 !== -1) {
          point5.column++;
          point5.offset++;
        }
        if (point5._bufferIndex < 0) {
          point5._index++;
        } else {
          point5._bufferIndex++;
          if (point5._bufferIndex === chunks[point5._index].length) {
            point5._bufferIndex = -1;
            point5._index++;
          }
        }
        context.previous = code4;
      }
      function enter(type, fields) {
        var token = fields || {};
        token.type = type;
        token.start = now();
        context.events.push(["enter", token, context]);
        stack.push(token);
        return token;
      }
      function exit3(type) {
        var token = stack.pop();
        token.end = now();
        context.events.push(["exit", token, context]);
        return token;
      }
      function onsuccessfulconstruct(construct, info) {
        addResult(construct, info.from);
      }
      function onsuccessfulcheck(construct, info) {
        info.restore();
      }
      function constructFactory(onreturn, fields) {
        return hook;
        function hook(constructs2, returnState, bogusState) {
          var listOfConstructs;
          var constructIndex;
          var currentConstruct;
          var info;
          return constructs2.tokenize || "length" in constructs2 ? handleListOfConstructs(miniflat(constructs2)) : handleMapOfConstructs;
          function handleMapOfConstructs(code4) {
            if (code4 in constructs2 || null in constructs2) {
              return handleListOfConstructs(
                constructs2.null ? (
                  /* c8 ignore next */
                  miniflat(constructs2[code4]).concat(miniflat(constructs2.null))
                ) : constructs2[code4]
              )(code4);
            }
            return bogusState(code4);
          }
          function handleListOfConstructs(list4) {
            listOfConstructs = list4;
            constructIndex = 0;
            return handleConstruct(list4[constructIndex]);
          }
          function handleConstruct(construct) {
            return start2;
            function start2(code4) {
              info = store();
              currentConstruct = construct;
              if (!construct.partial) {
                context.currentConstruct = construct;
              }
              if (construct.name && context.parser.constructs.disable.null.indexOf(construct.name) > -1) {
                return nok();
              }
              return construct.tokenize.call(
                fields ? assign({}, context, fields) : context,
                effects,
                ok3,
                nok
              )(code4);
            }
          }
          function ok3(code4) {
            onreturn(currentConstruct, info);
            return returnState;
          }
          function nok(code4) {
            info.restore();
            if (++constructIndex < listOfConstructs.length) {
              return handleConstruct(listOfConstructs[constructIndex]);
            }
            return bogusState;
          }
        }
      }
      function addResult(construct, from2) {
        if (construct.resolveAll && resolveAllConstructs.indexOf(construct) < 0) {
          resolveAllConstructs.push(construct);
        }
        if (construct.resolve) {
          chunkedSplice(
            context.events,
            from2,
            context.events.length - from2,
            construct.resolve(context.events.slice(from2), context)
          );
        }
        if (construct.resolveTo) {
          context.events = construct.resolveTo(context.events, context);
        }
      }
      function store() {
        var startPoint = now();
        var startPrevious = context.previous;
        var startCurrentConstruct = context.currentConstruct;
        var startEventsIndex = context.events.length;
        var startStack = Array.from(stack);
        return {
          restore,
          from: startEventsIndex
        };
        function restore() {
          point5 = startPoint;
          context.previous = startPrevious;
          context.currentConstruct = startCurrentConstruct;
          context.events.length = startEventsIndex;
          stack = startStack;
          accountForPotentialSkip();
        }
      }
      function accountForPotentialSkip() {
        if (point5.line in columnStart && point5.column < 2) {
          point5.column = columnStart[point5.line];
          point5.offset += columnStart[point5.line] - 1;
        }
      }
    }
    module2.exports = createTokenizer2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/markdown-line-ending-or-space.js
var require_markdown_line_ending_or_space = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/markdown-line-ending-or-space.js"(exports, module2) {
    "use strict";
    function markdownLineEndingOrSpace2(code4) {
      return code4 < 0 || code4 === 32;
    }
    module2.exports = markdownLineEndingOrSpace2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/unicode-punctuation-regex.js
var require_unicode_punctuation_regex = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/unicode-punctuation-regex.js"(exports, module2) {
    "use strict";
    var unicodePunctuation2 = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;
    module2.exports = unicodePunctuation2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/regex-check.js
var require_regex_check = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/regex-check.js"(exports, module2) {
    "use strict";
    var fromCharCode = require_from_char_code();
    function regexCheck2(regex) {
      return check;
      function check(code4) {
        return regex.test(fromCharCode(code4));
      }
    }
    module2.exports = regexCheck2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/unicode-punctuation.js
var require_unicode_punctuation = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/unicode-punctuation.js"(exports, module2) {
    "use strict";
    var unicodePunctuationRegex = require_unicode_punctuation_regex();
    var regexCheck2 = require_regex_check();
    var unicodePunctuation2 = regexCheck2(unicodePunctuationRegex);
    module2.exports = unicodePunctuation2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/unicode-whitespace.js
var require_unicode_whitespace = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/unicode-whitespace.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var unicodeWhitespace2 = regexCheck2(/\s/);
    module2.exports = unicodeWhitespace2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/classify-character.js
var require_classify_character = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/classify-character.js"(exports, module2) {
    "use strict";
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var unicodePunctuation2 = require_unicode_punctuation();
    var unicodeWhitespace2 = require_unicode_whitespace();
    function classifyCharacter2(code4) {
      if (code4 === null || markdownLineEndingOrSpace2(code4) || unicodeWhitespace2(code4)) {
        return 1;
      }
      if (unicodePunctuation2(code4)) {
        return 2;
      }
    }
    module2.exports = classifyCharacter2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/util/move-point.js
var require_move_point = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/util/move-point.js"(exports, module2) {
    "use strict";
    function movePoint2(point5, offset) {
      point5.column += offset;
      point5.offset += offset;
      point5._bufferIndex += offset;
      return point5;
    }
    module2.exports = movePoint2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/attention.js
var require_attention = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/attention.js"(exports, module2) {
    "use strict";
    var chunkedPush2 = require_chunked_push();
    var chunkedSplice = require_chunked_splice();
    var classifyCharacter2 = require_classify_character();
    var movePoint2 = require_move_point();
    var resolveAll2 = require_resolve_all();
    var shallow = require_shallow();
    var attention2 = {
      name: "attention",
      tokenize: tokenizeAttention2,
      resolveAll: resolveAllAttention2
    };
    function resolveAllAttention2(events, context) {
      var index3 = -1;
      var open;
      var group;
      var text8;
      var openingSequence;
      var closingSequence;
      var use;
      var nextEvents;
      var offset;
      while (++index3 < events.length) {
        if (events[index3][0] === "enter" && events[index3][1].type === "attentionSequence" && events[index3][1]._close) {
          open = index3;
          while (open--) {
            if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
            context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index3][1]).charCodeAt(0)) {
              if ((events[open][1]._close || events[index3][1]._open) && (events[index3][1].end.offset - events[index3][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index3][1].end.offset - events[index3][1].start.offset) % 3)) {
                continue;
              }
              use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index3][1].end.offset - events[index3][1].start.offset > 1 ? 2 : 1;
              openingSequence = {
                type: use > 1 ? "strongSequence" : "emphasisSequence",
                start: movePoint2(shallow(events[open][1].end), -use),
                end: shallow(events[open][1].end)
              };
              closingSequence = {
                type: use > 1 ? "strongSequence" : "emphasisSequence",
                start: shallow(events[index3][1].start),
                end: movePoint2(shallow(events[index3][1].start), use)
              };
              text8 = {
                type: use > 1 ? "strongText" : "emphasisText",
                start: shallow(events[open][1].end),
                end: shallow(events[index3][1].start)
              };
              group = {
                type: use > 1 ? "strong" : "emphasis",
                start: shallow(openingSequence.start),
                end: shallow(closingSequence.end)
              };
              events[open][1].end = shallow(openingSequence.start);
              events[index3][1].start = shallow(closingSequence.end);
              nextEvents = [];
              if (events[open][1].end.offset - events[open][1].start.offset) {
                nextEvents = chunkedPush2(nextEvents, [
                  ["enter", events[open][1], context],
                  ["exit", events[open][1], context]
                ]);
              }
              nextEvents = chunkedPush2(nextEvents, [
                ["enter", group, context],
                ["enter", openingSequence, context],
                ["exit", openingSequence, context],
                ["enter", text8, context]
              ]);
              nextEvents = chunkedPush2(
                nextEvents,
                resolveAll2(
                  context.parser.constructs.insideSpan.null,
                  events.slice(open + 1, index3),
                  context
                )
              );
              nextEvents = chunkedPush2(nextEvents, [
                ["exit", text8, context],
                ["enter", closingSequence, context],
                ["exit", closingSequence, context],
                ["exit", group, context]
              ]);
              if (events[index3][1].end.offset - events[index3][1].start.offset) {
                offset = 2;
                nextEvents = chunkedPush2(nextEvents, [
                  ["enter", events[index3][1], context],
                  ["exit", events[index3][1], context]
                ]);
              } else {
                offset = 0;
              }
              chunkedSplice(events, open - 1, index3 - open + 3, nextEvents);
              index3 = open + nextEvents.length - offset - 2;
              break;
            }
          }
        }
      }
      index3 = -1;
      while (++index3 < events.length) {
        if (events[index3][1].type === "attentionSequence") {
          events[index3][1].type = "data";
        }
      }
      return events;
    }
    function tokenizeAttention2(effects, ok3) {
      var before = classifyCharacter2(this.previous);
      var marker;
      return start2;
      function start2(code4) {
        effects.enter("attentionSequence");
        marker = code4;
        return sequence(code4);
      }
      function sequence(code4) {
        var token;
        var after;
        var open;
        var close;
        if (code4 === marker) {
          effects.consume(code4);
          return sequence;
        }
        token = effects.exit("attentionSequence");
        after = classifyCharacter2(code4);
        open = !after || after === 2 && before;
        close = !before || before === 2 && after;
        token._open = marker === 42 ? open : open && (before || !close);
        token._close = marker === 42 ? close : close && (after || !open);
        return ok3(code4);
      }
    }
    module2.exports = attention2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-alpha.js
var require_ascii_alpha = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-alpha.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var asciiAlpha2 = regexCheck2(/[A-Za-z]/);
    module2.exports = asciiAlpha2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-alphanumeric.js
var require_ascii_alphanumeric = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-alphanumeric.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var asciiAlphanumeric2 = regexCheck2(/[\dA-Za-z]/);
    module2.exports = asciiAlphanumeric2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-atext.js
var require_ascii_atext = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-atext.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var asciiAtext2 = regexCheck2(/[#-'*+\--9=?A-Z^-~]/);
    module2.exports = asciiAtext2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-control.js
var require_ascii_control = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-control.js"(exports, module2) {
    "use strict";
    function asciiControl2(code4) {
      return (
        // Special whitespace codes (which have negative values), C0 and Control
        // character DEL
        code4 < 32 || code4 === 127
      );
    }
    module2.exports = asciiControl2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/autolink.js
var require_autolink = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/autolink.js"(exports, module2) {
    "use strict";
    var asciiAlpha2 = require_ascii_alpha();
    var asciiAlphanumeric2 = require_ascii_alphanumeric();
    var asciiAtext2 = require_ascii_atext();
    var asciiControl2 = require_ascii_control();
    var autolink2 = {
      name: "autolink",
      tokenize: tokenizeAutolink2
    };
    function tokenizeAutolink2(effects, ok3, nok) {
      var size = 1;
      return start2;
      function start2(code4) {
        effects.enter("autolink");
        effects.enter("autolinkMarker");
        effects.consume(code4);
        effects.exit("autolinkMarker");
        effects.enter("autolinkProtocol");
        return open;
      }
      function open(code4) {
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          return schemeOrEmailAtext;
        }
        return asciiAtext2(code4) ? emailAtext(code4) : nok(code4);
      }
      function schemeOrEmailAtext(code4) {
        return code4 === 43 || code4 === 45 || code4 === 46 || asciiAlphanumeric2(code4) ? schemeInsideOrEmailAtext(code4) : emailAtext(code4);
      }
      function schemeInsideOrEmailAtext(code4) {
        if (code4 === 58) {
          effects.consume(code4);
          return urlInside;
        }
        if ((code4 === 43 || code4 === 45 || code4 === 46 || asciiAlphanumeric2(code4)) && size++ < 32) {
          effects.consume(code4);
          return schemeInsideOrEmailAtext;
        }
        return emailAtext(code4);
      }
      function urlInside(code4) {
        if (code4 === 62) {
          effects.exit("autolinkProtocol");
          return end(code4);
        }
        if (code4 === 32 || code4 === 60 || asciiControl2(code4)) {
          return nok(code4);
        }
        effects.consume(code4);
        return urlInside;
      }
      function emailAtext(code4) {
        if (code4 === 64) {
          effects.consume(code4);
          size = 0;
          return emailAtSignOrDot;
        }
        if (asciiAtext2(code4)) {
          effects.consume(code4);
          return emailAtext;
        }
        return nok(code4);
      }
      function emailAtSignOrDot(code4) {
        return asciiAlphanumeric2(code4) ? emailLabel(code4) : nok(code4);
      }
      function emailLabel(code4) {
        if (code4 === 46) {
          effects.consume(code4);
          size = 0;
          return emailAtSignOrDot;
        }
        if (code4 === 62) {
          effects.exit("autolinkProtocol").type = "autolinkEmail";
          return end(code4);
        }
        return emailValue(code4);
      }
      function emailValue(code4) {
        if ((code4 === 45 || asciiAlphanumeric2(code4)) && size++ < 63) {
          effects.consume(code4);
          return code4 === 45 ? emailValue : emailLabel;
        }
        return nok(code4);
      }
      function end(code4) {
        effects.enter("autolinkMarker");
        effects.consume(code4);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok3;
      }
    }
    module2.exports = autolink2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/block-quote.js
var require_block_quote = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/block-quote.js"(exports, module2) {
    "use strict";
    var markdownSpace2 = require_markdown_space();
    var factorySpace2 = require_factory_space();
    var blockQuote2 = {
      name: "blockQuote",
      tokenize: tokenizeBlockQuoteStart2,
      continuation: {
        tokenize: tokenizeBlockQuoteContinuation2
      },
      exit: exit3
    };
    function tokenizeBlockQuoteStart2(effects, ok3, nok) {
      var self2 = this;
      return start2;
      function start2(code4) {
        if (code4 === 62) {
          if (!self2.containerState.open) {
            effects.enter("blockQuote", {
              _container: true
            });
            self2.containerState.open = true;
          }
          effects.enter("blockQuotePrefix");
          effects.enter("blockQuoteMarker");
          effects.consume(code4);
          effects.exit("blockQuoteMarker");
          return after;
        }
        return nok(code4);
      }
      function after(code4) {
        if (markdownSpace2(code4)) {
          effects.enter("blockQuotePrefixWhitespace");
          effects.consume(code4);
          effects.exit("blockQuotePrefixWhitespace");
          effects.exit("blockQuotePrefix");
          return ok3;
        }
        effects.exit("blockQuotePrefix");
        return ok3(code4);
      }
    }
    function tokenizeBlockQuoteContinuation2(effects, ok3, nok) {
      return factorySpace2(
        effects,
        effects.attempt(blockQuote2, ok3, nok),
        "linePrefix",
        this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4
      );
    }
    function exit3(effects) {
      effects.exit("blockQuote");
    }
    module2.exports = blockQuote2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-punctuation.js
var require_ascii_punctuation = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-punctuation.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var asciiPunctuation2 = regexCheck2(/[!-/:-@[-`{-~]/);
    module2.exports = asciiPunctuation2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/character-escape.js
var require_character_escape = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/character-escape.js"(exports, module2) {
    "use strict";
    var asciiPunctuation2 = require_ascii_punctuation();
    var characterEscape2 = {
      name: "characterEscape",
      tokenize: tokenizeCharacterEscape2
    };
    function tokenizeCharacterEscape2(effects, ok3, nok) {
      return start2;
      function start2(code4) {
        effects.enter("characterEscape");
        effects.enter("escapeMarker");
        effects.consume(code4);
        effects.exit("escapeMarker");
        return open;
      }
      function open(code4) {
        if (asciiPunctuation2(code4)) {
          effects.enter("characterEscapeValue");
          effects.consume(code4);
          effects.exit("characterEscapeValue");
          effects.exit("characterEscape");
          return ok3;
        }
        return nok(code4);
      }
    }
    module2.exports = characterEscape2;
  }
});

// node_modules/parse-entities/decode-entity.browser.js
var require_decode_entity_browser = __commonJS({
  "node_modules/parse-entities/decode-entity.browser.js"(exports, module2) {
    "use strict";
    var el;
    var semicolon = 59;
    module2.exports = decodeEntity;
    function decodeEntity(characters) {
      var entity = "&" + characters + ";";
      var char;
      el = el || document.createElement("i");
      el.innerHTML = entity;
      char = el.textContent;
      if (char.charCodeAt(char.length - 1) === semicolon && characters !== "semi") {
        return false;
      }
      return char === entity ? false : char;
    }
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-digit.js
var require_ascii_digit = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-digit.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var asciiDigit2 = regexCheck2(/\d/);
    module2.exports = asciiDigit2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/character/ascii-hex-digit.js
var require_ascii_hex_digit = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/character/ascii-hex-digit.js"(exports, module2) {
    "use strict";
    var regexCheck2 = require_regex_check();
    var asciiHexDigit2 = regexCheck2(/[\dA-Fa-f]/);
    module2.exports = asciiHexDigit2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/character-reference.js
var require_character_reference = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/character-reference.js"(exports, module2) {
    "use strict";
    var decodeEntity = require_decode_entity_browser();
    var asciiAlphanumeric2 = require_ascii_alphanumeric();
    var asciiDigit2 = require_ascii_digit();
    var asciiHexDigit2 = require_ascii_hex_digit();
    function _interopDefaultLegacy(e2) {
      return e2 && typeof e2 === "object" && "default" in e2 ? e2 : { default: e2 };
    }
    var decodeEntity__default = /* @__PURE__ */ _interopDefaultLegacy(decodeEntity);
    var characterReference2 = {
      name: "characterReference",
      tokenize: tokenizeCharacterReference2
    };
    function tokenizeCharacterReference2(effects, ok3, nok) {
      var self2 = this;
      var size = 0;
      var max;
      var test3;
      return start2;
      function start2(code4) {
        effects.enter("characterReference");
        effects.enter("characterReferenceMarker");
        effects.consume(code4);
        effects.exit("characterReferenceMarker");
        return open;
      }
      function open(code4) {
        if (code4 === 35) {
          effects.enter("characterReferenceMarkerNumeric");
          effects.consume(code4);
          effects.exit("characterReferenceMarkerNumeric");
          return numeric;
        }
        effects.enter("characterReferenceValue");
        max = 31;
        test3 = asciiAlphanumeric2;
        return value(code4);
      }
      function numeric(code4) {
        if (code4 === 88 || code4 === 120) {
          effects.enter("characterReferenceMarkerHexadecimal");
          effects.consume(code4);
          effects.exit("characterReferenceMarkerHexadecimal");
          effects.enter("characterReferenceValue");
          max = 6;
          test3 = asciiHexDigit2;
          return value;
        }
        effects.enter("characterReferenceValue");
        max = 7;
        test3 = asciiDigit2;
        return value(code4);
      }
      function value(code4) {
        var token;
        if (code4 === 59 && size) {
          token = effects.exit("characterReferenceValue");
          if (test3 === asciiAlphanumeric2 && !decodeEntity__default["default"](self2.sliceSerialize(token))) {
            return nok(code4);
          }
          effects.enter("characterReferenceMarker");
          effects.consume(code4);
          effects.exit("characterReferenceMarker");
          effects.exit("characterReference");
          return ok3;
        }
        if (test3(code4) && size++ < max) {
          effects.consume(code4);
          return value;
        }
        return nok(code4);
      }
    }
    module2.exports = characterReference2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/code-fenced.js
var require_code_fenced = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/code-fenced.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var prefixSize = require_prefix_size();
    var factorySpace2 = require_factory_space();
    var codeFenced2 = {
      name: "codeFenced",
      tokenize: tokenizeCodeFenced2,
      concrete: true
    };
    function tokenizeCodeFenced2(effects, ok3, nok) {
      var self2 = this;
      var closingFenceConstruct = {
        tokenize: tokenizeClosingFence,
        partial: true
      };
      var initialPrefix = prefixSize(this.events, "linePrefix");
      var sizeOpen = 0;
      var marker;
      return start2;
      function start2(code4) {
        effects.enter("codeFenced");
        effects.enter("codeFencedFence");
        effects.enter("codeFencedFenceSequence");
        marker = code4;
        return sequenceOpen(code4);
      }
      function sequenceOpen(code4) {
        if (code4 === marker) {
          effects.consume(code4);
          sizeOpen++;
          return sequenceOpen;
        }
        effects.exit("codeFencedFenceSequence");
        return sizeOpen < 3 ? nok(code4) : factorySpace2(effects, infoOpen, "whitespace")(code4);
      }
      function infoOpen(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          return openAfter(code4);
        }
        effects.enter("codeFencedFenceInfo");
        effects.enter("chunkString", {
          contentType: "string"
        });
        return info(code4);
      }
      function info(code4) {
        if (code4 === null || markdownLineEndingOrSpace2(code4)) {
          effects.exit("chunkString");
          effects.exit("codeFencedFenceInfo");
          return factorySpace2(effects, infoAfter, "whitespace")(code4);
        }
        if (code4 === 96 && code4 === marker) return nok(code4);
        effects.consume(code4);
        return info;
      }
      function infoAfter(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          return openAfter(code4);
        }
        effects.enter("codeFencedFenceMeta");
        effects.enter("chunkString", {
          contentType: "string"
        });
        return meta(code4);
      }
      function meta(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("chunkString");
          effects.exit("codeFencedFenceMeta");
          return openAfter(code4);
        }
        if (code4 === 96 && code4 === marker) return nok(code4);
        effects.consume(code4);
        return meta;
      }
      function openAfter(code4) {
        effects.exit("codeFencedFence");
        return self2.interrupt ? ok3(code4) : content3(code4);
      }
      function content3(code4) {
        if (code4 === null) {
          return after(code4);
        }
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          return effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix ? factorySpace2(effects, content3, "linePrefix", initialPrefix + 1) : content3
          );
        }
        effects.enter("codeFlowValue");
        return contentContinue(code4);
      }
      function contentContinue(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("codeFlowValue");
          return content3(code4);
        }
        effects.consume(code4);
        return contentContinue;
      }
      function after(code4) {
        effects.exit("codeFenced");
        return ok3(code4);
      }
      function tokenizeClosingFence(effects2, ok4, nok2) {
        var size = 0;
        return factorySpace2(
          effects2,
          closingSequenceStart,
          "linePrefix",
          this.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4
        );
        function closingSequenceStart(code4) {
          effects2.enter("codeFencedFence");
          effects2.enter("codeFencedFenceSequence");
          return closingSequence(code4);
        }
        function closingSequence(code4) {
          if (code4 === marker) {
            effects2.consume(code4);
            size++;
            return closingSequence;
          }
          if (size < sizeOpen) return nok2(code4);
          effects2.exit("codeFencedFenceSequence");
          return factorySpace2(effects2, closingSequenceEnd, "whitespace")(code4);
        }
        function closingSequenceEnd(code4) {
          if (code4 === null || markdownLineEnding2(code4)) {
            effects2.exit("codeFencedFence");
            return ok4(code4);
          }
          return nok2(code4);
        }
      }
    }
    module2.exports = codeFenced2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/code-indented.js
var require_code_indented = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/code-indented.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var chunkedSplice = require_chunked_splice();
    var prefixSize = require_prefix_size();
    var factorySpace2 = require_factory_space();
    var codeIndented2 = {
      name: "codeIndented",
      tokenize: tokenizeCodeIndented2,
      resolve: resolveCodeIndented
    };
    var indentedContentConstruct = {
      tokenize: tokenizeIndentedContent,
      partial: true
    };
    function resolveCodeIndented(events, context) {
      var code4 = {
        type: "codeIndented",
        start: events[0][1].start,
        end: events[events.length - 1][1].end
      };
      chunkedSplice(events, 0, 0, [["enter", code4, context]]);
      chunkedSplice(events, events.length, 0, [["exit", code4, context]]);
      return events;
    }
    function tokenizeCodeIndented2(effects, ok3, nok) {
      return effects.attempt(indentedContentConstruct, afterPrefix, nok);
      function afterPrefix(code4) {
        if (code4 === null) {
          return ok3(code4);
        }
        if (markdownLineEnding2(code4)) {
          return effects.attempt(indentedContentConstruct, afterPrefix, ok3)(code4);
        }
        effects.enter("codeFlowValue");
        return content3(code4);
      }
      function content3(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("codeFlowValue");
          return afterPrefix(code4);
        }
        effects.consume(code4);
        return content3;
      }
    }
    function tokenizeIndentedContent(effects, ok3, nok) {
      var self2 = this;
      return factorySpace2(effects, afterPrefix, "linePrefix", 4 + 1);
      function afterPrefix(code4) {
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          return factorySpace2(effects, afterPrefix, "linePrefix", 4 + 1);
        }
        return prefixSize(self2.events, "linePrefix") < 4 ? nok(code4) : ok3(code4);
      }
    }
    module2.exports = codeIndented2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/code-text.js
var require_code_text = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/code-text.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var codeText2 = {
      name: "codeText",
      tokenize: tokenizeCodeText2,
      resolve: resolveCodeText2,
      previous: previous3
    };
    function resolveCodeText2(events) {
      var tailExitIndex = events.length - 4;
      var headEnterIndex = 3;
      var index3;
      var enter;
      if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
        index3 = headEnterIndex;
        while (++index3 < tailExitIndex) {
          if (events[index3][1].type === "codeTextData") {
            events[tailExitIndex][1].type = events[headEnterIndex][1].type = "codeTextPadding";
            headEnterIndex += 2;
            tailExitIndex -= 2;
            break;
          }
        }
      }
      index3 = headEnterIndex - 1;
      tailExitIndex++;
      while (++index3 <= tailExitIndex) {
        if (enter === void 0) {
          if (index3 !== tailExitIndex && events[index3][1].type !== "lineEnding") {
            enter = index3;
          }
        } else if (index3 === tailExitIndex || events[index3][1].type === "lineEnding") {
          events[enter][1].type = "codeTextData";
          if (index3 !== enter + 2) {
            events[enter][1].end = events[index3 - 1][1].end;
            events.splice(enter + 2, index3 - enter - 2);
            tailExitIndex -= index3 - enter - 2;
            index3 = enter + 2;
          }
          enter = void 0;
        }
      }
      return events;
    }
    function previous3(code4) {
      return code4 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
    }
    function tokenizeCodeText2(effects, ok3, nok) {
      var sizeOpen = 0;
      var size;
      var token;
      return start2;
      function start2(code4) {
        effects.enter("codeText");
        effects.enter("codeTextSequence");
        return openingSequence(code4);
      }
      function openingSequence(code4) {
        if (code4 === 96) {
          effects.consume(code4);
          sizeOpen++;
          return openingSequence;
        }
        effects.exit("codeTextSequence");
        return gap(code4);
      }
      function gap(code4) {
        if (code4 === null) {
          return nok(code4);
        }
        if (code4 === 96) {
          token = effects.enter("codeTextSequence");
          size = 0;
          return closingSequence(code4);
        }
        if (code4 === 32) {
          effects.enter("space");
          effects.consume(code4);
          effects.exit("space");
          return gap;
        }
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          return gap;
        }
        effects.enter("codeTextData");
        return data(code4);
      }
      function data(code4) {
        if (code4 === null || code4 === 32 || code4 === 96 || markdownLineEnding2(code4)) {
          effects.exit("codeTextData");
          return gap(code4);
        }
        effects.consume(code4);
        return data;
      }
      function closingSequence(code4) {
        if (code4 === 96) {
          effects.consume(code4);
          size++;
          return closingSequence;
        }
        if (size === sizeOpen) {
          effects.exit("codeTextSequence");
          effects.exit("codeText");
          return ok3(code4);
        }
        token.type = "codeTextData";
        return data(code4);
      }
    }
    module2.exports = codeText2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-destination.js
var require_factory_destination = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-destination.js"(exports, module2) {
    "use strict";
    var asciiControl2 = require_ascii_control();
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var markdownLineEnding2 = require_markdown_line_ending();
    function destinationFactory(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
      var limit = max || Infinity;
      var balance = 0;
      return start2;
      function start2(code4) {
        if (code4 === 60) {
          effects.enter(type);
          effects.enter(literalType);
          effects.enter(literalMarkerType);
          effects.consume(code4);
          effects.exit(literalMarkerType);
          return destinationEnclosedBefore;
        }
        if (asciiControl2(code4) || code4 === 41) {
          return nok(code4);
        }
        effects.enter(type);
        effects.enter(rawType);
        effects.enter(stringType);
        effects.enter("chunkString", {
          contentType: "string"
        });
        return destinationRaw(code4);
      }
      function destinationEnclosedBefore(code4) {
        if (code4 === 62) {
          effects.enter(literalMarkerType);
          effects.consume(code4);
          effects.exit(literalMarkerType);
          effects.exit(literalType);
          effects.exit(type);
          return ok3;
        }
        effects.enter(stringType);
        effects.enter("chunkString", {
          contentType: "string"
        });
        return destinationEnclosed(code4);
      }
      function destinationEnclosed(code4) {
        if (code4 === 62) {
          effects.exit("chunkString");
          effects.exit(stringType);
          return destinationEnclosedBefore(code4);
        }
        if (code4 === null || code4 === 60 || markdownLineEnding2(code4)) {
          return nok(code4);
        }
        effects.consume(code4);
        return code4 === 92 ? destinationEnclosedEscape : destinationEnclosed;
      }
      function destinationEnclosedEscape(code4) {
        if (code4 === 60 || code4 === 62 || code4 === 92) {
          effects.consume(code4);
          return destinationEnclosed;
        }
        return destinationEnclosed(code4);
      }
      function destinationRaw(code4) {
        if (code4 === 40) {
          if (++balance > limit) return nok(code4);
          effects.consume(code4);
          return destinationRaw;
        }
        if (code4 === 41) {
          if (!balance--) {
            effects.exit("chunkString");
            effects.exit(stringType);
            effects.exit(rawType);
            effects.exit(type);
            return ok3(code4);
          }
          effects.consume(code4);
          return destinationRaw;
        }
        if (code4 === null || markdownLineEndingOrSpace2(code4)) {
          if (balance) return nok(code4);
          effects.exit("chunkString");
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok3(code4);
        }
        if (asciiControl2(code4)) return nok(code4);
        effects.consume(code4);
        return code4 === 92 ? destinationRawEscape : destinationRaw;
      }
      function destinationRawEscape(code4) {
        if (code4 === 40 || code4 === 41 || code4 === 92) {
          effects.consume(code4);
          return destinationRaw;
        }
        return destinationRaw(code4);
      }
    }
    module2.exports = destinationFactory;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-label.js
var require_factory_label = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-label.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownSpace2 = require_markdown_space();
    function labelFactory(effects, ok3, nok, type, markerType, stringType) {
      var self2 = this;
      var size = 0;
      var data;
      return start2;
      function start2(code4) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code4);
        effects.exit(markerType);
        effects.enter(stringType);
        return atBreak;
      }
      function atBreak(code4) {
        if (code4 === null || code4 === 91 || code4 === 93 && !data || /* c8 ignore next */
        code4 === 94 && /* c8 ignore next */
        !size && /* c8 ignore next */
        "_hiddenFootnoteSupport" in self2.parser.constructs || size > 999) {
          return nok(code4);
        }
        if (code4 === 93) {
          effects.exit(stringType);
          effects.enter(markerType);
          effects.consume(code4);
          effects.exit(markerType);
          effects.exit(type);
          return ok3;
        }
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          return atBreak;
        }
        effects.enter("chunkString", {
          contentType: "string"
        });
        return label(code4);
      }
      function label(code4) {
        if (code4 === null || code4 === 91 || code4 === 93 || markdownLineEnding2(code4) || size++ > 999) {
          effects.exit("chunkString");
          return atBreak(code4);
        }
        effects.consume(code4);
        data = data || !markdownSpace2(code4);
        return code4 === 92 ? labelEscape : label;
      }
      function labelEscape(code4) {
        if (code4 === 91 || code4 === 92 || code4 === 93) {
          effects.consume(code4);
          size++;
          return label;
        }
        return label(code4);
      }
    }
    module2.exports = labelFactory;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-whitespace.js
var require_factory_whitespace = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-whitespace.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownSpace2 = require_markdown_space();
    var factorySpace2 = require_factory_space();
    function whitespaceFactory(effects, ok3) {
      var seen;
      return start2;
      function start2(code4) {
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          seen = true;
          return start2;
        }
        if (markdownSpace2(code4)) {
          return factorySpace2(
            effects,
            start2,
            seen ? "linePrefix" : "lineSuffix"
          )(code4);
        }
        return ok3(code4);
      }
    }
    module2.exports = whitespaceFactory;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-title.js
var require_factory_title = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/factory-title.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var factorySpace2 = require_factory_space();
    function titleFactory(effects, ok3, nok, type, markerType, stringType) {
      var marker;
      return start2;
      function start2(code4) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code4);
        effects.exit(markerType);
        marker = code4 === 40 ? 41 : code4;
        return atFirstTitleBreak;
      }
      function atFirstTitleBreak(code4) {
        if (code4 === marker) {
          effects.enter(markerType);
          effects.consume(code4);
          effects.exit(markerType);
          effects.exit(type);
          return ok3;
        }
        effects.enter(stringType);
        return atTitleBreak(code4);
      }
      function atTitleBreak(code4) {
        if (code4 === marker) {
          effects.exit(stringType);
          return atFirstTitleBreak(marker);
        }
        if (code4 === null) {
          return nok(code4);
        }
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          return factorySpace2(effects, atTitleBreak, "linePrefix");
        }
        effects.enter("chunkString", {
          contentType: "string"
        });
        return title(code4);
      }
      function title(code4) {
        if (code4 === marker || code4 === null || markdownLineEnding2(code4)) {
          effects.exit("chunkString");
          return atTitleBreak(code4);
        }
        effects.consume(code4);
        return code4 === 92 ? titleEscape : title;
      }
      function titleEscape(code4) {
        if (code4 === marker || code4 === 92) {
          effects.consume(code4);
          return title;
        }
        return title(code4);
      }
    }
    module2.exports = titleFactory;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/definition.js
var require_definition = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/definition.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var normalizeIdentifier2 = require_normalize_identifier();
    var factoryDestination2 = require_factory_destination();
    var factoryLabel2 = require_factory_label();
    var factorySpace2 = require_factory_space();
    var factoryWhitespace2 = require_factory_whitespace();
    var factoryTitle2 = require_factory_title();
    var definition3 = {
      name: "definition",
      tokenize: tokenizeDefinition2
    };
    var titleConstruct = {
      tokenize: tokenizeTitle,
      partial: true
    };
    function tokenizeDefinition2(effects, ok3, nok) {
      var self2 = this;
      var identifier;
      return start2;
      function start2(code4) {
        effects.enter("definition");
        return factoryLabel2.call(
          self2,
          effects,
          labelAfter,
          nok,
          "definitionLabel",
          "definitionLabelMarker",
          "definitionLabelString"
        )(code4);
      }
      function labelAfter(code4) {
        identifier = normalizeIdentifier2(
          self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
        );
        if (code4 === 58) {
          effects.enter("definitionMarker");
          effects.consume(code4);
          effects.exit("definitionMarker");
          return factoryWhitespace2(
            effects,
            factoryDestination2(
              effects,
              effects.attempt(
                titleConstruct,
                factorySpace2(effects, after, "whitespace"),
                factorySpace2(effects, after, "whitespace")
              ),
              nok,
              "definitionDestination",
              "definitionDestinationLiteral",
              "definitionDestinationLiteralMarker",
              "definitionDestinationRaw",
              "definitionDestinationString"
            )
          );
        }
        return nok(code4);
      }
      function after(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("definition");
          if (self2.parser.defined.indexOf(identifier) < 0) {
            self2.parser.defined.push(identifier);
          }
          return ok3(code4);
        }
        return nok(code4);
      }
    }
    function tokenizeTitle(effects, ok3, nok) {
      return start2;
      function start2(code4) {
        return markdownLineEndingOrSpace2(code4) ? factoryWhitespace2(effects, before)(code4) : nok(code4);
      }
      function before(code4) {
        if (code4 === 34 || code4 === 39 || code4 === 40) {
          return factoryTitle2(
            effects,
            factorySpace2(effects, after, "whitespace"),
            nok,
            "definitionTitle",
            "definitionTitleMarker",
            "definitionTitleString"
          )(code4);
        }
        return nok(code4);
      }
      function after(code4) {
        return code4 === null || markdownLineEnding2(code4) ? ok3(code4) : nok(code4);
      }
    }
    module2.exports = definition3;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/hard-break-escape.js
var require_hard_break_escape = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/hard-break-escape.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var hardBreakEscape2 = {
      name: "hardBreakEscape",
      tokenize: tokenizeHardBreakEscape2
    };
    function tokenizeHardBreakEscape2(effects, ok3, nok) {
      return start2;
      function start2(code4) {
        effects.enter("hardBreakEscape");
        effects.enter("escapeMarker");
        effects.consume(code4);
        return open;
      }
      function open(code4) {
        if (markdownLineEnding2(code4)) {
          effects.exit("escapeMarker");
          effects.exit("hardBreakEscape");
          return ok3(code4);
        }
        return nok(code4);
      }
    }
    module2.exports = hardBreakEscape2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/heading-atx.js
var require_heading_atx = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/heading-atx.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var markdownSpace2 = require_markdown_space();
    var chunkedSplice = require_chunked_splice();
    var factorySpace2 = require_factory_space();
    var headingAtx2 = {
      name: "headingAtx",
      tokenize: tokenizeHeadingAtx2,
      resolve: resolveHeadingAtx2
    };
    function resolveHeadingAtx2(events, context) {
      var contentEnd = events.length - 2;
      var contentStart = 3;
      var content3;
      var text8;
      if (events[contentStart][1].type === "whitespace") {
        contentStart += 2;
      }
      if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
        contentEnd -= 2;
      }
      if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
        contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
      }
      if (contentEnd > contentStart) {
        content3 = {
          type: "atxHeadingText",
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end
        };
        text8 = {
          type: "chunkText",
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end,
          contentType: "text"
        };
        chunkedSplice(events, contentStart, contentEnd - contentStart + 1, [
          ["enter", content3, context],
          ["enter", text8, context],
          ["exit", text8, context],
          ["exit", content3, context]
        ]);
      }
      return events;
    }
    function tokenizeHeadingAtx2(effects, ok3, nok) {
      var self2 = this;
      var size = 0;
      return start2;
      function start2(code4) {
        effects.enter("atxHeading");
        effects.enter("atxHeadingSequence");
        return fenceOpenInside(code4);
      }
      function fenceOpenInside(code4) {
        if (code4 === 35 && size++ < 6) {
          effects.consume(code4);
          return fenceOpenInside;
        }
        if (code4 === null || markdownLineEndingOrSpace2(code4)) {
          effects.exit("atxHeadingSequence");
          return self2.interrupt ? ok3(code4) : headingBreak(code4);
        }
        return nok(code4);
      }
      function headingBreak(code4) {
        if (code4 === 35) {
          effects.enter("atxHeadingSequence");
          return sequence(code4);
        }
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("atxHeading");
          return ok3(code4);
        }
        if (markdownSpace2(code4)) {
          return factorySpace2(effects, headingBreak, "whitespace")(code4);
        }
        effects.enter("atxHeadingText");
        return data(code4);
      }
      function sequence(code4) {
        if (code4 === 35) {
          effects.consume(code4);
          return sequence;
        }
        effects.exit("atxHeadingSequence");
        return headingBreak(code4);
      }
      function data(code4) {
        if (code4 === null || code4 === 35 || markdownLineEndingOrSpace2(code4)) {
          effects.exit("atxHeadingText");
          return headingBreak(code4);
        }
        effects.consume(code4);
        return data;
      }
    }
    module2.exports = headingAtx2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/html-block-names.js
var require_html_block_names = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/html-block-names.js"(exports, module2) {
    "use strict";
    var basics = [
      "address",
      "article",
      "aside",
      "base",
      "basefont",
      "blockquote",
      "body",
      "caption",
      "center",
      "col",
      "colgroup",
      "dd",
      "details",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "iframe",
      "legend",
      "li",
      "link",
      "main",
      "menu",
      "menuitem",
      "nav",
      "noframes",
      "ol",
      "optgroup",
      "option",
      "p",
      "param",
      "section",
      "source",
      "summary",
      "table",
      "tbody",
      "td",
      "tfoot",
      "th",
      "thead",
      "title",
      "tr",
      "track",
      "ul"
    ];
    module2.exports = basics;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constant/html-raw-names.js
var require_html_raw_names = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constant/html-raw-names.js"(exports, module2) {
    "use strict";
    var raws = ["pre", "script", "style", "textarea"];
    module2.exports = raws;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/html-flow.js
var require_html_flow = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/html-flow.js"(exports, module2) {
    "use strict";
    var asciiAlpha2 = require_ascii_alpha();
    var asciiAlphanumeric2 = require_ascii_alphanumeric();
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var markdownSpace2 = require_markdown_space();
    var fromCharCode = require_from_char_code();
    var htmlBlockNames2 = require_html_block_names();
    var htmlRawNames2 = require_html_raw_names();
    var partialBlankLine = require_partial_blank_line();
    var htmlFlow2 = {
      name: "htmlFlow",
      tokenize: tokenizeHtmlFlow2,
      resolveTo: resolveToHtmlFlow2,
      concrete: true
    };
    var nextBlankConstruct = {
      tokenize: tokenizeNextBlank,
      partial: true
    };
    function resolveToHtmlFlow2(events) {
      var index3 = events.length;
      while (index3--) {
        if (events[index3][0] === "enter" && events[index3][1].type === "htmlFlow") {
          break;
        }
      }
      if (index3 > 1 && events[index3 - 2][1].type === "linePrefix") {
        events[index3][1].start = events[index3 - 2][1].start;
        events[index3 + 1][1].start = events[index3 - 2][1].start;
        events.splice(index3 - 2, 2);
      }
      return events;
    }
    function tokenizeHtmlFlow2(effects, ok3, nok) {
      var self2 = this;
      var kind;
      var startTag;
      var buffer;
      var index3;
      var marker;
      return start2;
      function start2(code4) {
        effects.enter("htmlFlow");
        effects.enter("htmlFlowData");
        effects.consume(code4);
        return open;
      }
      function open(code4) {
        if (code4 === 33) {
          effects.consume(code4);
          return declarationStart;
        }
        if (code4 === 47) {
          effects.consume(code4);
          return tagCloseStart;
        }
        if (code4 === 63) {
          effects.consume(code4);
          kind = 3;
          return self2.interrupt ? ok3 : continuationDeclarationInside;
        }
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          buffer = fromCharCode(code4);
          startTag = true;
          return tagName;
        }
        return nok(code4);
      }
      function declarationStart(code4) {
        if (code4 === 45) {
          effects.consume(code4);
          kind = 2;
          return commentOpenInside;
        }
        if (code4 === 91) {
          effects.consume(code4);
          kind = 5;
          buffer = "CDATA[";
          index3 = 0;
          return cdataOpenInside;
        }
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          kind = 4;
          return self2.interrupt ? ok3 : continuationDeclarationInside;
        }
        return nok(code4);
      }
      function commentOpenInside(code4) {
        if (code4 === 45) {
          effects.consume(code4);
          return self2.interrupt ? ok3 : continuationDeclarationInside;
        }
        return nok(code4);
      }
      function cdataOpenInside(code4) {
        if (code4 === buffer.charCodeAt(index3++)) {
          effects.consume(code4);
          return index3 === buffer.length ? self2.interrupt ? ok3 : continuation : cdataOpenInside;
        }
        return nok(code4);
      }
      function tagCloseStart(code4) {
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          buffer = fromCharCode(code4);
          return tagName;
        }
        return nok(code4);
      }
      function tagName(code4) {
        if (code4 === null || code4 === 47 || code4 === 62 || markdownLineEndingOrSpace2(code4)) {
          if (code4 !== 47 && startTag && htmlRawNames2.indexOf(buffer.toLowerCase()) > -1) {
            kind = 1;
            return self2.interrupt ? ok3(code4) : continuation(code4);
          }
          if (htmlBlockNames2.indexOf(buffer.toLowerCase()) > -1) {
            kind = 6;
            if (code4 === 47) {
              effects.consume(code4);
              return basicSelfClosing;
            }
            return self2.interrupt ? ok3(code4) : continuation(code4);
          }
          kind = 7;
          return self2.interrupt ? nok(code4) : startTag ? completeAttributeNameBefore(code4) : completeClosingTagAfter(code4);
        }
        if (code4 === 45 || asciiAlphanumeric2(code4)) {
          effects.consume(code4);
          buffer += fromCharCode(code4);
          return tagName;
        }
        return nok(code4);
      }
      function basicSelfClosing(code4) {
        if (code4 === 62) {
          effects.consume(code4);
          return self2.interrupt ? ok3 : continuation;
        }
        return nok(code4);
      }
      function completeClosingTagAfter(code4) {
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return completeClosingTagAfter;
        }
        return completeEnd(code4);
      }
      function completeAttributeNameBefore(code4) {
        if (code4 === 47) {
          effects.consume(code4);
          return completeEnd;
        }
        if (code4 === 58 || code4 === 95 || asciiAlpha2(code4)) {
          effects.consume(code4);
          return completeAttributeName;
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return completeAttributeNameBefore;
        }
        return completeEnd(code4);
      }
      function completeAttributeName(code4) {
        if (code4 === 45 || code4 === 46 || code4 === 58 || code4 === 95 || asciiAlphanumeric2(code4)) {
          effects.consume(code4);
          return completeAttributeName;
        }
        return completeAttributeNameAfter(code4);
      }
      function completeAttributeNameAfter(code4) {
        if (code4 === 61) {
          effects.consume(code4);
          return completeAttributeValueBefore;
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return completeAttributeNameAfter;
        }
        return completeAttributeNameBefore(code4);
      }
      function completeAttributeValueBefore(code4) {
        if (code4 === null || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96) {
          return nok(code4);
        }
        if (code4 === 34 || code4 === 39) {
          effects.consume(code4);
          marker = code4;
          return completeAttributeValueQuoted;
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return completeAttributeValueBefore;
        }
        marker = void 0;
        return completeAttributeValueUnquoted(code4);
      }
      function completeAttributeValueQuoted(code4) {
        if (code4 === marker) {
          effects.consume(code4);
          return completeAttributeValueQuotedAfter;
        }
        if (code4 === null || markdownLineEnding2(code4)) {
          return nok(code4);
        }
        effects.consume(code4);
        return completeAttributeValueQuoted;
      }
      function completeAttributeValueUnquoted(code4) {
        if (code4 === null || code4 === 34 || code4 === 39 || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96 || markdownLineEndingOrSpace2(code4)) {
          return completeAttributeNameAfter(code4);
        }
        effects.consume(code4);
        return completeAttributeValueUnquoted;
      }
      function completeAttributeValueQuotedAfter(code4) {
        if (code4 === 47 || code4 === 62 || markdownSpace2(code4)) {
          return completeAttributeNameBefore(code4);
        }
        return nok(code4);
      }
      function completeEnd(code4) {
        if (code4 === 62) {
          effects.consume(code4);
          return completeAfter;
        }
        return nok(code4);
      }
      function completeAfter(code4) {
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return completeAfter;
        }
        return code4 === null || markdownLineEnding2(code4) ? continuation(code4) : nok(code4);
      }
      function continuation(code4) {
        if (code4 === 45 && kind === 2) {
          effects.consume(code4);
          return continuationCommentInside;
        }
        if (code4 === 60 && kind === 1) {
          effects.consume(code4);
          return continuationRawTagOpen;
        }
        if (code4 === 62 && kind === 4) {
          effects.consume(code4);
          return continuationClose;
        }
        if (code4 === 63 && kind === 3) {
          effects.consume(code4);
          return continuationDeclarationInside;
        }
        if (code4 === 93 && kind === 5) {
          effects.consume(code4);
          return continuationCharacterDataInside;
        }
        if (markdownLineEnding2(code4) && (kind === 6 || kind === 7)) {
          return effects.check(
            nextBlankConstruct,
            continuationClose,
            continuationAtLineEnding
          )(code4);
        }
        if (code4 === null || markdownLineEnding2(code4)) {
          return continuationAtLineEnding(code4);
        }
        effects.consume(code4);
        return continuation;
      }
      function continuationAtLineEnding(code4) {
        effects.exit("htmlFlowData");
        return htmlContinueStart(code4);
      }
      function htmlContinueStart(code4) {
        if (code4 === null) {
          return done(code4);
        }
        if (markdownLineEnding2(code4)) {
          effects.enter("lineEnding");
          effects.consume(code4);
          effects.exit("lineEnding");
          return htmlContinueStart;
        }
        effects.enter("htmlFlowData");
        return continuation(code4);
      }
      function continuationCommentInside(code4) {
        if (code4 === 45) {
          effects.consume(code4);
          return continuationDeclarationInside;
        }
        return continuation(code4);
      }
      function continuationRawTagOpen(code4) {
        if (code4 === 47) {
          effects.consume(code4);
          buffer = "";
          return continuationRawEndTag;
        }
        return continuation(code4);
      }
      function continuationRawEndTag(code4) {
        if (code4 === 62 && htmlRawNames2.indexOf(buffer.toLowerCase()) > -1) {
          effects.consume(code4);
          return continuationClose;
        }
        if (asciiAlpha2(code4) && buffer.length < 8) {
          effects.consume(code4);
          buffer += fromCharCode(code4);
          return continuationRawEndTag;
        }
        return continuation(code4);
      }
      function continuationCharacterDataInside(code4) {
        if (code4 === 93) {
          effects.consume(code4);
          return continuationDeclarationInside;
        }
        return continuation(code4);
      }
      function continuationDeclarationInside(code4) {
        if (code4 === 62) {
          effects.consume(code4);
          return continuationClose;
        }
        return continuation(code4);
      }
      function continuationClose(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("htmlFlowData");
          return done(code4);
        }
        effects.consume(code4);
        return continuationClose;
      }
      function done(code4) {
        effects.exit("htmlFlow");
        return ok3(code4);
      }
    }
    function tokenizeNextBlank(effects, ok3, nok) {
      return start2;
      function start2(code4) {
        effects.exit("htmlFlowData");
        effects.enter("lineEndingBlank");
        effects.consume(code4);
        effects.exit("lineEndingBlank");
        return effects.attempt(partialBlankLine, ok3, nok);
      }
    }
    module2.exports = htmlFlow2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/html-text.js
var require_html_text = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/html-text.js"(exports, module2) {
    "use strict";
    var asciiAlpha2 = require_ascii_alpha();
    var asciiAlphanumeric2 = require_ascii_alphanumeric();
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var markdownSpace2 = require_markdown_space();
    var factorySpace2 = require_factory_space();
    var htmlText2 = {
      name: "htmlText",
      tokenize: tokenizeHtmlText2
    };
    function tokenizeHtmlText2(effects, ok3, nok) {
      var self2 = this;
      var marker;
      var buffer;
      var index3;
      var returnState;
      return start2;
      function start2(code4) {
        effects.enter("htmlText");
        effects.enter("htmlTextData");
        effects.consume(code4);
        return open;
      }
      function open(code4) {
        if (code4 === 33) {
          effects.consume(code4);
          return declarationOpen;
        }
        if (code4 === 47) {
          effects.consume(code4);
          return tagCloseStart;
        }
        if (code4 === 63) {
          effects.consume(code4);
          return instruction;
        }
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          return tagOpen;
        }
        return nok(code4);
      }
      function declarationOpen(code4) {
        if (code4 === 45) {
          effects.consume(code4);
          return commentOpen;
        }
        if (code4 === 91) {
          effects.consume(code4);
          buffer = "CDATA[";
          index3 = 0;
          return cdataOpen;
        }
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          return declaration;
        }
        return nok(code4);
      }
      function commentOpen(code4) {
        if (code4 === 45) {
          effects.consume(code4);
          return commentStart;
        }
        return nok(code4);
      }
      function commentStart(code4) {
        if (code4 === null || code4 === 62) {
          return nok(code4);
        }
        if (code4 === 45) {
          effects.consume(code4);
          return commentStartDash;
        }
        return comment(code4);
      }
      function commentStartDash(code4) {
        if (code4 === null || code4 === 62) {
          return nok(code4);
        }
        return comment(code4);
      }
      function comment(code4) {
        if (code4 === null) {
          return nok(code4);
        }
        if (code4 === 45) {
          effects.consume(code4);
          return commentClose;
        }
        if (markdownLineEnding2(code4)) {
          returnState = comment;
          return atLineEnding(code4);
        }
        effects.consume(code4);
        return comment;
      }
      function commentClose(code4) {
        if (code4 === 45) {
          effects.consume(code4);
          return end;
        }
        return comment(code4);
      }
      function cdataOpen(code4) {
        if (code4 === buffer.charCodeAt(index3++)) {
          effects.consume(code4);
          return index3 === buffer.length ? cdata : cdataOpen;
        }
        return nok(code4);
      }
      function cdata(code4) {
        if (code4 === null) {
          return nok(code4);
        }
        if (code4 === 93) {
          effects.consume(code4);
          return cdataClose;
        }
        if (markdownLineEnding2(code4)) {
          returnState = cdata;
          return atLineEnding(code4);
        }
        effects.consume(code4);
        return cdata;
      }
      function cdataClose(code4) {
        if (code4 === 93) {
          effects.consume(code4);
          return cdataEnd;
        }
        return cdata(code4);
      }
      function cdataEnd(code4) {
        if (code4 === 62) {
          return end(code4);
        }
        if (code4 === 93) {
          effects.consume(code4);
          return cdataEnd;
        }
        return cdata(code4);
      }
      function declaration(code4) {
        if (code4 === null || code4 === 62) {
          return end(code4);
        }
        if (markdownLineEnding2(code4)) {
          returnState = declaration;
          return atLineEnding(code4);
        }
        effects.consume(code4);
        return declaration;
      }
      function instruction(code4) {
        if (code4 === null) {
          return nok(code4);
        }
        if (code4 === 63) {
          effects.consume(code4);
          return instructionClose;
        }
        if (markdownLineEnding2(code4)) {
          returnState = instruction;
          return atLineEnding(code4);
        }
        effects.consume(code4);
        return instruction;
      }
      function instructionClose(code4) {
        return code4 === 62 ? end(code4) : instruction(code4);
      }
      function tagCloseStart(code4) {
        if (asciiAlpha2(code4)) {
          effects.consume(code4);
          return tagClose;
        }
        return nok(code4);
      }
      function tagClose(code4) {
        if (code4 === 45 || asciiAlphanumeric2(code4)) {
          effects.consume(code4);
          return tagClose;
        }
        return tagCloseBetween(code4);
      }
      function tagCloseBetween(code4) {
        if (markdownLineEnding2(code4)) {
          returnState = tagCloseBetween;
          return atLineEnding(code4);
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return tagCloseBetween;
        }
        return end(code4);
      }
      function tagOpen(code4) {
        if (code4 === 45 || asciiAlphanumeric2(code4)) {
          effects.consume(code4);
          return tagOpen;
        }
        if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace2(code4)) {
          return tagOpenBetween(code4);
        }
        return nok(code4);
      }
      function tagOpenBetween(code4) {
        if (code4 === 47) {
          effects.consume(code4);
          return end;
        }
        if (code4 === 58 || code4 === 95 || asciiAlpha2(code4)) {
          effects.consume(code4);
          return tagOpenAttributeName;
        }
        if (markdownLineEnding2(code4)) {
          returnState = tagOpenBetween;
          return atLineEnding(code4);
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return tagOpenBetween;
        }
        return end(code4);
      }
      function tagOpenAttributeName(code4) {
        if (code4 === 45 || code4 === 46 || code4 === 58 || code4 === 95 || asciiAlphanumeric2(code4)) {
          effects.consume(code4);
          return tagOpenAttributeName;
        }
        return tagOpenAttributeNameAfter(code4);
      }
      function tagOpenAttributeNameAfter(code4) {
        if (code4 === 61) {
          effects.consume(code4);
          return tagOpenAttributeValueBefore;
        }
        if (markdownLineEnding2(code4)) {
          returnState = tagOpenAttributeNameAfter;
          return atLineEnding(code4);
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return tagOpenAttributeNameAfter;
        }
        return tagOpenBetween(code4);
      }
      function tagOpenAttributeValueBefore(code4) {
        if (code4 === null || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96) {
          return nok(code4);
        }
        if (code4 === 34 || code4 === 39) {
          effects.consume(code4);
          marker = code4;
          return tagOpenAttributeValueQuoted;
        }
        if (markdownLineEnding2(code4)) {
          returnState = tagOpenAttributeValueBefore;
          return atLineEnding(code4);
        }
        if (markdownSpace2(code4)) {
          effects.consume(code4);
          return tagOpenAttributeValueBefore;
        }
        effects.consume(code4);
        marker = void 0;
        return tagOpenAttributeValueUnquoted;
      }
      function tagOpenAttributeValueQuoted(code4) {
        if (code4 === marker) {
          effects.consume(code4);
          return tagOpenAttributeValueQuotedAfter;
        }
        if (code4 === null) {
          return nok(code4);
        }
        if (markdownLineEnding2(code4)) {
          returnState = tagOpenAttributeValueQuoted;
          return atLineEnding(code4);
        }
        effects.consume(code4);
        return tagOpenAttributeValueQuoted;
      }
      function tagOpenAttributeValueQuotedAfter(code4) {
        if (code4 === 62 || code4 === 47 || markdownLineEndingOrSpace2(code4)) {
          return tagOpenBetween(code4);
        }
        return nok(code4);
      }
      function tagOpenAttributeValueUnquoted(code4) {
        if (code4 === null || code4 === 34 || code4 === 39 || code4 === 60 || code4 === 61 || code4 === 96) {
          return nok(code4);
        }
        if (code4 === 62 || markdownLineEndingOrSpace2(code4)) {
          return tagOpenBetween(code4);
        }
        effects.consume(code4);
        return tagOpenAttributeValueUnquoted;
      }
      function atLineEnding(code4) {
        effects.exit("htmlTextData");
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        return factorySpace2(
          effects,
          afterPrefix,
          "linePrefix",
          self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4
        );
      }
      function afterPrefix(code4) {
        effects.enter("htmlTextData");
        return returnState(code4);
      }
      function end(code4) {
        if (code4 === 62) {
          effects.consume(code4);
          effects.exit("htmlTextData");
          effects.exit("htmlText");
          return ok3;
        }
        return nok(code4);
      }
    }
    module2.exports = htmlText2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/label-end.js
var require_label_end = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/label-end.js"(exports, module2) {
    "use strict";
    var markdownLineEndingOrSpace2 = require_markdown_line_ending_or_space();
    var chunkedPush2 = require_chunked_push();
    var chunkedSplice = require_chunked_splice();
    var normalizeIdentifier2 = require_normalize_identifier();
    var resolveAll2 = require_resolve_all();
    var shallow = require_shallow();
    var factoryDestination2 = require_factory_destination();
    var factoryLabel2 = require_factory_label();
    var factoryTitle2 = require_factory_title();
    var factoryWhitespace2 = require_factory_whitespace();
    var labelEnd2 = {
      name: "labelEnd",
      tokenize: tokenizeLabelEnd2,
      resolveTo: resolveToLabelEnd2,
      resolveAll: resolveAllLabelEnd2
    };
    var resourceConstruct2 = {
      tokenize: tokenizeResource2
    };
    var fullReferenceConstruct = {
      tokenize: tokenizeFullReference
    };
    var collapsedReferenceConstruct = {
      tokenize: tokenizeCollapsedReference
    };
    function resolveAllLabelEnd2(events) {
      var index3 = -1;
      var token;
      while (++index3 < events.length) {
        token = events[index3][1];
        if (!token._used && (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd")) {
          events.splice(index3 + 1, token.type === "labelImage" ? 4 : 2);
          token.type = "data";
          index3++;
        }
      }
      return events;
    }
    function resolveToLabelEnd2(events, context) {
      var index3 = events.length;
      var offset = 0;
      var group;
      var label;
      var text8;
      var token;
      var open;
      var close;
      var media;
      while (index3--) {
        token = events[index3][1];
        if (open) {
          if (token.type === "link" || token.type === "labelLink" && token._inactive) {
            break;
          }
          if (events[index3][0] === "enter" && token.type === "labelLink") {
            token._inactive = true;
          }
        } else if (close) {
          if (events[index3][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
            open = index3;
            if (token.type !== "labelLink") {
              offset = 2;
              break;
            }
          }
        } else if (token.type === "labelEnd") {
          close = index3;
        }
      }
      group = {
        type: events[open][1].type === "labelLink" ? "link" : "image",
        start: shallow(events[open][1].start),
        end: shallow(events[events.length - 1][1].end)
      };
      label = {
        type: "label",
        start: shallow(events[open][1].start),
        end: shallow(events[close][1].end)
      };
      text8 = {
        type: "labelText",
        start: shallow(events[open + offset + 2][1].end),
        end: shallow(events[close - 2][1].start)
      };
      media = [
        ["enter", group, context],
        ["enter", label, context]
      ];
      media = chunkedPush2(media, events.slice(open + 1, open + offset + 3));
      media = chunkedPush2(media, [["enter", text8, context]]);
      media = chunkedPush2(
        media,
        resolveAll2(
          context.parser.constructs.insideSpan.null,
          events.slice(open + offset + 4, close - 3),
          context
        )
      );
      media = chunkedPush2(media, [
        ["exit", text8, context],
        events[close - 2],
        events[close - 1],
        ["exit", label, context]
      ]);
      media = chunkedPush2(media, events.slice(close + 1));
      media = chunkedPush2(media, [["exit", group, context]]);
      chunkedSplice(events, open, events.length, media);
      return events;
    }
    function tokenizeLabelEnd2(effects, ok3, nok) {
      var self2 = this;
      var index3 = self2.events.length;
      var labelStart;
      var defined;
      while (index3--) {
        if ((self2.events[index3][1].type === "labelImage" || self2.events[index3][1].type === "labelLink") && !self2.events[index3][1]._balanced) {
          labelStart = self2.events[index3][1];
          break;
        }
      }
      return start2;
      function start2(code4) {
        if (!labelStart) {
          return nok(code4);
        }
        if (labelStart._inactive) return balanced(code4);
        defined = self2.parser.defined.indexOf(
          normalizeIdentifier2(
            self2.sliceSerialize({
              start: labelStart.end,
              end: self2.now()
            })
          )
        ) > -1;
        effects.enter("labelEnd");
        effects.enter("labelMarker");
        effects.consume(code4);
        effects.exit("labelMarker");
        effects.exit("labelEnd");
        return afterLabelEnd;
      }
      function afterLabelEnd(code4) {
        if (code4 === 40) {
          return effects.attempt(
            resourceConstruct2,
            ok3,
            defined ? ok3 : balanced
          )(code4);
        }
        if (code4 === 91) {
          return effects.attempt(
            fullReferenceConstruct,
            ok3,
            defined ? effects.attempt(collapsedReferenceConstruct, ok3, balanced) : balanced
          )(code4);
        }
        return defined ? ok3(code4) : balanced(code4);
      }
      function balanced(code4) {
        labelStart._balanced = true;
        return nok(code4);
      }
    }
    function tokenizeResource2(effects, ok3, nok) {
      return start2;
      function start2(code4) {
        effects.enter("resource");
        effects.enter("resourceMarker");
        effects.consume(code4);
        effects.exit("resourceMarker");
        return factoryWhitespace2(effects, open);
      }
      function open(code4) {
        if (code4 === 41) {
          return end(code4);
        }
        return factoryDestination2(
          effects,
          destinationAfter,
          nok,
          "resourceDestination",
          "resourceDestinationLiteral",
          "resourceDestinationLiteralMarker",
          "resourceDestinationRaw",
          "resourceDestinationString",
          3
        )(code4);
      }
      function destinationAfter(code4) {
        return markdownLineEndingOrSpace2(code4) ? factoryWhitespace2(effects, between)(code4) : end(code4);
      }
      function between(code4) {
        if (code4 === 34 || code4 === 39 || code4 === 40) {
          return factoryTitle2(
            effects,
            factoryWhitespace2(effects, end),
            nok,
            "resourceTitle",
            "resourceTitleMarker",
            "resourceTitleString"
          )(code4);
        }
        return end(code4);
      }
      function end(code4) {
        if (code4 === 41) {
          effects.enter("resourceMarker");
          effects.consume(code4);
          effects.exit("resourceMarker");
          effects.exit("resource");
          return ok3;
        }
        return nok(code4);
      }
    }
    function tokenizeFullReference(effects, ok3, nok) {
      var self2 = this;
      return start2;
      function start2(code4) {
        return factoryLabel2.call(
          self2,
          effects,
          afterLabel,
          nok,
          "reference",
          "referenceMarker",
          "referenceString"
        )(code4);
      }
      function afterLabel(code4) {
        return self2.parser.defined.indexOf(
          normalizeIdentifier2(
            self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
          )
        ) < 0 ? nok(code4) : ok3(code4);
      }
    }
    function tokenizeCollapsedReference(effects, ok3, nok) {
      return start2;
      function start2(code4) {
        effects.enter("reference");
        effects.enter("referenceMarker");
        effects.consume(code4);
        effects.exit("referenceMarker");
        return open;
      }
      function open(code4) {
        if (code4 === 93) {
          effects.enter("referenceMarker");
          effects.consume(code4);
          effects.exit("referenceMarker");
          effects.exit("reference");
          return ok3;
        }
        return nok(code4);
      }
    }
    module2.exports = labelEnd2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/label-start-image.js
var require_label_start_image = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/label-start-image.js"(exports, module2) {
    "use strict";
    var labelEnd2 = require_label_end();
    var labelStartImage2 = {
      name: "labelStartImage",
      tokenize: tokenizeLabelStartImage2,
      resolveAll: labelEnd2.resolveAll
    };
    function tokenizeLabelStartImage2(effects, ok3, nok) {
      var self2 = this;
      return start2;
      function start2(code4) {
        effects.enter("labelImage");
        effects.enter("labelImageMarker");
        effects.consume(code4);
        effects.exit("labelImageMarker");
        return open;
      }
      function open(code4) {
        if (code4 === 91) {
          effects.enter("labelMarker");
          effects.consume(code4);
          effects.exit("labelMarker");
          effects.exit("labelImage");
          return after;
        }
        return nok(code4);
      }
      function after(code4) {
        return code4 === 94 && /* c8 ignore next */
        "_hiddenFootnoteSupport" in self2.parser.constructs ? (
          /* c8 ignore next */
          nok(code4)
        ) : ok3(code4);
      }
    }
    module2.exports = labelStartImage2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/label-start-link.js
var require_label_start_link = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/label-start-link.js"(exports, module2) {
    "use strict";
    var labelEnd2 = require_label_end();
    var labelStartLink2 = {
      name: "labelStartLink",
      tokenize: tokenizeLabelStartLink2,
      resolveAll: labelEnd2.resolveAll
    };
    function tokenizeLabelStartLink2(effects, ok3, nok) {
      var self2 = this;
      return start2;
      function start2(code4) {
        effects.enter("labelLink");
        effects.enter("labelMarker");
        effects.consume(code4);
        effects.exit("labelMarker");
        effects.exit("labelLink");
        return after;
      }
      function after(code4) {
        return code4 === 94 && /* c8 ignore next */
        "_hiddenFootnoteSupport" in self2.parser.constructs ? (
          /* c8 ignore next */
          nok(code4)
        ) : ok3(code4);
      }
    }
    module2.exports = labelStartLink2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/line-ending.js
var require_line_ending = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/line-ending.js"(exports, module2) {
    "use strict";
    var factorySpace2 = require_factory_space();
    var lineEnding2 = {
      name: "lineEnding",
      tokenize: tokenizeLineEnding2
    };
    function tokenizeLineEnding2(effects, ok3) {
      return start2;
      function start2(code4) {
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        return factorySpace2(effects, ok3, "linePrefix");
      }
    }
    module2.exports = lineEnding2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/thematic-break.js
var require_thematic_break = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/thematic-break.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var markdownSpace2 = require_markdown_space();
    var factorySpace2 = require_factory_space();
    var thematicBreak4 = {
      name: "thematicBreak",
      tokenize: tokenizeThematicBreak2
    };
    function tokenizeThematicBreak2(effects, ok3, nok) {
      var size = 0;
      var marker;
      return start2;
      function start2(code4) {
        effects.enter("thematicBreak");
        marker = code4;
        return atBreak(code4);
      }
      function atBreak(code4) {
        if (code4 === marker) {
          effects.enter("thematicBreakSequence");
          return sequence(code4);
        }
        if (markdownSpace2(code4)) {
          return factorySpace2(effects, atBreak, "whitespace")(code4);
        }
        if (size < 3 || code4 !== null && !markdownLineEnding2(code4)) {
          return nok(code4);
        }
        effects.exit("thematicBreak");
        return ok3(code4);
      }
      function sequence(code4) {
        if (code4 === marker) {
          effects.consume(code4);
          size++;
          return sequence;
        }
        effects.exit("thematicBreakSequence");
        return atBreak(code4);
      }
    }
    module2.exports = thematicBreak4;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/list.js
var require_list = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/list.js"(exports, module2) {
    "use strict";
    var asciiDigit2 = require_ascii_digit();
    var markdownSpace2 = require_markdown_space();
    var prefixSize = require_prefix_size();
    var sizeChunks = require_size_chunks();
    var factorySpace2 = require_factory_space();
    var partialBlankLine = require_partial_blank_line();
    var thematicBreak4 = require_thematic_break();
    var list4 = {
      name: "list",
      tokenize: tokenizeListStart2,
      continuation: {
        tokenize: tokenizeListContinuation2
      },
      exit: tokenizeListEnd2
    };
    var listItemPrefixWhitespaceConstruct2 = {
      tokenize: tokenizeListItemPrefixWhitespace2,
      partial: true
    };
    var indentConstruct2 = {
      tokenize: tokenizeIndent3,
      partial: true
    };
    function tokenizeListStart2(effects, ok3, nok) {
      var self2 = this;
      var initialSize = prefixSize(self2.events, "linePrefix");
      var size = 0;
      return start2;
      function start2(code4) {
        var kind = self2.containerState.type || (code4 === 42 || code4 === 43 || code4 === 45 ? "listUnordered" : "listOrdered");
        if (kind === "listUnordered" ? !self2.containerState.marker || code4 === self2.containerState.marker : asciiDigit2(code4)) {
          if (!self2.containerState.type) {
            self2.containerState.type = kind;
            effects.enter(kind, {
              _container: true
            });
          }
          if (kind === "listUnordered") {
            effects.enter("listItemPrefix");
            return code4 === 42 || code4 === 45 ? effects.check(thematicBreak4, nok, atMarker)(code4) : atMarker(code4);
          }
          if (!self2.interrupt || code4 === 49) {
            effects.enter("listItemPrefix");
            effects.enter("listItemValue");
            return inside(code4);
          }
        }
        return nok(code4);
      }
      function inside(code4) {
        if (asciiDigit2(code4) && ++size < 10) {
          effects.consume(code4);
          return inside;
        }
        if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code4 === self2.containerState.marker : code4 === 41 || code4 === 46)) {
          effects.exit("listItemValue");
          return atMarker(code4);
        }
        return nok(code4);
      }
      function atMarker(code4) {
        effects.enter("listItemMarker");
        effects.consume(code4);
        effects.exit("listItemMarker");
        self2.containerState.marker = self2.containerState.marker || code4;
        return effects.check(
          partialBlankLine,
          // Can’t be empty when interrupting.
          self2.interrupt ? nok : onBlank,
          effects.attempt(
            listItemPrefixWhitespaceConstruct2,
            endOfPrefix,
            otherPrefix
          )
        );
      }
      function onBlank(code4) {
        self2.containerState.initialBlankLine = true;
        initialSize++;
        return endOfPrefix(code4);
      }
      function otherPrefix(code4) {
        if (markdownSpace2(code4)) {
          effects.enter("listItemPrefixWhitespace");
          effects.consume(code4);
          effects.exit("listItemPrefixWhitespace");
          return endOfPrefix;
        }
        return nok(code4);
      }
      function endOfPrefix(code4) {
        self2.containerState.size = initialSize + sizeChunks(self2.sliceStream(effects.exit("listItemPrefix")));
        return ok3(code4);
      }
    }
    function tokenizeListContinuation2(effects, ok3, nok) {
      var self2 = this;
      self2.containerState._closeFlow = void 0;
      return effects.check(partialBlankLine, onBlank, notBlank);
      function onBlank(code4) {
        self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
        return factorySpace2(
          effects,
          ok3,
          "listItemIndent",
          self2.containerState.size + 1
        )(code4);
      }
      function notBlank(code4) {
        if (self2.containerState.furtherBlankLines || !markdownSpace2(code4)) {
          self2.containerState.furtherBlankLines = self2.containerState.initialBlankLine = void 0;
          return notInCurrentItem(code4);
        }
        self2.containerState.furtherBlankLines = self2.containerState.initialBlankLine = void 0;
        return effects.attempt(indentConstruct2, ok3, notInCurrentItem)(code4);
      }
      function notInCurrentItem(code4) {
        self2.containerState._closeFlow = true;
        self2.interrupt = void 0;
        return factorySpace2(
          effects,
          effects.attempt(list4, ok3, nok),
          "linePrefix",
          self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4
        )(code4);
      }
    }
    function tokenizeIndent3(effects, ok3, nok) {
      var self2 = this;
      return factorySpace2(
        effects,
        afterPrefix,
        "listItemIndent",
        self2.containerState.size + 1
      );
      function afterPrefix(code4) {
        return prefixSize(self2.events, "listItemIndent") === self2.containerState.size ? ok3(code4) : nok(code4);
      }
    }
    function tokenizeListEnd2(effects) {
      effects.exit(this.containerState.type);
    }
    function tokenizeListItemPrefixWhitespace2(effects, ok3, nok) {
      var self2 = this;
      return factorySpace2(
        effects,
        afterPrefix,
        "listItemPrefixWhitespace",
        self2.parser.constructs.disable.null.indexOf("codeIndented") > -1 ? void 0 : 4 + 1
      );
      function afterPrefix(code4) {
        return markdownSpace2(code4) || !prefixSize(self2.events, "listItemPrefixWhitespace") ? nok(code4) : ok3(code4);
      }
    }
    module2.exports = list4;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/tokenize/setext-underline.js
var require_setext_underline = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/tokenize/setext-underline.js"(exports, module2) {
    "use strict";
    var markdownLineEnding2 = require_markdown_line_ending();
    var shallow = require_shallow();
    var factorySpace2 = require_factory_space();
    var setextUnderline2 = {
      name: "setextUnderline",
      tokenize: tokenizeSetextUnderline2,
      resolveTo: resolveToSetextUnderline2
    };
    function resolveToSetextUnderline2(events, context) {
      var index3 = events.length;
      var content3;
      var text8;
      var definition3;
      var heading3;
      while (index3--) {
        if (events[index3][0] === "enter") {
          if (events[index3][1].type === "content") {
            content3 = index3;
            break;
          }
          if (events[index3][1].type === "paragraph") {
            text8 = index3;
          }
        } else {
          if (events[index3][1].type === "content") {
            events.splice(index3, 1);
          }
          if (!definition3 && events[index3][1].type === "definition") {
            definition3 = index3;
          }
        }
      }
      heading3 = {
        type: "setextHeading",
        start: shallow(events[text8][1].start),
        end: shallow(events[events.length - 1][1].end)
      };
      events[text8][1].type = "setextHeadingText";
      if (definition3) {
        events.splice(text8, 0, ["enter", heading3, context]);
        events.splice(definition3 + 1, 0, ["exit", events[content3][1], context]);
        events[content3][1].end = shallow(events[definition3][1].end);
      } else {
        events[content3][1] = heading3;
      }
      events.push(["exit", heading3, context]);
      return events;
    }
    function tokenizeSetextUnderline2(effects, ok3, nok) {
      var self2 = this;
      var index3 = self2.events.length;
      var marker;
      var paragraph3;
      while (index3--) {
        if (self2.events[index3][1].type !== "lineEnding" && self2.events[index3][1].type !== "linePrefix" && self2.events[index3][1].type !== "content") {
          paragraph3 = self2.events[index3][1].type === "paragraph";
          break;
        }
      }
      return start2;
      function start2(code4) {
        if (!self2.lazy && (self2.interrupt || paragraph3)) {
          effects.enter("setextHeadingLine");
          effects.enter("setextHeadingLineSequence");
          marker = code4;
          return closingSequence(code4);
        }
        return nok(code4);
      }
      function closingSequence(code4) {
        if (code4 === marker) {
          effects.consume(code4);
          return closingSequence;
        }
        effects.exit("setextHeadingLineSequence");
        return factorySpace2(effects, closingSequenceEnd, "lineSuffix")(code4);
      }
      function closingSequenceEnd(code4) {
        if (code4 === null || markdownLineEnding2(code4)) {
          effects.exit("setextHeadingLine");
          return ok3(code4);
        }
        return nok(code4);
      }
    }
    module2.exports = setextUnderline2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/constructs.js
var require_constructs = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/constructs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var text$1 = require_text();
    var attention2 = require_attention();
    var autolink2 = require_autolink();
    var blockQuote2 = require_block_quote();
    var characterEscape2 = require_character_escape();
    var characterReference2 = require_character_reference();
    var codeFenced2 = require_code_fenced();
    var codeIndented2 = require_code_indented();
    var codeText2 = require_code_text();
    var definition3 = require_definition();
    var hardBreakEscape2 = require_hard_break_escape();
    var headingAtx2 = require_heading_atx();
    var htmlFlow2 = require_html_flow();
    var htmlText2 = require_html_text();
    var labelEnd2 = require_label_end();
    var labelStartImage2 = require_label_start_image();
    var labelStartLink2 = require_label_start_link();
    var lineEnding2 = require_line_ending();
    var list4 = require_list();
    var setextUnderline2 = require_setext_underline();
    var thematicBreak4 = require_thematic_break();
    var document4 = {
      42: list4,
      // Asterisk
      43: list4,
      // Plus sign
      45: list4,
      // Dash
      48: list4,
      // 0
      49: list4,
      // 1
      50: list4,
      // 2
      51: list4,
      // 3
      52: list4,
      // 4
      53: list4,
      // 5
      54: list4,
      // 6
      55: list4,
      // 7
      56: list4,
      // 8
      57: list4,
      // 9
      62: blockQuote2
      // Greater than
    };
    var contentInitial2 = {
      91: definition3
      // Left square bracket
    };
    var flowInitial2 = {
      "-2": codeIndented2,
      // Horizontal tab
      "-1": codeIndented2,
      // Virtual space
      32: codeIndented2
      // Space
    };
    var flow3 = {
      35: headingAtx2,
      // Number sign
      42: thematicBreak4,
      // Asterisk
      45: [setextUnderline2, thematicBreak4],
      // Dash
      60: htmlFlow2,
      // Less than
      61: setextUnderline2,
      // Equals to
      95: thematicBreak4,
      // Underscore
      96: codeFenced2,
      // Grave accent
      126: codeFenced2
      // Tilde
    };
    var string3 = {
      38: characterReference2,
      // Ampersand
      92: characterEscape2
      // Backslash
    };
    var text8 = {
      "-5": lineEnding2,
      // Carriage return
      "-4": lineEnding2,
      // Line feed
      "-3": lineEnding2,
      // Carriage return + line feed
      33: labelStartImage2,
      // Exclamation mark
      38: characterReference2,
      // Ampersand
      42: attention2,
      // Asterisk
      60: [autolink2, htmlText2],
      // Less than
      91: labelStartLink2,
      // Left square bracket
      92: [hardBreakEscape2, characterEscape2],
      // Backslash
      93: labelEnd2,
      // Right square bracket
      95: attention2,
      // Underscore
      96: codeText2
      // Grave accent
    };
    var insideSpan2 = {
      null: [attention2, text$1.resolver]
    };
    var disable2 = {
      null: []
    };
    exports.contentInitial = contentInitial2;
    exports.disable = disable2;
    exports.document = document4;
    exports.flow = flow3;
    exports.flowInitial = flowInitial2;
    exports.insideSpan = insideSpan2;
    exports.string = string3;
    exports.text = text8;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/parse.js
var require_parse = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/parse.js"(exports, module2) {
    "use strict";
    var content3 = require_content();
    var document4 = require_document();
    var flow3 = require_flow();
    var text8 = require_text();
    var combineExtensions2 = require_combine_extensions();
    var createTokenizer2 = require_create_tokenizer();
    var miniflat = require_miniflat();
    var constructs2 = require_constructs();
    function parse2(options) {
      var settings = options || {};
      var parser = {
        defined: [],
        constructs: combineExtensions2(
          [constructs2].concat(miniflat(settings.extensions))
        ),
        content: create2(content3),
        document: create2(document4),
        flow: create2(flow3),
        string: create2(text8.string),
        text: create2(text8.text)
      };
      return parser;
      function create2(initializer) {
        return creator;
        function creator(from) {
          return createTokenizer2(parser, initializer, from);
        }
      }
    }
    module2.exports = parse2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/preprocess.js
var require_preprocess = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/preprocess.js"(exports, module2) {
    "use strict";
    var search2 = /[\0\t\n\r]/g;
    function preprocess2() {
      var start2 = true;
      var column = 1;
      var buffer = "";
      var atCarriageReturn;
      return preprocessor;
      function preprocessor(value, encoding, end) {
        var chunks = [];
        var match;
        var next;
        var startPosition;
        var endPosition;
        var code4;
        value = buffer + value.toString(encoding);
        startPosition = 0;
        buffer = "";
        if (start2) {
          if (value.charCodeAt(0) === 65279) {
            startPosition++;
          }
          start2 = void 0;
        }
        while (startPosition < value.length) {
          search2.lastIndex = startPosition;
          match = search2.exec(value);
          endPosition = match ? match.index : value.length;
          code4 = value.charCodeAt(endPosition);
          if (!match) {
            buffer = value.slice(startPosition);
            break;
          }
          if (code4 === 10 && startPosition === endPosition && atCarriageReturn) {
            chunks.push(-3);
            atCarriageReturn = void 0;
          } else {
            if (atCarriageReturn) {
              chunks.push(-5);
              atCarriageReturn = void 0;
            }
            if (startPosition < endPosition) {
              chunks.push(value.slice(startPosition, endPosition));
              column += endPosition - startPosition;
            }
            if (code4 === 0) {
              chunks.push(65533);
              column++;
            } else if (code4 === 9) {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);
              while (column++ < next) chunks.push(-1);
            } else if (code4 === 10) {
              chunks.push(-4);
              column = 1;
            } else {
              atCarriageReturn = true;
              column = 1;
            }
          }
          startPosition = endPosition + 1;
        }
        if (end) {
          if (atCarriageReturn) chunks.push(-5);
          if (buffer) chunks.push(buffer);
          chunks.push(null);
        }
        return chunks;
      }
    }
    module2.exports = preprocess2;
  }
});

// node_modules/mml-react/node_modules/micromark/dist/postprocess.js
var require_postprocess = __commonJS({
  "node_modules/mml-react/node_modules/micromark/dist/postprocess.js"(exports, module2) {
    "use strict";
    var subtokenize2 = require_subtokenize();
    function postprocess2(events) {
      while (!subtokenize2(events)) {
      }
      return events;
    }
    module2.exports = postprocess2;
  }
});

// node_modules/mml-react/node_modules/mdast-util-from-markdown/dist/index.js
var require_dist = __commonJS({
  "node_modules/mml-react/node_modules/mdast-util-from-markdown/dist/index.js"(exports, module2) {
    "use strict";
    module2.exports = fromMarkdown2;
    var toString3 = require_mdast_util_to_string();
    var assign = require_assign();
    var own6 = require_has_own_property();
    var normalizeIdentifier2 = require_normalize_identifier();
    var safeFromInt = require_safe_from_int();
    var parser = require_parse();
    var preprocessor = require_preprocess();
    var postprocess2 = require_postprocess();
    var decode2 = require_decode_entity_browser();
    var stringifyPosition3 = require_unist_util_stringify_position();
    function fromMarkdown2(value, encoding, options) {
      if (typeof encoding !== "string") {
        options = encoding;
        encoding = void 0;
      }
      return compiler2(options)(
        postprocess2(
          parser(options).document().write(preprocessor()(value, encoding, true))
        )
      );
    }
    function compiler2(options) {
      var settings = options || {};
      var config = configure2(
        {
          transforms: [],
          canContainEols: [
            "emphasis",
            "fragment",
            "heading",
            "paragraph",
            "strong"
          ],
          enter: {
            autolink: opener(link3),
            autolinkProtocol: onenterdata,
            autolinkEmail: onenterdata,
            atxHeading: opener(heading3),
            blockQuote: opener(blockQuote2),
            characterEscape: onenterdata,
            characterReference: onenterdata,
            codeFenced: opener(codeFlow),
            codeFencedFenceInfo: buffer,
            codeFencedFenceMeta: buffer,
            codeIndented: opener(codeFlow, buffer),
            codeText: opener(codeText2, buffer),
            codeTextData: onenterdata,
            data: onenterdata,
            codeFlowValue: onenterdata,
            definition: opener(definition3),
            definitionDestinationString: buffer,
            definitionLabelString: buffer,
            definitionTitleString: buffer,
            emphasis: opener(emphasis3),
            hardBreakEscape: opener(hardBreak3),
            hardBreakTrailing: opener(hardBreak3),
            htmlFlow: opener(html5, buffer),
            htmlFlowData: onenterdata,
            htmlText: opener(html5, buffer),
            htmlTextData: onenterdata,
            image: opener(image4),
            label: buffer,
            link: opener(link3),
            listItem: opener(listItem3),
            listItemValue: onenterlistitemvalue,
            listOrdered: opener(list4, onenterlistordered),
            listUnordered: opener(list4),
            paragraph: opener(paragraph3),
            reference: onenterreference,
            referenceString: buffer,
            resourceDestinationString: buffer,
            resourceTitleString: buffer,
            setextHeading: opener(heading3),
            strong: opener(strong3),
            thematicBreak: opener(thematicBreak4)
          },
          exit: {
            atxHeading: closer(),
            atxHeadingSequence: onexitatxheadingsequence,
            autolink: closer(),
            autolinkEmail: onexitautolinkemail,
            autolinkProtocol: onexitautolinkprotocol,
            blockQuote: closer(),
            characterEscapeValue: onexitdata,
            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
            characterReferenceValue: onexitcharacterreferencevalue,
            codeFenced: closer(onexitcodefenced),
            codeFencedFence: onexitcodefencedfence,
            codeFencedFenceInfo: onexitcodefencedfenceinfo,
            codeFencedFenceMeta: onexitcodefencedfencemeta,
            codeFlowValue: onexitdata,
            codeIndented: closer(onexitcodeindented),
            codeText: closer(onexitcodetext),
            codeTextData: onexitdata,
            data: onexitdata,
            definition: closer(),
            definitionDestinationString: onexitdefinitiondestinationstring,
            definitionLabelString: onexitdefinitionlabelstring,
            definitionTitleString: onexitdefinitiontitlestring,
            emphasis: closer(),
            hardBreakEscape: closer(onexithardbreak),
            hardBreakTrailing: closer(onexithardbreak),
            htmlFlow: closer(onexithtmlflow),
            htmlFlowData: onexitdata,
            htmlText: closer(onexithtmltext),
            htmlTextData: onexitdata,
            image: closer(onexitimage),
            label: onexitlabel,
            labelText: onexitlabeltext,
            lineEnding: onexitlineending,
            link: closer(onexitlink),
            listItem: closer(),
            listOrdered: closer(),
            listUnordered: closer(),
            paragraph: closer(),
            referenceString: onexitreferencestring,
            resourceDestinationString: onexitresourcedestinationstring,
            resourceTitleString: onexitresourcetitlestring,
            resource: onexitresource,
            setextHeading: closer(onexitsetextheading),
            setextHeadingLineSequence: onexitsetextheadinglinesequence,
            setextHeadingText: onexitsetextheadingtext,
            strong: closer(),
            thematicBreak: closer()
          }
        },
        settings.mdastExtensions || []
      );
      var data = {};
      return compile;
      function compile(events) {
        var tree = { type: "root", children: [] };
        var stack = [tree];
        var tokenStack = [];
        var listStack = [];
        var index3 = -1;
        var handler;
        var listStart;
        var context = {
          stack,
          tokenStack,
          config,
          enter,
          exit: exit3,
          buffer,
          resume,
          setData,
          getData
        };
        while (++index3 < events.length) {
          if (events[index3][1].type === "listOrdered" || events[index3][1].type === "listUnordered") {
            if (events[index3][0] === "enter") {
              listStack.push(index3);
            } else {
              listStart = listStack.pop(index3);
              index3 = prepareList(events, listStart, index3);
            }
          }
        }
        index3 = -1;
        while (++index3 < events.length) {
          handler = config[events[index3][0]];
          if (own6.call(handler, events[index3][1].type)) {
            handler[events[index3][1].type].call(
              assign({ sliceSerialize: events[index3][2].sliceSerialize }, context),
              events[index3][1]
            );
          }
        }
        if (tokenStack.length) {
          throw new Error(
            "Cannot close document, a token (`" + tokenStack[tokenStack.length - 1].type + "`, " + stringifyPosition3({
              start: tokenStack[tokenStack.length - 1].start,
              end: tokenStack[tokenStack.length - 1].end
            }) + ") is still open"
          );
        }
        tree.position = {
          start: point5(
            events.length ? events[0][1].start : { line: 1, column: 1, offset: 0 }
          ),
          end: point5(
            events.length ? events[events.length - 2][1].end : { line: 1, column: 1, offset: 0 }
          )
        };
        index3 = -1;
        while (++index3 < config.transforms.length) {
          tree = config.transforms[index3](tree) || tree;
        }
        return tree;
      }
      function prepareList(events, start2, length) {
        var index3 = start2 - 1;
        var containerBalance = -1;
        var listSpread = false;
        var listItem4;
        var tailIndex;
        var lineIndex;
        var tailEvent;
        var event;
        var firstBlankLineIndex;
        var atMarker;
        while (++index3 <= length) {
          event = events[index3];
          if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
            if (event[0] === "enter") {
              containerBalance++;
            } else {
              containerBalance--;
            }
            atMarker = void 0;
          } else if (event[1].type === "lineEndingBlank") {
            if (event[0] === "enter") {
              if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
                firstBlankLineIndex = index3;
              }
              atMarker = void 0;
            }
          } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace") {
          } else {
            atMarker = void 0;
          }
          if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
            if (listItem4) {
              tailIndex = index3;
              lineIndex = void 0;
              while (tailIndex--) {
                tailEvent = events[tailIndex];
                if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                  if (tailEvent[0] === "exit") continue;
                  if (lineIndex) {
                    events[lineIndex][1].type = "lineEndingBlank";
                    listSpread = true;
                  }
                  tailEvent[1].type = "lineEnding";
                  lineIndex = tailIndex;
                } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
                } else {
                  break;
                }
              }
              if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
                listItem4._spread = true;
              }
              listItem4.end = point5(
                lineIndex ? events[lineIndex][1].start : event[1].end
              );
              events.splice(lineIndex || index3, 0, ["exit", listItem4, event[2]]);
              index3++;
              length++;
            }
            if (event[1].type === "listItemPrefix") {
              listItem4 = {
                type: "listItem",
                _spread: false,
                start: point5(event[1].start)
              };
              events.splice(index3, 0, ["enter", listItem4, event[2]]);
              index3++;
              length++;
              firstBlankLineIndex = void 0;
              atMarker = true;
            }
          }
        }
        events[start2][1]._spread = listSpread;
        return length;
      }
      function setData(key, value) {
        data[key] = value;
      }
      function getData(key) {
        return data[key];
      }
      function point5(d) {
        return { line: d.line, column: d.column, offset: d.offset };
      }
      function opener(create2, and) {
        return open;
        function open(token) {
          enter.call(this, create2(token), token);
          if (and) and.call(this, token);
        }
      }
      function buffer() {
        this.stack.push({ type: "fragment", children: [] });
      }
      function enter(node2, token) {
        this.stack[this.stack.length - 1].children.push(node2);
        this.stack.push(node2);
        this.tokenStack.push(token);
        node2.position = { start: point5(token.start) };
        return node2;
      }
      function closer(and) {
        return close;
        function close(token) {
          if (and) and.call(this, token);
          exit3.call(this, token);
        }
      }
      function exit3(token) {
        var node2 = this.stack.pop();
        var open = this.tokenStack.pop();
        if (!open) {
          throw new Error(
            "Cannot close `" + token.type + "` (" + stringifyPosition3({ start: token.start, end: token.end }) + "): it\u2019s not open"
          );
        } else if (open.type !== token.type) {
          throw new Error(
            "Cannot close `" + token.type + "` (" + stringifyPosition3({ start: token.start, end: token.end }) + "): a different token (`" + open.type + "`, " + stringifyPosition3({ start: open.start, end: open.end }) + ") is open"
          );
        }
        node2.position.end = point5(token.end);
        return node2;
      }
      function resume() {
        return toString3(this.stack.pop());
      }
      function onenterlistordered() {
        setData("expectingFirstListItemValue", true);
      }
      function onenterlistitemvalue(token) {
        if (getData("expectingFirstListItemValue")) {
          this.stack[this.stack.length - 2].start = parseInt(
            this.sliceSerialize(token),
            10
          );
          setData("expectingFirstListItemValue");
        }
      }
      function onexitcodefencedfenceinfo() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].lang = data2;
      }
      function onexitcodefencedfencemeta() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].meta = data2;
      }
      function onexitcodefencedfence() {
        if (getData("flowCodeInside")) return;
        this.buffer();
        setData("flowCodeInside", true);
      }
      function onexitcodefenced() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].value = data2.replace(
          /^(\r?\n|\r)|(\r?\n|\r)$/g,
          ""
        );
        setData("flowCodeInside");
      }
      function onexitcodeindented() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].value = data2;
      }
      function onexitdefinitionlabelstring(token) {
        var label = this.resume();
        this.stack[this.stack.length - 1].label = label;
        this.stack[this.stack.length - 1].identifier = normalizeIdentifier2(
          this.sliceSerialize(token)
        ).toLowerCase();
      }
      function onexitdefinitiontitlestring() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].title = data2;
      }
      function onexitdefinitiondestinationstring() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].url = data2;
      }
      function onexitatxheadingsequence(token) {
        if (!this.stack[this.stack.length - 1].depth) {
          this.stack[this.stack.length - 1].depth = this.sliceSerialize(
            token
          ).length;
        }
      }
      function onexitsetextheadingtext() {
        setData("setextHeadingSlurpLineEnding", true);
      }
      function onexitsetextheadinglinesequence(token) {
        this.stack[this.stack.length - 1].depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
      }
      function onexitsetextheading() {
        setData("setextHeadingSlurpLineEnding");
      }
      function onenterdata(token) {
        var siblings = this.stack[this.stack.length - 1].children;
        var tail = siblings[siblings.length - 1];
        if (!tail || tail.type !== "text") {
          tail = text8();
          tail.position = { start: point5(token.start) };
          this.stack[this.stack.length - 1].children.push(tail);
        }
        this.stack.push(tail);
      }
      function onexitdata(token) {
        var tail = this.stack.pop();
        tail.value += this.sliceSerialize(token);
        tail.position.end = point5(token.end);
      }
      function onexitlineending(token) {
        var context = this.stack[this.stack.length - 1];
        if (getData("atHardBreak")) {
          context.children[context.children.length - 1].position.end = point5(
            token.end
          );
          setData("atHardBreak");
          return;
        }
        if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.indexOf(context.type) > -1) {
          onenterdata.call(this, token);
          onexitdata.call(this, token);
        }
      }
      function onexithardbreak() {
        setData("atHardBreak", true);
      }
      function onexithtmlflow() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].value = data2;
      }
      function onexithtmltext() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].value = data2;
      }
      function onexitcodetext() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].value = data2;
      }
      function onexitlink() {
        var context = this.stack[this.stack.length - 1];
        if (getData("inReference")) {
          context.type += "Reference";
          context.referenceType = getData("referenceType") || "shortcut";
          delete context.url;
          delete context.title;
        } else {
          delete context.identifier;
          delete context.label;
          delete context.referenceType;
        }
        setData("referenceType");
      }
      function onexitimage() {
        var context = this.stack[this.stack.length - 1];
        if (getData("inReference")) {
          context.type += "Reference";
          context.referenceType = getData("referenceType") || "shortcut";
          delete context.url;
          delete context.title;
        } else {
          delete context.identifier;
          delete context.label;
          delete context.referenceType;
        }
        setData("referenceType");
      }
      function onexitlabeltext(token) {
        this.stack[this.stack.length - 2].identifier = normalizeIdentifier2(
          this.sliceSerialize(token)
        ).toLowerCase();
      }
      function onexitlabel() {
        var fragment = this.stack[this.stack.length - 1];
        var value = this.resume();
        this.stack[this.stack.length - 1].label = value;
        setData("inReference", true);
        if (this.stack[this.stack.length - 1].type === "link") {
          this.stack[this.stack.length - 1].children = fragment.children;
        } else {
          this.stack[this.stack.length - 1].alt = value;
        }
      }
      function onexitresourcedestinationstring() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].url = data2;
      }
      function onexitresourcetitlestring() {
        var data2 = this.resume();
        this.stack[this.stack.length - 1].title = data2;
      }
      function onexitresource() {
        setData("inReference");
      }
      function onenterreference() {
        setData("referenceType", "collapsed");
      }
      function onexitreferencestring(token) {
        var label = this.resume();
        this.stack[this.stack.length - 1].label = label;
        this.stack[this.stack.length - 1].identifier = normalizeIdentifier2(
          this.sliceSerialize(token)
        ).toLowerCase();
        setData("referenceType", "full");
      }
      function onexitcharacterreferencemarker(token) {
        setData("characterReferenceType", token.type);
      }
      function onexitcharacterreferencevalue(token) {
        var data2 = this.sliceSerialize(token);
        var type = getData("characterReferenceType");
        var value;
        var tail;
        if (type) {
          value = safeFromInt(
            data2,
            type === "characterReferenceMarkerNumeric" ? 10 : 16
          );
          setData("characterReferenceType");
        } else {
          value = decode2(data2);
        }
        tail = this.stack.pop();
        tail.value += value;
        tail.position.end = point5(token.end);
      }
      function onexitautolinkprotocol(token) {
        onexitdata.call(this, token);
        this.stack[this.stack.length - 1].url = this.sliceSerialize(token);
      }
      function onexitautolinkemail(token) {
        onexitdata.call(this, token);
        this.stack[this.stack.length - 1].url = "mailto:" + this.sliceSerialize(token);
      }
      function blockQuote2() {
        return { type: "blockquote", children: [] };
      }
      function codeFlow() {
        return { type: "code", lang: null, meta: null, value: "" };
      }
      function codeText2() {
        return { type: "inlineCode", value: "" };
      }
      function definition3() {
        return {
          type: "definition",
          identifier: "",
          label: null,
          title: null,
          url: ""
        };
      }
      function emphasis3() {
        return { type: "emphasis", children: [] };
      }
      function heading3() {
        return { type: "heading", depth: void 0, children: [] };
      }
      function hardBreak3() {
        return { type: "break" };
      }
      function html5() {
        return { type: "html", value: "" };
      }
      function image4() {
        return { type: "image", title: null, url: "", alt: null };
      }
      function link3() {
        return { type: "link", title: null, url: "", children: [] };
      }
      function list4(token) {
        return {
          type: "list",
          ordered: token.type === "listOrdered",
          start: null,
          spread: token._spread,
          children: []
        };
      }
      function listItem3(token) {
        return {
          type: "listItem",
          spread: token._spread,
          checked: null,
          children: []
        };
      }
      function paragraph3() {
        return { type: "paragraph", children: [] };
      }
      function strong3() {
        return { type: "strong", children: [] };
      }
      function text8() {
        return { type: "text", value: "" };
      }
      function thematicBreak4() {
        return { type: "thematicBreak" };
      }
    }
    function configure2(config, extensions) {
      var index3 = -1;
      while (++index3 < extensions.length) {
        extension2(config, extensions[index3]);
      }
      return config;
    }
    function extension2(config, extension3) {
      var key;
      var left;
      for (key in extension3) {
        left = own6.call(config, key) ? config[key] : config[key] = {};
        if (key === "canContainEols" || key === "transforms") {
          config[key] = [].concat(left, extension3[key]);
        } else {
          Object.assign(left, extension3[key]);
        }
      }
    }
  }
});

// node_modules/mml-react/node_modules/mdast-util-from-markdown/index.js
var require_mdast_util_from_markdown = __commonJS({
  "node_modules/mml-react/node_modules/mdast-util-from-markdown/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_dist();
  }
});

// node_modules/mml-react/node_modules/remark-parse/index.js
var require_remark_parse = __commonJS({
  "node_modules/mml-react/node_modules/remark-parse/index.js"(exports, module2) {
    "use strict";
    module2.exports = parse2;
    var fromMarkdown2 = require_mdast_util_from_markdown();
    function parse2(options) {
      var self2 = this;
      this.Parser = parse3;
      function parse3(doc) {
        return fromMarkdown2(
          doc,
          Object.assign({}, self2.data("settings"), options, {
            // Note: these options are not in the readme.
            // The goal is for them to be set by plugins on `data` instead of being
            // passed by users.
            extensions: self2.data("micromarkExtensions") || [],
            mdastExtensions: self2.data("fromMarkdownExtensions") || []
          })
        );
      }
    }
  }
});

// node_modules/mdast-add-list-metadata/node_modules/unist-util-visit-parents/index.js
var require_unist_util_visit_parents = __commonJS({
  "node_modules/mdast-add-list-metadata/node_modules/unist-util-visit-parents/index.js"(exports, module2) {
    "use strict";
    module2.exports = visitParents2;
    function visitParents2(tree, type, visitor3) {
      var stack = [];
      if (typeof type === "function") {
        visitor3 = type;
        type = null;
      }
      one3(tree);
      function one3(node2) {
        var result;
        if (!type || node2.type === type) {
          result = visitor3(node2, stack.concat());
        }
        if (node2.children && result !== false) {
          return all2(node2.children, node2);
        }
        return result;
      }
      function all2(children, parent) {
        var length = children.length;
        var index3 = -1;
        var child;
        stack.push(parent);
        while (++index3 < length) {
          child = children[index3];
          if (child && one3(child) === false) {
            return false;
          }
        }
        stack.pop();
        return true;
      }
    }
  }
});

// node_modules/mdast-add-list-metadata/index.js
var require_mdast_add_list_metadata = __commonJS({
  "node_modules/mdast-add-list-metadata/index.js"(exports, module2) {
    var visitWithParents = require_unist_util_visit_parents();
    function addListMetadata() {
      return function(ast) {
        visitWithParents(ast, "list", function(listNode, parents) {
          var depth = 0, i, n;
          for (i = 0, n = parents.length; i < n; i++) {
            if (parents[i].type === "list") depth += 1;
          }
          for (i = 0, n = listNode.children.length; i < n; i++) {
            var child = listNode.children[i];
            child.index = i;
            child.ordered = listNode.ordered;
          }
          listNode.depth = depth;
        });
        return ast;
      };
    }
    module2.exports = addListMetadata;
  }
});

// node_modules/mml-react/node_modules/unist-util-is/convert.js
var require_convert = __commonJS({
  "node_modules/mml-react/node_modules/unist-util-is/convert.js"(exports, module2) {
    "use strict";
    module2.exports = convert2;
    function convert2(test3) {
      if (test3 == null) {
        return ok3;
      }
      if (typeof test3 === "string") {
        return typeFactory2(test3);
      }
      if (typeof test3 === "object") {
        return "length" in test3 ? anyFactory3(test3) : allFactory(test3);
      }
      if (typeof test3 === "function") {
        return test3;
      }
      throw new Error("Expected function, string, or object as test");
    }
    function allFactory(test3) {
      return all2;
      function all2(node2) {
        var key;
        for (key in test3) {
          if (node2[key] !== test3[key]) return false;
        }
        return true;
      }
    }
    function anyFactory3(tests) {
      var checks2 = [];
      var index3 = -1;
      while (++index3 < tests.length) {
        checks2[index3] = convert2(tests[index3]);
      }
      return any;
      function any() {
        var index4 = -1;
        while (++index4 < checks2.length) {
          if (checks2[index4].apply(this, arguments)) {
            return true;
          }
        }
        return false;
      }
    }
    function typeFactory2(test3) {
      return type;
      function type(node2) {
        return Boolean(node2 && node2.type === test3);
      }
    }
    function ok3() {
      return true;
    }
  }
});

// node_modules/mml-react/node_modules/unist-util-visit-parents/color.browser.js
var require_color_browser = __commonJS({
  "node_modules/mml-react/node_modules/unist-util-visit-parents/color.browser.js"(exports, module2) {
    module2.exports = identity;
    function identity(d) {
      return d;
    }
  }
});

// node_modules/mml-react/node_modules/unist-util-visit-parents/index.js
var require_unist_util_visit_parents2 = __commonJS({
  "node_modules/mml-react/node_modules/unist-util-visit-parents/index.js"(exports, module2) {
    "use strict";
    module2.exports = visitParents2;
    var convert2 = require_convert();
    var color2 = require_color_browser();
    var CONTINUE2 = true;
    var SKIP2 = "skip";
    var EXIT2 = false;
    visitParents2.CONTINUE = CONTINUE2;
    visitParents2.SKIP = SKIP2;
    visitParents2.EXIT = EXIT2;
    function visitParents2(tree, test3, visitor3, reverse) {
      var step;
      var is2;
      if (typeof test3 === "function" && typeof visitor3 !== "function") {
        reverse = visitor3;
        visitor3 = test3;
        test3 = null;
      }
      is2 = convert2(test3);
      step = reverse ? -1 : 1;
      factory(tree, null, [])();
      function factory(node2, index3, parents) {
        var value = typeof node2 === "object" && node2 !== null ? node2 : {};
        var name2;
        if (typeof value.type === "string") {
          name2 = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
          visit2.displayName = "node (" + color2(value.type + (name2 ? "<" + name2 + ">" : "")) + ")";
        }
        return visit2;
        function visit2() {
          var grandparents = parents.concat(node2);
          var result = [];
          var subresult;
          var offset;
          if (!test3 || is2(node2, index3, parents[parents.length - 1] || null)) {
            result = toResult2(visitor3(node2, parents));
            if (result[0] === EXIT2) {
              return result;
            }
          }
          if (node2.children && result[0] !== SKIP2) {
            offset = (reverse ? node2.children.length : -1) + step;
            while (offset > -1 && offset < node2.children.length) {
              subresult = factory(node2.children[offset], offset, grandparents)();
              if (subresult[0] === EXIT2) {
                return subresult;
              }
              offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
            }
          }
          return result;
        }
      }
    }
    function toResult2(value) {
      if (value !== null && typeof value === "object" && "length" in value) {
        return value;
      }
      if (typeof value === "number") {
        return [CONTINUE2, value];
      }
      return [value];
    }
  }
});

// node_modules/mml-react/node_modules/unist-util-visit/index.js
var require_unist_util_visit = __commonJS({
  "node_modules/mml-react/node_modules/unist-util-visit/index.js"(exports, module2) {
    "use strict";
    module2.exports = visit2;
    var visitParents2 = require_unist_util_visit_parents2();
    var CONTINUE2 = visitParents2.CONTINUE;
    var SKIP2 = visitParents2.SKIP;
    var EXIT2 = visitParents2.EXIT;
    visit2.CONTINUE = CONTINUE2;
    visit2.SKIP = SKIP2;
    visit2.EXIT = EXIT2;
    function visit2(tree, test3, visitor3, reverse) {
      if (typeof test3 === "function" && typeof visitor3 !== "function") {
        reverse = visitor3;
        visitor3 = test3;
        test3 = null;
      }
      visitParents2(tree, test3, overload, reverse);
      function overload(node2, parents) {
        var parent = parents[parents.length - 1];
        var index3 = parent ? parent.children.indexOf(node2) : null;
        return visitor3(node2, index3, parent);
      }
    }
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/plugins/naive-html.js
var require_naive_html = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/plugins/naive-html.js"(exports, module2) {
    "use strict";
    var visit2 = require_unist_util_visit();
    var type = "virtualHtml";
    var selfClosingRe = /^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i;
    var simpleTagRe = /^<(\/?)([a-z]+)\s*>$/;
    module2.exports = function(tree) {
      var open;
      var currentParent;
      visit2(
        tree,
        "html",
        function(node2, index3, parent) {
          if (currentParent !== parent) {
            open = [];
            currentParent = parent;
          }
          var selfClosing = getSelfClosing(node2);
          if (selfClosing) {
            parent.children.splice(index3, 1, {
              type,
              tag: selfClosing,
              position: node2.position
            });
            return true;
          }
          var current = getSimpleTag(node2, parent);
          if (!current) {
            return true;
          }
          var matching = findAndPull(open, current.tag);
          if (matching) {
            parent.children.splice(index3, 0, virtual(current, matching, parent));
          } else if (!current.opening) {
            open.push(current);
          }
          return true;
        },
        true
        // Iterate in reverse
      );
      return tree;
    };
    function findAndPull(open, matchingTag) {
      var i = open.length;
      while (i--) {
        if (open[i].tag === matchingTag) {
          return open.splice(i, 1)[0];
        }
      }
      return false;
    }
    function getSimpleTag(node2, parent) {
      var match = node2.value.match(simpleTagRe);
      return match ? {
        tag: match[2],
        opening: !match[1],
        node: node2
      } : false;
    }
    function getSelfClosing(node2) {
      var match = node2.value.match(selfClosingRe);
      return match ? match[1] : false;
    }
    function virtual(fromNode, toNode, parent) {
      var fromIndex = parent.children.indexOf(fromNode.node);
      var toIndex = parent.children.indexOf(toNode.node);
      var extracted = parent.children.splice(fromIndex, toIndex - fromIndex + 1);
      var children = extracted.slice(1, -1);
      return {
        type,
        children,
        tag: fromNode.tag,
        position: {
          start: fromNode.node.position.start,
          end: toNode.node.position.end,
          indent: []
        }
      };
    }
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/plugins/disallow-node.js
var require_disallow_node = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/plugins/disallow-node.js"(exports) {
    "use strict";
    var visit2 = require_unist_util_visit();
    var splice2 = [].splice;
    exports.ofType = function(types, mode) {
      return ifNotMatch(allow, mode);
      function allow(node2, index3, parent) {
        return !types.includes(node2.type);
      }
    };
    exports.ifNotMatch = ifNotMatch;
    function ifNotMatch(allow, mode) {
      return transform3;
      function transform3(tree) {
        visit2(tree, filter);
        return tree;
      }
      function filter(node2, index3, parent) {
        if (parent && !allow(node2, index3, parent)) {
          var parameters = [index3, 1];
          if (mode === "unwrap" && node2.children) {
            parameters = parameters.concat(node2.children);
          }
          splice2.apply(parent.children, parameters);
          return index3;
        }
      }
    }
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf2(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense2 = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf2(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf2(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf2(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf2(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf2(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf2(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf2(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf2(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf2(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf2(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf2(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf2(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment3;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense2;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf2;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/ast-to-react.js
var require_ast_to_react = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/ast-to-react.js"(exports, module2) {
    "use strict";
    var React210 = require("react");
    var xtend = require_immutable();
    var ReactIs = require_react_is();
    function astToReact(node2, options) {
      var parent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var index3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var renderer = options.renderers[node2.type];
      if (!node2.position) {
        node2.position = {
          start: {
            line: null,
            column: null,
            offset: null
          },
          end: {
            line: null,
            column: null,
            offset: null
          }
        };
      }
      var pos = node2.position.start;
      var key = [node2.type, pos.line, pos.column, index3].join("-");
      if (!ReactIs.isValidElementType(renderer)) {
        throw new Error("Renderer for type `".concat(node2.type, "` not defined or is not renderable"));
      }
      var nodeProps = getNodeProps(node2, key, options, renderer, parent, index3);
      return React210.createElement(renderer, nodeProps, nodeProps.children || resolveChildren() || void 0);
      function resolveChildren() {
        return node2.children && node2.children.map(function(childNode, i) {
          return astToReact(childNode, options, {
            node: node2,
            props: nodeProps
          }, i);
        });
      }
    }
    function getNodeProps(node2, key, opts, renderer, parent, index3) {
      var props = {
        key
      };
      var isSimpleRenderer = typeof renderer === "string" || renderer === React210.Fragment;
      if (opts.sourcePos && node2.position) {
        props["data-sourcepos"] = flattenPosition(node2.position);
      }
      if (opts.rawSourcePos && !isSimpleRenderer) {
        props.sourcePosition = node2.position;
      }
      if (opts.includeNodeIndex && parent.node && parent.node.children && !isSimpleRenderer) {
        props.index = parent.node.children.indexOf(node2);
        props.parentChildCount = parent.node.children.length;
      }
      var ref = node2.identifier !== null && node2.identifier !== void 0 ? (
        /* istanbul ignore next - plugins could inject an undefined reference. */
        opts.definitions[node2.identifier.toUpperCase()] || {}
      ) : null;
      switch (node2.type) {
        case "root":
          assignDefined(props, {
            className: opts.className
          });
          break;
        case "text":
          props.nodeKey = key;
          props.children = node2.value;
          break;
        case "heading":
          props.level = node2.depth;
          break;
        case "list":
          props.start = node2.start;
          props.ordered = node2.ordered;
          props.spread = node2.spread;
          props.depth = node2.depth;
          break;
        case "listItem":
          props.checked = node2.checked;
          props.spread = node2.spread;
          props.ordered = node2.ordered;
          props.index = node2.index;
          props.children = getListItemChildren(node2, parent).map(function(childNode, i) {
            return astToReact(childNode, opts, {
              node: node2,
              props
            }, i);
          });
          break;
        case "definition":
          assignDefined(props, {
            identifier: node2.identifier,
            title: node2.title,
            url: node2.url
          });
          break;
        case "code":
          assignDefined(props, {
            language: node2.lang && node2.lang.split(/\s/, 1)[0]
          });
          break;
        case "inlineCode":
          props.children = node2.value;
          props.inline = true;
          break;
        case "link":
          assignDefined(props, {
            title: node2.title || void 0,
            target: typeof opts.linkTarget === "function" ? opts.linkTarget(node2.url, node2.children, node2.title) : opts.linkTarget,
            href: opts.transformLinkUri ? opts.transformLinkUri(node2.url, node2.children, node2.title) : node2.url
          });
          break;
        case "image":
          assignDefined(props, {
            src: opts.transformImageUri ? opts.transformImageUri(node2.url, node2.children, node2.title, node2.alt) : node2.url,
            alt: node2.alt || "",
            title: node2.title || void 0
          });
          break;
        case "linkReference":
          assignDefined(props, xtend(ref, {
            href: opts.transformLinkUri ? opts.transformLinkUri(ref.href) : ref.href
          }));
          break;
        case "imageReference":
          assignDefined(props, {
            src: opts.transformImageUri && ref.href ? opts.transformImageUri(ref.href, node2.children, ref.title, node2.alt) : ref.href,
            alt: node2.alt || "",
            title: ref.title || void 0
          });
          break;
        case "table":
        case "tableHead":
        case "tableBody":
          props.columnAlignment = node2.align;
          break;
        case "tableRow":
          props.isHeader = parent.node.type === "tableHead";
          props.columnAlignment = parent.props.columnAlignment;
          break;
        case "tableCell":
          assignDefined(props, {
            isHeader: parent.props.isHeader,
            align: parent.props.columnAlignment[index3]
          });
          break;
        case "virtualHtml":
          props.tag = node2.tag;
          break;
        case "html":
          props.isBlock = node2.position.start.line !== node2.position.end.line;
          props.allowDangerousHtml = opts.allowDangerousHtml;
          props.escapeHtml = opts.escapeHtml;
          props.skipHtml = opts.skipHtml;
          break;
        case "parsedHtml": {
          var parsedChildren;
          if (node2.children) {
            parsedChildren = node2.children.map(function(child, i) {
              return astToReact(child, opts, {
                node: node2,
                props
              }, i);
            });
          }
          props.allowDangerousHtml = opts.allowDangerousHtml;
          props.escapeHtml = opts.escapeHtml;
          props.skipHtml = opts.skipHtml;
          props.element = node2.element ? mergeNodeChildren(node2, parsedChildren) : null;
          break;
        }
        default:
          assignDefined(props, xtend(node2, {
            type: void 0,
            position: void 0,
            children: void 0
          }));
      }
      if (!isSimpleRenderer && node2.value) {
        props.value = node2.value;
      }
      if (!isSimpleRenderer) {
        props.node = node2;
      }
      return props;
    }
    function assignDefined(target, attrs) {
      for (var key in attrs) {
        if (typeof attrs[key] !== "undefined") {
          target[key] = attrs[key];
        }
      }
    }
    function mergeNodeChildren(node2, parsedChildren) {
      var el = node2.element;
      if (Array.isArray(el)) {
        var Fragment3 = React210.Fragment || "div";
        return React210.createElement(Fragment3, null, el);
      }
      if (el.props.children || parsedChildren) {
        var children = React210.Children.toArray(el.props.children).concat(parsedChildren);
        return React210.cloneElement(el, null, children);
      }
      return React210.cloneElement(el, null);
    }
    function flattenPosition(pos) {
      return [pos.start.line, ":", pos.start.column, "-", pos.end.line, ":", pos.end.column].map(String).join("");
    }
    function getListItemChildren(node2, parent) {
      var loose = parent && parent.node ? listLoose2(parent.node) : listItemLoose2(node2);
      return loose ? node2.children : unwrapParagraphs(node2);
    }
    function unwrapParagraphs(node2) {
      return node2.children.reduce(function(array, child) {
        return array.concat(child.type === "paragraph" ? child.children : [child]);
      }, []);
    }
    function listLoose2(node2) {
      var children = node2.children;
      var loose = node2.spread;
      var index3 = -1;
      while (!loose && ++index3 < children.length) {
        loose = listItemLoose2(children[index3]);
      }
      return loose;
    }
    function listItemLoose2(node2) {
      var spread = node2.spread;
      return spread === void 0 || spread === null ? node2.children.length > 1 : spread;
    }
    module2.exports = astToReact;
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/wrap-table-rows.js
var require_wrap_table_rows = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/wrap-table-rows.js"(exports, module2) {
    "use strict";
    var visit2 = require_unist_util_visit();
    module2.exports = function(node2) {
      visit2(node2, "table", wrap3);
      return node2;
    };
    function wrap3(table2) {
      var children = table2.children;
      table2.children = [{
        type: "tableHead",
        align: table2.align,
        children: [children[0]],
        position: children[0].position
      }];
      if (children.length > 1) {
        table2.children.push({
          type: "tableBody",
          align: table2.align,
          children: children.slice(1),
          position: {
            start: children[1].position.start,
            end: children[children.length - 1].position.end
          }
        });
      }
    }
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/get-definitions.js
var require_get_definitions = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/get-definitions.js"(exports, module2) {
    "use strict";
    var visit2 = require_unist_util_visit();
    module2.exports = function getDefinitions(tree) {
      var definitions = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      visit2(tree, "definition", function(node2) {
        var identifier = node2.identifier.toUpperCase();
        if (identifier in definitions) return;
        definitions[identifier] = {
          href: node2.url,
          title: node2.title
        };
      });
      return definitions;
    };
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/uri-transformer.js
var require_uri_transformer = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/uri-transformer.js"(exports, module2) {
    "use strict";
    var protocols = ["http", "https", "mailto", "tel"];
    module2.exports = function uriTransformer(uri) {
      var url = (uri || "").trim();
      var first = url.charAt(0);
      if (first === "#" || first === "/") {
        return url;
      }
      var colon = url.indexOf(":");
      if (colon === -1) {
        return url;
      }
      var length = protocols.length;
      var index3 = -1;
      while (++index3 < length) {
        var protocol = protocols[index3];
        if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
          return url;
        }
      }
      index3 = url.indexOf("?");
      if (index3 !== -1 && colon > index3) {
        return url;
      }
      index3 = url.indexOf("#");
      if (index3 !== -1 && colon > index3) {
        return url;
      }
      return "javascript:void(0)";
    };
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/renderers.js
var require_renderers = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/renderers.js"(exports, module2) {
    "use strict";
    var xtend = require_immutable();
    var React210 = require("react");
    var supportsStringRender = parseInt((React210.version || "16").slice(0, 2), 10) >= 16;
    var createElement = React210.createElement;
    module2.exports = {
      break: "br",
      paragraph: "p",
      emphasis: "em",
      strong: "strong",
      thematicBreak: "hr",
      blockquote: "blockquote",
      delete: "del",
      link: "a",
      image: "img",
      linkReference: "a",
      imageReference: "img",
      table: SimpleRenderer.bind(null, "table"),
      tableHead: SimpleRenderer.bind(null, "thead"),
      tableBody: SimpleRenderer.bind(null, "tbody"),
      tableRow: SimpleRenderer.bind(null, "tr"),
      tableCell: TableCell,
      root: Root,
      text: TextRenderer,
      list: List2,
      listItem: ListItem,
      definition: NullRenderer,
      heading: Heading,
      inlineCode: InlineCode,
      code: CodeBlock,
      html: Html,
      virtualHtml: VirtualHtml,
      parsedHtml: ParsedHtml
    };
    function TextRenderer(props) {
      var children = props.children || "";
      return supportsStringRender ? children : createElement("span", null, children);
    }
    function Root(props) {
      var className = props.className;
      var root4 = !className && React210.Fragment || "div";
      return createElement(root4, className ? {
        className
      } : null, props.children);
    }
    function SimpleRenderer(tag, props) {
      return createElement(tag, getCoreProps(props), props.children);
    }
    function TableCell(props) {
      var style = props.align ? {
        textAlign: props.align
      } : void 0;
      var coreProps = getCoreProps(props);
      return createElement(props.isHeader ? "th" : "td", style ? xtend({
        style
      }, coreProps) : coreProps, props.children);
    }
    function Heading(props) {
      return createElement("h".concat(props.level), getCoreProps(props), props.children);
    }
    function List2(props) {
      var attrs = getCoreProps(props);
      if (props.start !== null && props.start !== 1 && props.start !== void 0) {
        attrs.start = props.start.toString();
      }
      return createElement(props.ordered ? "ol" : "ul", attrs, props.children);
    }
    function ListItem(props) {
      var checkbox = null;
      if (props.checked !== null && props.checked !== void 0) {
        var checked = props.checked;
        checkbox = createElement("input", {
          type: "checkbox",
          checked,
          readOnly: true
        });
      }
      return createElement("li", getCoreProps(props), checkbox, props.children);
    }
    function CodeBlock(props) {
      var className = props.language && "language-".concat(props.language);
      var code4 = createElement("code", className ? {
        className
      } : null, props.value);
      return createElement("pre", getCoreProps(props), code4);
    }
    function InlineCode(props) {
      return createElement("code", getCoreProps(props), props.children);
    }
    function Html(props) {
      if (props.skipHtml) {
        return null;
      }
      var dangerous = props.allowDangerousHtml || props.escapeHtml === false;
      var tag = props.isBlock ? "div" : "span";
      if (!dangerous) {
        return createElement(React210.Fragment || tag, null, props.value);
      }
      var nodeProps = {
        dangerouslySetInnerHTML: {
          __html: props.value
        }
      };
      return createElement(tag, nodeProps);
    }
    function ParsedHtml(props) {
      return props["data-sourcepos"] ? React210.cloneElement(props.element, {
        "data-sourcepos": props["data-sourcepos"]
      }) : props.element;
    }
    function VirtualHtml(props) {
      return createElement(props.tag, getCoreProps(props), props.children);
    }
    function NullRenderer() {
      return null;
    }
    function getCoreProps(props) {
      var source = props["data-sourcepos"];
      return source ? {
        "data-sourcepos": source
      } : {};
    }
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/symbols.js
var require_symbols = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/symbols.js"(exports) {
    "use strict";
    var HtmlParser = "__RMD_HTML_PARSER__";
    exports.HtmlParser = typeof Symbol === "undefined" ? HtmlParser : Symbol(HtmlParser);
  }
});

// node_modules/mml-react/node_modules/react-markdown/lib/react-markdown.js
var require_react_markdown = __commonJS({
  "node_modules/mml-react/node_modules/react-markdown/lib/react-markdown.js"(exports, module2) {
    "use strict";
    var xtend = require_immutable();
    var unified2 = require_unified();
    var parse2 = require_remark_parse();
    var PropTypes2 = require("prop-types");
    var addListMetadata = require_mdast_add_list_metadata();
    var naiveHtml = require_naive_html();
    var disallowNode = require_disallow_node();
    var astToReact = require_ast_to_react();
    var wrapTableRows = require_wrap_table_rows();
    var getDefinitions = require_get_definitions();
    var uriTransformer = require_uri_transformer();
    var defaultRenderers = require_renderers();
    var symbols = require_symbols();
    var allTypes = Object.keys(defaultRenderers);
    var ReactMarkdown2 = function ReactMarkdown3(props) {
      var src = props.source || props.children || "";
      if (props.allowedTypes && props.disallowedTypes) {
        throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");
      }
      var renderers = xtend(defaultRenderers, props.renderers);
      var processor = unified2().use(parse2).use(props.plugins || []);
      var tree = processor.runSync(processor.parse(src));
      var renderProps = xtend(props, {
        renderers,
        definitions: getDefinitions(tree)
      });
      determineAstToReactTransforms(props).forEach(function(transform3) {
        tree = transform3(tree, renderProps);
      });
      return tree;
    };
    function determineAstToReactTransforms(props) {
      var transforms = [wrapTableRows, addListMetadata()];
      var disallowedTypes = props.disallowedTypes;
      if (props.allowedTypes) {
        disallowedTypes = allTypes.filter(function(type) {
          return type !== "root" && props.allowedTypes.indexOf(type) === -1;
        });
      }
      var removalMethod = props.unwrapDisallowed ? "unwrap" : "remove";
      if (disallowedTypes && disallowedTypes.length > 0) {
        transforms.push(disallowNode.ofType(disallowedTypes, removalMethod));
      }
      if (props.allowNode) {
        transforms.push(disallowNode.ifNotMatch(props.allowNode, removalMethod));
      }
      var renderHtml = (props.allowDangerousHtml || props.escapeHtml === false) && !props.skipHtml;
      var hasHtmlParser = (props.astPlugins || []).some(function(transform3) {
        return transform3.identity === symbols.HtmlParser;
      });
      if (renderHtml && !hasHtmlParser) {
        transforms.push(naiveHtml);
      }
      if (props.astPlugins) {
        transforms = transforms.concat(props.astPlugins);
      }
      transforms.push(astToReact);
      return transforms;
    }
    ReactMarkdown2.defaultProps = {
      transformLinkUri: uriTransformer
    };
    ReactMarkdown2.propTypes = {
      className: PropTypes2.string,
      source: PropTypes2.string,
      children: PropTypes2.string,
      sourcePos: PropTypes2.bool,
      rawSourcePos: PropTypes2.bool,
      escapeHtml: PropTypes2.bool,
      allowDangerousHtml: PropTypes2.bool,
      skipHtml: PropTypes2.bool,
      allowNode: PropTypes2.func,
      allowedTypes: PropTypes2.arrayOf(PropTypes2.oneOf(allTypes)),
      disallowedTypes: PropTypes2.arrayOf(PropTypes2.oneOf(allTypes)),
      transformLinkUri: PropTypes2.oneOfType([PropTypes2.func, PropTypes2.bool]),
      linkTarget: PropTypes2.oneOfType([PropTypes2.func, PropTypes2.string]),
      transformImageUri: PropTypes2.func,
      astPlugins: PropTypes2.arrayOf(PropTypes2.func),
      unwrapDisallowed: PropTypes2.bool,
      renderers: PropTypes2.object,
      plugins: PropTypes2.array
    };
    ReactMarkdown2.types = allTypes;
    ReactMarkdown2.renderers = defaultRenderers;
    ReactMarkdown2.uriTransformer = uriTransformer;
    module2.exports = ReactMarkdown2;
  }
});

// node_modules/ical.js/build/ical.js
var require_ical = __commonJS({
  "node_modules/ical.js/build/ical.js"(exports, module2) {
    if (typeof module2 === "object") {
      ICAL = module2.exports;
    } else if (typeof ICAL !== "object") {
      exports.ICAL = {};
    }
    ICAL.foldLength = 75;
    ICAL.newLineChar = "\r\n";
    ICAL.helpers = {
      /**
       * Compiles a list of all referenced TZIDs in all subcomponents and
       * removes any extra VTIMEZONE subcomponents. In addition, if any TZIDs
       * are referenced by a component, but a VTIMEZONE does not exist,
       * an attempt will be made to generate a VTIMEZONE using ICAL.TimezoneService.
       *
       * @param {ICAL.Component} vcal     The top-level VCALENDAR component.
       * @return {ICAL.Component}         The ICAL.Component that was passed in.
       */
      updateTimezones: function(vcal) {
        var allsubs, properties, vtimezones, reqTzid, i, tzid;
        if (!vcal || vcal.name !== "vcalendar") {
          return vcal;
        }
        allsubs = vcal.getAllSubcomponents();
        properties = [];
        vtimezones = {};
        for (i = 0; i < allsubs.length; i++) {
          if (allsubs[i].name === "vtimezone") {
            tzid = allsubs[i].getFirstProperty("tzid").getFirstValue();
            vtimezones[tzid] = allsubs[i];
          } else {
            properties = properties.concat(allsubs[i].getAllProperties());
          }
        }
        reqTzid = {};
        for (i = 0; i < properties.length; i++) {
          if (tzid = properties[i].getParameter("tzid")) {
            reqTzid[tzid] = true;
          }
        }
        for (i in vtimezones) {
          if (vtimezones.hasOwnProperty(i) && !reqTzid[i]) {
            vcal.removeSubcomponent(vtimezones[i]);
          }
        }
        for (i in reqTzid) {
          if (reqTzid.hasOwnProperty(i) && !vtimezones[i] && ICAL.TimezoneService.has(i)) {
            vcal.addSubcomponent(ICAL.TimezoneService.get(i).component);
          }
        }
        return vcal;
      },
      /**
       * Checks if the given type is of the number type and also NaN.
       *
       * @param {Number} number     The number to check
       * @return {Boolean}          True, if the number is strictly NaN
       */
      isStrictlyNaN: function(number3) {
        return typeof number3 === "number" && isNaN(number3);
      },
      /**
       * Parses a string value that is expected to be an integer, when the valid is
       * not an integer throws a decoration error.
       *
       * @param {String} string     Raw string input
       * @return {Number}           Parsed integer
       */
      strictParseInt: function(string3) {
        var result = parseInt(string3, 10);
        if (ICAL.helpers.isStrictlyNaN(result)) {
          throw new Error(
            'Could not extract integer from "' + string3 + '"'
          );
        }
        return result;
      },
      /**
       * Creates or returns a class instance of a given type with the initialization
       * data if the data is not already an instance of the given type.
       *
       * @example
       * var time = new ICAL.Time(...);
       * var result = ICAL.helpers.formatClassType(time, ICAL.Time);
       *
       * (result instanceof ICAL.Time)
       * // => true
       *
       * result = ICAL.helpers.formatClassType({}, ICAL.Time);
       * (result isntanceof ICAL.Time)
       * // => true
       *
       *
       * @param {Object} data       object initialization data
       * @param {Object} type       object type (like ICAL.Time)
       * @return {?}                An instance of the found type.
       */
      formatClassType: function formatClassType(data, type) {
        if (typeof data === "undefined") {
          return void 0;
        }
        if (data instanceof type) {
          return data;
        }
        return new type(data);
      },
      /**
       * Identical to indexOf but will only match values when they are not preceded
       * by a backslash character.
       *
       * @param {String} buffer         String to search
       * @param {String} search         Value to look for
       * @param {Number} pos            Start position
       * @return {Number}               The position, or -1 if not found
       */
      unescapedIndexOf: function(buffer, search2, pos) {
        while ((pos = buffer.indexOf(search2, pos)) !== -1) {
          if (pos > 0 && buffer[pos - 1] === "\\") {
            pos += 1;
          } else {
            return pos;
          }
        }
        return -1;
      },
      /**
       * Find the index for insertion using binary search.
       *
       * @param {Array} list            The list to search
       * @param {?} seekVal             The value to insert
       * @param {function(?,?)} cmpfunc The comparison func, that can
       *                                  compare two seekVals
       * @return {Number}               The insert position
       */
      binsearchInsert: function(list4, seekVal, cmpfunc) {
        if (!list4.length)
          return 0;
        var low = 0, high = list4.length - 1, mid, cmpval;
        while (low <= high) {
          mid = low + Math.floor((high - low) / 2);
          cmpval = cmpfunc(seekVal, list4[mid]);
          if (cmpval < 0)
            high = mid - 1;
          else if (cmpval > 0)
            low = mid + 1;
          else
            break;
        }
        if (cmpval < 0)
          return mid;
        else if (cmpval > 0)
          return mid + 1;
        else
          return mid;
      },
      /**
       * Convenience function for debug output
       * @private
       */
      dumpn: (
        /* istanbul ignore next */
        function() {
          if (!ICAL.debug) {
            return;
          }
          if (typeof console !== "undefined" && "log" in console) {
            ICAL.helpers.dumpn = function consoleDumpn(input2) {
              console.log(input2);
            };
          } else {
            ICAL.helpers.dumpn = function geckoDumpn(input2) {
              dump(input2 + "\n");
            };
          }
          ICAL.helpers.dumpn(arguments[0]);
        }
      ),
      /**
       * Clone the passed object or primitive. By default a shallow clone will be
       * executed.
       *
       * @param {*} aSrc            The thing to clone
       * @param {Boolean=} aDeep    If true, a deep clone will be performed
       * @return {*}                The copy of the thing
       */
      clone: function(aSrc, aDeep) {
        if (!aSrc || typeof aSrc != "object") {
          return aSrc;
        } else if (aSrc instanceof Date) {
          return new Date(aSrc.getTime());
        } else if ("clone" in aSrc) {
          return aSrc.clone();
        } else if (Array.isArray(aSrc)) {
          var arr = [];
          for (var i = 0; i < aSrc.length; i++) {
            arr.push(aDeep ? ICAL.helpers.clone(aSrc[i], true) : aSrc[i]);
          }
          return arr;
        } else {
          var obj = {};
          for (var name2 in aSrc) {
            if (Object.prototype.hasOwnProperty.call(aSrc, name2)) {
              if (aDeep) {
                obj[name2] = ICAL.helpers.clone(aSrc[name2], true);
              } else {
                obj[name2] = aSrc[name2];
              }
            }
          }
          return obj;
        }
      },
      /**
       * Performs iCalendar line folding. A line ending character is inserted and
       * the next line begins with a whitespace.
       *
       * @example
       * SUMMARY:This line will be fold
       *  ed right in the middle of a word.
       *
       * @param {String} aLine      The line to fold
       * @return {String}           The folded line
       */
      foldline: function foldline(aLine) {
        var result = "";
        var line = aLine || "";
        while (line.length) {
          result += ICAL.newLineChar + " " + line.substr(0, ICAL.foldLength);
          line = line.substr(ICAL.foldLength);
        }
        return result.substr(ICAL.newLineChar.length + 1);
      },
      /**
       * Pads the given string or number with zeros so it will have at least two
       * characters.
       *
       * @param {String|Number} data    The string or number to pad
       * @return {String}               The number padded as a string
       */
      pad2: function pad(data) {
        if (typeof data !== "string") {
          if (typeof data === "number") {
            data = parseInt(data);
          }
          data = String(data);
        }
        var len = data.length;
        switch (len) {
          case 0:
            return "00";
          case 1:
            return "0" + data;
          default:
            return data;
        }
      },
      /**
       * Truncates the given number, correctly handling negative numbers.
       *
       * @param {Number} number     The number to truncate
       * @return {Number}           The truncated number
       */
      trunc: function trunc(number3) {
        return number3 < 0 ? Math.ceil(number3) : Math.floor(number3);
      },
      /**
       * Poor-man's cross-browser inheritance for JavaScript. Doesn't support all
       * the features, but enough for our usage.
       *
       * @param {Function} base     The base class constructor function.
       * @param {Function} child    The child class constructor function.
       * @param {Object} extra      Extends the prototype with extra properties
       *                              and methods
       */
      inherits: function(base, child, extra) {
        function F() {
        }
        F.prototype = base.prototype;
        child.prototype = new F();
        if (extra) {
          ICAL.helpers.extend(extra, child.prototype);
        }
      },
      /**
       * Poor-man's cross-browser object extension. Doesn't support all the
       * features, but enough for our usage. Note that the target's properties are
       * not overwritten with the source properties.
       *
       * @example
       * var child = ICAL.helpers.extend(parent, {
       *   "bar": 123
       * });
       *
       * @param {Object} source     The object to extend
       * @param {Object} target     The object to extend with
       * @return {Object}           Returns the target.
       */
      extend: function(source, target) {
        for (var key in source) {
          var descr = Object.getOwnPropertyDescriptor(source, key);
          if (descr && !Object.getOwnPropertyDescriptor(target, key)) {
            Object.defineProperty(target, key, descr);
          }
        }
        return target;
      }
    };
    ICAL.design = function() {
      "use strict";
      var FROM_ICAL_NEWLINE = /\\\\|\\;|\\,|\\[Nn]/g;
      var TO_ICAL_NEWLINE = /\\|;|,|\n/g;
      var FROM_VCARD_NEWLINE = /\\\\|\\,|\\[Nn]/g;
      var TO_VCARD_NEWLINE = /\\|,|\n/g;
      function createTextType(fromNewline, toNewline) {
        var result = {
          matches: /.*/,
          fromICAL: function(aValue, structuredEscape) {
            return replaceNewline(aValue, fromNewline, structuredEscape);
          },
          toICAL: function(aValue, structuredEscape) {
            var regEx = toNewline;
            if (structuredEscape)
              regEx = new RegExp(regEx.source + "|" + structuredEscape);
            return aValue.replace(regEx, function(str) {
              switch (str) {
                case "\\":
                  return "\\\\";
                case ";":
                  return "\\;";
                case ",":
                  return "\\,";
                case "\n":
                  return "\\n";
                /* istanbul ignore next */
                default:
                  return str;
              }
            });
          }
        };
        return result;
      }
      var DEFAULT_TYPE_TEXT = { defaultType: "text" };
      var DEFAULT_TYPE_TEXT_MULTI = { defaultType: "text", multiValue: "," };
      var DEFAULT_TYPE_TEXT_STRUCTURED = { defaultType: "text", structuredValue: ";" };
      var DEFAULT_TYPE_INTEGER = { defaultType: "integer" };
      var DEFAULT_TYPE_DATETIME_DATE = { defaultType: "date-time", allowedTypes: ["date-time", "date"] };
      var DEFAULT_TYPE_DATETIME = { defaultType: "date-time" };
      var DEFAULT_TYPE_URI = { defaultType: "uri" };
      var DEFAULT_TYPE_UTCOFFSET = { defaultType: "utc-offset" };
      var DEFAULT_TYPE_RECUR = { defaultType: "recur" };
      var DEFAULT_TYPE_DATE_ANDOR_TIME = { defaultType: "date-and-or-time", allowedTypes: ["date-time", "date", "text"] };
      function replaceNewlineReplace(string3) {
        switch (string3) {
          case "\\\\":
            return "\\";
          case "\\;":
            return ";";
          case "\\,":
            return ",";
          case "\\n":
          case "\\N":
            return "\n";
          /* istanbul ignore next */
          default:
            return string3;
        }
      }
      function replaceNewline(value, newline, structuredEscape) {
        if (value.indexOf("\\") === -1) {
          return value;
        }
        if (structuredEscape)
          newline = new RegExp(newline.source + "|\\\\" + structuredEscape);
        return value.replace(newline, replaceNewlineReplace);
      }
      var commonProperties = {
        "categories": DEFAULT_TYPE_TEXT_MULTI,
        "url": DEFAULT_TYPE_URI,
        "version": DEFAULT_TYPE_TEXT,
        "uid": DEFAULT_TYPE_TEXT
      };
      var commonValues = {
        "boolean": {
          values: ["TRUE", "FALSE"],
          fromICAL: function(aValue) {
            switch (aValue) {
              case "TRUE":
                return true;
              case "FALSE":
                return false;
              default:
                return false;
            }
          },
          toICAL: function(aValue) {
            if (aValue) {
              return "TRUE";
            }
            return "FALSE";
          }
        },
        float: {
          matches: /^[+-]?\d+\.\d+$/,
          fromICAL: function(aValue) {
            var parsed = parseFloat(aValue);
            if (ICAL.helpers.isStrictlyNaN(parsed)) {
              return 0;
            }
            return parsed;
          },
          toICAL: function(aValue) {
            return String(aValue);
          }
        },
        integer: {
          fromICAL: function(aValue) {
            var parsed = parseInt(aValue);
            if (ICAL.helpers.isStrictlyNaN(parsed)) {
              return 0;
            }
            return parsed;
          },
          toICAL: function(aValue) {
            return String(aValue);
          }
        },
        "utc-offset": {
          toICAL: function(aValue) {
            if (aValue.length < 7) {
              return aValue.substr(0, 3) + aValue.substr(4, 2);
            } else {
              return aValue.substr(0, 3) + aValue.substr(4, 2) + aValue.substr(7, 2);
            }
          },
          fromICAL: function(aValue) {
            if (aValue.length < 6) {
              return aValue.substr(0, 3) + ":" + aValue.substr(3, 2);
            } else {
              return aValue.substr(0, 3) + ":" + aValue.substr(3, 2) + ":" + aValue.substr(5, 2);
            }
          },
          decorate: function(aValue) {
            return ICAL.UtcOffset.fromString(aValue);
          },
          undecorate: function(aValue) {
            return aValue.toString();
          }
        }
      };
      var icalParams = {
        // Although the syntax is DQUOTE uri DQUOTE, I don't think we should
        // enfoce anything aside from it being a valid content line.
        //
        // At least some params require - if multi values are used - DQUOTEs
        // for each of its values - e.g. delegated-from="uri1","uri2"
        // To indicate this, I introduced the new k/v pair
        // multiValueSeparateDQuote: true
        //
        // "ALTREP": { ... },
        // CN just wants a param-value
        // "CN": { ... }
        "cutype": {
          values: ["INDIVIDUAL", "GROUP", "RESOURCE", "ROOM", "UNKNOWN"],
          allowXName: true,
          allowIanaToken: true
        },
        "delegated-from": {
          valueType: "cal-address",
          multiValue: ",",
          multiValueSeparateDQuote: true
        },
        "delegated-to": {
          valueType: "cal-address",
          multiValue: ",",
          multiValueSeparateDQuote: true
        },
        // "DIR": { ... }, // See ALTREP
        "encoding": {
          values: ["8BIT", "BASE64"]
        },
        // "FMTTYPE": { ... }, // See ALTREP
        "fbtype": {
          values: ["FREE", "BUSY", "BUSY-UNAVAILABLE", "BUSY-TENTATIVE"],
          allowXName: true,
          allowIanaToken: true
        },
        // "LANGUAGE": { ... }, // See ALTREP
        "member": {
          valueType: "cal-address",
          multiValue: ",",
          multiValueSeparateDQuote: true
        },
        "partstat": {
          // TODO These values are actually different per-component
          values: [
            "NEEDS-ACTION",
            "ACCEPTED",
            "DECLINED",
            "TENTATIVE",
            "DELEGATED",
            "COMPLETED",
            "IN-PROCESS"
          ],
          allowXName: true,
          allowIanaToken: true
        },
        "range": {
          values: ["THISLANDFUTURE"]
        },
        "related": {
          values: ["START", "END"]
        },
        "reltype": {
          values: ["PARENT", "CHILD", "SIBLING"],
          allowXName: true,
          allowIanaToken: true
        },
        "role": {
          values: [
            "REQ-PARTICIPANT",
            "CHAIR",
            "OPT-PARTICIPANT",
            "NON-PARTICIPANT"
          ],
          allowXName: true,
          allowIanaToken: true
        },
        "rsvp": {
          values: ["TRUE", "FALSE"]
        },
        "sent-by": {
          valueType: "cal-address"
        },
        "tzid": {
          matches: /^\//
        },
        "value": {
          // since the value here is a 'type' lowercase is used.
          values: [
            "binary",
            "boolean",
            "cal-address",
            "date",
            "date-time",
            "duration",
            "float",
            "integer",
            "period",
            "recur",
            "text",
            "time",
            "uri",
            "utc-offset"
          ],
          allowXName: true,
          allowIanaToken: true
        }
      };
      var icalValues = ICAL.helpers.extend(commonValues, {
        text: createTextType(FROM_ICAL_NEWLINE, TO_ICAL_NEWLINE),
        uri: {
          // TODO
          /* ... */
        },
        "binary": {
          decorate: function(aString) {
            return ICAL.Binary.fromString(aString);
          },
          undecorate: function(aBinary) {
            return aBinary.toString();
          }
        },
        "cal-address": {
          // needs to be an uri
        },
        "date": {
          decorate: function(aValue, aProp) {
            if (design.strict) {
              return ICAL.Time.fromDateString(aValue, aProp);
            } else {
              return ICAL.Time.fromString(aValue, aProp);
            }
          },
          /**
           * undecorates a time object.
           */
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            if (!design.strict && aValue.length >= 15) {
              return icalValues["date-time"].fromICAL(aValue);
            } else {
              return aValue.substr(0, 4) + "-" + aValue.substr(4, 2) + "-" + aValue.substr(6, 2);
            }
          },
          toICAL: function(aValue) {
            var len = aValue.length;
            if (len == 10) {
              return aValue.substr(0, 4) + aValue.substr(5, 2) + aValue.substr(8, 2);
            } else if (len >= 19) {
              return icalValues["date-time"].toICAL(aValue);
            } else {
              return aValue;
            }
          }
        },
        "date-time": {
          fromICAL: function(aValue) {
            if (!design.strict && aValue.length == 8) {
              return icalValues.date.fromICAL(aValue);
            } else {
              var result = aValue.substr(0, 4) + "-" + aValue.substr(4, 2) + "-" + aValue.substr(6, 2) + "T" + aValue.substr(9, 2) + ":" + aValue.substr(11, 2) + ":" + aValue.substr(13, 2);
              if (aValue[15] && aValue[15] === "Z") {
                result += "Z";
              }
              return result;
            }
          },
          toICAL: function(aValue) {
            var len = aValue.length;
            if (len == 10 && !design.strict) {
              return icalValues.date.toICAL(aValue);
            } else if (len >= 19) {
              var result = aValue.substr(0, 4) + aValue.substr(5, 2) + // grab the (DDTHH) segment
              aValue.substr(8, 5) + // MM
              aValue.substr(14, 2) + // SS
              aValue.substr(17, 2);
              if (aValue[19] && aValue[19] === "Z") {
                result += "Z";
              }
              return result;
            } else {
              return aValue;
            }
          },
          decorate: function(aValue, aProp) {
            if (design.strict) {
              return ICAL.Time.fromDateTimeString(aValue, aProp);
            } else {
              return ICAL.Time.fromString(aValue, aProp);
            }
          },
          undecorate: function(aValue) {
            return aValue.toString();
          }
        },
        duration: {
          decorate: function(aValue) {
            return ICAL.Duration.fromString(aValue);
          },
          undecorate: function(aValue) {
            return aValue.toString();
          }
        },
        period: {
          fromICAL: function(string3) {
            var parts = string3.split("/");
            parts[0] = icalValues["date-time"].fromICAL(parts[0]);
            if (!ICAL.Duration.isValueString(parts[1])) {
              parts[1] = icalValues["date-time"].fromICAL(parts[1]);
            }
            return parts;
          },
          toICAL: function(parts) {
            if (!design.strict && parts[0].length == 10) {
              parts[0] = icalValues.date.toICAL(parts[0]);
            } else {
              parts[0] = icalValues["date-time"].toICAL(parts[0]);
            }
            if (!ICAL.Duration.isValueString(parts[1])) {
              if (!design.strict && parts[1].length == 10) {
                parts[1] = icalValues.date.toICAL(parts[1]);
              } else {
                parts[1] = icalValues["date-time"].toICAL(parts[1]);
              }
            }
            return parts.join("/");
          },
          decorate: function(aValue, aProp) {
            return ICAL.Period.fromJSON(aValue, aProp, !design.strict);
          },
          undecorate: function(aValue) {
            return aValue.toJSON();
          }
        },
        recur: {
          fromICAL: function(string3) {
            return ICAL.Recur._stringToData(string3, true);
          },
          toICAL: function(data) {
            var str = "";
            for (var k in data) {
              if (!Object.prototype.hasOwnProperty.call(data, k)) {
                continue;
              }
              var val = data[k];
              if (k == "until") {
                if (val.length > 10) {
                  val = icalValues["date-time"].toICAL(val);
                } else {
                  val = icalValues.date.toICAL(val);
                }
              } else if (k == "wkst") {
                if (typeof val === "number") {
                  val = ICAL.Recur.numericDayToIcalDay(val);
                }
              } else if (Array.isArray(val)) {
                val = val.join(",");
              }
              str += k.toUpperCase() + "=" + val + ";";
            }
            return str.substr(0, str.length - 1);
          },
          decorate: function decorate(aValue) {
            return ICAL.Recur.fromData(aValue);
          },
          undecorate: function(aRecur) {
            return aRecur.toJSON();
          }
        },
        time: {
          fromICAL: function(aValue) {
            if (aValue.length < 6) {
              return aValue;
            }
            var result = aValue.substr(0, 2) + ":" + aValue.substr(2, 2) + ":" + aValue.substr(4, 2);
            if (aValue[6] === "Z") {
              result += "Z";
            }
            return result;
          },
          toICAL: function(aValue) {
            if (aValue.length < 8) {
              return aValue;
            }
            var result = aValue.substr(0, 2) + aValue.substr(3, 2) + aValue.substr(6, 2);
            if (aValue[8] === "Z") {
              result += "Z";
            }
            return result;
          }
        }
      });
      var icalProperties = ICAL.helpers.extend(commonProperties, {
        "action": DEFAULT_TYPE_TEXT,
        "attach": { defaultType: "uri" },
        "attendee": { defaultType: "cal-address" },
        "calscale": DEFAULT_TYPE_TEXT,
        "class": DEFAULT_TYPE_TEXT,
        "comment": DEFAULT_TYPE_TEXT,
        "completed": DEFAULT_TYPE_DATETIME,
        "contact": DEFAULT_TYPE_TEXT,
        "created": DEFAULT_TYPE_DATETIME,
        "description": DEFAULT_TYPE_TEXT,
        "dtend": DEFAULT_TYPE_DATETIME_DATE,
        "dtstamp": DEFAULT_TYPE_DATETIME,
        "dtstart": DEFAULT_TYPE_DATETIME_DATE,
        "due": DEFAULT_TYPE_DATETIME_DATE,
        "duration": { defaultType: "duration" },
        "exdate": {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date"],
          multiValue: ","
        },
        "exrule": DEFAULT_TYPE_RECUR,
        "freebusy": { defaultType: "period", multiValue: "," },
        "geo": { defaultType: "float", structuredValue: ";" },
        "last-modified": DEFAULT_TYPE_DATETIME,
        "location": DEFAULT_TYPE_TEXT,
        "method": DEFAULT_TYPE_TEXT,
        "organizer": { defaultType: "cal-address" },
        "percent-complete": DEFAULT_TYPE_INTEGER,
        "priority": DEFAULT_TYPE_INTEGER,
        "prodid": DEFAULT_TYPE_TEXT,
        "related-to": DEFAULT_TYPE_TEXT,
        "repeat": DEFAULT_TYPE_INTEGER,
        "rdate": {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date", "period"],
          multiValue: ",",
          detectType: function(string3) {
            if (string3.indexOf("/") !== -1) {
              return "period";
            }
            return string3.indexOf("T") === -1 ? "date" : "date-time";
          }
        },
        "recurrence-id": DEFAULT_TYPE_DATETIME_DATE,
        "resources": DEFAULT_TYPE_TEXT_MULTI,
        "request-status": DEFAULT_TYPE_TEXT_STRUCTURED,
        "rrule": DEFAULT_TYPE_RECUR,
        "sequence": DEFAULT_TYPE_INTEGER,
        "status": DEFAULT_TYPE_TEXT,
        "summary": DEFAULT_TYPE_TEXT,
        "transp": DEFAULT_TYPE_TEXT,
        "trigger": { defaultType: "duration", allowedTypes: ["duration", "date-time"] },
        "tzoffsetfrom": DEFAULT_TYPE_UTCOFFSET,
        "tzoffsetto": DEFAULT_TYPE_UTCOFFSET,
        "tzurl": DEFAULT_TYPE_URI,
        "tzid": DEFAULT_TYPE_TEXT,
        "tzname": DEFAULT_TYPE_TEXT
      });
      var vcardValues = ICAL.helpers.extend(commonValues, {
        text: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
        uri: createTextType(FROM_VCARD_NEWLINE, TO_VCARD_NEWLINE),
        date: {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date");
          },
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            if (aValue.length == 8) {
              return icalValues.date.fromICAL(aValue);
            } else if (aValue[0] == "-" && aValue.length == 6) {
              return aValue.substr(0, 4) + "-" + aValue.substr(4);
            } else {
              return aValue;
            }
          },
          toICAL: function(aValue) {
            if (aValue.length == 10) {
              return icalValues.date.toICAL(aValue);
            } else if (aValue[0] == "-" && aValue.length == 7) {
              return aValue.substr(0, 4) + aValue.substr(5);
            } else {
              return aValue;
            }
          }
        },
        time: {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString("T" + aValue, "time");
          },
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            var splitzone = vcardValues.time._splitZone(aValue, true);
            var zone = splitzone[0], value = splitzone[1];
            if (value.length == 6) {
              value = value.substr(0, 2) + ":" + value.substr(2, 2) + ":" + value.substr(4, 2);
            } else if (value.length == 4 && value[0] != "-") {
              value = value.substr(0, 2) + ":" + value.substr(2, 2);
            } else if (value.length == 5) {
              value = value.substr(0, 3) + ":" + value.substr(3, 2);
            }
            if (zone.length == 5 && (zone[0] == "-" || zone[0] == "+")) {
              zone = zone.substr(0, 3) + ":" + zone.substr(3);
            }
            return value + zone;
          },
          toICAL: function(aValue) {
            var splitzone = vcardValues.time._splitZone(aValue);
            var zone = splitzone[0], value = splitzone[1];
            if (value.length == 8) {
              value = value.substr(0, 2) + value.substr(3, 2) + value.substr(6, 2);
            } else if (value.length == 5 && value[0] != "-") {
              value = value.substr(0, 2) + value.substr(3, 2);
            } else if (value.length == 6) {
              value = value.substr(0, 3) + value.substr(4, 2);
            }
            if (zone.length == 6 && (zone[0] == "-" || zone[0] == "+")) {
              zone = zone.substr(0, 3) + zone.substr(4);
            }
            return value + zone;
          },
          _splitZone: function(aValue, isFromIcal) {
            var lastChar = aValue.length - 1;
            var signChar = aValue.length - (isFromIcal ? 5 : 6);
            var sign = aValue[signChar];
            var zone, value;
            if (aValue[lastChar] == "Z") {
              zone = aValue[lastChar];
              value = aValue.substr(0, lastChar);
            } else if (aValue.length > 6 && (sign == "-" || sign == "+")) {
              zone = aValue.substr(signChar);
              value = aValue.substr(0, signChar);
            } else {
              zone = "";
              value = aValue;
            }
            return [zone, value];
          }
        },
        "date-time": {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-time");
          },
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            return vcardValues["date-and-or-time"].fromICAL(aValue);
          },
          toICAL: function(aValue) {
            return vcardValues["date-and-or-time"].toICAL(aValue);
          }
        },
        "date-and-or-time": {
          decorate: function(aValue) {
            return ICAL.VCardTime.fromDateAndOrTimeString(aValue, "date-and-or-time");
          },
          undecorate: function(aValue) {
            return aValue.toString();
          },
          fromICAL: function(aValue) {
            var parts = aValue.split("T");
            return (parts[0] ? vcardValues.date.fromICAL(parts[0]) : "") + (parts[1] ? "T" + vcardValues.time.fromICAL(parts[1]) : "");
          },
          toICAL: function(aValue) {
            var parts = aValue.split("T");
            return vcardValues.date.toICAL(parts[0]) + (parts[1] ? "T" + vcardValues.time.toICAL(parts[1]) : "");
          }
        },
        timestamp: icalValues["date-time"],
        "language-tag": {
          matches: /^[a-zA-Z0-9-]+$/
          // Could go with a more strict regex here
        }
      });
      var vcardParams = {
        "type": {
          valueType: "text",
          multiValue: ","
        },
        "value": {
          // since the value here is a 'type' lowercase is used.
          values: [
            "text",
            "uri",
            "date",
            "time",
            "date-time",
            "date-and-or-time",
            "timestamp",
            "boolean",
            "integer",
            "float",
            "utc-offset",
            "language-tag"
          ],
          allowXName: true,
          allowIanaToken: true
        }
      };
      var vcardProperties = ICAL.helpers.extend(commonProperties, {
        "adr": { defaultType: "text", structuredValue: ";", multiValue: "," },
        "anniversary": DEFAULT_TYPE_DATE_ANDOR_TIME,
        "bday": DEFAULT_TYPE_DATE_ANDOR_TIME,
        "caladruri": DEFAULT_TYPE_URI,
        "caluri": DEFAULT_TYPE_URI,
        "clientpidmap": DEFAULT_TYPE_TEXT_STRUCTURED,
        "email": DEFAULT_TYPE_TEXT,
        "fburl": DEFAULT_TYPE_URI,
        "fn": DEFAULT_TYPE_TEXT,
        "gender": DEFAULT_TYPE_TEXT_STRUCTURED,
        "geo": DEFAULT_TYPE_URI,
        "impp": DEFAULT_TYPE_URI,
        "key": DEFAULT_TYPE_URI,
        "kind": DEFAULT_TYPE_TEXT,
        "lang": { defaultType: "language-tag" },
        "logo": DEFAULT_TYPE_URI,
        "member": DEFAULT_TYPE_URI,
        "n": { defaultType: "text", structuredValue: ";", multiValue: "," },
        "nickname": DEFAULT_TYPE_TEXT_MULTI,
        "note": DEFAULT_TYPE_TEXT,
        "org": { defaultType: "text", structuredValue: ";" },
        "photo": DEFAULT_TYPE_URI,
        "related": DEFAULT_TYPE_URI,
        "rev": { defaultType: "timestamp" },
        "role": DEFAULT_TYPE_TEXT,
        "sound": DEFAULT_TYPE_URI,
        "source": DEFAULT_TYPE_URI,
        "tel": { defaultType: "uri", allowedTypes: ["uri", "text"] },
        "title": DEFAULT_TYPE_TEXT,
        "tz": { defaultType: "text", allowedTypes: ["text", "utc-offset", "uri"] },
        "xml": DEFAULT_TYPE_TEXT
      });
      var vcard3Values = ICAL.helpers.extend(commonValues, {
        binary: icalValues.binary,
        date: vcardValues.date,
        "date-time": vcardValues["date-time"],
        "phone-number": {
          // TODO
          /* ... */
        },
        uri: icalValues.uri,
        text: icalValues.text,
        time: icalValues.time,
        vcard: icalValues.text,
        "utc-offset": {
          toICAL: function(aValue) {
            return aValue.substr(0, 7);
          },
          fromICAL: function(aValue) {
            return aValue.substr(0, 7);
          },
          decorate: function(aValue) {
            return ICAL.UtcOffset.fromString(aValue);
          },
          undecorate: function(aValue) {
            return aValue.toString();
          }
        }
      });
      var vcard3Params = {
        "type": {
          valueType: "text",
          multiValue: ","
        },
        "value": {
          // since the value here is a 'type' lowercase is used.
          values: [
            "text",
            "uri",
            "date",
            "date-time",
            "phone-number",
            "time",
            "boolean",
            "integer",
            "float",
            "utc-offset",
            "vcard",
            "binary"
          ],
          allowXName: true,
          allowIanaToken: true
        }
      };
      var vcard3Properties = ICAL.helpers.extend(commonProperties, {
        fn: DEFAULT_TYPE_TEXT,
        n: { defaultType: "text", structuredValue: ";", multiValue: "," },
        nickname: DEFAULT_TYPE_TEXT_MULTI,
        photo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
        bday: {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date"],
          detectType: function(string3) {
            return string3.indexOf("T") === -1 ? "date" : "date-time";
          }
        },
        adr: { defaultType: "text", structuredValue: ";", multiValue: "," },
        label: DEFAULT_TYPE_TEXT,
        tel: { defaultType: "phone-number" },
        email: DEFAULT_TYPE_TEXT,
        mailer: DEFAULT_TYPE_TEXT,
        tz: { defaultType: "utc-offset", allowedTypes: ["utc-offset", "text"] },
        geo: { defaultType: "float", structuredValue: ";" },
        title: DEFAULT_TYPE_TEXT,
        role: DEFAULT_TYPE_TEXT,
        logo: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
        agent: { defaultType: "vcard", allowedTypes: ["vcard", "text", "uri"] },
        org: DEFAULT_TYPE_TEXT_STRUCTURED,
        note: DEFAULT_TYPE_TEXT_MULTI,
        prodid: DEFAULT_TYPE_TEXT,
        rev: {
          defaultType: "date-time",
          allowedTypes: ["date-time", "date"],
          detectType: function(string3) {
            return string3.indexOf("T") === -1 ? "date" : "date-time";
          }
        },
        "sort-string": DEFAULT_TYPE_TEXT,
        sound: { defaultType: "binary", allowedTypes: ["binary", "uri"] },
        class: DEFAULT_TYPE_TEXT,
        key: { defaultType: "binary", allowedTypes: ["binary", "text"] }
      });
      var icalSet = {
        value: icalValues,
        param: icalParams,
        property: icalProperties
      };
      var vcardSet = {
        value: vcardValues,
        param: vcardParams,
        property: vcardProperties
      };
      var vcard3Set = {
        value: vcard3Values,
        param: vcard3Params,
        property: vcard3Properties
      };
      var design = {
        /**
         * A designSet describes value, parameter and property data. It is used by
         * ther parser and stringifier in components and properties to determine they
         * should be represented.
         *
         * @typedef {Object} designSet
         * @memberOf ICAL.design
         * @property {Object} value       Definitions for value types, keys are type names
         * @property {Object} param       Definitions for params, keys are param names
         * @property {Object} property    Defintions for properties, keys are property names
         */
        /**
         * Can be set to false to make the parser more lenient.
         */
        strict: true,
        /**
         * The default set for new properties and components if none is specified.
         * @type {ICAL.design.designSet}
         */
        defaultSet: icalSet,
        /**
         * The default type for unknown properties
         * @type {String}
         */
        defaultType: "unknown",
        /**
         * Holds the design set for known top-level components
         *
         * @type {Object}
         * @property {ICAL.design.designSet} vcard       vCard VCARD
         * @property {ICAL.design.designSet} vevent      iCalendar VEVENT
         * @property {ICAL.design.designSet} vtodo       iCalendar VTODO
         * @property {ICAL.design.designSet} vjournal    iCalendar VJOURNAL
         * @property {ICAL.design.designSet} valarm      iCalendar VALARM
         * @property {ICAL.design.designSet} vtimezone   iCalendar VTIMEZONE
         * @property {ICAL.design.designSet} daylight    iCalendar DAYLIGHT
         * @property {ICAL.design.designSet} standard    iCalendar STANDARD
         *
         * @example
         * var propertyName = 'fn';
         * var componentDesign = ICAL.design.components.vcard;
         * var propertyDetails = componentDesign.property[propertyName];
         * if (propertyDetails.defaultType == 'text') {
         *   // Yep, sure is...
         * }
         */
        components: {
          vcard: vcardSet,
          vcard3: vcard3Set,
          vevent: icalSet,
          vtodo: icalSet,
          vjournal: icalSet,
          valarm: icalSet,
          vtimezone: icalSet,
          daylight: icalSet,
          standard: icalSet
        },
        /**
         * The design set for iCalendar (rfc5545/rfc7265) components.
         * @type {ICAL.design.designSet}
         */
        icalendar: icalSet,
        /**
         * The design set for vCard (rfc6350/rfc7095) components.
         * @type {ICAL.design.designSet}
         */
        vcard: vcardSet,
        /**
         * The design set for vCard (rfc2425/rfc2426/rfc7095) components.
         * @type {ICAL.design.designSet}
         */
        vcard3: vcard3Set,
        /**
         * Gets the design set for the given component name.
         *
         * @param {String} componentName        The name of the component
         * @return {ICAL.design.designSet}      The design set for the component
         */
        getDesignSet: function(componentName) {
          var isInDesign = componentName && componentName in design.components;
          return isInDesign ? design.components[componentName] : design.defaultSet;
        }
      };
      return design;
    }();
    ICAL.stringify = function() {
      "use strict";
      var LINE_ENDING = "\r\n";
      var DEFAULT_VALUE_TYPE = "unknown";
      var design = ICAL.design;
      var helpers = ICAL.helpers;
      function stringify3(jCal) {
        if (typeof jCal[0] == "string") {
          jCal = [jCal];
        }
        var i = 0;
        var len = jCal.length;
        var result = "";
        for (; i < len; i++) {
          result += stringify3.component(jCal[i]) + LINE_ENDING;
        }
        return result;
      }
      stringify3.component = function(component, designSet) {
        var name2 = component[0].toUpperCase();
        var result = "BEGIN:" + name2 + LINE_ENDING;
        var props = component[1];
        var propIdx = 0;
        var propLen = props.length;
        var designSetName = component[0];
        if (designSetName === "vcard" && component[1].length > 0 && !(component[1][0][0] === "version" && component[1][0][3] === "4.0")) {
          designSetName = "vcard3";
        }
        designSet = designSet || design.getDesignSet(designSetName);
        for (; propIdx < propLen; propIdx++) {
          result += stringify3.property(props[propIdx], designSet) + LINE_ENDING;
        }
        var comps = component[2] || [];
        var compIdx = 0;
        var compLen = comps.length;
        for (; compIdx < compLen; compIdx++) {
          result += stringify3.component(comps[compIdx], designSet) + LINE_ENDING;
        }
        result += "END:" + name2;
        return result;
      };
      stringify3.property = function(property, designSet, noFold) {
        var name2 = property[0].toUpperCase();
        var jsName = property[0];
        var params = property[1];
        var line = name2;
        var paramName;
        for (paramName in params) {
          var value = params[paramName];
          if (params.hasOwnProperty(paramName)) {
            var multiValue = paramName in designSet.param && designSet.param[paramName].multiValue;
            if (multiValue && Array.isArray(value)) {
              if (designSet.param[paramName].multiValueSeparateDQuote) {
                multiValue = '"' + multiValue + '"';
              }
              value = value.map(stringify3._rfc6868Unescape);
              value = stringify3.multiValue(value, multiValue, "unknown", null, designSet);
            } else {
              value = stringify3._rfc6868Unescape(value);
            }
            line += ";" + paramName.toUpperCase();
            line += "=" + stringify3.propertyValue(value);
          }
        }
        if (property.length === 3) {
          return line + ":";
        }
        var valueType = property[2];
        if (!designSet) {
          designSet = design.defaultSet;
        }
        var propDetails;
        var multiValue = false;
        var structuredValue = false;
        var isDefault = false;
        if (jsName in designSet.property) {
          propDetails = designSet.property[jsName];
          if ("multiValue" in propDetails) {
            multiValue = propDetails.multiValue;
          }
          if ("structuredValue" in propDetails && Array.isArray(property[3])) {
            structuredValue = propDetails.structuredValue;
          }
          if ("defaultType" in propDetails) {
            if (valueType === propDetails.defaultType) {
              isDefault = true;
            }
          } else {
            if (valueType === DEFAULT_VALUE_TYPE) {
              isDefault = true;
            }
          }
        } else {
          if (valueType === DEFAULT_VALUE_TYPE) {
            isDefault = true;
          }
        }
        if (!isDefault) {
          line += ";VALUE=" + valueType.toUpperCase();
        }
        line += ":";
        if (multiValue && structuredValue) {
          line += stringify3.multiValue(
            property[3],
            structuredValue,
            valueType,
            multiValue,
            designSet,
            structuredValue
          );
        } else if (multiValue) {
          line += stringify3.multiValue(
            property.slice(3),
            multiValue,
            valueType,
            null,
            designSet,
            false
          );
        } else if (structuredValue) {
          line += stringify3.multiValue(
            property[3],
            structuredValue,
            valueType,
            null,
            designSet,
            structuredValue
          );
        } else {
          line += stringify3.value(property[3], valueType, designSet, false);
        }
        return noFold ? line : ICAL.helpers.foldline(line);
      };
      stringify3.propertyValue = function(value) {
        if (helpers.unescapedIndexOf(value, ",") === -1 && helpers.unescapedIndexOf(value, ":") === -1 && helpers.unescapedIndexOf(value, ";") === -1) {
          return value;
        }
        return '"' + value + '"';
      };
      stringify3.multiValue = function(values, delim, type, innerMulti, designSet, structuredValue) {
        var result = "";
        var len = values.length;
        var i = 0;
        for (; i < len; i++) {
          if (innerMulti && Array.isArray(values[i])) {
            result += stringify3.multiValue(values[i], innerMulti, type, null, designSet, structuredValue);
          } else {
            result += stringify3.value(values[i], type, designSet, structuredValue);
          }
          if (i !== len - 1) {
            result += delim;
          }
        }
        return result;
      };
      stringify3.value = function(value, type, designSet, structuredValue) {
        if (type in designSet.value && "toICAL" in designSet.value[type]) {
          return designSet.value[type].toICAL(value, structuredValue);
        }
        return value;
      };
      stringify3._rfc6868Unescape = function(val) {
        return val.replace(/[\n^"]/g, function(x) {
          return RFC6868_REPLACE_MAP[x];
        });
      };
      var RFC6868_REPLACE_MAP = { '"': "^'", "\n": "^n", "^": "^^" };
      return stringify3;
    }();
    ICAL.parse = function() {
      "use strict";
      var CHAR = /[^ \t]/;
      var MULTIVALUE_DELIMITER = ",";
      var VALUE_DELIMITER = ":";
      var PARAM_DELIMITER = ";";
      var PARAM_NAME_DELIMITER = "=";
      var DEFAULT_VALUE_TYPE = "unknown";
      var DEFAULT_PARAM_TYPE = "text";
      var design = ICAL.design;
      var helpers = ICAL.helpers;
      function ParserError(message) {
        this.message = message;
        this.name = "ParserError";
        try {
          throw new Error();
        } catch (e2) {
          if (e2.stack) {
            var split = e2.stack.split("\n");
            split.shift();
            this.stack = split.join("\n");
          }
        }
      }
      ParserError.prototype = Error.prototype;
      function parser(input2) {
        var state = {};
        var root4 = state.component = [];
        state.stack = [root4];
        parser._eachLine(input2, function(err, line) {
          parser._handleContentLine(line, state);
        });
        if (state.stack.length > 1) {
          throw new ParserError(
            "invalid ical body. component began but did not end"
          );
        }
        state = null;
        return root4.length == 1 ? root4[0] : root4;
      }
      parser.property = function(str, designSet) {
        var state = {
          component: [[], []],
          designSet: designSet || design.defaultSet
        };
        parser._handleContentLine(str, state);
        return state.component[1][0];
      };
      parser.component = function(str) {
        return parser(str);
      };
      parser.ParserError = ParserError;
      parser._handleContentLine = function(line, state) {
        var valuePos = line.indexOf(VALUE_DELIMITER);
        var paramPos = line.indexOf(PARAM_DELIMITER);
        var lastParamIndex;
        var lastValuePos;
        var name2;
        var value;
        var params = {};
        if (paramPos !== -1 && valuePos !== -1) {
          if (paramPos > valuePos) {
            paramPos = -1;
          }
        }
        var parsedParams;
        if (paramPos !== -1) {
          name2 = line.substring(0, paramPos).toLowerCase();
          parsedParams = parser._parseParameters(line.substring(paramPos), 0, state.designSet);
          if (parsedParams[2] == -1) {
            throw new ParserError("Invalid parameters in '" + line + "'");
          }
          params = parsedParams[0];
          lastParamIndex = parsedParams[1].length + parsedParams[2] + paramPos;
          if ((lastValuePos = line.substring(lastParamIndex).indexOf(VALUE_DELIMITER)) !== -1) {
            value = line.substring(lastParamIndex + lastValuePos + 1);
          } else {
            throw new ParserError("Missing parameter value in '" + line + "'");
          }
        } else if (valuePos !== -1) {
          name2 = line.substring(0, valuePos).toLowerCase();
          value = line.substring(valuePos + 1);
          if (name2 === "begin") {
            var newComponent = [value.toLowerCase(), [], []];
            if (state.stack.length === 1) {
              state.component.push(newComponent);
            } else {
              state.component[2].push(newComponent);
            }
            state.stack.push(state.component);
            state.component = newComponent;
            if (!state.designSet) {
              state.designSet = design.getDesignSet(state.component[0]);
            }
            return;
          } else if (name2 === "end") {
            state.component = state.stack.pop();
            return;
          }
        } else {
          throw new ParserError(
            'invalid line (no token ";" or ":") "' + line + '"'
          );
        }
        var valueType;
        var multiValue = false;
        var structuredValue = false;
        var propertyDetails;
        if (name2 in state.designSet.property) {
          propertyDetails = state.designSet.property[name2];
          if ("multiValue" in propertyDetails) {
            multiValue = propertyDetails.multiValue;
          }
          if ("structuredValue" in propertyDetails) {
            structuredValue = propertyDetails.structuredValue;
          }
          if (value && "detectType" in propertyDetails) {
            valueType = propertyDetails.detectType(value);
          }
        }
        if (!valueType) {
          if (!("value" in params)) {
            if (propertyDetails) {
              valueType = propertyDetails.defaultType;
            } else {
              valueType = DEFAULT_VALUE_TYPE;
            }
          } else {
            valueType = params.value.toLowerCase();
          }
        }
        delete params.value;
        var result;
        if (multiValue && structuredValue) {
          value = parser._parseMultiValue(value, structuredValue, valueType, [], multiValue, state.designSet, structuredValue);
          result = [name2, params, valueType, value];
        } else if (multiValue) {
          result = [name2, params, valueType];
          parser._parseMultiValue(value, multiValue, valueType, result, null, state.designSet, false);
        } else if (structuredValue) {
          value = parser._parseMultiValue(value, structuredValue, valueType, [], null, state.designSet, structuredValue);
          result = [name2, params, valueType, value];
        } else {
          value = parser._parseValue(value, valueType, state.designSet, false);
          result = [name2, params, valueType, value];
        }
        if (state.component[0] === "vcard" && state.component[1].length === 0 && !(name2 === "version" && value === "4.0")) {
          state.designSet = design.getDesignSet("vcard3");
        }
        state.component[1].push(result);
      };
      parser._parseValue = function(value, type, designSet, structuredValue) {
        if (type in designSet.value && "fromICAL" in designSet.value[type]) {
          return designSet.value[type].fromICAL(value, structuredValue);
        }
        return value;
      };
      parser._parseParameters = function(line, start2, designSet) {
        var lastParam = start2;
        var pos = 0;
        var delim = PARAM_NAME_DELIMITER;
        var result = {};
        var name2, lcname;
        var value, valuePos = -1;
        var type, multiValue, mvdelim;
        while (pos !== false && (pos = helpers.unescapedIndexOf(line, delim, pos + 1)) !== -1) {
          name2 = line.substr(lastParam + 1, pos - lastParam - 1);
          if (name2.length == 0) {
            throw new ParserError("Empty parameter name in '" + line + "'");
          }
          lcname = name2.toLowerCase();
          mvdelim = false;
          multiValue = false;
          if (lcname in designSet.param && designSet.param[lcname].valueType) {
            type = designSet.param[lcname].valueType;
          } else {
            type = DEFAULT_PARAM_TYPE;
          }
          if (lcname in designSet.param) {
            multiValue = designSet.param[lcname].multiValue;
            if (designSet.param[lcname].multiValueSeparateDQuote) {
              mvdelim = parser._rfc6868Escape('"' + multiValue + '"');
            }
          }
          var nextChar = line[pos + 1];
          if (nextChar === '"') {
            valuePos = pos + 2;
            pos = helpers.unescapedIndexOf(line, '"', valuePos);
            if (multiValue && pos != -1) {
              var extendedValue = true;
              while (extendedValue) {
                if (line[pos + 1] == multiValue && line[pos + 2] == '"') {
                  pos = helpers.unescapedIndexOf(line, '"', pos + 3);
                } else {
                  extendedValue = false;
                }
              }
            }
            if (pos === -1) {
              throw new ParserError(
                'invalid line (no matching double quote) "' + line + '"'
              );
            }
            value = line.substr(valuePos, pos - valuePos);
            lastParam = helpers.unescapedIndexOf(line, PARAM_DELIMITER, pos);
            if (lastParam === -1) {
              pos = false;
            }
          } else {
            valuePos = pos + 1;
            var nextPos = helpers.unescapedIndexOf(line, PARAM_DELIMITER, valuePos);
            var propValuePos = helpers.unescapedIndexOf(line, VALUE_DELIMITER, valuePos);
            if (propValuePos !== -1 && nextPos > propValuePos) {
              nextPos = propValuePos;
              pos = false;
            } else if (nextPos === -1) {
              if (propValuePos === -1) {
                nextPos = line.length;
              } else {
                nextPos = propValuePos;
              }
              pos = false;
            } else {
              lastParam = nextPos;
              pos = nextPos;
            }
            value = line.substr(valuePos, nextPos - valuePos);
          }
          value = parser._rfc6868Escape(value);
          if (multiValue) {
            var delimiter = mvdelim || multiValue;
            value = parser._parseMultiValue(value, delimiter, type, [], null, designSet);
          } else {
            value = parser._parseValue(value, type, designSet);
          }
          if (multiValue && lcname in result) {
            if (Array.isArray(result[lcname])) {
              result[lcname].push(value);
            } else {
              result[lcname] = [
                result[lcname],
                value
              ];
            }
          } else {
            result[lcname] = value;
          }
        }
        return [result, value, valuePos];
      };
      parser._rfc6868Escape = function(val) {
        return val.replace(/\^['n^]/g, function(x) {
          return RFC6868_REPLACE_MAP[x];
        });
      };
      var RFC6868_REPLACE_MAP = { "^'": '"', "^n": "\n", "^^": "^" };
      parser._parseMultiValue = function(buffer, delim, type, result, innerMulti, designSet, structuredValue) {
        var pos = 0;
        var lastPos = 0;
        var value;
        if (delim.length === 0) {
          return buffer;
        }
        while ((pos = helpers.unescapedIndexOf(buffer, delim, lastPos)) !== -1) {
          value = buffer.substr(lastPos, pos - lastPos);
          if (innerMulti) {
            value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
          } else {
            value = parser._parseValue(value, type, designSet, structuredValue);
          }
          result.push(value);
          lastPos = pos + delim.length;
        }
        value = buffer.substr(lastPos);
        if (innerMulti) {
          value = parser._parseMultiValue(value, innerMulti, type, [], null, designSet, structuredValue);
        } else {
          value = parser._parseValue(value, type, designSet, structuredValue);
        }
        result.push(value);
        return result.length == 1 ? result[0] : result;
      };
      parser._eachLine = function(buffer, callback) {
        var len = buffer.length;
        var lastPos = buffer.search(CHAR);
        var pos = lastPos;
        var line;
        var firstChar;
        var newlineOffset;
        do {
          pos = buffer.indexOf("\n", lastPos) + 1;
          if (pos > 1 && buffer[pos - 2] === "\r") {
            newlineOffset = 2;
          } else {
            newlineOffset = 1;
          }
          if (pos === 0) {
            pos = len;
            newlineOffset = 0;
          }
          firstChar = buffer[lastPos];
          if (firstChar === " " || firstChar === "	") {
            line += buffer.substr(
              lastPos + 1,
              pos - lastPos - (newlineOffset + 1)
            );
          } else {
            if (line)
              callback(null, line);
            line = buffer.substr(
              lastPos,
              pos - lastPos - newlineOffset
            );
          }
          lastPos = pos;
        } while (pos !== len);
        line = line.trim();
        if (line.length)
          callback(null, line);
      };
      return parser;
    }();
    ICAL.Component = function() {
      "use strict";
      var PROPERTY_INDEX = 1;
      var COMPONENT_INDEX = 2;
      var NAME_INDEX = 0;
      function Component2(jCal, parent) {
        if (typeof jCal === "string") {
          jCal = [jCal, [], []];
        }
        this.jCal = jCal;
        this.parent = parent || null;
      }
      Component2.prototype = {
        /**
         * Hydrated properties are inserted into the _properties array at the same
         * position as in the jCal array, so its possible the array contains
         * undefined values for unhydrdated properties. To avoid iterating the
         * array when checking if all properties have been hydrated, we save the
         * count here.
         *
         * @type {Number}
         * @private
         */
        _hydratedPropertyCount: 0,
        /**
         * The same count as for _hydratedPropertyCount, but for subcomponents
         *
         * @type {Number}
         * @private
         */
        _hydratedComponentCount: 0,
        /**
         * The name of this component
         * @readonly
         */
        get name() {
          return this.jCal[NAME_INDEX];
        },
        /**
         * The design set for this component, e.g. icalendar vs vcard
         *
         * @type {ICAL.design.designSet}
         * @private
         */
        get _designSet() {
          var parentDesign = this.parent && this.parent._designSet;
          return parentDesign || ICAL.design.getDesignSet(this.name);
        },
        _hydrateComponent: function(index3) {
          if (!this._components) {
            this._components = [];
            this._hydratedComponentCount = 0;
          }
          if (this._components[index3]) {
            return this._components[index3];
          }
          var comp = new Component2(
            this.jCal[COMPONENT_INDEX][index3],
            this
          );
          this._hydratedComponentCount++;
          return this._components[index3] = comp;
        },
        _hydrateProperty: function(index3) {
          if (!this._properties) {
            this._properties = [];
            this._hydratedPropertyCount = 0;
          }
          if (this._properties[index3]) {
            return this._properties[index3];
          }
          var prop = new ICAL.Property(
            this.jCal[PROPERTY_INDEX][index3],
            this
          );
          this._hydratedPropertyCount++;
          return this._properties[index3] = prop;
        },
        /**
         * Finds first sub component, optionally filtered by name.
         *
         * @param {String=} name        Optional name to filter by
         * @return {?ICAL.Component}     The found subcomponent
         */
        getFirstSubcomponent: function(name2) {
          if (name2) {
            var i = 0;
            var comps = this.jCal[COMPONENT_INDEX];
            var len = comps.length;
            for (; i < len; i++) {
              if (comps[i][NAME_INDEX] === name2) {
                var result = this._hydrateComponent(i);
                return result;
              }
            }
          } else {
            if (this.jCal[COMPONENT_INDEX].length) {
              return this._hydrateComponent(0);
            }
          }
          return null;
        },
        /**
         * Finds all sub components, optionally filtering by name.
         *
         * @param {String=} name            Optional name to filter by
         * @return {ICAL.Component[]}       The found sub components
         */
        getAllSubcomponents: function(name2) {
          var jCalLen = this.jCal[COMPONENT_INDEX].length;
          var i = 0;
          if (name2) {
            var comps = this.jCal[COMPONENT_INDEX];
            var result = [];
            for (; i < jCalLen; i++) {
              if (name2 === comps[i][NAME_INDEX]) {
                result.push(
                  this._hydrateComponent(i)
                );
              }
            }
            return result;
          } else {
            if (!this._components || this._hydratedComponentCount !== jCalLen) {
              for (; i < jCalLen; i++) {
                this._hydrateComponent(i);
              }
            }
            return this._components || [];
          }
        },
        /**
         * Returns true when a named property exists.
         *
         * @param {String} name     The property name
         * @return {Boolean}        True, when property is found
         */
        hasProperty: function(name2) {
          var props = this.jCal[PROPERTY_INDEX];
          var len = props.length;
          var i = 0;
          for (; i < len; i++) {
            if (props[i][NAME_INDEX] === name2) {
              return true;
            }
          }
          return false;
        },
        /**
         * Finds the first property, optionally with the given name.
         *
         * @param {String=} name        Lowercase property name
         * @return {?ICAL.Property}     The found property
         */
        getFirstProperty: function(name2) {
          if (name2) {
            var i = 0;
            var props = this.jCal[PROPERTY_INDEX];
            var len = props.length;
            for (; i < len; i++) {
              if (props[i][NAME_INDEX] === name2) {
                var result = this._hydrateProperty(i);
                return result;
              }
            }
          } else {
            if (this.jCal[PROPERTY_INDEX].length) {
              return this._hydrateProperty(0);
            }
          }
          return null;
        },
        /**
         * Returns first property's value, if available.
         *
         * @param {String=} name    Lowercase property name
         * @return {?String}        The found property value.
         */
        getFirstPropertyValue: function(name2) {
          var prop = this.getFirstProperty(name2);
          if (prop) {
            return prop.getFirstValue();
          }
          return null;
        },
        /**
         * Get all properties in the component, optionally filtered by name.
         *
         * @param {String=} name        Lowercase property name
         * @return {ICAL.Property[]}    List of properties
         */
        getAllProperties: function(name2) {
          var jCalLen = this.jCal[PROPERTY_INDEX].length;
          var i = 0;
          if (name2) {
            var props = this.jCal[PROPERTY_INDEX];
            var result = [];
            for (; i < jCalLen; i++) {
              if (name2 === props[i][NAME_INDEX]) {
                result.push(
                  this._hydrateProperty(i)
                );
              }
            }
            return result;
          } else {
            if (!this._properties || this._hydratedPropertyCount !== jCalLen) {
              for (; i < jCalLen; i++) {
                this._hydrateProperty(i);
              }
            }
            return this._properties || [];
          }
        },
        _removeObjectByIndex: function(jCalIndex, cache, index3) {
          cache = cache || [];
          if (cache[index3]) {
            var obj = cache[index3];
            if ("parent" in obj) {
              obj.parent = null;
            }
          }
          cache.splice(index3, 1);
          this.jCal[jCalIndex].splice(index3, 1);
        },
        _removeObject: function(jCalIndex, cache, nameOrObject) {
          var i = 0;
          var objects = this.jCal[jCalIndex];
          var len = objects.length;
          var cached = this[cache];
          if (typeof nameOrObject === "string") {
            for (; i < len; i++) {
              if (objects[i][NAME_INDEX] === nameOrObject) {
                this._removeObjectByIndex(jCalIndex, cached, i);
                return true;
              }
            }
          } else if (cached) {
            for (; i < len; i++) {
              if (cached[i] && cached[i] === nameOrObject) {
                this._removeObjectByIndex(jCalIndex, cached, i);
                return true;
              }
            }
          }
          return false;
        },
        _removeAllObjects: function(jCalIndex, cache, name2) {
          var cached = this[cache];
          var objects = this.jCal[jCalIndex];
          var i = objects.length - 1;
          for (; i >= 0; i--) {
            if (!name2 || objects[i][NAME_INDEX] === name2) {
              this._removeObjectByIndex(jCalIndex, cached, i);
            }
          }
        },
        /**
         * Adds a single sub component.
         *
         * @param {ICAL.Component} component        The component to add
         * @return {ICAL.Component}                 The passed in component
         */
        addSubcomponent: function(component) {
          if (!this._components) {
            this._components = [];
            this._hydratedComponentCount = 0;
          }
          if (component.parent) {
            component.parent.removeSubcomponent(component);
          }
          var idx = this.jCal[COMPONENT_INDEX].push(component.jCal);
          this._components[idx - 1] = component;
          this._hydratedComponentCount++;
          component.parent = this;
          return component;
        },
        /**
         * Removes a single component by name or the instance of a specific
         * component.
         *
         * @param {ICAL.Component|String} nameOrComp    Name of component, or component
         * @return {Boolean}                            True when comp is removed
         */
        removeSubcomponent: function(nameOrComp) {
          var removed = this._removeObject(COMPONENT_INDEX, "_components", nameOrComp);
          if (removed) {
            this._hydratedComponentCount--;
          }
          return removed;
        },
        /**
         * Removes all components or (if given) all components by a particular
         * name.
         *
         * @param {String=} name            Lowercase component name
         */
        removeAllSubcomponents: function(name2) {
          var removed = this._removeAllObjects(COMPONENT_INDEX, "_components", name2);
          this._hydratedComponentCount = 0;
          return removed;
        },
        /**
         * Adds an {@link ICAL.Property} to the component.
         *
         * @param {ICAL.Property} property      The property to add
         * @return {ICAL.Property}              The passed in property
         */
        addProperty: function(property) {
          if (!(property instanceof ICAL.Property)) {
            throw new TypeError("must instance of ICAL.Property");
          }
          if (!this._properties) {
            this._properties = [];
            this._hydratedPropertyCount = 0;
          }
          if (property.parent) {
            property.parent.removeProperty(property);
          }
          var idx = this.jCal[PROPERTY_INDEX].push(property.jCal);
          this._properties[idx - 1] = property;
          this._hydratedPropertyCount++;
          property.parent = this;
          return property;
        },
        /**
         * Helper method to add a property with a value to the component.
         *
         * @param {String}               name         Property name to add
         * @param {String|Number|Object} value        Property value
         * @return {ICAL.Property}                    The created property
         */
        addPropertyWithValue: function(name2, value) {
          var prop = new ICAL.Property(name2);
          prop.setValue(value);
          this.addProperty(prop);
          return prop;
        },
        /**
         * Helper method that will update or create a property of the given name
         * and sets its value. If multiple properties with the given name exist,
         * only the first is updated.
         *
         * @param {String}               name         Property name to update
         * @param {String|Number|Object} value        Property value
         * @return {ICAL.Property}                    The created property
         */
        updatePropertyWithValue: function(name2, value) {
          var prop = this.getFirstProperty(name2);
          if (prop) {
            prop.setValue(value);
          } else {
            prop = this.addPropertyWithValue(name2, value);
          }
          return prop;
        },
        /**
         * Removes a single property by name or the instance of the specific
         * property.
         *
         * @param {String|ICAL.Property} nameOrProp     Property name or instance to remove
         * @return {Boolean}                            True, when deleted
         */
        removeProperty: function(nameOrProp) {
          var removed = this._removeObject(PROPERTY_INDEX, "_properties", nameOrProp);
          if (removed) {
            this._hydratedPropertyCount--;
          }
          return removed;
        },
        /**
         * Removes all properties associated with this component, optionally
         * filtered by name.
         *
         * @param {String=} name        Lowercase property name
         * @return {Boolean}            True, when deleted
         */
        removeAllProperties: function(name2) {
          var removed = this._removeAllObjects(PROPERTY_INDEX, "_properties", name2);
          this._hydratedPropertyCount = 0;
          return removed;
        },
        /**
         * Returns the Object representation of this component. The returned object
         * is a live jCal object and should be cloned if modified.
         * @return {Object}
         */
        toJSON: function() {
          return this.jCal;
        },
        /**
         * The string representation of this component.
         * @return {String}
         */
        toString: function() {
          return ICAL.stringify.component(
            this.jCal,
            this._designSet
          );
        }
      };
      Component2.fromString = function(str) {
        return new Component2(ICAL.parse.component(str));
      };
      return Component2;
    }();
    ICAL.Property = function() {
      "use strict";
      var NAME_INDEX = 0;
      var PROP_INDEX = 1;
      var TYPE_INDEX = 2;
      var VALUE_INDEX = 3;
      var design = ICAL.design;
      function Property(jCal, parent) {
        this._parent = parent || null;
        if (typeof jCal === "string") {
          this.jCal = [jCal, {}, design.defaultType];
          this.jCal[TYPE_INDEX] = this.getDefaultType();
        } else {
          this.jCal = jCal;
        }
        this._updateType();
      }
      Property.prototype = {
        /**
         * The value type for this property
         * @readonly
         * @type {String}
         */
        get type() {
          return this.jCal[TYPE_INDEX];
        },
        /**
         * The name of this property, in lowercase.
         * @readonly
         * @type {String}
         */
        get name() {
          return this.jCal[NAME_INDEX];
        },
        /**
         * The parent component for this property.
         * @type {ICAL.Component}
         */
        get parent() {
          return this._parent;
        },
        set parent(p) {
          var designSetChanged = !this._parent || p && p._designSet != this._parent._designSet;
          this._parent = p;
          if (this.type == design.defaultType && designSetChanged) {
            this.jCal[TYPE_INDEX] = this.getDefaultType();
            this._updateType();
          }
          return p;
        },
        /**
         * The design set for this property, e.g. icalendar vs vcard
         *
         * @type {ICAL.design.designSet}
         * @private
         */
        get _designSet() {
          return this.parent ? this.parent._designSet : design.defaultSet;
        },
        /**
         * Updates the type metadata from the current jCal type and design set.
         *
         * @private
         */
        _updateType: function() {
          var designSet = this._designSet;
          if (this.type in designSet.value) {
            var designType = designSet.value[this.type];
            if ("decorate" in designSet.value[this.type]) {
              this.isDecorated = true;
            } else {
              this.isDecorated = false;
            }
            if (this.name in designSet.property) {
              this.isMultiValue = "multiValue" in designSet.property[this.name];
              this.isStructuredValue = "structuredValue" in designSet.property[this.name];
            }
          }
        },
        /**
         * Hydrate a single value. The act of hydrating means turning the raw jCal
         * value into a potentially wrapped object, for example {@link ICAL.Time}.
         *
         * @private
         * @param {Number} index        The index of the value to hydrate
         * @return {Object}             The decorated value.
         */
        _hydrateValue: function(index3) {
          if (this._values && this._values[index3]) {
            return this._values[index3];
          }
          if (this.jCal.length <= VALUE_INDEX + index3) {
            return null;
          }
          if (this.isDecorated) {
            if (!this._values) {
              this._values = [];
            }
            return this._values[index3] = this._decorate(
              this.jCal[VALUE_INDEX + index3]
            );
          } else {
            return this.jCal[VALUE_INDEX + index3];
          }
        },
        /**
         * Decorate a single value, returning its wrapped object. This is used by
         * the hydrate function to actually wrap the value.
         *
         * @private
         * @param {?} value         The value to decorate
         * @return {Object}         The decorated value
         */
        _decorate: function(value) {
          return this._designSet.value[this.type].decorate(value, this);
        },
        /**
         * Undecorate a single value, returning its raw jCal data.
         *
         * @private
         * @param {Object} value         The value to undecorate
         * @return {?}                   The undecorated value
         */
        _undecorate: function(value) {
          return this._designSet.value[this.type].undecorate(value, this);
        },
        /**
         * Sets the value at the given index while also hydrating it. The passed
         * value can either be a decorated or undecorated value.
         *
         * @private
         * @param {?} value             The value to set
         * @param {Number} index        The index to set it at
         */
        _setDecoratedValue: function(value, index3) {
          if (!this._values) {
            this._values = [];
          }
          if (typeof value === "object" && "icaltype" in value) {
            this.jCal[VALUE_INDEX + index3] = this._undecorate(value);
            this._values[index3] = value;
          } else {
            this.jCal[VALUE_INDEX + index3] = value;
            this._values[index3] = this._decorate(value);
          }
        },
        /**
         * Gets a parameter on the property.
         *
         * @param {String}        name   Property name (lowercase)
         * @return {Array|String}        Property value
         */
        getParameter: function(name2) {
          if (name2 in this.jCal[PROP_INDEX]) {
            return this.jCal[PROP_INDEX][name2];
          } else {
            return void 0;
          }
        },
        /**
         * Gets first parameter on the property.
         *
         * @param {String}        name   Property name (lowercase)
         * @return {String}        Property value
         */
        getFirstParameter: function(name2) {
          var parameters = this.getParameter(name2);
          if (Array.isArray(parameters)) {
            return parameters[0];
          }
          return parameters;
        },
        /**
         * Sets a parameter on the property.
         *
         * @param {String}       name     The parameter name
         * @param {Array|String} value    The parameter value
         */
        setParameter: function(name2, value) {
          var lcname = name2.toLowerCase();
          if (typeof value === "string" && lcname in this._designSet.param && "multiValue" in this._designSet.param[lcname]) {
            value = [value];
          }
          this.jCal[PROP_INDEX][name2] = value;
        },
        /**
         * Removes a parameter
         *
         * @param {String} name     The parameter name
         */
        removeParameter: function(name2) {
          delete this.jCal[PROP_INDEX][name2];
        },
        /**
         * Get the default type based on this property's name.
         *
         * @return {String}     The default type for this property
         */
        getDefaultType: function() {
          var name2 = this.jCal[NAME_INDEX];
          var designSet = this._designSet;
          if (name2 in designSet.property) {
            var details = designSet.property[name2];
            if ("defaultType" in details) {
              return details.defaultType;
            }
          }
          return design.defaultType;
        },
        /**
         * Sets type of property and clears out any existing values of the current
         * type.
         *
         * @param {String} type     New iCAL type (see design.*.values)
         */
        resetType: function(type) {
          this.removeAllValues();
          this.jCal[TYPE_INDEX] = type;
          this._updateType();
        },
        /**
         * Finds the first property value.
         *
         * @return {String}         First property value
         */
        getFirstValue: function() {
          return this._hydrateValue(0);
        },
        /**
         * Gets all values on the property.
         *
         * NOTE: this creates an array during each call.
         *
         * @return {Array}          List of values
         */
        getValues: function() {
          var len = this.jCal.length - VALUE_INDEX;
          if (len < 1) {
            return [];
          }
          var i = 0;
          var result = [];
          for (; i < len; i++) {
            result[i] = this._hydrateValue(i);
          }
          return result;
        },
        /**
         * Removes all values from this property
         */
        removeAllValues: function() {
          if (this._values) {
            this._values.length = 0;
          }
          this.jCal.length = 3;
        },
        /**
         * Sets the values of the property.  Will overwrite the existing values.
         * This can only be used for multi-value properties.
         *
         * @param {Array} values    An array of values
         */
        setValues: function(values) {
          if (!this.isMultiValue) {
            throw new Error(
              this.name + ": does not not support mulitValue.\noverride isMultiValue"
            );
          }
          var len = values.length;
          var i = 0;
          this.removeAllValues();
          if (len > 0 && typeof values[0] === "object" && "icaltype" in values[0]) {
            this.resetType(values[0].icaltype);
          }
          if (this.isDecorated) {
            for (; i < len; i++) {
              this._setDecoratedValue(values[i], i);
            }
          } else {
            for (; i < len; i++) {
              this.jCal[VALUE_INDEX + i] = values[i];
            }
          }
        },
        /**
         * Sets the current value of the property. If this is a multi-value
         * property, all other values will be removed.
         *
         * @param {String|Object} value     New property value.
         */
        setValue: function(value) {
          this.removeAllValues();
          if (typeof value === "object" && "icaltype" in value) {
            this.resetType(value.icaltype);
          }
          if (this.isDecorated) {
            this._setDecoratedValue(value, 0);
          } else {
            this.jCal[VALUE_INDEX] = value;
          }
        },
        /**
         * Returns the Object representation of this component. The returned object
         * is a live jCal object and should be cloned if modified.
         * @return {Object}
         */
        toJSON: function() {
          return this.jCal;
        },
        /**
         * The string representation of this component.
         * @return {String}
         */
        toICALString: function() {
          return ICAL.stringify.property(
            this.jCal,
            this._designSet,
            true
          );
        }
      };
      Property.fromString = function(str, designSet) {
        return new Property(ICAL.parse.property(str, designSet));
      };
      return Property;
    }();
    ICAL.UtcOffset = function() {
      function UtcOffset(aData) {
        this.fromData(aData);
      }
      UtcOffset.prototype = {
        /**
         * The hours in the utc-offset
         * @type {Number}
         */
        hours: 0,
        /**
         * The minutes in the utc-offset
         * @type {Number}
         */
        minutes: 0,
        /**
         * The sign of the utc offset, 1 for positive offset, -1 for negative
         * offsets.
         * @type {Number}
         */
        factor: 1,
        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "utc-offset"
         */
        icaltype: "utc-offset",
        /**
         * Returns a clone of the utc offset object.
         *
         * @return {ICAL.UtcOffset}     The cloned object
         */
        clone: function() {
          return ICAL.UtcOffset.fromSeconds(this.toSeconds());
        },
        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} aData          An object with members of the utc offset
         * @param {Number=} aData.hours   The hours for the utc offset
         * @param {Number=} aData.minutes The minutes in the utc offset
         * @param {Number=} aData.factor  The factor for the utc-offset, either -1 or 1
         */
        fromData: function(aData) {
          if (aData) {
            for (var key in aData) {
              if (aData.hasOwnProperty(key)) {
                this[key] = aData[key];
              }
            }
          }
          this._normalize();
        },
        /**
         * Sets up the current instance from the given seconds value. The seconds
         * value is truncated to the minute. Offsets are wrapped when the world
         * ends, the hour after UTC+14:00 is UTC-12:00.
         *
         * @param {Number} aSeconds         The seconds to convert into an offset
         */
        fromSeconds: function(aSeconds) {
          var secs = Math.abs(aSeconds);
          this.factor = aSeconds < 0 ? -1 : 1;
          this.hours = ICAL.helpers.trunc(secs / 3600);
          secs -= this.hours * 3600;
          this.minutes = ICAL.helpers.trunc(secs / 60);
          return this;
        },
        /**
         * Convert the current offset to a value in seconds
         *
         * @return {Number}                 The offset in seconds
         */
        toSeconds: function() {
          return this.factor * (60 * this.minutes + 3600 * this.hours);
        },
        /**
         * Compare this utc offset with another one.
         *
         * @param {ICAL.UtcOffset} other        The other offset to compare with
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compare: function icaltime_compare(other) {
          var a2 = this.toSeconds();
          var b = other.toSeconds();
          return (a2 > b) - (b > a2);
        },
        _normalize: function() {
          var secs = this.toSeconds();
          var factor = this.factor;
          while (secs < -43200) {
            secs += 97200;
          }
          while (secs > 50400) {
            secs -= 97200;
          }
          this.fromSeconds(secs);
          if (secs == 0) {
            this.factor = factor;
          }
        },
        /**
         * The iCalendar string representation of this utc-offset.
         * @return {String}
         */
        toICALString: function() {
          return ICAL.design.icalendar.value["utc-offset"].toICAL(this.toString());
        },
        /**
         * The string representation of this utc-offset.
         * @return {String}
         */
        toString: function toString3() {
          return (this.factor == 1 ? "+" : "-") + ICAL.helpers.pad2(this.hours) + ":" + ICAL.helpers.pad2(this.minutes);
        }
      };
      UtcOffset.fromString = function(aString) {
        var options = {};
        options.factor = aString[0] === "+" ? 1 : -1;
        options.hours = ICAL.helpers.strictParseInt(aString.substr(1, 2));
        options.minutes = ICAL.helpers.strictParseInt(aString.substr(4, 2));
        return new ICAL.UtcOffset(options);
      };
      UtcOffset.fromSeconds = function(aSeconds) {
        var instance = new UtcOffset();
        instance.fromSeconds(aSeconds);
        return instance;
      };
      return UtcOffset;
    }();
    ICAL.Binary = function() {
      function Binary(aValue) {
        this.value = aValue;
      }
      Binary.prototype = {
        /**
         * The type name, to be used in the jCal object.
         * @default "binary"
         * @constant
         */
        icaltype: "binary",
        /**
         * Base64 decode the current value
         *
         * @return {String}         The base64-decoded value
         */
        decodeValue: function decodeValue() {
          return this._b64_decode(this.value);
        },
        /**
         * Encodes the passed parameter with base64 and sets the internal
         * value to the result.
         *
         * @param {String} aValue      The raw binary value to encode
         */
        setEncodedValue: function setEncodedValue(aValue) {
          this.value = this._b64_encode(aValue);
        },
        _b64_encode: function base64_encode(data) {
          var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = "", tmp_arr = [];
          if (!data) {
            return data;
          }
          do {
            o1 = data.charCodeAt(i++);
            o2 = data.charCodeAt(i++);
            o3 = data.charCodeAt(i++);
            bits = o1 << 16 | o2 << 8 | o3;
            h1 = bits >> 18 & 63;
            h2 = bits >> 12 & 63;
            h3 = bits >> 6 & 63;
            h4 = bits & 63;
            tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
          } while (i < data.length);
          enc = tmp_arr.join("");
          var r = data.length % 3;
          return (r ? enc.slice(0, r - 3) : enc) + "===".slice(r || 3);
        },
        _b64_decode: function base64_decode(data) {
          var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, dec = "", tmp_arr = [];
          if (!data) {
            return data;
          }
          data += "";
          do {
            h1 = b64.indexOf(data.charAt(i++));
            h2 = b64.indexOf(data.charAt(i++));
            h3 = b64.indexOf(data.charAt(i++));
            h4 = b64.indexOf(data.charAt(i++));
            bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
            o1 = bits >> 16 & 255;
            o2 = bits >> 8 & 255;
            o3 = bits & 255;
            if (h3 == 64) {
              tmp_arr[ac++] = String.fromCharCode(o1);
            } else if (h4 == 64) {
              tmp_arr[ac++] = String.fromCharCode(o1, o2);
            } else {
              tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
            }
          } while (i < data.length);
          dec = tmp_arr.join("");
          return dec;
        },
        /**
         * The string representation of this value
         * @return {String}
         */
        toString: function() {
          return this.value;
        }
      };
      Binary.fromString = function(aString) {
        return new Binary(aString);
      };
      return Binary;
    }();
    (function() {
      ICAL.Period = function icalperiod(aData) {
        this.wrappedJSObject = this;
        if (aData && "start" in aData) {
          if (aData.start && !(aData.start instanceof ICAL.Time)) {
            throw new TypeError(".start must be an instance of ICAL.Time");
          }
          this.start = aData.start;
        }
        if (aData && aData.end && aData.duration) {
          throw new Error("cannot accept both end and duration");
        }
        if (aData && "end" in aData) {
          if (aData.end && !(aData.end instanceof ICAL.Time)) {
            throw new TypeError(".end must be an instance of ICAL.Time");
          }
          this.end = aData.end;
        }
        if (aData && "duration" in aData) {
          if (aData.duration && !(aData.duration instanceof ICAL.Duration)) {
            throw new TypeError(".duration must be an instance of ICAL.Duration");
          }
          this.duration = aData.duration;
        }
      };
      ICAL.Period.prototype = {
        /**
         * The start of the period
         * @type {ICAL.Time}
         */
        start: null,
        /**
         * The end of the period
         * @type {ICAL.Time}
         */
        end: null,
        /**
         * The duration of the period
         * @type {ICAL.Duration}
         */
        duration: null,
        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icalperiod"
         */
        icalclass: "icalperiod",
        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "period"
         */
        icaltype: "period",
        /**
         * Returns a clone of the duration object.
         *
         * @return {ICAL.Period}      The cloned object
         */
        clone: function() {
          return ICAL.Period.fromData({
            start: this.start ? this.start.clone() : null,
            end: this.end ? this.end.clone() : null,
            duration: this.duration ? this.duration.clone() : null
          });
        },
        /**
         * Calculates the duration of the period, either directly or by subtracting
         * start from end date.
         *
         * @return {ICAL.Duration}      The calculated duration
         */
        getDuration: function duration() {
          if (this.duration) {
            return this.duration;
          } else {
            return this.end.subtractDate(this.start);
          }
        },
        /**
         * Calculates the end date of the period, either directly or by adding
         * duration to start date.
         *
         * @return {ICAL.Time}          The calculated end date
         */
        getEnd: function() {
          if (this.end) {
            return this.end;
          } else {
            var end = this.start.clone();
            end.addDuration(this.duration);
            return end;
          }
        },
        /**
         * The string representation of this period.
         * @return {String}
         */
        toString: function toString3() {
          return this.start + "/" + (this.end || this.duration);
        },
        /**
         * The jCal representation of this period type.
         * @return {Object}
         */
        toJSON: function() {
          return [this.start.toString(), (this.end || this.duration).toString()];
        },
        /**
         * The iCalendar string representation of this period.
         * @return {String}
         */
        toICALString: function() {
          return this.start.toICALString() + "/" + (this.end || this.duration).toICALString();
        }
      };
      ICAL.Period.fromString = function fromString(str, prop) {
        var parts = str.split("/");
        if (parts.length !== 2) {
          throw new Error(
            'Invalid string value: "' + str + '" must contain a "/" char.'
          );
        }
        var options = {
          start: ICAL.Time.fromDateTimeString(parts[0], prop)
        };
        var end = parts[1];
        if (ICAL.Duration.isValueString(end)) {
          options.duration = ICAL.Duration.fromString(end);
        } else {
          options.end = ICAL.Time.fromDateTimeString(end, prop);
        }
        return new ICAL.Period(options);
      };
      ICAL.Period.fromData = function fromData(aData) {
        return new ICAL.Period(aData);
      };
      ICAL.Period.fromJSON = function(aData, aProp, aLenient) {
        function fromDateOrDateTimeString(aValue, aProp2) {
          if (aLenient) {
            return ICAL.Time.fromString(aValue, aProp2);
          } else {
            return ICAL.Time.fromDateTimeString(aValue, aProp2);
          }
        }
        if (ICAL.Duration.isValueString(aData[1])) {
          return ICAL.Period.fromData({
            start: fromDateOrDateTimeString(aData[0], aProp),
            duration: ICAL.Duration.fromString(aData[1])
          });
        } else {
          return ICAL.Period.fromData({
            start: fromDateOrDateTimeString(aData[0], aProp),
            end: fromDateOrDateTimeString(aData[1], aProp)
          });
        }
      };
    })();
    (function() {
      var DURATION_LETTERS = /([PDWHMTS]{1,1})/;
      ICAL.Duration = function icalduration(data) {
        this.wrappedJSObject = this;
        this.fromData(data);
      };
      ICAL.Duration.prototype = {
        /**
         * The weeks in this duration
         * @type {Number}
         * @default 0
         */
        weeks: 0,
        /**
         * The days in this duration
         * @type {Number}
         * @default 0
         */
        days: 0,
        /**
         * The days in this duration
         * @type {Number}
         * @default 0
         */
        hours: 0,
        /**
         * The minutes in this duration
         * @type {Number}
         * @default 0
         */
        minutes: 0,
        /**
         * The seconds in this duration
         * @type {Number}
         * @default 0
         */
        seconds: 0,
        /**
         * The seconds in this duration
         * @type {Boolean}
         * @default false
         */
        isNegative: false,
        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icalduration"
         */
        icalclass: "icalduration",
        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "duration"
         */
        icaltype: "duration",
        /**
         * Returns a clone of the duration object.
         *
         * @return {ICAL.Duration}      The cloned object
         */
        clone: function clone() {
          return ICAL.Duration.fromData(this);
        },
        /**
         * The duration value expressed as a number of seconds.
         *
         * @return {Number}             The duration value in seconds
         */
        toSeconds: function toSeconds() {
          var seconds = this.seconds + 60 * this.minutes + 3600 * this.hours + 86400 * this.days + 7 * 86400 * this.weeks;
          return this.isNegative ? -seconds : seconds;
        },
        /**
         * Reads the passed seconds value into this duration object. Afterwards,
         * members like {@link ICAL.Duration#days days} and {@link ICAL.Duration#weeks weeks} will be set up
         * accordingly.
         *
         * @param {Number} aSeconds     The duration value in seconds
         * @return {ICAL.Duration}      Returns this instance
         */
        fromSeconds: function fromSeconds(aSeconds) {
          var secs = Math.abs(aSeconds);
          this.isNegative = aSeconds < 0;
          this.days = ICAL.helpers.trunc(secs / 86400);
          if (this.days % 7 == 0) {
            this.weeks = this.days / 7;
            this.days = 0;
          } else {
            this.weeks = 0;
          }
          secs -= (this.days + 7 * this.weeks) * 86400;
          this.hours = ICAL.helpers.trunc(secs / 3600);
          secs -= this.hours * 3600;
          this.minutes = ICAL.helpers.trunc(secs / 60);
          secs -= this.minutes * 60;
          this.seconds = secs;
          return this;
        },
        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} aData               An object with members of the duration
         * @param {Number} aData.weeks         Duration in weeks
         * @param {Number} aData.days          Duration in days
         * @param {Number} aData.hours         Duration in hours
         * @param {Number} aData.minutes       Duration in minutes
         * @param {Number} aData.seconds       Duration in seconds
         * @param {Boolean} aData.isNegative   If true, the duration is negative
         */
        fromData: function fromData(aData) {
          var propsToCopy = [
            "weeks",
            "days",
            "hours",
            "minutes",
            "seconds",
            "isNegative"
          ];
          for (var key in propsToCopy) {
            if (!propsToCopy.hasOwnProperty(key)) {
              continue;
            }
            var prop = propsToCopy[key];
            if (aData && prop in aData) {
              this[prop] = aData[prop];
            } else {
              this[prop] = 0;
            }
          }
        },
        /**
         * Resets the duration instance to the default values, i.e. PT0S
         */
        reset: function reset() {
          this.isNegative = false;
          this.weeks = 0;
          this.days = 0;
          this.hours = 0;
          this.minutes = 0;
          this.seconds = 0;
        },
        /**
         * Compares the duration instance with another one.
         *
         * @param {ICAL.Duration} aOther        The instance to compare with
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compare: function compare(aOther) {
          var thisSeconds = this.toSeconds();
          var otherSeconds = aOther.toSeconds();
          return (thisSeconds > otherSeconds) - (thisSeconds < otherSeconds);
        },
        /**
         * Normalizes the duration instance. For example, a duration with a value
         * of 61 seconds will be normalized to 1 minute and 1 second.
         */
        normalize: function normalize3() {
          this.fromSeconds(this.toSeconds());
        },
        /**
         * The string representation of this duration.
         * @return {String}
         */
        toString: function toString3() {
          if (this.toSeconds() == 0) {
            return "PT0S";
          } else {
            var str = "";
            if (this.isNegative) str += "-";
            str += "P";
            if (this.weeks) str += this.weeks + "W";
            if (this.days) str += this.days + "D";
            if (this.hours || this.minutes || this.seconds) {
              str += "T";
              if (this.hours) str += this.hours + "H";
              if (this.minutes) str += this.minutes + "M";
              if (this.seconds) str += this.seconds + "S";
            }
            return str;
          }
        },
        /**
         * The iCalendar string representation of this duration.
         * @return {String}
         */
        toICALString: function() {
          return this.toString();
        }
      };
      ICAL.Duration.fromSeconds = function icalduration_from_seconds(aSeconds) {
        return new ICAL.Duration().fromSeconds(aSeconds);
      };
      function parseDurationChunk(letter, number3, object) {
        var type;
        switch (letter) {
          case "P":
            if (number3 && number3 === "-") {
              object.isNegative = true;
            } else {
              object.isNegative = false;
            }
            break;
          case "D":
            type = "days";
            break;
          case "W":
            type = "weeks";
            break;
          case "H":
            type = "hours";
            break;
          case "M":
            type = "minutes";
            break;
          case "S":
            type = "seconds";
            break;
          default:
            return 0;
        }
        if (type) {
          if (!number3 && number3 !== 0) {
            throw new Error(
              'invalid duration value: Missing number before "' + letter + '"'
            );
          }
          var num = parseInt(number3, 10);
          if (ICAL.helpers.isStrictlyNaN(num)) {
            throw new Error(
              'invalid duration value: Invalid number "' + number3 + '" before "' + letter + '"'
            );
          }
          object[type] = num;
        }
        return 1;
      }
      ICAL.Duration.isValueString = function(string3) {
        return string3[0] === "P" || string3[1] === "P";
      };
      ICAL.Duration.fromString = function icalduration_from_string(aStr) {
        var pos = 0;
        var dict = /* @__PURE__ */ Object.create(null);
        var chunks = 0;
        while ((pos = aStr.search(DURATION_LETTERS)) !== -1) {
          var type = aStr[pos];
          var numeric = aStr.substr(0, pos);
          aStr = aStr.substr(pos + 1);
          chunks += parseDurationChunk(type, numeric, dict);
        }
        if (chunks < 2) {
          throw new Error(
            'invalid duration value: Not enough duration components in "' + aStr + '"'
          );
        }
        return new ICAL.Duration(dict);
      };
      ICAL.Duration.fromData = function icalduration_from_data(aData) {
        return new ICAL.Duration(aData);
      };
    })();
    (function() {
      var OPTIONS = [
        "tzid",
        "location",
        "tznames",
        "latitude",
        "longitude"
      ];
      ICAL.Timezone = function icaltimezone(data) {
        this.wrappedJSObject = this;
        this.fromData(data);
      };
      ICAL.Timezone.prototype = {
        /**
         * Timezone identifier
         * @type {String}
         */
        tzid: "",
        /**
         * Timezone location
         * @type {String}
         */
        location: "",
        /**
         * Alternative timezone name, for the string representation
         * @type {String}
         */
        tznames: "",
        /**
         * The primary latitude for the timezone.
         * @type {Number}
         */
        latitude: 0,
        /**
         * The primary longitude for the timezone.
         * @type {Number}
         */
        longitude: 0,
        /**
         * The vtimezone component for this timezone.
         * @type {ICAL.Component}
         */
        component: null,
        /**
         * The year this timezone has been expanded to. All timezone transition
         * dates until this year are known and can be used for calculation
         *
         * @private
         * @type {Number}
         */
        expandedUntilYear: 0,
        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icaltimezone"
         */
        icalclass: "icaltimezone",
        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {ICAL.Component|Object} aData options for class
         * @param {String|ICAL.Component} aData.component
         *        If aData is a simple object, then this member can be set to either a
         *        string containing the component data, or an already parsed
         *        ICAL.Component
         * @param {String} aData.tzid      The timezone identifier
         * @param {String} aData.location  The timezone locationw
         * @param {String} aData.tznames   An alternative string representation of the
         *                                  timezone
         * @param {Number} aData.latitude  The latitude of the timezone
         * @param {Number} aData.longitude The longitude of the timezone
         */
        fromData: function fromData(aData) {
          this.expandedUntilYear = 0;
          this.changes = [];
          if (aData instanceof ICAL.Component) {
            this.component = aData;
          } else {
            if (aData && "component" in aData) {
              if (typeof aData.component == "string") {
                var jCal = ICAL.parse(aData.component);
                this.component = new ICAL.Component(jCal);
              } else if (aData.component instanceof ICAL.Component) {
                this.component = aData.component;
              } else {
                this.component = null;
              }
            }
            for (var key in OPTIONS) {
              if (OPTIONS.hasOwnProperty(key)) {
                var prop = OPTIONS[key];
                if (aData && prop in aData) {
                  this[prop] = aData[prop];
                }
              }
            }
          }
          if (this.component instanceof ICAL.Component && !this.tzid) {
            this.tzid = this.component.getFirstPropertyValue("tzid");
          }
          return this;
        },
        /**
         * Finds the utcOffset the given time would occur in this timezone.
         *
         * @param {ICAL.Time} tt        The time to check for
         * @return {Number} utc offset in seconds
         */
        utcOffset: function utcOffset(tt) {
          if (this == ICAL.Timezone.utcTimezone || this == ICAL.Timezone.localTimezone) {
            return 0;
          }
          this._ensureCoverage(tt.year);
          if (!this.changes.length) {
            return 0;
          }
          var tt_change = {
            year: tt.year,
            month: tt.month,
            day: tt.day,
            hour: tt.hour,
            minute: tt.minute,
            second: tt.second
          };
          var change_num = this._findNearbyChange(tt_change);
          var change_num_to_use = -1;
          var step = 1;
          for (; ; ) {
            var change = ICAL.helpers.clone(this.changes[change_num], true);
            if (change.utcOffset < change.prevUtcOffset) {
              ICAL.Timezone.adjust_change(change, 0, 0, 0, change.utcOffset);
            } else {
              ICAL.Timezone.adjust_change(
                change,
                0,
                0,
                0,
                change.prevUtcOffset
              );
            }
            var cmp = ICAL.Timezone._compare_change_fn(tt_change, change);
            if (cmp >= 0) {
              change_num_to_use = change_num;
            } else {
              step = -1;
            }
            if (step == -1 && change_num_to_use != -1) {
              break;
            }
            change_num += step;
            if (change_num < 0) {
              return 0;
            }
            if (change_num >= this.changes.length) {
              break;
            }
          }
          var zone_change = this.changes[change_num_to_use];
          var utcOffset_change = zone_change.utcOffset - zone_change.prevUtcOffset;
          if (utcOffset_change < 0 && change_num_to_use > 0) {
            var tmp_change = ICAL.helpers.clone(zone_change, true);
            ICAL.Timezone.adjust_change(
              tmp_change,
              0,
              0,
              0,
              tmp_change.prevUtcOffset
            );
            if (ICAL.Timezone._compare_change_fn(tt_change, tmp_change) < 0) {
              var prev_zone_change = this.changes[change_num_to_use - 1];
              var want_daylight = false;
              if (zone_change.is_daylight != want_daylight && prev_zone_change.is_daylight == want_daylight) {
                zone_change = prev_zone_change;
              }
            }
          }
          return zone_change.utcOffset;
        },
        _findNearbyChange: function icaltimezone_find_nearby_change(change) {
          var idx = ICAL.helpers.binsearchInsert(
            this.changes,
            change,
            ICAL.Timezone._compare_change_fn
          );
          if (idx >= this.changes.length) {
            return this.changes.length - 1;
          }
          return idx;
        },
        _ensureCoverage: function(aYear) {
          if (ICAL.Timezone._minimumExpansionYear == -1) {
            var today = ICAL.Time.now();
            ICAL.Timezone._minimumExpansionYear = today.year;
          }
          var changesEndYear = aYear;
          if (changesEndYear < ICAL.Timezone._minimumExpansionYear) {
            changesEndYear = ICAL.Timezone._minimumExpansionYear;
          }
          changesEndYear += ICAL.Timezone.EXTRA_COVERAGE;
          if (changesEndYear > ICAL.Timezone.MAX_YEAR) {
            changesEndYear = ICAL.Timezone.MAX_YEAR;
          }
          if (!this.changes.length || this.expandedUntilYear < aYear) {
            var subcomps = this.component.getAllSubcomponents();
            var compLen = subcomps.length;
            var compIdx = 0;
            for (; compIdx < compLen; compIdx++) {
              this._expandComponent(
                subcomps[compIdx],
                changesEndYear,
                this.changes
              );
            }
            this.changes.sort(ICAL.Timezone._compare_change_fn);
            this.expandedUntilYear = changesEndYear;
          }
        },
        _expandComponent: function(aComponent, aYear, changes) {
          if (!aComponent.hasProperty("dtstart") || !aComponent.hasProperty("tzoffsetto") || !aComponent.hasProperty("tzoffsetfrom")) {
            return null;
          }
          var dtstart = aComponent.getFirstProperty("dtstart").getFirstValue();
          var change;
          function convert_tzoffset(offset) {
            return offset.factor * (offset.hours * 3600 + offset.minutes * 60);
          }
          function init_changes() {
            var changebase = {};
            changebase.is_daylight = aComponent.name == "daylight";
            changebase.utcOffset = convert_tzoffset(
              aComponent.getFirstProperty("tzoffsetto").getFirstValue()
            );
            changebase.prevUtcOffset = convert_tzoffset(
              aComponent.getFirstProperty("tzoffsetfrom").getFirstValue()
            );
            return changebase;
          }
          if (!aComponent.hasProperty("rrule") && !aComponent.hasProperty("rdate")) {
            change = init_changes();
            change.year = dtstart.year;
            change.month = dtstart.month;
            change.day = dtstart.day;
            change.hour = dtstart.hour;
            change.minute = dtstart.minute;
            change.second = dtstart.second;
            ICAL.Timezone.adjust_change(
              change,
              0,
              0,
              0,
              -change.prevUtcOffset
            );
            changes.push(change);
          } else {
            var props = aComponent.getAllProperties("rdate");
            for (var rdatekey in props) {
              if (!props.hasOwnProperty(rdatekey)) {
                continue;
              }
              var rdate = props[rdatekey];
              var time = rdate.getFirstValue();
              change = init_changes();
              change.year = time.year;
              change.month = time.month;
              change.day = time.day;
              if (time.isDate) {
                change.hour = dtstart.hour;
                change.minute = dtstart.minute;
                change.second = dtstart.second;
                if (dtstart.zone != ICAL.Timezone.utcTimezone) {
                  ICAL.Timezone.adjust_change(
                    change,
                    0,
                    0,
                    0,
                    -change.prevUtcOffset
                  );
                }
              } else {
                change.hour = time.hour;
                change.minute = time.minute;
                change.second = time.second;
                if (time.zone != ICAL.Timezone.utcTimezone) {
                  ICAL.Timezone.adjust_change(
                    change,
                    0,
                    0,
                    0,
                    -change.prevUtcOffset
                  );
                }
              }
              changes.push(change);
            }
            var rrule = aComponent.getFirstProperty("rrule");
            if (rrule) {
              rrule = rrule.getFirstValue();
              change = init_changes();
              if (rrule.until && rrule.until.zone == ICAL.Timezone.utcTimezone) {
                rrule.until.adjust(0, 0, 0, change.prevUtcOffset);
                rrule.until.zone = ICAL.Timezone.localTimezone;
              }
              var iterator = rrule.iterator(dtstart);
              var occ;
              while (occ = iterator.next()) {
                change = init_changes();
                if (occ.year > aYear || !occ) {
                  break;
                }
                change.year = occ.year;
                change.month = occ.month;
                change.day = occ.day;
                change.hour = occ.hour;
                change.minute = occ.minute;
                change.second = occ.second;
                change.isDate = occ.isDate;
                ICAL.Timezone.adjust_change(
                  change,
                  0,
                  0,
                  0,
                  -change.prevUtcOffset
                );
                changes.push(change);
              }
            }
          }
          return changes;
        },
        /**
         * The string representation of this timezone.
         * @return {String}
         */
        toString: function toString3() {
          return this.tznames ? this.tznames : this.tzid;
        }
      };
      ICAL.Timezone._compare_change_fn = function icaltimezone_compare_change_fn(a2, b) {
        if (a2.year < b.year) return -1;
        else if (a2.year > b.year) return 1;
        if (a2.month < b.month) return -1;
        else if (a2.month > b.month) return 1;
        if (a2.day < b.day) return -1;
        else if (a2.day > b.day) return 1;
        if (a2.hour < b.hour) return -1;
        else if (a2.hour > b.hour) return 1;
        if (a2.minute < b.minute) return -1;
        else if (a2.minute > b.minute) return 1;
        if (a2.second < b.second) return -1;
        else if (a2.second > b.second) return 1;
        return 0;
      };
      ICAL.Timezone.convert_time = function icaltimezone_convert_time(tt, from_zone, to_zone) {
        if (tt.isDate || from_zone.tzid == to_zone.tzid || from_zone == ICAL.Timezone.localTimezone || to_zone == ICAL.Timezone.localTimezone) {
          tt.zone = to_zone;
          return tt;
        }
        var utcOffset = from_zone.utcOffset(tt);
        tt.adjust(0, 0, 0, -utcOffset);
        utcOffset = to_zone.utcOffset(tt);
        tt.adjust(0, 0, 0, utcOffset);
        return null;
      };
      ICAL.Timezone.fromData = function icaltimezone_fromData(aData) {
        var tt = new ICAL.Timezone();
        return tt.fromData(aData);
      };
      ICAL.Timezone.utcTimezone = ICAL.Timezone.fromData({
        tzid: "UTC"
      });
      ICAL.Timezone.localTimezone = ICAL.Timezone.fromData({
        tzid: "floating"
      });
      ICAL.Timezone.adjust_change = function icaltimezone_adjust_change(change, days, hours, minutes, seconds) {
        return ICAL.Time.prototype.adjust.call(
          change,
          days,
          hours,
          minutes,
          seconds,
          change
        );
      };
      ICAL.Timezone._minimumExpansionYear = -1;
      ICAL.Timezone.MAX_YEAR = 2035;
      ICAL.Timezone.EXTRA_COVERAGE = 5;
    })();
    ICAL.TimezoneService = function() {
      var zones;
      var TimezoneService = {
        get count() {
          return Object.keys(zones).length;
        },
        reset: function() {
          zones = /* @__PURE__ */ Object.create(null);
          var utc2 = ICAL.Timezone.utcTimezone;
          zones.Z = utc2;
          zones.UTC = utc2;
          zones.GMT = utc2;
        },
        /**
         * Checks if timezone id has been registered.
         *
         * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
         * @return {Boolean}        False, when not present
         */
        has: function(tzid) {
          return !!zones[tzid];
        },
        /**
         * Returns a timezone by its tzid if present.
         *
         * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
         * @return {?ICAL.Timezone} The timezone, or null if not found
         */
        get: function(tzid) {
          return zones[tzid];
        },
        /**
         * Registers a timezone object or component.
         *
         * @param {String=} name
         *        The name of the timezone. Defaults to the component's TZID if not
         *        passed.
         * @param {ICAL.Component|ICAL.Timezone} zone
         *        The initialized zone or vtimezone.
         */
        register: function(name2, timezone2) {
          if (name2 instanceof ICAL.Component) {
            if (name2.name === "vtimezone") {
              timezone2 = new ICAL.Timezone(name2);
              name2 = timezone2.tzid;
            }
          }
          if (timezone2 instanceof ICAL.Timezone) {
            zones[name2] = timezone2;
          } else {
            throw new TypeError("timezone must be ICAL.Timezone or ICAL.Component");
          }
        },
        /**
         * Removes a timezone by its tzid from the list.
         *
         * @param {String} tzid     Timezone identifier (e.g. America/Los_Angeles)
         * @return {?ICAL.Timezone} The removed timezone, or null if not registered
         */
        remove: function(tzid) {
          return delete zones[tzid];
        }
      };
      TimezoneService.reset();
      return TimezoneService;
    }();
    (function() {
      ICAL.Time = function icaltime(data, zone) {
        this.wrappedJSObject = this;
        var time = this._time = /* @__PURE__ */ Object.create(null);
        time.year = 0;
        time.month = 1;
        time.day = 1;
        time.hour = 0;
        time.minute = 0;
        time.second = 0;
        time.isDate = false;
        this.fromData(data, zone);
      };
      ICAL.Time._dowCache = {};
      ICAL.Time._wnCache = {};
      ICAL.Time.prototype = {
        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icaltime"
         */
        icalclass: "icaltime",
        _cachedUnixTime: null,
        /**
         * The type name, to be used in the jCal object. This value may change and
         * is strictly defined by the {@link ICAL.Time#isDate isDate} member.
         * @readonly
         * @type {String}
         * @default "date-time"
         */
        get icaltype() {
          return this.isDate ? "date" : "date-time";
        },
        /**
         * The timezone for this time.
         * @type {ICAL.Timezone}
         */
        zone: null,
        /**
         * Internal uses to indicate that a change has been made and the next read
         * operation must attempt to normalize the value (for example changing the
         * day to 33).
         *
         * @type {Boolean}
         * @private
         */
        _pendingNormalization: false,
        /**
         * Returns a clone of the time object.
         *
         * @return {ICAL.Time}              The cloned object
         */
        clone: function() {
          return new ICAL.Time(this._time, this.zone);
        },
        /**
         * Reset the time instance to epoch time
         */
        reset: function icaltime_reset() {
          this.fromData(ICAL.Time.epochTime);
          this.zone = ICAL.Timezone.utcTimezone;
        },
        /**
         * Reset the time instance to the given date/time values.
         *
         * @param {Number} year             The year to set
         * @param {Number} month            The month to set
         * @param {Number} day              The day to set
         * @param {Number} hour             The hour to set
         * @param {Number} minute           The minute to set
         * @param {Number} second           The second to set
         * @param {ICAL.Timezone} timezone  The timezone to set
         */
        resetTo: function icaltime_resetTo(year, month, day, hour, minute, second, timezone2) {
          this.fromData({
            year,
            month,
            day,
            hour,
            minute,
            second,
            zone: timezone2
          });
        },
        /**
         * Set up the current instance from the Javascript date value.
         *
         * @param {?Date} aDate     The Javascript Date to read, or null to reset
         * @param {Boolean} useUTC  If true, the UTC values of the date will be used
         */
        fromJSDate: function icaltime_fromJSDate(aDate, useUTC) {
          if (!aDate) {
            this.reset();
          } else {
            if (useUTC) {
              this.zone = ICAL.Timezone.utcTimezone;
              this.year = aDate.getUTCFullYear();
              this.month = aDate.getUTCMonth() + 1;
              this.day = aDate.getUTCDate();
              this.hour = aDate.getUTCHours();
              this.minute = aDate.getUTCMinutes();
              this.second = aDate.getUTCSeconds();
            } else {
              this.zone = ICAL.Timezone.localTimezone;
              this.year = aDate.getFullYear();
              this.month = aDate.getMonth() + 1;
              this.day = aDate.getDate();
              this.hour = aDate.getHours();
              this.minute = aDate.getMinutes();
              this.second = aDate.getSeconds();
            }
          }
          this._cachedUnixTime = null;
          return this;
        },
        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} aData            Time initialization
         * @param {Number=} aData.year      The year for this date
         * @param {Number=} aData.month     The month for this date
         * @param {Number=} aData.day       The day for this date
         * @param {Number=} aData.hour      The hour for this date
         * @param {Number=} aData.minute    The minute for this date
         * @param {Number=} aData.second    The second for this date
         * @param {Boolean=} aData.isDate   If true, the instance represents a date
         *                                    (as opposed to a date-time)
         * @param {ICAL.Timezone=} aZone    Timezone this position occurs in
         */
        fromData: function fromData(aData, aZone) {
          if (aData) {
            for (var key in aData) {
              if (Object.prototype.hasOwnProperty.call(aData, key)) {
                if (key === "icaltype") continue;
                this[key] = aData[key];
              }
            }
          }
          if (aZone) {
            this.zone = aZone;
          }
          if (aData && !("isDate" in aData)) {
            this.isDate = !("hour" in aData);
          } else if (aData && "isDate" in aData) {
            this.isDate = aData.isDate;
          }
          if (aData && "timezone" in aData) {
            var zone = ICAL.TimezoneService.get(
              aData.timezone
            );
            this.zone = zone || ICAL.Timezone.localTimezone;
          }
          if (aData && "zone" in aData) {
            this.zone = aData.zone;
          }
          if (!this.zone) {
            this.zone = ICAL.Timezone.localTimezone;
          }
          this._cachedUnixTime = null;
          return this;
        },
        /**
         * Calculate the day of week.
         * @param {ICAL.Time.weekDay=} aWeekStart
         *        The week start weekday, defaults to SUNDAY
         * @return {ICAL.Time.weekDay}
         */
        dayOfWeek: function icaltime_dayOfWeek(aWeekStart) {
          var firstDow = aWeekStart || ICAL.Time.SUNDAY;
          var dowCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + firstDow;
          if (dowCacheKey in ICAL.Time._dowCache) {
            return ICAL.Time._dowCache[dowCacheKey];
          }
          var q = this.day;
          var m = this.month + (this.month < 3 ? 12 : 0);
          var Y = this.year - (this.month < 3 ? 1 : 0);
          var h2 = q + Y + ICAL.helpers.trunc((m + 1) * 26 / 10) + ICAL.helpers.trunc(Y / 4);
          if (true) {
            h2 += ICAL.helpers.trunc(Y / 100) * 6 + ICAL.helpers.trunc(Y / 400);
          } else {
            h2 += 5;
          }
          h2 = (h2 + 7 - firstDow) % 7 + 1;
          ICAL.Time._dowCache[dowCacheKey] = h2;
          return h2;
        },
        /**
         * Calculate the day of year.
         * @return {Number}
         */
        dayOfYear: function dayOfYear() {
          var is_leap = ICAL.Time.isLeapYear(this.year) ? 1 : 0;
          var diypm = ICAL.Time.daysInYearPassedMonth;
          return diypm[is_leap][this.month - 1] + this.day;
        },
        /**
         * Returns a copy of the current date/time, rewound to the start of the
         * week. The resulting ICAL.Time instance is of icaltype date, even if this
         * is a date-time.
         *
         * @param {ICAL.Time.weekDay=} aWeekStart
         *        The week start weekday, defaults to SUNDAY
         * @return {ICAL.Time}      The start of the week (cloned)
         */
        startOfWeek: function startOfWeek(aWeekStart) {
          var firstDow = aWeekStart || ICAL.Time.SUNDAY;
          var result = this.clone();
          result.day -= (this.dayOfWeek() + 7 - firstDow) % 7;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },
        /**
         * Returns a copy of the current date/time, shifted to the end of the week.
         * The resulting ICAL.Time instance is of icaltype date, even if this is a
         * date-time.
         *
         * @param {ICAL.Time.weekDay=} aWeekStart
         *        The week start weekday, defaults to SUNDAY
         * @return {ICAL.Time}      The end of the week (cloned)
         */
        endOfWeek: function endOfWeek(aWeekStart) {
          var firstDow = aWeekStart || ICAL.Time.SUNDAY;
          var result = this.clone();
          result.day += (7 - this.dayOfWeek() + firstDow - ICAL.Time.SUNDAY) % 7;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },
        /**
         * Returns a copy of the current date/time, rewound to the start of the
         * month. The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The start of the month (cloned)
         */
        startOfMonth: function startOfMonth() {
          var result = this.clone();
          result.day = 1;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },
        /**
         * Returns a copy of the current date/time, shifted to the end of the
         * month.  The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The end of the month (cloned)
         */
        endOfMonth: function endOfMonth() {
          var result = this.clone();
          result.day = ICAL.Time.daysInMonth(result.month, result.year);
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },
        /**
         * Returns a copy of the current date/time, rewound to the start of the
         * year. The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The start of the year (cloned)
         */
        startOfYear: function startOfYear() {
          var result = this.clone();
          result.day = 1;
          result.month = 1;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },
        /**
         * Returns a copy of the current date/time, shifted to the end of the
         * year.  The resulting ICAL.Time instance is of icaltype date, even if
         * this is a date-time.
         *
         * @return {ICAL.Time}      The end of the year (cloned)
         */
        endOfYear: function endOfYear() {
          var result = this.clone();
          result.day = 31;
          result.month = 12;
          result.isDate = true;
          result.hour = 0;
          result.minute = 0;
          result.second = 0;
          return result;
        },
        /**
         * First calculates the start of the week, then returns the day of year for
         * this date. If the day falls into the previous year, the day is zero or negative.
         *
         * @param {ICAL.Time.weekDay=} aFirstDayOfWeek
         *        The week start weekday, defaults to SUNDAY
         * @return {Number}     The calculated day of year
         */
        startDoyWeek: function startDoyWeek(aFirstDayOfWeek) {
          var firstDow = aFirstDayOfWeek || ICAL.Time.SUNDAY;
          var delta = this.dayOfWeek() - firstDow;
          if (delta < 0) delta += 7;
          return this.dayOfYear() - delta;
        },
        /**
         * Get the dominical letter for the current year. Letters range from A - G
         * for common years, and AG to GF for leap years.
         *
         * @param {Number} yr           The year to retrieve the letter for
         * @return {String}             The dominical letter.
         */
        getDominicalLetter: function() {
          return ICAL.Time.getDominicalLetter(this.year);
        },
        /**
         * Finds the nthWeekDay relative to the current month (not day).  The
         * returned value is a day relative the month that this month belongs to so
         * 1 would indicate the first of the month and 40 would indicate a day in
         * the following month.
         *
         * @param {Number} aDayOfWeek   Day of the week see the day name constants
         * @param {Number} aPos         Nth occurrence of a given week day values
         *        of 1 and 0 both indicate the first weekday of that type. aPos may
         *        be either positive or negative
         *
         * @return {Number} numeric value indicating a day relative
         *                   to the current month of this time object
         */
        nthWeekDay: function icaltime_nthWeekDay(aDayOfWeek, aPos) {
          var daysInMonth = ICAL.Time.daysInMonth(this.month, this.year);
          var weekday;
          var pos = aPos;
          var start2 = 0;
          var otherDay = this.clone();
          if (pos >= 0) {
            otherDay.day = 1;
            if (pos != 0) {
              pos--;
            }
            start2 = otherDay.day;
            var startDow = otherDay.dayOfWeek();
            var offset = aDayOfWeek - startDow;
            if (offset < 0)
              offset += 7;
            start2 += offset;
            start2 -= aDayOfWeek;
            weekday = aDayOfWeek;
          } else {
            otherDay.day = daysInMonth;
            var endDow = otherDay.dayOfWeek();
            pos++;
            weekday = endDow - aDayOfWeek;
            if (weekday < 0) {
              weekday += 7;
            }
            weekday = daysInMonth - weekday;
          }
          weekday += pos * 7;
          return start2 + weekday;
        },
        /**
         * Checks if current time is the nth weekday, relative to the current
         * month.  Will always return false when rule resolves outside of current
         * month.
         *
         * @param {ICAL.Time.weekDay} aDayOfWeek       Day of week to check
         * @param {Number} aPos                        Relative position
         * @return {Boolean}                           True, if its the nth weekday
         */
        isNthWeekDay: function(aDayOfWeek, aPos) {
          var dow = this.dayOfWeek();
          if (aPos === 0 && dow === aDayOfWeek) {
            return true;
          }
          var day = this.nthWeekDay(aDayOfWeek, aPos);
          if (day === this.day) {
            return true;
          }
          return false;
        },
        /**
         * Calculates the ISO 8601 week number. The first week of a year is the
         * week that contains the first Thursday. The year can have 53 weeks, if
         * January 1st is a Friday.
         *
         * Note there are regions where the first week of the year is the one that
         * starts on January 1st, which may offset the week number. Also, if a
         * different week start is specified, this will also affect the week
         * number.
         *
         * @see ICAL.Time.weekOneStarts
         * @param {ICAL.Time.weekDay} aWeekStart        The weekday the week starts with
         * @return {Number}                             The ISO week number
         */
        weekNumber: function weekNumber(aWeekStart) {
          var wnCacheKey = (this.year << 12) + (this.month << 8) + (this.day << 3) + aWeekStart;
          if (wnCacheKey in ICAL.Time._wnCache) {
            return ICAL.Time._wnCache[wnCacheKey];
          }
          var week1;
          var dt = this.clone();
          dt.isDate = true;
          var isoyear = this.year;
          if (dt.month == 12 && dt.day > 25) {
            week1 = ICAL.Time.weekOneStarts(isoyear + 1, aWeekStart);
            if (dt.compare(week1) < 0) {
              week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
            } else {
              isoyear++;
            }
          } else {
            week1 = ICAL.Time.weekOneStarts(isoyear, aWeekStart);
            if (dt.compare(week1) < 0) {
              week1 = ICAL.Time.weekOneStarts(--isoyear, aWeekStart);
            }
          }
          var daysBetween = dt.subtractDate(week1).toSeconds() / 86400;
          var answer = ICAL.helpers.trunc(daysBetween / 7) + 1;
          ICAL.Time._wnCache[wnCacheKey] = answer;
          return answer;
        },
        /**
         * Adds the duration to the current time. The instance is modified in
         * place.
         *
         * @param {ICAL.Duration} aDuration         The duration to add
         */
        addDuration: function icaltime_add(aDuration) {
          var mult = aDuration.isNegative ? -1 : 1;
          var second = this.second;
          var minute = this.minute;
          var hour = this.hour;
          var day = this.day;
          second += mult * aDuration.seconds;
          minute += mult * aDuration.minutes;
          hour += mult * aDuration.hours;
          day += mult * aDuration.days;
          day += mult * 7 * aDuration.weeks;
          this.second = second;
          this.minute = minute;
          this.hour = hour;
          this.day = day;
          this._cachedUnixTime = null;
        },
        /**
         * Subtract the date details (_excluding_ timezone).  Useful for finding
         * the relative difference between two time objects excluding their
         * timezone differences.
         *
         * @param {ICAL.Time} aDate     The date to substract
         * @return {ICAL.Duration}      The difference as a duration
         */
        subtractDate: function icaltime_subtract(aDate) {
          var unixTime = this.toUnixTime() + this.utcOffset();
          var other = aDate.toUnixTime() + aDate.utcOffset();
          return ICAL.Duration.fromSeconds(unixTime - other);
        },
        /**
         * Subtract the date details, taking timezones into account.
         *
         * @param {ICAL.Time} aDate  The date to subtract
         * @return {ICAL.Duration}  The difference in duration
         */
        subtractDateTz: function icaltime_subtract_abs(aDate) {
          var unixTime = this.toUnixTime();
          var other = aDate.toUnixTime();
          return ICAL.Duration.fromSeconds(unixTime - other);
        },
        /**
         * Compares the ICAL.Time instance with another one.
         *
         * @param {ICAL.Duration} aOther        The instance to compare with
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compare: function icaltime_compare(other) {
          var a2 = this.toUnixTime();
          var b = other.toUnixTime();
          if (a2 > b) return 1;
          if (b > a2) return -1;
          return 0;
        },
        /**
         * Compares only the date part of this instance with another one.
         *
         * @param {ICAL.Duration} other         The instance to compare with
         * @param {ICAL.Timezone} tz            The timezone to compare in
         * @return {Number}                     -1, 0 or 1 for less/equal/greater
         */
        compareDateOnlyTz: function icaltime_compareDateOnlyTz(other, tz) {
          function cmp(attr) {
            return ICAL.Time._cmp_attr(a2, b, attr);
          }
          var a2 = this.convertToZone(tz);
          var b = other.convertToZone(tz);
          var rc = 0;
          if ((rc = cmp("year")) != 0) return rc;
          if ((rc = cmp("month")) != 0) return rc;
          if ((rc = cmp("day")) != 0) return rc;
          return rc;
        },
        /**
         * Convert the instance into another timzone. The returned ICAL.Time
         * instance is always a copy.
         *
         * @param {ICAL.Timezone} zone      The zone to convert to
         * @return {ICAL.Time}              The copy, converted to the zone
         */
        convertToZone: function convertToZone(zone) {
          var copy = this.clone();
          var zone_equals = this.zone.tzid == zone.tzid;
          if (!this.isDate && !zone_equals) {
            ICAL.Timezone.convert_time(copy, this.zone, zone);
          }
          copy.zone = zone;
          return copy;
        },
        /**
         * Calculates the UTC offset of the current date/time in the timezone it is
         * in.
         *
         * @return {Number}     UTC offset in seconds
         */
        utcOffset: function utc_offset() {
          if (this.zone == ICAL.Timezone.localTimezone || this.zone == ICAL.Timezone.utcTimezone) {
            return 0;
          } else {
            return this.zone.utcOffset(this);
          }
        },
        /**
         * Returns an RFC 5545 compliant ical representation of this object.
         *
         * @return {String} ical date/date-time
         */
        toICALString: function() {
          var string3 = this.toString();
          if (string3.length > 10) {
            return ICAL.design.icalendar.value["date-time"].toICAL(string3);
          } else {
            return ICAL.design.icalendar.value.date.toICAL(string3);
          }
        },
        /**
         * The string representation of this date/time, in jCal form
         * (including : and - separators).
         * @return {String}
         */
        toString: function toString3() {
          var result = this.year + "-" + ICAL.helpers.pad2(this.month) + "-" + ICAL.helpers.pad2(this.day);
          if (!this.isDate) {
            result += "T" + ICAL.helpers.pad2(this.hour) + ":" + ICAL.helpers.pad2(this.minute) + ":" + ICAL.helpers.pad2(this.second);
            if (this.zone === ICAL.Timezone.utcTimezone) {
              result += "Z";
            }
          }
          return result;
        },
        /**
         * Converts the current instance to a Javascript date
         * @return {Date}
         */
        toJSDate: function toJSDate() {
          if (this.zone == ICAL.Timezone.localTimezone) {
            if (this.isDate) {
              return new Date(this.year, this.month - 1, this.day);
            } else {
              return new Date(
                this.year,
                this.month - 1,
                this.day,
                this.hour,
                this.minute,
                this.second,
                0
              );
            }
          } else {
            return new Date(this.toUnixTime() * 1e3);
          }
        },
        _normalize: function icaltime_normalize() {
          var isDate2 = this._time.isDate;
          if (this._time.isDate) {
            this._time.hour = 0;
            this._time.minute = 0;
            this._time.second = 0;
          }
          this.adjust(0, 0, 0, 0);
          return this;
        },
        /**
         * Adjust the date/time by the given offset
         *
         * @param {Number} aExtraDays       The extra amount of days
         * @param {Number} aExtraHours      The extra amount of hours
         * @param {Number} aExtraMinutes    The extra amount of minutes
         * @param {Number} aExtraSeconds    The extra amount of seconds
         * @param {Number=} aTime           The time to adjust, defaults to the
         *                                    current instance.
         */
        adjust: function icaltime_adjust(aExtraDays, aExtraHours, aExtraMinutes, aExtraSeconds, aTime) {
          var minutesOverflow, hoursOverflow, daysOverflow = 0, yearsOverflow = 0;
          var second, minute, hour, day;
          var daysInMonth;
          var time = aTime || this._time;
          if (!time.isDate) {
            second = time.second + aExtraSeconds;
            time.second = second % 60;
            minutesOverflow = ICAL.helpers.trunc(second / 60);
            if (time.second < 0) {
              time.second += 60;
              minutesOverflow--;
            }
            minute = time.minute + aExtraMinutes + minutesOverflow;
            time.minute = minute % 60;
            hoursOverflow = ICAL.helpers.trunc(minute / 60);
            if (time.minute < 0) {
              time.minute += 60;
              hoursOverflow--;
            }
            hour = time.hour + aExtraHours + hoursOverflow;
            time.hour = hour % 24;
            daysOverflow = ICAL.helpers.trunc(hour / 24);
            if (time.hour < 0) {
              time.hour += 24;
              daysOverflow--;
            }
          }
          if (time.month > 12) {
            yearsOverflow = ICAL.helpers.trunc((time.month - 1) / 12);
          } else if (time.month < 1) {
            yearsOverflow = ICAL.helpers.trunc(time.month / 12) - 1;
          }
          time.year += yearsOverflow;
          time.month -= 12 * yearsOverflow;
          day = time.day + aExtraDays + daysOverflow;
          if (day > 0) {
            for (; ; ) {
              daysInMonth = ICAL.Time.daysInMonth(time.month, time.year);
              if (day <= daysInMonth) {
                break;
              }
              time.month++;
              if (time.month > 12) {
                time.year++;
                time.month = 1;
              }
              day -= daysInMonth;
            }
          } else {
            while (day <= 0) {
              if (time.month == 1) {
                time.year--;
                time.month = 12;
              } else {
                time.month--;
              }
              day += ICAL.Time.daysInMonth(time.month, time.year);
            }
          }
          time.day = day;
          this._cachedUnixTime = null;
          return this;
        },
        /**
         * Sets up the current instance from unix time, the number of seconds since
         * January 1st, 1970.
         *
         * @param {Number} seconds      The seconds to set up with
         */
        fromUnixTime: function fromUnixTime(seconds) {
          this.zone = ICAL.Timezone.utcTimezone;
          var epoch = ICAL.Time.epochTime.clone();
          epoch.adjust(0, 0, 0, seconds);
          this.year = epoch.year;
          this.month = epoch.month;
          this.day = epoch.day;
          this.hour = epoch.hour;
          this.minute = epoch.minute;
          this.second = Math.floor(epoch.second);
          this._cachedUnixTime = null;
        },
        /**
         * Converts the current instance to seconds since January 1st 1970.
         *
         * @return {Number}         Seconds since 1970
         */
        toUnixTime: function toUnixTime() {
          if (this._cachedUnixTime !== null) {
            return this._cachedUnixTime;
          }
          var offset = this.utcOffset();
          var ms = Date.UTC(
            this.year,
            this.month - 1,
            this.day,
            this.hour,
            this.minute,
            this.second - offset
          );
          this._cachedUnixTime = ms / 1e3;
          return this._cachedUnixTime;
        },
        /**
         * Converts time to into Object which can be serialized then re-created
         * using the constructor.
         *
         * @example
         * // toJSON will automatically be called
         * var json = JSON.stringify(mytime);
         *
         * var deserialized = JSON.parse(json);
         *
         * var time = new ICAL.Time(deserialized);
         *
         * @return {Object}
         */
        toJSON: function() {
          var copy = [
            "year",
            "month",
            "day",
            "hour",
            "minute",
            "second",
            "isDate"
          ];
          var result = /* @__PURE__ */ Object.create(null);
          var i = 0;
          var len = copy.length;
          var prop;
          for (; i < len; i++) {
            prop = copy[i];
            result[prop] = this[prop];
          }
          if (this.zone) {
            result.timezone = this.zone.tzid;
          }
          return result;
        }
      };
      (function setupNormalizeAttributes() {
        function defineAttr(attr) {
          Object.defineProperty(ICAL.Time.prototype, attr, {
            get: function getTimeAttr() {
              if (this._pendingNormalization) {
                this._normalize();
                this._pendingNormalization = false;
              }
              return this._time[attr];
            },
            set: function setTimeAttr(val) {
              if (attr === "isDate" && val && !this._time.isDate) {
                this.adjust(0, 0, 0, 0);
              }
              this._cachedUnixTime = null;
              this._pendingNormalization = true;
              this._time[attr] = val;
              return val;
            }
          });
        }
        if ("defineProperty" in Object) {
          defineAttr("year");
          defineAttr("month");
          defineAttr("day");
          defineAttr("hour");
          defineAttr("minute");
          defineAttr("second");
          defineAttr("isDate");
        }
      })();
      ICAL.Time.daysInMonth = function icaltime_daysInMonth(month, year) {
        var _daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        var days = 30;
        if (month < 1 || month > 12) return days;
        days = _daysInMonth[month];
        if (month == 2) {
          days += ICAL.Time.isLeapYear(year);
        }
        return days;
      };
      ICAL.Time.isLeapYear = function isLeapYear(year) {
        if (year <= 1752) {
          return year % 4 == 0;
        } else {
          return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
        }
      };
      ICAL.Time.fromDayOfYear = function icaltime_fromDayOfYear(aDayOfYear, aYear) {
        var year = aYear;
        var doy = aDayOfYear;
        var tt = new ICAL.Time();
        tt.auto_normalize = false;
        var is_leap = ICAL.Time.isLeapYear(year) ? 1 : 0;
        if (doy < 1) {
          year--;
          is_leap = ICAL.Time.isLeapYear(year) ? 1 : 0;
          doy += ICAL.Time.daysInYearPassedMonth[is_leap][12];
          return ICAL.Time.fromDayOfYear(doy, year);
        } else if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][12]) {
          is_leap = ICAL.Time.isLeapYear(year) ? 1 : 0;
          doy -= ICAL.Time.daysInYearPassedMonth[is_leap][12];
          year++;
          return ICAL.Time.fromDayOfYear(doy, year);
        }
        tt.year = year;
        tt.isDate = true;
        for (var month = 11; month >= 0; month--) {
          if (doy > ICAL.Time.daysInYearPassedMonth[is_leap][month]) {
            tt.month = month + 1;
            tt.day = doy - ICAL.Time.daysInYearPassedMonth[is_leap][month];
            break;
          }
        }
        tt.auto_normalize = true;
        return tt;
      };
      ICAL.Time.fromStringv2 = function fromString(str) {
        return new ICAL.Time({
          year: parseInt(str.substr(0, 4), 10),
          month: parseInt(str.substr(5, 2), 10),
          day: parseInt(str.substr(8, 2), 10),
          isDate: true
        });
      };
      ICAL.Time.fromDateString = function(aValue) {
        return new ICAL.Time({
          year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
          month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
          day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
          isDate: true
        });
      };
      ICAL.Time.fromDateTimeString = function(aValue, prop) {
        if (aValue.length < 19) {
          throw new Error(
            'invalid date-time value: "' + aValue + '"'
          );
        }
        var zone;
        if (aValue[19] && aValue[19] === "Z") {
          zone = "Z";
        } else if (prop) {
          zone = prop.getParameter("tzid");
        }
        var time = new ICAL.Time({
          year: ICAL.helpers.strictParseInt(aValue.substr(0, 4)),
          month: ICAL.helpers.strictParseInt(aValue.substr(5, 2)),
          day: ICAL.helpers.strictParseInt(aValue.substr(8, 2)),
          hour: ICAL.helpers.strictParseInt(aValue.substr(11, 2)),
          minute: ICAL.helpers.strictParseInt(aValue.substr(14, 2)),
          second: ICAL.helpers.strictParseInt(aValue.substr(17, 2)),
          timezone: zone
        });
        return time;
      };
      ICAL.Time.fromString = function fromString(aValue, aProperty) {
        if (aValue.length > 10) {
          return ICAL.Time.fromDateTimeString(aValue, aProperty);
        } else {
          return ICAL.Time.fromDateString(aValue);
        }
      };
      ICAL.Time.fromJSDate = function fromJSDate(aDate, useUTC) {
        var tt = new ICAL.Time();
        return tt.fromJSDate(aDate, useUTC);
      };
      ICAL.Time.fromData = function fromData(aData, aZone) {
        var t2 = new ICAL.Time();
        return t2.fromData(aData, aZone);
      };
      ICAL.Time.now = function icaltime_now() {
        return ICAL.Time.fromJSDate(/* @__PURE__ */ new Date(), false);
      };
      ICAL.Time.weekOneStarts = function weekOneStarts(aYear, aWeekStart) {
        var t2 = ICAL.Time.fromData({
          year: aYear,
          month: 1,
          day: 1,
          isDate: true
        });
        var dow = t2.dayOfWeek();
        var wkst = aWeekStart || ICAL.Time.DEFAULT_WEEK_START;
        if (dow > ICAL.Time.THURSDAY) {
          t2.day += 7;
        }
        if (wkst > ICAL.Time.THURSDAY) {
          t2.day -= 7;
        }
        t2.day -= dow - wkst;
        return t2;
      };
      ICAL.Time.getDominicalLetter = function(yr) {
        var LTRS = "GFEDCBA";
        var dom = (yr + (yr / 4 | 0) + (yr / 400 | 0) - (yr / 100 | 0) - 1) % 7;
        var isLeap = ICAL.Time.isLeapYear(yr);
        if (isLeap) {
          return LTRS[(dom + 6) % 7] + LTRS[dom];
        } else {
          return LTRS[dom];
        }
      };
      ICAL.Time.epochTime = ICAL.Time.fromData({
        year: 1970,
        month: 1,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        isDate: false,
        timezone: "Z"
      });
      ICAL.Time._cmp_attr = function _cmp_attr(a2, b, attr) {
        if (a2[attr] > b[attr]) return 1;
        if (a2[attr] < b[attr]) return -1;
        return 0;
      };
      ICAL.Time.daysInYearPassedMonth = [
        [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],
        [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366]
      ];
      ICAL.Time.SUNDAY = 1;
      ICAL.Time.MONDAY = 2;
      ICAL.Time.TUESDAY = 3;
      ICAL.Time.WEDNESDAY = 4;
      ICAL.Time.THURSDAY = 5;
      ICAL.Time.FRIDAY = 6;
      ICAL.Time.SATURDAY = 7;
      ICAL.Time.DEFAULT_WEEK_START = ICAL.Time.MONDAY;
    })();
    (function() {
      ICAL.VCardTime = function(data, zone, icaltype) {
        this.wrappedJSObject = this;
        var time = this._time = /* @__PURE__ */ Object.create(null);
        time.year = null;
        time.month = null;
        time.day = null;
        time.hour = null;
        time.minute = null;
        time.second = null;
        this.icaltype = icaltype || "date-and-or-time";
        this.fromData(data, zone);
      };
      ICAL.helpers.inherits(
        ICAL.Time,
        ICAL.VCardTime,
        /** @lends ICAL.VCardTime */
        {
          /**
           * The class identifier.
           * @constant
           * @type {String}
           * @default "vcardtime"
           */
          icalclass: "vcardtime",
          /**
           * The type name, to be used in the jCal object.
           * @type {String}
           * @default "date-and-or-time"
           */
          icaltype: "date-and-or-time",
          /**
           * The timezone. This can either be floating, UTC, or an instance of
           * ICAL.UtcOffset.
           * @type {ICAL.Timezone|ICAL.UtcOFfset}
           */
          zone: null,
          /**
           * Returns a clone of the vcard date/time object.
           *
           * @return {ICAL.VCardTime}     The cloned object
           */
          clone: function() {
            return new ICAL.VCardTime(this._time, this.zone, this.icaltype);
          },
          _normalize: function() {
            return this;
          },
          /**
           * @inheritdoc
           */
          utcOffset: function() {
            if (this.zone instanceof ICAL.UtcOffset) {
              return this.zone.toSeconds();
            } else {
              return ICAL.Time.prototype.utcOffset.apply(this, arguments);
            }
          },
          /**
           * Returns an RFC 6350 compliant representation of this object.
           *
           * @return {String}         vcard date/time string
           */
          toICALString: function() {
            return ICAL.design.vcard.value[this.icaltype].toICAL(this.toString());
          },
          /**
           * The string representation of this date/time, in jCard form
           * (including : and - separators).
           * @return {String}
           */
          toString: function toString3() {
            var p2 = ICAL.helpers.pad2;
            var y = this.year, m = this.month, d = this.day;
            var h2 = this.hour, mm = this.minute, s2 = this.second;
            var hasYear = y !== null, hasMonth = m !== null, hasDay = d !== null;
            var hasHour = h2 !== null, hasMinute = mm !== null, hasSecond = s2 !== null;
            var datepart = (hasYear ? p2(y) + (hasMonth || hasDay ? "-" : "") : hasMonth || hasDay ? "--" : "") + (hasMonth ? p2(m) : "") + (hasDay ? "-" + p2(d) : "");
            var timepart = (hasHour ? p2(h2) : "-") + (hasHour && hasMinute ? ":" : "") + (hasMinute ? p2(mm) : "") + (!hasHour && !hasMinute ? "-" : "") + (hasMinute && hasSecond ? ":" : "") + (hasSecond ? p2(s2) : "");
            var zone;
            if (this.zone === ICAL.Timezone.utcTimezone) {
              zone = "Z";
            } else if (this.zone instanceof ICAL.UtcOffset) {
              zone = this.zone.toString();
            } else if (this.zone === ICAL.Timezone.localTimezone) {
              zone = "";
            } else if (this.zone instanceof ICAL.Timezone) {
              var offset = ICAL.UtcOffset.fromSeconds(this.zone.utcOffset(this));
              zone = offset.toString();
            } else {
              zone = "";
            }
            switch (this.icaltype) {
              case "time":
                return timepart + zone;
              case "date-and-or-time":
              case "date-time":
                return datepart + (timepart == "--" ? "" : "T" + timepart + zone);
              case "date":
                return datepart;
            }
            return null;
          }
        }
      );
      ICAL.VCardTime.fromDateAndOrTimeString = function(aValue, aIcalType) {
        function part(v, s2, e2) {
          return v ? ICAL.helpers.strictParseInt(v.substr(s2, e2)) : null;
        }
        var parts = aValue.split("T");
        var dt = parts[0], tmz = parts[1];
        var splitzone = tmz ? ICAL.design.vcard.value.time._splitZone(tmz) : [];
        var zone = splitzone[0], tm = splitzone[1];
        var stoi = ICAL.helpers.strictParseInt;
        var dtlen = dt ? dt.length : 0;
        var tmlen = tm ? tm.length : 0;
        var hasDashDate = dt && dt[0] == "-" && dt[1] == "-";
        var hasDashTime = tm && tm[0] == "-";
        var o2 = {
          year: hasDashDate ? null : part(dt, 0, 4),
          month: hasDashDate && (dtlen == 4 || dtlen == 7) ? part(dt, 2, 2) : dtlen == 7 ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 5, 2) : null,
          day: dtlen == 5 ? part(dt, 3, 2) : dtlen == 7 && hasDashDate ? part(dt, 5, 2) : dtlen == 10 ? part(dt, 8, 2) : null,
          hour: hasDashTime ? null : part(tm, 0, 2),
          minute: hasDashTime && tmlen == 3 ? part(tm, 1, 2) : tmlen > 4 ? hasDashTime ? part(tm, 1, 2) : part(tm, 3, 2) : null,
          second: tmlen == 4 ? part(tm, 2, 2) : tmlen == 6 ? part(tm, 4, 2) : tmlen == 8 ? part(tm, 6, 2) : null
        };
        if (zone == "Z") {
          zone = ICAL.Timezone.utcTimezone;
        } else if (zone && zone[3] == ":") {
          zone = ICAL.UtcOffset.fromString(zone);
        } else {
          zone = null;
        }
        return new ICAL.VCardTime(o2, zone, aIcalType);
      };
    })();
    (function() {
      var DOW_MAP = {
        SU: ICAL.Time.SUNDAY,
        MO: ICAL.Time.MONDAY,
        TU: ICAL.Time.TUESDAY,
        WE: ICAL.Time.WEDNESDAY,
        TH: ICAL.Time.THURSDAY,
        FR: ICAL.Time.FRIDAY,
        SA: ICAL.Time.SATURDAY
      };
      var REVERSE_DOW_MAP = {};
      for (var key in DOW_MAP) {
        if (DOW_MAP.hasOwnProperty(key)) {
          REVERSE_DOW_MAP[DOW_MAP[key]] = key;
        }
      }
      var COPY_PARTS = [
        "BYSECOND",
        "BYMINUTE",
        "BYHOUR",
        "BYDAY",
        "BYMONTHDAY",
        "BYYEARDAY",
        "BYWEEKNO",
        "BYMONTH",
        "BYSETPOS"
      ];
      ICAL.Recur = function icalrecur(data) {
        this.wrappedJSObject = this;
        this.parts = {};
        if (data && typeof data === "object") {
          this.fromData(data);
        }
      };
      ICAL.Recur.prototype = {
        /**
         * An object holding the BY-parts of the recurrence rule
         * @type {Object}
         */
        parts: null,
        /**
         * The interval value for the recurrence rule.
         * @type {Number}
         */
        interval: 1,
        /**
         * The week start day
         *
         * @type {ICAL.Time.weekDay}
         * @default ICAL.Time.MONDAY
         */
        wkst: ICAL.Time.MONDAY,
        /**
         * The end of the recurrence
         * @type {?ICAL.Time}
         */
        until: null,
        /**
         * The maximum number of occurrences
         * @type {?Number}
         */
        count: null,
        /**
         * The frequency value.
         * @type {ICAL.Recur.frequencyValues}
         */
        freq: null,
        /**
         * The class identifier.
         * @constant
         * @type {String}
         * @default "icalrecur"
         */
        icalclass: "icalrecur",
        /**
         * The type name, to be used in the jCal object.
         * @constant
         * @type {String}
         * @default "recur"
         */
        icaltype: "recur",
        /**
         * Create a new iterator for this recurrence rule. The passed start date
         * must be the start date of the event, not the start of the range to
         * search in.
         *
         * @example
         * var recur = comp.getFirstPropertyValue('rrule');
         * var dtstart = comp.getFirstPropertyValue('dtstart');
         * var iter = recur.iterator(dtstart);
         * for (var next = iter.next(); next; next = iter.next()) {
         *   if (next.compare(rangeStart) < 0) {
         *     continue;
         *   }
         *   console.log(next.toString());
         * }
         *
         * @param {ICAL.Time} aStart        The item's start date
         * @return {ICAL.RecurIterator}     The recurrence iterator
         */
        iterator: function(aStart) {
          return new ICAL.RecurIterator({
            rule: this,
            dtstart: aStart
          });
        },
        /**
         * Returns a clone of the recurrence object.
         *
         * @return {ICAL.Recur}      The cloned object
         */
        clone: function clone() {
          return new ICAL.Recur(this.toJSON());
        },
        /**
         * Checks if the current rule is finite, i.e. has a count or until part.
         *
         * @return {Boolean}        True, if the rule is finite
         */
        isFinite: function isfinite() {
          return !!(this.count || this.until);
        },
        /**
         * Checks if the current rule has a count part, and not limited by an until
         * part.
         *
         * @return {Boolean}        True, if the rule is by count
         */
        isByCount: function isbycount() {
          return !!(this.count && !this.until);
        },
        /**
         * Adds a component (part) to the recurrence rule. This is not a component
         * in the sense of {@link ICAL.Component}, but a part of the recurrence
         * rule, i.e. BYMONTH.
         *
         * @param {String} aType            The name of the component part
         * @param {Array|String} aValue     The component value
         */
        addComponent: function addPart(aType, aValue) {
          var ucname = aType.toUpperCase();
          if (ucname in this.parts) {
            this.parts[ucname].push(aValue);
          } else {
            this.parts[ucname] = [aValue];
          }
        },
        /**
         * Sets the component value for the given by-part.
         *
         * @param {String} aType        The component part name
         * @param {Array} aValues       The component values
         */
        setComponent: function setComponent(aType, aValues) {
          this.parts[aType.toUpperCase()] = aValues.slice();
        },
        /**
         * Gets (a copy) of the requested component value.
         *
         * @param {String} aType        The component part name
         * @return {Array}              The component part value
         */
        getComponent: function getComponent(aType) {
          var ucname = aType.toUpperCase();
          return ucname in this.parts ? this.parts[ucname].slice() : [];
        },
        /**
         * Retrieves the next occurrence after the given recurrence id. See the
         * guide on {@tutorial terminology} for more details.
         *
         * NOTE: Currently, this method iterates all occurrences from the start
         * date. It should not be called in a loop for performance reasons. If you
         * would like to get more than one occurrence, you can iterate the
         * occurrences manually, see the example on the
         * {@link ICAL.Recur#iterator iterator} method.
         *
         * @param {ICAL.Time} aStartTime        The start of the event series
         * @param {ICAL.Time} aRecurrenceId     The date of the last occurrence
         * @return {ICAL.Time}                  The next occurrence after
         */
        getNextOccurrence: function getNextOccurrence(aStartTime, aRecurrenceId) {
          var iter = this.iterator(aStartTime);
          var next, cdt;
          do {
            next = iter.next();
          } while (next && next.compare(aRecurrenceId) <= 0);
          if (next && aRecurrenceId.zone) {
            next.zone = aRecurrenceId.zone;
          }
          return next;
        },
        /**
         * Sets up the current instance using members from the passed data object.
         *
         * @param {Object} data                               An object with members of the recurrence
         * @param {ICAL.Recur.frequencyValues=} data.freq     The frequency value
         * @param {Number=} data.interval                     The INTERVAL value
         * @param {ICAL.Time.weekDay=} data.wkst              The week start value
         * @param {ICAL.Time=} data.until                     The end of the recurrence set
         * @param {Number=} data.count                        The number of occurrences
         * @param {Array.<Number>=} data.bysecond             The seconds for the BYSECOND part
         * @param {Array.<Number>=} data.byminute             The minutes for the BYMINUTE part
         * @param {Array.<Number>=} data.byhour               The hours for the BYHOUR part
         * @param {Array.<String>=} data.byday                The BYDAY values
         * @param {Array.<Number>=} data.bymonthday           The days for the BYMONTHDAY part
         * @param {Array.<Number>=} data.byyearday            The days for the BYYEARDAY part
         * @param {Array.<Number>=} data.byweekno             The weeks for the BYWEEKNO part
         * @param {Array.<Number>=} data.bymonth              The month for the BYMONTH part
         * @param {Array.<Number>=} data.bysetpos             The positionals for the BYSETPOS part
         */
        fromData: function(data) {
          for (var key2 in data) {
            var uckey = key2.toUpperCase();
            if (uckey in partDesign) {
              if (Array.isArray(data[key2])) {
                this.parts[uckey] = data[key2];
              } else {
                this.parts[uckey] = [data[key2]];
              }
            } else {
              this[key2] = data[key2];
            }
          }
          if (this.interval && typeof this.interval != "number") {
            optionDesign.INTERVAL(this.interval, this);
          }
          if (this.wkst && typeof this.wkst != "number") {
            this.wkst = ICAL.Recur.icalDayToNumericDay(this.wkst);
          }
          if (this.until && !(this.until instanceof ICAL.Time)) {
            this.until = ICAL.Time.fromString(this.until);
          }
        },
        /**
         * The jCal representation of this recurrence type.
         * @return {Object}
         */
        toJSON: function() {
          var res = /* @__PURE__ */ Object.create(null);
          res.freq = this.freq;
          if (this.count) {
            res.count = this.count;
          }
          if (this.interval > 1) {
            res.interval = this.interval;
          }
          for (var k in this.parts) {
            if (!this.parts.hasOwnProperty(k)) {
              continue;
            }
            var kparts = this.parts[k];
            if (Array.isArray(kparts) && kparts.length == 1) {
              res[k.toLowerCase()] = kparts[0];
            } else {
              res[k.toLowerCase()] = ICAL.helpers.clone(this.parts[k]);
            }
          }
          if (this.until) {
            res.until = this.until.toString();
          }
          if ("wkst" in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
            res.wkst = ICAL.Recur.numericDayToIcalDay(this.wkst);
          }
          return res;
        },
        /**
         * The string representation of this recurrence rule.
         * @return {String}
         */
        toString: function icalrecur_toString() {
          var str = "FREQ=" + this.freq;
          if (this.count) {
            str += ";COUNT=" + this.count;
          }
          if (this.interval > 1) {
            str += ";INTERVAL=" + this.interval;
          }
          for (var k in this.parts) {
            if (this.parts.hasOwnProperty(k)) {
              str += ";" + k + "=" + this.parts[k];
            }
          }
          if (this.until) {
            str += ";UNTIL=" + this.until.toICALString();
          }
          if ("wkst" in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
            str += ";WKST=" + ICAL.Recur.numericDayToIcalDay(this.wkst);
          }
          return str;
        }
      };
      function parseNumericValue(type, min, max, value) {
        var result = value;
        if (value[0] === "+") {
          result = value.substr(1);
        }
        result = ICAL.helpers.strictParseInt(result);
        if (min !== void 0 && value < min) {
          throw new Error(
            type + ': invalid value "' + value + '" must be > ' + min
          );
        }
        if (max !== void 0 && value > max) {
          throw new Error(
            type + ': invalid value "' + value + '" must be < ' + min
          );
        }
        return result;
      }
      ICAL.Recur.icalDayToNumericDay = function toNumericDay(string3, aWeekStart) {
        var firstDow = aWeekStart || ICAL.Time.SUNDAY;
        return (DOW_MAP[string3] - firstDow + 7) % 7 + 1;
      };
      ICAL.Recur.numericDayToIcalDay = function toIcalDay(num, aWeekStart) {
        var firstDow = aWeekStart || ICAL.Time.SUNDAY;
        var dow = num + firstDow - ICAL.Time.SUNDAY;
        if (dow > 7) {
          dow -= 7;
        }
        return REVERSE_DOW_MAP[dow];
      };
      var VALID_DAY_NAMES = /^(SU|MO|TU|WE|TH|FR|SA)$/;
      var VALID_BYDAY_PART = /^([+-])?(5[0-3]|[1-4][0-9]|[1-9])?(SU|MO|TU|WE|TH|FR|SA)$/;
      var ALLOWED_FREQ = [
        "SECONDLY",
        "MINUTELY",
        "HOURLY",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "YEARLY"
      ];
      var optionDesign = {
        FREQ: function(value, dict, fmtIcal) {
          if (ALLOWED_FREQ.indexOf(value) !== -1) {
            dict.freq = value;
          } else {
            throw new Error(
              'invalid frequency "' + value + '" expected: "' + ALLOWED_FREQ.join(", ") + '"'
            );
          }
        },
        COUNT: function(value, dict, fmtIcal) {
          dict.count = ICAL.helpers.strictParseInt(value);
        },
        INTERVAL: function(value, dict, fmtIcal) {
          dict.interval = ICAL.helpers.strictParseInt(value);
          if (dict.interval < 1) {
            dict.interval = 1;
          }
        },
        UNTIL: function(value, dict, fmtIcal) {
          if (value.length > 10) {
            dict.until = ICAL.design.icalendar.value["date-time"].fromICAL(value);
          } else {
            dict.until = ICAL.design.icalendar.value.date.fromICAL(value);
          }
          if (!fmtIcal) {
            dict.until = ICAL.Time.fromString(dict.until);
          }
        },
        WKST: function(value, dict, fmtIcal) {
          if (VALID_DAY_NAMES.test(value)) {
            dict.wkst = ICAL.Recur.icalDayToNumericDay(value);
          } else {
            throw new Error('invalid WKST value "' + value + '"');
          }
        }
      };
      var partDesign = {
        BYSECOND: parseNumericValue.bind(this, "BYSECOND", 0, 60),
        BYMINUTE: parseNumericValue.bind(this, "BYMINUTE", 0, 59),
        BYHOUR: parseNumericValue.bind(this, "BYHOUR", 0, 23),
        BYDAY: function(value) {
          if (VALID_BYDAY_PART.test(value)) {
            return value;
          } else {
            throw new Error('invalid BYDAY value "' + value + '"');
          }
        },
        BYMONTHDAY: parseNumericValue.bind(this, "BYMONTHDAY", -31, 31),
        BYYEARDAY: parseNumericValue.bind(this, "BYYEARDAY", -366, 366),
        BYWEEKNO: parseNumericValue.bind(this, "BYWEEKNO", -53, 53),
        BYMONTH: parseNumericValue.bind(this, "BYMONTH", 0, 12),
        BYSETPOS: parseNumericValue.bind(this, "BYSETPOS", -366, 366)
      };
      ICAL.Recur.fromString = function(string3) {
        var data = ICAL.Recur._stringToData(string3, false);
        return new ICAL.Recur(data);
      };
      ICAL.Recur.fromData = function(aData) {
        return new ICAL.Recur(aData);
      };
      ICAL.Recur._stringToData = function(string3, fmtIcal) {
        var dict = /* @__PURE__ */ Object.create(null);
        var values = string3.split(";");
        var len = values.length;
        for (var i = 0; i < len; i++) {
          var parts = values[i].split("=");
          var ucname = parts[0].toUpperCase();
          var lcname = parts[0].toLowerCase();
          var name2 = fmtIcal ? lcname : ucname;
          var value = parts[1];
          if (ucname in partDesign) {
            var partArr = value.split(",");
            var partArrIdx = 0;
            var partArrLen = partArr.length;
            for (; partArrIdx < partArrLen; partArrIdx++) {
              partArr[partArrIdx] = partDesign[ucname](partArr[partArrIdx]);
            }
            dict[name2] = partArr.length == 1 ? partArr[0] : partArr;
          } else if (ucname in optionDesign) {
            optionDesign[ucname](value, dict, fmtIcal);
          } else {
            dict[lcname] = value;
          }
        }
        return dict;
      };
    })();
    ICAL.RecurIterator = function() {
      function icalrecur_iterator(options) {
        this.fromData(options);
      }
      icalrecur_iterator.prototype = {
        /**
         * True when iteration is finished.
         * @type {Boolean}
         */
        completed: false,
        /**
         * The rule that is being iterated
         * @type {ICAL.Recur}
         */
        rule: null,
        /**
         * The start date of the event being iterated.
         * @type {ICAL.Time}
         */
        dtstart: null,
        /**
         * The last occurrence that was returned from the
         * {@link ICAL.RecurIterator#next} method.
         * @type {ICAL.Time}
         */
        last: null,
        /**
         * The sequence number from the occurrence
         * @type {Number}
         */
        occurrence_number: 0,
        /**
         * The indices used for the {@link ICAL.RecurIterator#by_data} object.
         * @type {Object}
         * @private
         */
        by_indices: null,
        /**
         * If true, the iterator has already been initialized
         * @type {Boolean}
         * @private
         */
        initialized: false,
        /**
         * The initializd by-data.
         * @type {Object}
         * @private
         */
        by_data: null,
        /**
         * The expanded yeardays
         * @type {Array}
         * @private
         */
        days: null,
        /**
         * The index in the {@link ICAL.RecurIterator#days} array.
         * @type {Number}
         * @private
         */
        days_index: 0,
        /**
         * Initialize the recurrence iterator from the passed data object. This
         * method is usually not called directly, you can initialize the iterator
         * through the constructor.
         *
         * @param {Object} options                The iterator options
         * @param {ICAL.Recur} options.rule       The rule to iterate.
         * @param {ICAL.Time} options.dtstart     The start date of the event.
         * @param {Boolean=} options.initialized  When true, assume that options are
         *        from a previously constructed iterator. Initialization will not be
         *        repeated.
         */
        fromData: function(options) {
          this.rule = ICAL.helpers.formatClassType(options.rule, ICAL.Recur);
          if (!this.rule) {
            throw new Error("iterator requires a (ICAL.Recur) rule");
          }
          this.dtstart = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);
          if (!this.dtstart) {
            throw new Error("iterator requires a (ICAL.Time) dtstart");
          }
          if (options.by_data) {
            this.by_data = options.by_data;
          } else {
            this.by_data = ICAL.helpers.clone(this.rule.parts, true);
          }
          if (options.occurrence_number)
            this.occurrence_number = options.occurrence_number;
          this.days = options.days || [];
          if (options.last) {
            this.last = ICAL.helpers.formatClassType(options.last, ICAL.Time);
          }
          this.by_indices = options.by_indices;
          if (!this.by_indices) {
            this.by_indices = {
              "BYSECOND": 0,
              "BYMINUTE": 0,
              "BYHOUR": 0,
              "BYDAY": 0,
              "BYMONTH": 0,
              "BYWEEKNO": 0,
              "BYMONTHDAY": 0
            };
          }
          this.initialized = options.initialized || false;
          if (!this.initialized) {
            this.init();
          }
        },
        /**
         * Intialize the iterator
         * @private
         */
        init: function icalrecur_iterator_init() {
          this.initialized = true;
          this.last = this.dtstart.clone();
          var parts = this.by_data;
          if ("BYDAY" in parts) {
            this.sort_byday_rules(parts.BYDAY);
          }
          if ("BYYEARDAY" in parts) {
            if ("BYMONTH" in parts || "BYWEEKNO" in parts || "BYMONTHDAY" in parts || "BYDAY" in parts) {
              throw new Error("Invalid BYYEARDAY rule");
            }
          }
          if ("BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
            throw new Error("BYWEEKNO does not fit to BYMONTHDAY");
          }
          if (this.rule.freq == "MONTHLY" && ("BYYEARDAY" in parts || "BYWEEKNO" in parts)) {
            throw new Error("For MONTHLY recurrences neither BYYEARDAY nor BYWEEKNO may appear");
          }
          if (this.rule.freq == "WEEKLY" && ("BYYEARDAY" in parts || "BYMONTHDAY" in parts)) {
            throw new Error("For WEEKLY recurrences neither BYMONTHDAY nor BYYEARDAY may appear");
          }
          if (this.rule.freq != "YEARLY" && "BYYEARDAY" in parts) {
            throw new Error("BYYEARDAY may only appear in YEARLY rules");
          }
          this.last.second = this.setup_defaults("BYSECOND", "SECONDLY", this.dtstart.second);
          this.last.minute = this.setup_defaults("BYMINUTE", "MINUTELY", this.dtstart.minute);
          this.last.hour = this.setup_defaults("BYHOUR", "HOURLY", this.dtstart.hour);
          this.last.day = this.setup_defaults("BYMONTHDAY", "DAILY", this.dtstart.day);
          this.last.month = this.setup_defaults("BYMONTH", "MONTHLY", this.dtstart.month);
          if (this.rule.freq == "WEEKLY") {
            if ("BYDAY" in parts) {
              var bydayParts = this.ruleDayOfWeek(parts.BYDAY[0], this.rule.wkst);
              var pos = bydayParts[0];
              var dow = bydayParts[1];
              var wkdy = dow - this.last.dayOfWeek(this.rule.wkst);
              if (this.last.dayOfWeek(this.rule.wkst) < dow && wkdy >= 0 || wkdy < 0) {
                this.last.day += wkdy;
              }
            } else {
              var dayName = ICAL.Recur.numericDayToIcalDay(this.dtstart.dayOfWeek());
              parts.BYDAY = [dayName];
            }
          }
          if (this.rule.freq == "YEARLY") {
            for (; ; ) {
              this.expand_year_days(this.last.year);
              if (this.days.length > 0) {
                break;
              }
              this.increment_year(this.rule.interval);
            }
            this._nextByYearDay();
          }
          if (this.rule.freq == "MONTHLY" && this.has_by_data("BYDAY")) {
            var tempLast = null;
            var initLast = this.last.clone();
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            for (var i in this.by_data.BYDAY) {
              if (!this.by_data.BYDAY.hasOwnProperty(i)) {
                continue;
              }
              this.last = initLast.clone();
              var bydayParts = this.ruleDayOfWeek(this.by_data.BYDAY[i]);
              var pos = bydayParts[0];
              var dow = bydayParts[1];
              var dayOfMonth = this.last.nthWeekDay(dow, pos);
              if (pos >= 6 || pos <= -6) {
                throw new Error("Malformed values in BYDAY part");
              }
              if (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
                if (tempLast && tempLast.month == initLast.month) {
                  continue;
                }
                while (dayOfMonth > daysInMonth || dayOfMonth <= 0) {
                  this.increment_month();
                  daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
                  dayOfMonth = this.last.nthWeekDay(dow, pos);
                }
              }
              this.last.day = dayOfMonth;
              if (!tempLast || this.last.compare(tempLast) < 0) {
                tempLast = this.last.clone();
              }
            }
            this.last = tempLast.clone();
            if (this.has_by_data("BYMONTHDAY")) {
              this._byDayAndMonthDay(true);
            }
            if (this.last.day > daysInMonth || this.last.day == 0) {
              throw new Error("Malformed values in BYDAY part");
            }
          } else if (this.has_by_data("BYMONTHDAY")) {
            if (this.last.day < 0) {
              var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
              this.last.day = daysInMonth + this.last.day + 1;
            }
          }
        },
        /**
         * Retrieve the next occurrence from the iterator.
         * @return {ICAL.Time}
         */
        next: function icalrecur_iterator_next() {
          var before = this.last ? this.last.clone() : null;
          if (this.rule.count && this.occurrence_number >= this.rule.count || this.rule.until && this.last.compare(this.rule.until) > 0) {
            this.completed = true;
            return null;
          }
          if (this.occurrence_number == 0 && this.last.compare(this.dtstart) >= 0) {
            this.occurrence_number++;
            return this.last;
          }
          var valid2;
          do {
            valid2 = 1;
            switch (this.rule.freq) {
              case "SECONDLY":
                this.next_second();
                break;
              case "MINUTELY":
                this.next_minute();
                break;
              case "HOURLY":
                this.next_hour();
                break;
              case "DAILY":
                this.next_day();
                break;
              case "WEEKLY":
                this.next_week();
                break;
              case "MONTHLY":
                valid2 = this.next_month();
                break;
              case "YEARLY":
                this.next_year();
                break;
              default:
                return null;
            }
          } while (!this.check_contracting_rules() || this.last.compare(this.dtstart) < 0 || !valid2);
          if (this.last.compare(before) == 0) {
            throw new Error("Same occurrence found twice, protecting you from death by recursion");
          }
          if (this.rule.until && this.last.compare(this.rule.until) > 0) {
            this.completed = true;
            return null;
          } else {
            this.occurrence_number++;
            return this.last;
          }
        },
        next_second: function next_second() {
          return this.next_generic("BYSECOND", "SECONDLY", "second", "minute");
        },
        increment_second: function increment_second(inc) {
          return this.increment_generic(inc, "second", 60, "minute");
        },
        next_minute: function next_minute() {
          return this.next_generic(
            "BYMINUTE",
            "MINUTELY",
            "minute",
            "hour",
            "next_second"
          );
        },
        increment_minute: function increment_minute(inc) {
          return this.increment_generic(inc, "minute", 60, "hour");
        },
        next_hour: function next_hour() {
          return this.next_generic(
            "BYHOUR",
            "HOURLY",
            "hour",
            "monthday",
            "next_minute"
          );
        },
        increment_hour: function increment_hour(inc) {
          this.increment_generic(inc, "hour", 24, "monthday");
        },
        next_day: function next_day() {
          var has_by_day = "BYDAY" in this.by_data;
          var this_freq = this.rule.freq == "DAILY";
          if (this.next_hour() == 0) {
            return 0;
          }
          if (this_freq) {
            this.increment_monthday(this.rule.interval);
          } else {
            this.increment_monthday(1);
          }
          return 0;
        },
        next_week: function next_week() {
          var end_of_data = 0;
          if (this.next_weekday_by_week() == 0) {
            return end_of_data;
          }
          if (this.has_by_data("BYWEEKNO")) {
            var idx = ++this.by_indices.BYWEEKNO;
            if (this.by_indices.BYWEEKNO == this.by_data.BYWEEKNO.length) {
              this.by_indices.BYWEEKNO = 0;
              end_of_data = 1;
            }
            this.last.month = 1;
            this.last.day = 1;
            var week_no = this.by_data.BYWEEKNO[this.by_indices.BYWEEKNO];
            this.last.day += 7 * week_no;
            if (end_of_data) {
              this.increment_year(1);
            }
          } else {
            this.increment_monthday(7 * this.rule.interval);
          }
          return end_of_data;
        },
        /**
         * Normalize each by day rule for a given year/month.
         * Takes into account ordering and negative rules
         *
         * @private
         * @param {Number} year         Current year.
         * @param {Number} month        Current month.
         * @param {Array}  rules        Array of rules.
         *
         * @return {Array} sorted and normalized rules.
         *                 Negative rules will be expanded to their
         *                 correct positive values for easier processing.
         */
        normalizeByMonthDayRules: function(year, month, rules) {
          var daysInMonth = ICAL.Time.daysInMonth(month, year);
          var newRules = [];
          var ruleIdx = 0;
          var len = rules.length;
          var rule;
          for (; ruleIdx < len; ruleIdx++) {
            rule = rules[ruleIdx];
            if (Math.abs(rule) > daysInMonth) {
              continue;
            }
            if (rule < 0) {
              rule = daysInMonth + (rule + 1);
            } else if (rule === 0) {
              continue;
            }
            if (newRules.indexOf(rule) === -1) {
              newRules.push(rule);
            }
          }
          return newRules.sort(function(a2, b) {
            return a2 - b;
          });
        },
        /**
         * NOTES:
         * We are given a list of dates in the month (BYMONTHDAY) (23, etc..)
         * Also we are given a list of days (BYDAY) (MO, 2SU, etc..) when
         * both conditions match a given date (this.last.day) iteration stops.
         *
         * @private
         * @param {Boolean=} isInit     When given true will not increment the
         *                                current day (this.last).
         */
        _byDayAndMonthDay: function(isInit) {
          var byMonthDay;
          var byDay = this.by_data.BYDAY;
          var date;
          var dateIdx = 0;
          var dateLen;
          var dayLen = byDay.length;
          var dataIsValid = 0;
          var daysInMonth;
          var self2 = this;
          var lastDay = this.last.day;
          function initMonth() {
            daysInMonth = ICAL.Time.daysInMonth(
              self2.last.month,
              self2.last.year
            );
            byMonthDay = self2.normalizeByMonthDayRules(
              self2.last.year,
              self2.last.month,
              self2.by_data.BYMONTHDAY
            );
            dateLen = byMonthDay.length;
            while (byMonthDay[dateIdx] <= lastDay && !(isInit && byMonthDay[dateIdx] == lastDay) && dateIdx < dateLen - 1) {
              dateIdx++;
            }
          }
          function nextMonth() {
            lastDay = 0;
            self2.increment_month();
            dateIdx = 0;
            initMonth();
          }
          initMonth();
          if (isInit) {
            lastDay -= 1;
          }
          var monthsCounter = 48;
          while (!dataIsValid && monthsCounter) {
            monthsCounter--;
            date = lastDay + 1;
            if (date > daysInMonth) {
              nextMonth();
              continue;
            }
            var next = byMonthDay[dateIdx++];
            if (next >= date) {
              lastDay = next;
            } else {
              nextMonth();
              continue;
            }
            for (var dayIdx = 0; dayIdx < dayLen; dayIdx++) {
              var parts = this.ruleDayOfWeek(byDay[dayIdx]);
              var pos = parts[0];
              var dow = parts[1];
              this.last.day = lastDay;
              if (this.last.isNthWeekDay(dow, pos)) {
                dataIsValid = 1;
                break;
              }
            }
            if (!dataIsValid && dateIdx === dateLen) {
              nextMonth();
              continue;
            }
          }
          if (monthsCounter <= 0) {
            throw new Error("Malformed values in BYDAY combined with BYMONTHDAY parts");
          }
          return dataIsValid;
        },
        next_month: function next_month() {
          var this_freq = this.rule.freq == "MONTHLY";
          var data_valid = 1;
          if (this.next_hour() == 0) {
            return data_valid;
          }
          if (this.has_by_data("BYDAY") && this.has_by_data("BYMONTHDAY")) {
            data_valid = this._byDayAndMonthDay();
          } else if (this.has_by_data("BYDAY")) {
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            var setpos = 0;
            var setpos_total = 0;
            if (this.has_by_data("BYSETPOS")) {
              var last_day = this.last.day;
              for (var day = 1; day <= daysInMonth; day++) {
                this.last.day = day;
                if (this.is_day_in_byday(this.last)) {
                  setpos_total++;
                  if (day <= last_day) {
                    setpos++;
                  }
                }
              }
              this.last.day = last_day;
            }
            data_valid = 0;
            for (var day = this.last.day + 1; day <= daysInMonth; day++) {
              this.last.day = day;
              if (this.is_day_in_byday(this.last)) {
                if (!this.has_by_data("BYSETPOS") || this.check_set_position(++setpos) || this.check_set_position(setpos - setpos_total - 1)) {
                  data_valid = 1;
                  break;
                }
              }
            }
            if (day > daysInMonth) {
              this.last.day = 1;
              this.increment_month();
              if (this.is_day_in_byday(this.last)) {
                if (!this.has_by_data("BYSETPOS") || this.check_set_position(1)) {
                  data_valid = 1;
                }
              } else {
                data_valid = 0;
              }
            }
          } else if (this.has_by_data("BYMONTHDAY")) {
            this.by_indices.BYMONTHDAY++;
            if (this.by_indices.BYMONTHDAY >= this.by_data.BYMONTHDAY.length) {
              this.by_indices.BYMONTHDAY = 0;
              this.increment_month();
            }
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            var day = this.by_data.BYMONTHDAY[this.by_indices.BYMONTHDAY];
            if (day < 0) {
              day = daysInMonth + day + 1;
            }
            if (day > daysInMonth) {
              this.last.day = 1;
              data_valid = this.is_day_in_byday(this.last);
            } else {
              this.last.day = day;
            }
          } else {
            this.increment_month();
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            if (this.by_data.BYMONTHDAY[0] > daysInMonth) {
              data_valid = 0;
            } else {
              this.last.day = this.by_data.BYMONTHDAY[0];
            }
          }
          return data_valid;
        },
        next_weekday_by_week: function next_weekday_by_week() {
          var end_of_data = 0;
          if (this.next_hour() == 0) {
            return end_of_data;
          }
          if (!this.has_by_data("BYDAY")) {
            return 1;
          }
          for (; ; ) {
            var tt = new ICAL.Time();
            this.by_indices.BYDAY++;
            if (this.by_indices.BYDAY == Object.keys(this.by_data.BYDAY).length) {
              this.by_indices.BYDAY = 0;
              end_of_data = 1;
            }
            var coded_day = this.by_data.BYDAY[this.by_indices.BYDAY];
            var parts = this.ruleDayOfWeek(coded_day);
            var dow = parts[1];
            dow -= this.rule.wkst;
            if (dow < 0) {
              dow += 7;
            }
            tt.year = this.last.year;
            tt.month = this.last.month;
            tt.day = this.last.day;
            var startOfWeek = tt.startDoyWeek(this.rule.wkst);
            if (dow + startOfWeek < 1) {
              if (!end_of_data) {
                continue;
              }
            }
            var next = ICAL.Time.fromDayOfYear(
              startOfWeek + dow,
              this.last.year
            );
            this.last.year = next.year;
            this.last.month = next.month;
            this.last.day = next.day;
            return end_of_data;
          }
        },
        next_year: function next_year() {
          if (this.next_hour() == 0) {
            return 0;
          }
          if (++this.days_index == this.days.length) {
            this.days_index = 0;
            do {
              this.increment_year(this.rule.interval);
              this.expand_year_days(this.last.year);
            } while (this.days.length == 0);
          }
          this._nextByYearDay();
          return 1;
        },
        _nextByYearDay: function _nextByYearDay() {
          var doy = this.days[this.days_index];
          var year = this.last.year;
          if (doy < 1) {
            doy += 1;
            year += 1;
          }
          var next = ICAL.Time.fromDayOfYear(doy, year);
          this.last.day = next.day;
          this.last.month = next.month;
        },
        /**
         * @param dow (eg: '1TU', '-1MO')
         * @param {ICAL.Time.weekDay=} aWeekStart The week start weekday
         * @return [pos, numericDow] (eg: [1, 3]) numericDow is relative to aWeekStart
         */
        ruleDayOfWeek: function ruleDayOfWeek(dow, aWeekStart) {
          var matches = dow.match(/([+-]?[0-9])?(MO|TU|WE|TH|FR|SA|SU)/);
          if (matches) {
            var pos = parseInt(matches[1] || 0, 10);
            dow = ICAL.Recur.icalDayToNumericDay(matches[2], aWeekStart);
            return [pos, dow];
          } else {
            return [0, 0];
          }
        },
        next_generic: function next_generic(aRuleType, aInterval, aDateAttr, aFollowingAttr, aPreviousIncr) {
          var has_by_rule = aRuleType in this.by_data;
          var this_freq = this.rule.freq == aInterval;
          var end_of_data = 0;
          if (aPreviousIncr && this[aPreviousIncr]() == 0) {
            return end_of_data;
          }
          if (has_by_rule) {
            this.by_indices[aRuleType]++;
            var idx = this.by_indices[aRuleType];
            var dta = this.by_data[aRuleType];
            if (this.by_indices[aRuleType] == dta.length) {
              this.by_indices[aRuleType] = 0;
              end_of_data = 1;
            }
            this.last[aDateAttr] = dta[this.by_indices[aRuleType]];
          } else if (this_freq) {
            this["increment_" + aDateAttr](this.rule.interval);
          }
          if (has_by_rule && end_of_data && this_freq) {
            this["increment_" + aFollowingAttr](1);
          }
          return end_of_data;
        },
        increment_monthday: function increment_monthday(inc) {
          for (var i = 0; i < inc; i++) {
            var daysInMonth = ICAL.Time.daysInMonth(this.last.month, this.last.year);
            this.last.day++;
            if (this.last.day > daysInMonth) {
              this.last.day -= daysInMonth;
              this.increment_month();
            }
          }
        },
        increment_month: function increment_month() {
          this.last.day = 1;
          if (this.has_by_data("BYMONTH")) {
            this.by_indices.BYMONTH++;
            if (this.by_indices.BYMONTH == this.by_data.BYMONTH.length) {
              this.by_indices.BYMONTH = 0;
              this.increment_year(1);
            }
            this.last.month = this.by_data.BYMONTH[this.by_indices.BYMONTH];
          } else {
            if (this.rule.freq == "MONTHLY") {
              this.last.month += this.rule.interval;
            } else {
              this.last.month++;
            }
            this.last.month--;
            var years = ICAL.helpers.trunc(this.last.month / 12);
            this.last.month %= 12;
            this.last.month++;
            if (years != 0) {
              this.increment_year(years);
            }
          }
        },
        increment_year: function increment_year(inc) {
          this.last.year += inc;
        },
        increment_generic: function increment_generic(inc, aDateAttr, aFactor, aNextIncrement) {
          this.last[aDateAttr] += inc;
          var nextunit = ICAL.helpers.trunc(this.last[aDateAttr] / aFactor);
          this.last[aDateAttr] %= aFactor;
          if (nextunit != 0) {
            this["increment_" + aNextIncrement](nextunit);
          }
        },
        has_by_data: function has_by_data(aRuleType) {
          return aRuleType in this.rule.parts;
        },
        expand_year_days: function expand_year_days(aYear) {
          var t2 = new ICAL.Time();
          this.days = [];
          var parts = {};
          var rules = ["BYDAY", "BYWEEKNO", "BYMONTHDAY", "BYMONTH", "BYYEARDAY"];
          for (var p in rules) {
            if (rules.hasOwnProperty(p)) {
              var part = rules[p];
              if (part in this.rule.parts) {
                parts[part] = this.rule.parts[part];
              }
            }
          }
          if ("BYMONTH" in parts && "BYWEEKNO" in parts) {
            var valid2 = 1;
            var validWeeks = {};
            t2.year = aYear;
            t2.isDate = true;
            for (var monthIdx = 0; monthIdx < this.by_data.BYMONTH.length; monthIdx++) {
              var month = this.by_data.BYMONTH[monthIdx];
              t2.month = month;
              t2.day = 1;
              var first_week = t2.weekNumber(this.rule.wkst);
              t2.day = ICAL.Time.daysInMonth(month, aYear);
              var last_week = t2.weekNumber(this.rule.wkst);
              for (monthIdx = first_week; monthIdx < last_week; monthIdx++) {
                validWeeks[monthIdx] = 1;
              }
            }
            for (var weekIdx = 0; weekIdx < this.by_data.BYWEEKNO.length && valid2; weekIdx++) {
              var weekno = this.by_data.BYWEEKNO[weekIdx];
              if (weekno < 52) {
                valid2 &= validWeeks[weekIdx];
              } else {
                valid2 = 0;
              }
            }
            if (valid2) {
              delete parts.BYMONTH;
            } else {
              delete parts.BYWEEKNO;
            }
          }
          var partCount = Object.keys(parts).length;
          if (partCount == 0) {
            var t1 = this.dtstart.clone();
            t1.year = this.last.year;
            this.days.push(t1.dayOfYear());
          } else if (partCount == 1 && "BYMONTH" in parts) {
            for (var monthkey in this.by_data.BYMONTH) {
              if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
                continue;
              }
              var t22 = this.dtstart.clone();
              t22.year = aYear;
              t22.month = this.by_data.BYMONTH[monthkey];
              t22.isDate = true;
              this.days.push(t22.dayOfYear());
            }
          } else if (partCount == 1 && "BYMONTHDAY" in parts) {
            for (var monthdaykey in this.by_data.BYMONTHDAY) {
              if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) {
                continue;
              }
              var t3 = this.dtstart.clone();
              var day_ = this.by_data.BYMONTHDAY[monthdaykey];
              if (day_ < 0) {
                var daysInMonth = ICAL.Time.daysInMonth(t3.month, aYear);
                day_ = day_ + daysInMonth + 1;
              }
              t3.day = day_;
              t3.year = aYear;
              t3.isDate = true;
              this.days.push(t3.dayOfYear());
            }
          } else if (partCount == 2 && "BYMONTHDAY" in parts && "BYMONTH" in parts) {
            for (var monthkey in this.by_data.BYMONTH) {
              if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
                continue;
              }
              var month_ = this.by_data.BYMONTH[monthkey];
              var daysInMonth = ICAL.Time.daysInMonth(month_, aYear);
              for (var monthdaykey in this.by_data.BYMONTHDAY) {
                if (!this.by_data.BYMONTHDAY.hasOwnProperty(monthdaykey)) {
                  continue;
                }
                var day_ = this.by_data.BYMONTHDAY[monthdaykey];
                if (day_ < 0) {
                  day_ = day_ + daysInMonth + 1;
                }
                t2.day = day_;
                t2.month = month_;
                t2.year = aYear;
                t2.isDate = true;
                this.days.push(t2.dayOfYear());
              }
            }
          } else if (partCount == 1 && "BYWEEKNO" in parts) {
          } else if (partCount == 2 && "BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
          } else if (partCount == 1 && "BYDAY" in parts) {
            this.days = this.days.concat(this.expand_by_day(aYear));
          } else if (partCount == 2 && "BYDAY" in parts && "BYMONTH" in parts) {
            for (var monthkey in this.by_data.BYMONTH) {
              if (!this.by_data.BYMONTH.hasOwnProperty(monthkey)) {
                continue;
              }
              var month = this.by_data.BYMONTH[monthkey];
              var daysInMonth = ICAL.Time.daysInMonth(month, aYear);
              t2.year = aYear;
              t2.month = this.by_data.BYMONTH[monthkey];
              t2.day = 1;
              t2.isDate = true;
              var first_dow = t2.dayOfWeek();
              var doy_offset = t2.dayOfYear() - 1;
              t2.day = daysInMonth;
              var last_dow = t2.dayOfWeek();
              if (this.has_by_data("BYSETPOS")) {
                var set_pos_counter = 0;
                var by_month_day = [];
                for (var day = 1; day <= daysInMonth; day++) {
                  t2.day = day;
                  if (this.is_day_in_byday(t2)) {
                    by_month_day.push(day);
                  }
                }
                for (var spIndex = 0; spIndex < by_month_day.length; spIndex++) {
                  if (this.check_set_position(spIndex + 1) || this.check_set_position(spIndex - by_month_day.length)) {
                    this.days.push(doy_offset + by_month_day[spIndex]);
                  }
                }
              } else {
                for (var daycodedkey in this.by_data.BYDAY) {
                  if (!this.by_data.BYDAY.hasOwnProperty(daycodedkey)) {
                    continue;
                  }
                  var coded_day = this.by_data.BYDAY[daycodedkey];
                  var bydayParts = this.ruleDayOfWeek(coded_day);
                  var pos = bydayParts[0];
                  var dow = bydayParts[1];
                  var month_day;
                  var first_matching_day = (dow + 7 - first_dow) % 7 + 1;
                  var last_matching_day = daysInMonth - (last_dow + 7 - dow) % 7;
                  if (pos == 0) {
                    for (var day = first_matching_day; day <= daysInMonth; day += 7) {
                      this.days.push(doy_offset + day);
                    }
                  } else if (pos > 0) {
                    month_day = first_matching_day + (pos - 1) * 7;
                    if (month_day <= daysInMonth) {
                      this.days.push(doy_offset + month_day);
                    }
                  } else {
                    month_day = last_matching_day + (pos + 1) * 7;
                    if (month_day > 0) {
                      this.days.push(doy_offset + month_day);
                    }
                  }
                }
              }
            }
            this.days.sort(function(a2, b) {
              return a2 - b;
            });
          } else if (partCount == 2 && "BYDAY" in parts && "BYMONTHDAY" in parts) {
            var expandedDays = this.expand_by_day(aYear);
            for (var daykey in expandedDays) {
              if (!expandedDays.hasOwnProperty(daykey)) {
                continue;
              }
              var day = expandedDays[daykey];
              var tt = ICAL.Time.fromDayOfYear(day, aYear);
              if (this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
                this.days.push(day);
              }
            }
          } else if (partCount == 3 && "BYDAY" in parts && "BYMONTHDAY" in parts && "BYMONTH" in parts) {
            var expandedDays = this.expand_by_day(aYear);
            for (var daykey in expandedDays) {
              if (!expandedDays.hasOwnProperty(daykey)) {
                continue;
              }
              var day = expandedDays[daykey];
              var tt = ICAL.Time.fromDayOfYear(day, aYear);
              if (this.by_data.BYMONTH.indexOf(tt.month) >= 0 && this.by_data.BYMONTHDAY.indexOf(tt.day) >= 0) {
                this.days.push(day);
              }
            }
          } else if (partCount == 2 && "BYDAY" in parts && "BYWEEKNO" in parts) {
            var expandedDays = this.expand_by_day(aYear);
            for (var daykey in expandedDays) {
              if (!expandedDays.hasOwnProperty(daykey)) {
                continue;
              }
              var day = expandedDays[daykey];
              var tt = ICAL.Time.fromDayOfYear(day, aYear);
              var weekno = tt.weekNumber(this.rule.wkst);
              if (this.by_data.BYWEEKNO.indexOf(weekno)) {
                this.days.push(day);
              }
            }
          } else if (partCount == 3 && "BYDAY" in parts && "BYWEEKNO" in parts && "BYMONTHDAY" in parts) {
          } else if (partCount == 1 && "BYYEARDAY" in parts) {
            this.days = this.days.concat(this.by_data.BYYEARDAY);
          } else {
            this.days = [];
          }
          return 0;
        },
        expand_by_day: function expand_by_day(aYear) {
          var days_list = [];
          var tmp = this.last.clone();
          tmp.year = aYear;
          tmp.month = 1;
          tmp.day = 1;
          tmp.isDate = true;
          var start_dow = tmp.dayOfWeek();
          tmp.month = 12;
          tmp.day = 31;
          tmp.isDate = true;
          var end_dow = tmp.dayOfWeek();
          var end_year_day = tmp.dayOfYear();
          for (var daykey in this.by_data.BYDAY) {
            if (!this.by_data.BYDAY.hasOwnProperty(daykey)) {
              continue;
            }
            var day = this.by_data.BYDAY[daykey];
            var parts = this.ruleDayOfWeek(day);
            var pos = parts[0];
            var dow = parts[1];
            if (pos == 0) {
              var tmp_start_doy = (dow + 7 - start_dow) % 7 + 1;
              for (var doy = tmp_start_doy; doy <= end_year_day; doy += 7) {
                days_list.push(doy);
              }
            } else if (pos > 0) {
              var first;
              if (dow >= start_dow) {
                first = dow - start_dow + 1;
              } else {
                first = dow - start_dow + 8;
              }
              days_list.push(first + (pos - 1) * 7);
            } else {
              var last;
              pos = -pos;
              if (dow <= end_dow) {
                last = end_year_day - end_dow + dow;
              } else {
                last = end_year_day - end_dow + dow - 7;
              }
              days_list.push(last - (pos - 1) * 7);
            }
          }
          return days_list;
        },
        is_day_in_byday: function is_day_in_byday(tt) {
          for (var daykey in this.by_data.BYDAY) {
            if (!this.by_data.BYDAY.hasOwnProperty(daykey)) {
              continue;
            }
            var day = this.by_data.BYDAY[daykey];
            var parts = this.ruleDayOfWeek(day);
            var pos = parts[0];
            var dow = parts[1];
            var this_dow = tt.dayOfWeek();
            if (pos == 0 && dow == this_dow || tt.nthWeekDay(dow, pos) == tt.day) {
              return 1;
            }
          }
          return 0;
        },
        /**
         * Checks if given value is in BYSETPOS.
         *
         * @private
         * @param {Numeric} aPos position to check for.
         * @return {Boolean} false unless BYSETPOS rules exist
         *                   and the given value is present in rules.
         */
        check_set_position: function check_set_position(aPos) {
          if (this.has_by_data("BYSETPOS")) {
            var idx = this.by_data.BYSETPOS.indexOf(aPos);
            return idx !== -1;
          }
          return false;
        },
        sort_byday_rules: function icalrecur_sort_byday_rules(aRules) {
          for (var i = 0; i < aRules.length; i++) {
            for (var j = 0; j < i; j++) {
              var one3 = this.ruleDayOfWeek(aRules[j], this.rule.wkst)[1];
              var two = this.ruleDayOfWeek(aRules[i], this.rule.wkst)[1];
              if (one3 > two) {
                var tmp = aRules[i];
                aRules[i] = aRules[j];
                aRules[j] = tmp;
              }
            }
          }
        },
        check_contract_restriction: function check_contract_restriction(aRuleType, v) {
          var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
          var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];
          var pass = false;
          if (aRuleType in this.by_data && ruleMapValue == icalrecur_iterator.CONTRACT) {
            var ruleType = this.by_data[aRuleType];
            for (var bydatakey in ruleType) {
              if (ruleType.hasOwnProperty(bydatakey)) {
                if (ruleType[bydatakey] == v) {
                  pass = true;
                  break;
                }
              }
            }
          } else {
            pass = true;
          }
          return pass;
        },
        check_contracting_rules: function check_contracting_rules() {
          var dow = this.last.dayOfWeek();
          var weekNo = this.last.weekNumber(this.rule.wkst);
          var doy = this.last.dayOfYear();
          return this.check_contract_restriction("BYSECOND", this.last.second) && this.check_contract_restriction("BYMINUTE", this.last.minute) && this.check_contract_restriction("BYHOUR", this.last.hour) && this.check_contract_restriction("BYDAY", ICAL.Recur.numericDayToIcalDay(dow)) && this.check_contract_restriction("BYWEEKNO", weekNo) && this.check_contract_restriction("BYMONTHDAY", this.last.day) && this.check_contract_restriction("BYMONTH", this.last.month) && this.check_contract_restriction("BYYEARDAY", doy);
        },
        setup_defaults: function setup_defaults(aRuleType, req, deftime) {
          var indexMapValue = icalrecur_iterator._indexMap[aRuleType];
          var ruleMapValue = icalrecur_iterator._expandMap[this.rule.freq][indexMapValue];
          if (ruleMapValue != icalrecur_iterator.CONTRACT) {
            if (!(aRuleType in this.by_data)) {
              this.by_data[aRuleType] = [deftime];
            }
            if (this.rule.freq != req) {
              return this.by_data[aRuleType][0];
            }
          }
          return deftime;
        },
        /**
         * Convert iterator into a serialize-able object.  Will preserve current
         * iteration sequence to ensure the seamless continuation of the recurrence
         * rule.
         * @return {Object}
         */
        toJSON: function() {
          var result = /* @__PURE__ */ Object.create(null);
          result.initialized = this.initialized;
          result.rule = this.rule.toJSON();
          result.dtstart = this.dtstart.toJSON();
          result.by_data = this.by_data;
          result.days = this.days;
          result.last = this.last.toJSON();
          result.by_indices = this.by_indices;
          result.occurrence_number = this.occurrence_number;
          return result;
        }
      };
      icalrecur_iterator._indexMap = {
        "BYSECOND": 0,
        "BYMINUTE": 1,
        "BYHOUR": 2,
        "BYDAY": 3,
        "BYMONTHDAY": 4,
        "BYYEARDAY": 5,
        "BYWEEKNO": 6,
        "BYMONTH": 7,
        "BYSETPOS": 8
      };
      icalrecur_iterator._expandMap = {
        "SECONDLY": [1, 1, 1, 1, 1, 1, 1, 1],
        "MINUTELY": [2, 1, 1, 1, 1, 1, 1, 1],
        "HOURLY": [2, 2, 1, 1, 1, 1, 1, 1],
        "DAILY": [2, 2, 2, 1, 1, 1, 1, 1],
        "WEEKLY": [2, 2, 2, 2, 3, 3, 1, 1],
        "MONTHLY": [2, 2, 2, 2, 2, 3, 3, 1],
        "YEARLY": [2, 2, 2, 2, 2, 2, 2, 2]
      };
      icalrecur_iterator.UNKNOWN = 0;
      icalrecur_iterator.CONTRACT = 1;
      icalrecur_iterator.EXPAND = 2;
      icalrecur_iterator.ILLEGAL = 3;
      return icalrecur_iterator;
    }();
    ICAL.RecurExpansion = function() {
      function formatTime2(item2) {
        return ICAL.helpers.formatClassType(item2, ICAL.Time);
      }
      function compareTime(a2, b) {
        return a2.compare(b);
      }
      function isRecurringComponent(comp) {
        return comp.hasProperty("rdate") || comp.hasProperty("rrule") || comp.hasProperty("recurrence-id");
      }
      function RecurExpansion(options) {
        this.ruleDates = [];
        this.exDates = [];
        this.fromData(options);
      }
      RecurExpansion.prototype = {
        /**
         * True when iteration is fully completed.
         * @type {Boolean}
         */
        complete: false,
        /**
         * Array of rrule iterators.
         *
         * @type {ICAL.RecurIterator[]}
         * @private
         */
        ruleIterators: null,
        /**
         * Array of rdate instances.
         *
         * @type {ICAL.Time[]}
         * @private
         */
        ruleDates: null,
        /**
         * Array of exdate instances.
         *
         * @type {ICAL.Time[]}
         * @private
         */
        exDates: null,
        /**
         * Current position in ruleDates array.
         * @type {Number}
         * @private
         */
        ruleDateInc: 0,
        /**
         * Current position in exDates array
         * @type {Number}
         * @private
         */
        exDateInc: 0,
        /**
         * Current negative date.
         *
         * @type {ICAL.Time}
         * @private
         */
        exDate: null,
        /**
         * Current additional date.
         *
         * @type {ICAL.Time}
         * @private
         */
        ruleDate: null,
        /**
         * Start date of recurring rules.
         *
         * @type {ICAL.Time}
         */
        dtstart: null,
        /**
         * Last expanded time
         *
         * @type {ICAL.Time}
         */
        last: null,
        /**
         * Initialize the recurrence expansion from the data object. The options
         * object may also contain additional members, see the
         * {@link ICAL.RecurExpansion constructor} for more details.
         *
         * @param {Object} options
         *        Recurrence expansion options
         * @param {ICAL.Time} options.dtstart
         *        Start time of the event
         * @param {ICAL.Component=} options.component
         *        Component for expansion, required if not resuming.
         */
        fromData: function(options) {
          var start2 = ICAL.helpers.formatClassType(options.dtstart, ICAL.Time);
          if (!start2) {
            throw new Error(".dtstart (ICAL.Time) must be given");
          } else {
            this.dtstart = start2;
          }
          if (options.component) {
            this._init(options.component);
          } else {
            this.last = formatTime2(options.last) || start2.clone();
            if (!options.ruleIterators) {
              throw new Error(".ruleIterators or .component must be given");
            }
            this.ruleIterators = options.ruleIterators.map(function(item2) {
              return ICAL.helpers.formatClassType(item2, ICAL.RecurIterator);
            });
            this.ruleDateInc = options.ruleDateInc;
            this.exDateInc = options.exDateInc;
            if (options.ruleDates) {
              this.ruleDates = options.ruleDates.map(formatTime2);
              this.ruleDate = this.ruleDates[this.ruleDateInc];
            }
            if (options.exDates) {
              this.exDates = options.exDates.map(formatTime2);
              this.exDate = this.exDates[this.exDateInc];
            }
            if (typeof options.complete !== "undefined") {
              this.complete = options.complete;
            }
          }
        },
        /**
         * Retrieve the next occurrence in the series.
         * @return {ICAL.Time}
         */
        next: function() {
          var iter;
          var ruleOfDay;
          var next;
          var compare;
          var maxTries = 500;
          var currentTry = 0;
          while (true) {
            if (currentTry++ > maxTries) {
              throw new Error(
                "max tries have occured, rule may be impossible to forfill."
              );
            }
            next = this.ruleDate;
            iter = this._nextRecurrenceIter(this.last);
            if (!next && !iter) {
              this.complete = true;
              break;
            }
            if (!next || iter && next.compare(iter.last) > 0) {
              next = iter.last.clone();
              iter.next();
            }
            if (this.ruleDate === next) {
              this._nextRuleDay();
            }
            this.last = next;
            if (this.exDate) {
              compare = this.exDate.compare(this.last);
              if (compare < 0) {
                this._nextExDay();
              }
              if (compare === 0) {
                this._nextExDay();
                continue;
              }
            }
            return this.last;
          }
        },
        /**
         * Converts object into a serialize-able format. This format can be passed
         * back into the expansion to resume iteration.
         * @return {Object}
         */
        toJSON: function() {
          function toJSON(item2) {
            return item2.toJSON();
          }
          var result = /* @__PURE__ */ Object.create(null);
          result.ruleIterators = this.ruleIterators.map(toJSON);
          if (this.ruleDates) {
            result.ruleDates = this.ruleDates.map(toJSON);
          }
          if (this.exDates) {
            result.exDates = this.exDates.map(toJSON);
          }
          result.ruleDateInc = this.ruleDateInc;
          result.exDateInc = this.exDateInc;
          result.last = this.last.toJSON();
          result.dtstart = this.dtstart.toJSON();
          result.complete = this.complete;
          return result;
        },
        /**
         * Extract all dates from the properties in the given component. The
         * properties will be filtered by the property name.
         *
         * @private
         * @param {ICAL.Component} component        The component to search in
         * @param {String} propertyName             The property name to search for
         * @return {ICAL.Time[]}                    The extracted dates.
         */
        _extractDates: function(component, propertyName) {
          function handleProp(prop2) {
            idx = ICAL.helpers.binsearchInsert(
              result,
              prop2,
              compareTime
            );
            result.splice(idx, 0, prop2);
          }
          var result = [];
          var props = component.getAllProperties(propertyName);
          var len = props.length;
          var i = 0;
          var prop;
          var idx;
          for (; i < len; i++) {
            props[i].getValues().forEach(handleProp);
          }
          return result;
        },
        /**
         * Initialize the recurrence expansion.
         *
         * @private
         * @param {ICAL.Component} component    The component to initialize from.
         */
        _init: function(component) {
          this.ruleIterators = [];
          this.last = this.dtstart.clone();
          if (!isRecurringComponent(component)) {
            this.ruleDate = this.last.clone();
            this.complete = true;
            return;
          }
          if (component.hasProperty("rdate")) {
            this.ruleDates = this._extractDates(component, "rdate");
            if (this.ruleDates[0] && this.ruleDates[0].compare(this.dtstart) < 0) {
              this.ruleDateInc = 0;
              this.last = this.ruleDates[0].clone();
            } else {
              this.ruleDateInc = ICAL.helpers.binsearchInsert(
                this.ruleDates,
                this.last,
                compareTime
              );
            }
            this.ruleDate = this.ruleDates[this.ruleDateInc];
          }
          if (component.hasProperty("rrule")) {
            var rules = component.getAllProperties("rrule");
            var i = 0;
            var len = rules.length;
            var rule;
            var iter;
            for (; i < len; i++) {
              rule = rules[i].getFirstValue();
              iter = rule.iterator(this.dtstart);
              this.ruleIterators.push(iter);
              iter.next();
            }
          }
          if (component.hasProperty("exdate")) {
            this.exDates = this._extractDates(component, "exdate");
            this.exDateInc = ICAL.helpers.binsearchInsert(
              this.exDates,
              this.last,
              compareTime
            );
            this.exDate = this.exDates[this.exDateInc];
          }
        },
        /**
         * Advance to the next exdate
         * @private
         */
        _nextExDay: function() {
          this.exDate = this.exDates[++this.exDateInc];
        },
        /**
         * Advance to the next rule date
         * @private
         */
        _nextRuleDay: function() {
          this.ruleDate = this.ruleDates[++this.ruleDateInc];
        },
        /**
         * Find and return the recurrence rule with the most recent event and
         * return it.
         *
         * @private
         * @return {?ICAL.RecurIterator}    Found iterator.
         */
        _nextRecurrenceIter: function() {
          var iters = this.ruleIterators;
          if (iters.length === 0) {
            return null;
          }
          var len = iters.length;
          var iter;
          var iterTime;
          var iterIdx = 0;
          var chosenIter;
          for (; iterIdx < len; iterIdx++) {
            iter = iters[iterIdx];
            iterTime = iter.last;
            if (iter.completed) {
              len--;
              if (iterIdx !== 0) {
                iterIdx--;
              }
              iters.splice(iterIdx, 1);
              continue;
            }
            if (!chosenIter || chosenIter.last.compare(iterTime) > 0) {
              chosenIter = iter;
            }
          }
          return chosenIter;
        }
      };
      return RecurExpansion;
    }();
    ICAL.Event = function() {
      function Event(component, options) {
        if (!(component instanceof ICAL.Component)) {
          options = component;
          component = null;
        }
        if (component) {
          this.component = component;
        } else {
          this.component = new ICAL.Component("vevent");
        }
        this._rangeExceptionCache = /* @__PURE__ */ Object.create(null);
        this.exceptions = /* @__PURE__ */ Object.create(null);
        this.rangeExceptions = [];
        if (options && options.strictExceptions) {
          this.strictExceptions = options.strictExceptions;
        }
        if (options && options.exceptions) {
          options.exceptions.forEach(this.relateException, this);
        } else if (this.component.parent && !this.isRecurrenceException()) {
          this.component.parent.getAllSubcomponents("vevent").forEach(function(event) {
            if (event.hasProperty("recurrence-id")) {
              this.relateException(event);
            }
          }, this);
        }
      }
      Event.prototype = {
        THISANDFUTURE: "THISANDFUTURE",
        /**
         * List of related event exceptions.
         *
         * @type {ICAL.Event[]}
         */
        exceptions: null,
        /**
         * When true, will verify exceptions are related by their UUID.
         *
         * @type {Boolean}
         */
        strictExceptions: false,
        /**
         * Relates a given event exception to this object.  If the given component
         * does not share the UID of this event it cannot be related and will throw
         * an exception.
         *
         * If this component is an exception it cannot have other exceptions
         * related to it.
         *
         * @param {ICAL.Component|ICAL.Event} obj       Component or event
         */
        relateException: function(obj) {
          if (this.isRecurrenceException()) {
            throw new Error("cannot relate exception to exceptions");
          }
          if (obj instanceof ICAL.Component) {
            obj = new ICAL.Event(obj);
          }
          if (this.strictExceptions && obj.uid !== this.uid) {
            throw new Error("attempted to relate unrelated exception");
          }
          var id = obj.recurrenceId.toString();
          this.exceptions[id] = obj;
          if (obj.modifiesFuture()) {
            var item2 = [
              obj.recurrenceId.toUnixTime(),
              id
            ];
            var idx = ICAL.helpers.binsearchInsert(
              this.rangeExceptions,
              item2,
              compareRangeException
            );
            this.rangeExceptions.splice(idx, 0, item2);
          }
        },
        /**
         * Checks if this record is an exception and has the RANGE=THISANDFUTURE
         * value.
         *
         * @return {Boolean}        True, when exception is within range
         */
        modifiesFuture: function() {
          if (!this.component.hasProperty("recurrence-id")) {
            return false;
          }
          var range = this.component.getFirstProperty("recurrence-id").getParameter("range");
          return range === this.THISANDFUTURE;
        },
        /**
         * Finds the range exception nearest to the given date.
         *
         * @param {ICAL.Time} time usually an occurrence time of an event
         * @return {?ICAL.Event} the related event/exception or null
         */
        findRangeException: function(time) {
          if (!this.rangeExceptions.length) {
            return null;
          }
          var utc2 = time.toUnixTime();
          var idx = ICAL.helpers.binsearchInsert(
            this.rangeExceptions,
            [utc2],
            compareRangeException
          );
          idx -= 1;
          if (idx < 0) {
            return null;
          }
          var rangeItem = this.rangeExceptions[idx];
          if (utc2 < rangeItem[0]) {
            return null;
          }
          return rangeItem[1];
        },
        /**
         * This object is returned by {@link ICAL.Event#getOccurrenceDetails getOccurrenceDetails}
         *
         * @typedef {Object} occurrenceDetails
         * @memberof ICAL.Event
         * @property {ICAL.Time} recurrenceId       The passed in recurrence id
         * @property {ICAL.Event} item              The occurrence
         * @property {ICAL.Time} startDate          The start of the occurrence
         * @property {ICAL.Time} endDate            The end of the occurrence
         */
        /**
         * Returns the occurrence details based on its start time.  If the
         * occurrence has an exception will return the details for that exception.
         *
         * NOTE: this method is intend to be used in conjunction
         *       with the {@link ICAL.Event#iterator iterator} method.
         *
         * @param {ICAL.Time} occurrence time occurrence
         * @return {ICAL.Event.occurrenceDetails} Information about the occurrence
         */
        getOccurrenceDetails: function(occurrence) {
          var id = occurrence.toString();
          var utcId = occurrence.convertToZone(ICAL.Timezone.utcTimezone).toString();
          var item2;
          var result = {
            //XXX: Clone?
            recurrenceId: occurrence
          };
          if (id in this.exceptions) {
            item2 = result.item = this.exceptions[id];
            result.startDate = item2.startDate;
            result.endDate = item2.endDate;
            result.item = item2;
          } else if (utcId in this.exceptions) {
            item2 = this.exceptions[utcId];
            result.startDate = item2.startDate;
            result.endDate = item2.endDate;
            result.item = item2;
          } else {
            var rangeExceptionId = this.findRangeException(
              occurrence
            );
            var end;
            if (rangeExceptionId) {
              var exception = this.exceptions[rangeExceptionId];
              result.item = exception;
              var startDiff = this._rangeExceptionCache[rangeExceptionId];
              if (!startDiff) {
                var original = exception.recurrenceId.clone();
                var newStart = exception.startDate.clone();
                original.zone = newStart.zone;
                startDiff = newStart.subtractDate(original);
                this._rangeExceptionCache[rangeExceptionId] = startDiff;
              }
              var start2 = occurrence.clone();
              start2.zone = exception.startDate.zone;
              start2.addDuration(startDiff);
              end = start2.clone();
              end.addDuration(exception.duration);
              result.startDate = start2;
              result.endDate = end;
            } else {
              end = occurrence.clone();
              end.addDuration(this.duration);
              result.endDate = end;
              result.startDate = occurrence;
              result.item = this;
            }
          }
          return result;
        },
        /**
         * Builds a recur expansion instance for a specific point in time (defaults
         * to startDate).
         *
         * @param {ICAL.Time} startTime     Starting point for expansion
         * @return {ICAL.RecurExpansion}    Expansion object
         */
        iterator: function(startTime) {
          return new ICAL.RecurExpansion({
            component: this.component,
            dtstart: startTime || this.startDate
          });
        },
        /**
         * Checks if the event is recurring
         *
         * @return {Boolean}        True, if event is recurring
         */
        isRecurring: function() {
          var comp = this.component;
          return comp.hasProperty("rrule") || comp.hasProperty("rdate");
        },
        /**
         * Checks if the event describes a recurrence exception. See
         * {@tutorial terminology} for details.
         *
         * @return {Boolean}    True, if the even describes a recurrence exception
         */
        isRecurrenceException: function() {
          return this.component.hasProperty("recurrence-id");
        },
        /**
         * Returns the types of recurrences this event may have.
         *
         * Returned as an object with the following possible keys:
         *
         *    - YEARLY
         *    - MONTHLY
         *    - WEEKLY
         *    - DAILY
         *    - MINUTELY
         *    - SECONDLY
         *
         * @return {Object.<ICAL.Recur.frequencyValues, Boolean>}
         *          Object of recurrence flags
         */
        getRecurrenceTypes: function() {
          var rules = this.component.getAllProperties("rrule");
          var i = 0;
          var len = rules.length;
          var result = /* @__PURE__ */ Object.create(null);
          for (; i < len; i++) {
            var value = rules[i].getFirstValue();
            result[value.freq] = true;
          }
          return result;
        },
        /**
         * The uid of this event
         * @type {String}
         */
        get uid() {
          return this._firstProp("uid");
        },
        set uid(value) {
          this._setProp("uid", value);
        },
        /**
         * The start date
         * @type {ICAL.Time}
         */
        get startDate() {
          return this._firstProp("dtstart");
        },
        set startDate(value) {
          this._setTime("dtstart", value);
        },
        /**
         * The end date. This can be the result directly from the property, or the
         * end date calculated from start date and duration. Setting the property
         * will remove any duration properties.
         * @type {ICAL.Time}
         */
        get endDate() {
          var endDate = this._firstProp("dtend");
          if (!endDate) {
            var duration = this._firstProp("duration");
            endDate = this.startDate.clone();
            if (duration) {
              endDate.addDuration(duration);
            } else if (endDate.isDate) {
              endDate.day += 1;
            }
          }
          return endDate;
        },
        set endDate(value) {
          if (this.component.hasProperty("duration")) {
            this.component.removeProperty("duration");
          }
          this._setTime("dtend", value);
        },
        /**
         * The duration. This can be the result directly from the property, or the
         * duration calculated from start date and end date. Setting the property
         * will remove any `dtend` properties.
         * @type {ICAL.Duration}
         */
        get duration() {
          var duration = this._firstProp("duration");
          if (!duration) {
            return this.endDate.subtractDateTz(this.startDate);
          }
          return duration;
        },
        set duration(value) {
          if (this.component.hasProperty("dtend")) {
            this.component.removeProperty("dtend");
          }
          this._setProp("duration", value);
        },
        /**
         * The location of the event.
         * @type {String}
         */
        get location() {
          return this._firstProp("location");
        },
        set location(value) {
          return this._setProp("location", value);
        },
        /**
         * The attendees in the event
         * @type {ICAL.Property[]}
         * @readonly
         */
        get attendees() {
          return this.component.getAllProperties("attendee");
        },
        /**
         * The event summary
         * @type {String}
         */
        get summary() {
          return this._firstProp("summary");
        },
        set summary(value) {
          this._setProp("summary", value);
        },
        /**
         * The event description.
         * @type {String}
         */
        get description() {
          return this._firstProp("description");
        },
        set description(value) {
          this._setProp("description", value);
        },
        /**
         * The organizer value as an uri. In most cases this is a mailto: uri, but
         * it can also be something else, like urn:uuid:...
         * @type {String}
         */
        get organizer() {
          return this._firstProp("organizer");
        },
        set organizer(value) {
          this._setProp("organizer", value);
        },
        /**
         * The sequence value for this event. Used for scheduling
         * see {@tutorial terminology}.
         * @type {Number}
         */
        get sequence() {
          return this._firstProp("sequence");
        },
        set sequence(value) {
          this._setProp("sequence", value);
        },
        /**
         * The recurrence id for this event. See {@tutorial terminology} for details.
         * @type {ICAL.Time}
         */
        get recurrenceId() {
          return this._firstProp("recurrence-id");
        },
        set recurrenceId(value) {
          this._setTime("recurrence-id", value);
        },
        /**
         * Set/update a time property's value.
         * This will also update the TZID of the property.
         *
         * TODO: this method handles the case where we are switching
         * from a known timezone to an implied timezone (one without TZID).
         * This does _not_ handle the case of moving between a known
         *  (by TimezoneService) timezone to an unknown timezone...
         *
         * We will not add/remove/update the VTIMEZONE subcomponents
         *  leading to invalid ICAL data...
         * @private
         * @param {String} propName     The property name
         * @param {ICAL.Time} time      The time to set
         */
        _setTime: function(propName, time) {
          var prop = this.component.getFirstProperty(propName);
          if (!prop) {
            prop = new ICAL.Property(propName);
            this.component.addProperty(prop);
          }
          if (time.zone === ICAL.Timezone.localTimezone || time.zone === ICAL.Timezone.utcTimezone) {
            prop.removeParameter("tzid");
          } else {
            prop.setParameter("tzid", time.zone.tzid);
          }
          prop.setValue(time);
        },
        _setProp: function(name2, value) {
          this.component.updatePropertyWithValue(name2, value);
        },
        _firstProp: function(name2) {
          return this.component.getFirstPropertyValue(name2);
        },
        /**
         * The string representation of this event.
         * @return {String}
         */
        toString: function() {
          return this.component.toString();
        }
      };
      function compareRangeException(a2, b) {
        if (a2[0] > b[0]) return 1;
        if (b[0] > a2[0]) return -1;
        return 0;
      }
      return Event;
    }();
    ICAL.ComponentParser = function() {
      function ComponentParser(options) {
        if (typeof options === "undefined") {
          options = {};
        }
        var key;
        for (key in options) {
          if (options.hasOwnProperty(key)) {
            this[key] = options[key];
          }
        }
      }
      ComponentParser.prototype = {
        /**
         * When true, parse events
         *
         * @type {Boolean}
         */
        parseEvent: true,
        /**
         * When true, parse timezones
         *
         * @type {Boolean}
         */
        parseTimezone: true,
        /* SAX like events here for reference */
        /**
         * Fired when parsing is complete
         * @callback
         */
        oncomplete: (
          /* istanbul ignore next */
          function() {
          }
        ),
        /**
         * Fired if an error occurs during parsing.
         *
         * @callback
         * @param {Error} err details of error
         */
        onerror: (
          /* istanbul ignore next */
          function(err) {
          }
        ),
        /**
         * Fired when a top level component (VTIMEZONE) is found
         *
         * @callback
         * @param {ICAL.Timezone} component     Timezone object
         */
        ontimezone: (
          /* istanbul ignore next */
          function(component) {
          }
        ),
        /**
         * Fired when a top level component (VEVENT) is found.
         *
         * @callback
         * @param {ICAL.Event} component    Top level component
         */
        onevent: (
          /* istanbul ignore next */
          function(component) {
          }
        ),
        /**
         * Process a string or parse ical object.  This function itself will return
         * nothing but will start the parsing process.
         *
         * Events must be registered prior to calling this method.
         *
         * @param {ICAL.Component|String|Object} ical      The component to process,
         *        either in its final form, as a jCal Object, or string representation
         */
        process: function(ical) {
          if (typeof ical === "string") {
            ical = ICAL.parse(ical);
          }
          if (!(ical instanceof ICAL.Component)) {
            ical = new ICAL.Component(ical);
          }
          var components = ical.getAllSubcomponents();
          var i = 0;
          var len = components.length;
          var component;
          for (; i < len; i++) {
            component = components[i];
            switch (component.name) {
              case "vtimezone":
                if (this.parseTimezone) {
                  var tzid = component.getFirstPropertyValue("tzid");
                  if (tzid) {
                    this.ontimezone(new ICAL.Timezone({
                      tzid,
                      component
                    }));
                  }
                }
                break;
              case "vevent":
                if (this.parseEvent) {
                  this.onevent(new ICAL.Event(component));
                }
                break;
              default:
                continue;
            }
          }
          this.oncomplete();
        }
      };
      return ComponentParser;
    }();
  }
});

// node_modules/ical-expander/zones-compiled.json
var require_zones_compiled = __commonJS({
  "node_modules/ical-expander/zones-compiled.json"(exports, module2) {
    module2.exports = { "Africa/Abidjan": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Accra": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Addis_Ababa": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Algiers": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Asmara": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Bamako": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Bangui": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Banjul": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Bissau": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Blantyre": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Brazzaville": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Bujumbura": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Cairo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Casablanca": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT", "Africa/Ceuta": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Africa/Conakry": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Dakar": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Dar_es_Salaam": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Djibouti": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Douala": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/El_Aaiun": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD", "Africa/Freetown": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Gaborone": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Harare": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Johannesburg": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Juba": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Kampala": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Khartoum": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Kigali": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Kinshasa": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Lagos": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Libreville": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Lome": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Luanda": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Lubumbashi": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Lusaka": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Malabo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Maputo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Maseru": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Mbabane": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Mogadishu": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Monrovia": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Nairobi": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Ndjamena": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Niamey": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Nouakchott": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Ouagadougou": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Porto-Novo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Sao_Tome": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:20180101T010000\r\nRDATE:20180101T010000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:20190101T020000\r\nRDATE:20190101T020000\r\nEND:STANDARD", "Africa/Tripoli": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Tunis": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Windhoek": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Adak": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-0900\r\nTZNAME:HDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Anchorage": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Anguilla": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Antigua": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Araguaina": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Buenos_Aires": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Catamarca": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Cordoba": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Jujuy": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/La_Rioja": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Mendoza": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Rio_Gallegos": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Salta": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/San_Juan": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/San_Luis": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Tucuman": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Argentina/Ushuaia": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Aruba": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Asuncion": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701004T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700322T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=4SU\r\nEND:STANDARD", "America/Atikokan": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Bahia": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Bahia_Banderas": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT", "America/Barbados": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Belem": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Belize": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Blanc-Sablon": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Boa_Vista": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Bogota": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Boise": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Cambridge_Bay": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Campo_Grande": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD", "America/Cancun": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Caracas": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Cayenne": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Cayman": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Chicago": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Chihuahua": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "America/Costa_Rica": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Creston": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Cuiaba": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Curacao": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Danmarkshavn": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Dawson": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nRDATE:20190310T020000\r\nRDATE:20200308T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191103T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:20201101T000000\r\nRDATE:20201101T000000\r\nEND:STANDARD", "America/Dawson_Creek": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Denver": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Detroit": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Dominica": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Edmonton": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Eirunepe": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/El_Salvador": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Fort_Nelson": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Fortaleza": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Glace_Bay": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Goose_Bay": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT", "America/Grand_Turk": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:20181104T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:20190310T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nEND:DAYLIGHT", "America/Grenada": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Guadeloupe": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Guatemala": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Guayaquil": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Guyana": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Halifax": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Havana": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:CST\r\nDTSTART:19701101T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:CDT\r\nDTSTART:19700308T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT", "America/Hermosillo": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Indiana/Indianapolis": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Knox": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Marengo": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Petersburg": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Tell_City": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Vevay": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Vincennes": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Indiana/Winamac": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT", "America/Inuvik": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Iqaluit": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Jamaica": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Juneau": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Kentucky/Louisville": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Kentucky/Monticello": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Kralendijk": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/La_Paz": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Lima": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Los_Angeles": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Lower_Princes": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Maceio": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Managua": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Manaus": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Marigot": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Martinique": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Matamoros": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Mazatlan": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "America/Menominee": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Merida": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "America/Metlakatla": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:20191103T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:20190120T020000\r\nRDATE:20190120T020000\r\nEND:STANDARD", "America/Mexico_City": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "America/Miquelon": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Moncton": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Monterrey": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "America/Montevideo": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Montserrat": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Nassau": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/New_York": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Nipigon": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Nome": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Noronha": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/North_Dakota/Beulah": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/North_Dakota/Center": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/North_Dakota/New_Salem": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Nuuk": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700328T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701024T230000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD", "America/Ojinaga": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Panama": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Pangnirtung": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Paramaribo": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Phoenix": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Port-au-Prince": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Port_of_Spain": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Porto_Velho": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Puerto_Rico": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Punta_Arenas": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Rainy_River": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Rankin_Inlet": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Recife": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Regina": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Resolute": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT", "America/Rio_Branco": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Santarem": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Santiago": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20190407T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20190908T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180812T000000\r\nRDATE:20180812T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180513T000000\r\nRDATE:20180513T000000\r\nEND:STANDARD", "America/Santo_Domingo": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Sao_Paulo": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:DAYLIGHT", "America/Scoresbysund": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "America/Sitka": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/St_Barthelemy": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/St_Johns": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0230\r\nTZOFFSETTO:-0330\r\nTZNAME:NST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0330\r\nTZOFFSETTO:-0230\r\nTZNAME:NDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT", "America/St_Kitts": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/St_Lucia": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/St_Thomas": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/St_Vincent": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Swift_Current": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Tegucigalpa": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Thule": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Thunder_Bay": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Tijuana": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Toronto": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Tortola": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Vancouver": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Whitehorse": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:20180311T020000\r\nRDATE:20180311T020000\r\nRDATE:20190310T020000\r\nRDATE:20200308T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191103T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:20201101T000000\r\nRDATE:20201101T000000\r\nEND:STANDARD", "America/Winnipeg": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Yakutat": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Yellowknife": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Antarctica/Casey": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20181007T040000\r\nRDATE:20181007T040000\r\nRDATE:20191004T030000\r\nRDATE:20201004T000100\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:20180311T040000\r\nRDATE:20180311T040000\r\nRDATE:20190317T030000\r\nRDATE:20200308T030000\r\nEND:STANDARD", "Antarctica/Davis": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Antarctica/DumontDUrville": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Antarctica/Macquarie": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Antarctica/Mawson": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Antarctica/McMurdo": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Antarctica/Palmer": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Antarctica/Rothera": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Antarctica/Syowa": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Antarctica/Troll": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0200\r\nTZNAME:+02\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Antarctica/Vostok": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Arctic/Longyearbyen": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Asia/Aden": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Almaty": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Amman": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700326T235959\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1TH\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD", "Asia/Anadyr": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Aqtau": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Aqtobe": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Ashgabat": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Atyrau": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Baghdad": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Bahrain": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Baku": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Bangkok": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Barnaul": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Beirut": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Asia/Bishkek": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Brunei": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Chita": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Choibalsan": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Colombo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:+0530\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Damascus": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700327T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1FR\r\nEND:DAYLIGHT", "Asia/Dhaka": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Dili": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Dubai": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Dushanbe": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Famagusta": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180325T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT", "Asia/Gaza": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20200328T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20201024T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180324T010000\r\nRDATE:20180324T010000\r\nRDATE:20190329T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20181027T010000\r\nRDATE:20181027T010000\r\nRDATE:20191026T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Hebron": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20200328T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20201024T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:20180324T010000\r\nRDATE:20180324T010000\r\nRDATE:20190329T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:20181027T010000\r\nRDATE:20181027T010000\r\nRDATE:20191026T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Ho_Chi_Minh": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Hong_Kong": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:HKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Hovd": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Irkutsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Istanbul": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Jakarta": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:WIB\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Jayapura": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:WIT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Jerusalem": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:IDT\r\nDTSTART:19700327T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=23,24,25,26,27,28,29;BYDAY=FR\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:IST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Asia/Kabul": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Kamchatka": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Karachi": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:PKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Kathmandu": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0545\r\nTZOFFSETTO:+0545\r\nTZNAME:+0545\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Khandyga": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Kolkata": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:IST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Krasnoyarsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Kuala_Lumpur": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Kuching": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Kuwait": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Macau": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Magadan": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Makassar": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:WITA\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Manila": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:PST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Muscat": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Nicosia": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT", "Asia/Novokuznetsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Novosibirsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Omsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Oral": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Phnom_Penh": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Pontianak": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:WIB\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Pyongyang": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0830\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0830\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:20180504T233000\r\nRDATE:20180504T233000\r\nEND:STANDARD", "Asia/Qatar": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Qostanay": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Qyzylorda": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:20181221T000000\r\nRDATE:20181221T000000\r\nEND:STANDARD", "Asia/Riyadh": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Sakhalin": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Samarkand": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Seoul": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Shanghai": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Singapore": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Srednekolymsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Taipei": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Tashkent": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Tbilisi": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Tehran": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0330\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:20180321T235959\r\nRDATE:20180321T235959\r\nRDATE:20190321T235959\r\nRDATE:20200320T235959\r\nRDATE:20210321T235959\r\nRDATE:20220321T235959\r\nRDATE:20230321T235959\r\nRDATE:20240320T235959\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:20180921T235959\r\nRDATE:20180921T235959\r\nRDATE:20190921T235959\r\nRDATE:20200920T235959\r\nRDATE:20210921T235959\r\nRDATE:20220921T235959\r\nRDATE:20230921T235959\r\nRDATE:20240920T235959\r\nEND:STANDARD", "Asia/Thimphu": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Tokyo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:JST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Tomsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Ulaanbaatar": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Urumqi": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Ust-Nera": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Vientiane": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Vladivostok": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Yakutsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Yangon": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Yekaterinburg": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Yerevan": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Atlantic/Azores": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Atlantic/Bermuda": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Atlantic/Canary": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Atlantic/Cape_Verde": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Atlantic/Faroe": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Atlantic/Madeira": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Atlantic/Reykjavik": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Atlantic/South_Georgia": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Atlantic/St_Helena": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Atlantic/Stanley": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Australia/Adelaide": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Australia/Brisbane": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Australia/Broken_Hill": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Australia/Currie": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Australia/Darwin": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Australia/Eucla": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0845\r\nTZOFFSETTO:+0845\r\nTZNAME:+0845\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Australia/Hobart": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Australia/Lindeman": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Australia/Lord_Howe": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1030\r\nTZNAME:+1030\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Australia/Melbourne": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Australia/Perth": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:AWST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Australia/Sydney": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Europe/Amsterdam": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Andorra": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Astrakhan": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Athens": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Belgrade": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Berlin": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Bratislava": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Brussels": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Bucharest": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Budapest": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Busingen": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Chisinau": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Copenhagen": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Dublin": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:IST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:DAYLIGHT", "Europe/Gibraltar": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Guernsey": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Helsinki": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Isle_of_Man": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Istanbul": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Jersey": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Kaliningrad": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Kiev": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Kirov": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Lisbon": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT", "Europe/Ljubljana": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/London": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Luxembourg": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Madrid": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Malta": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Mariehamn": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Minsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Monaco": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Moscow": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Nicosia": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT", "Europe/Oslo": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Paris": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Podgorica": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Prague": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Riga": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Rome": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Samara": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/San_Marino": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Sarajevo": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Saratov": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Simferopol": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Skopje": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Sofia": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Stockholm": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Tallinn": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Tirane": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Ulyanovsk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Uzhgorod": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Vaduz": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Vatican": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Vienna": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Vilnius": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Volgograd": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:20181028T020000\r\nRDATE:20181028T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Warsaw": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Zagreb": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Zaporozhye": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Europe/Zurich": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Indian/Antananarivo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Chagos": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Christmas": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Cocos": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Comoro": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Kerguelen": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Mahe": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Maldives": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Mauritius": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Mayotte": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Indian/Reunion": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Apia": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700405T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700927T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT", "Pacific/Auckland": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Pacific/Bougainville": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Chatham": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1245\r\nTZOFFSETTO:+1345\r\nTZNAME:+1345\r\nDTSTART:19700927T024500\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1345\r\nTZOFFSETTO:+1245\r\nTZNAME:+1245\r\nDTSTART:19700405T034500\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Pacific/Chuuk": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Easter": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:20190406T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SA\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:20190907T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=1SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:20180811T220000\r\nRDATE:20180811T220000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:20180512T220000\r\nRDATE:20180512T220000\r\nEND:STANDARD", "Pacific/Efate": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Enderbury": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Fakaofo": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Fiji": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700118T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=12,13,14,15,16,17,18;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20211114T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191110T020000\r\nRDATE:20201220T020000\r\nEND:DAYLIGHT", "Pacific/Funafuti": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Galapagos": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:-06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Gambier": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0900\r\nTZNAME:-09\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Guadalcanal": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Guam": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:ChST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Honolulu": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Kiritimati": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Kosrae": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Kwajalein": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Majuro": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Marquesas": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0930\r\nTZOFFSETTO:-0930\r\nTZNAME:-0930\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Midway": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:SST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Nauru": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Niue": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:-11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Norfolk": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:20191006T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20200405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1130\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:20190701T000000\r\nRDATE:20190701T000000\r\nEND:STANDARD", "Pacific/Noumea": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Pago_Pago": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1100\r\nTZOFFSETTO:-1100\r\nTZNAME:SST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Palau": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Pitcairn": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0800\r\nTZNAME:-08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Pohnpei": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Port_Moresby": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Rarotonga": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:-10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Saipan": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:ChST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Tahiti": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:-10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Tarawa": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Tongatapu": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Wake": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific/Wallis": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "AUS Central Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "AUS Eastern Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Afghanistan Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Asmera": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Africa/Timbuktu": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Alaskan Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0900\r\nTZOFFSETTO:-0800\r\nTZNAME:AKDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0900\r\nTZNAME:AKST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Argentina/ComodRivadavia": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Buenos_Aires": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "America/Godthab": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700328T220000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701024T230000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYMONTHDAY=24,25,26,27,28,29,30;BYDAY=SA\r\nEND:STANDARD", "America/Louisville": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Montreal": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "America/Santa_Isabel": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Arab Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Arabian Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Arabic Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Argentina Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Calcutta": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:IST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Katmandu": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0545\r\nTZOFFSETTO:+0545\r\nTZNAME:+0545\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Rangoon": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0630\r\nTZOFFSETTO:+0630\r\nTZNAME:+0630\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Asia/Saigon": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Atlantic Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:ADT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:AST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Atlantic/Faeroe": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:WEST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:WET\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Atlantic/Jan_Mayen": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Azerbaijan Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Azores Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19701025T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Bahia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Bangladesh Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Belarus Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Canada Central Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Cape Verde Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0100\r\nTZOFFSETTO:-0100\r\nTZNAME:-01\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Caucasus Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Cen. Australia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1030\r\nTZOFFSETTO:+0930\r\nTZNAME:ACST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0930\r\nTZOFFSETTO:+1030\r\nTZNAME:ACDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT", "Central America Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Central Asia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0600\r\nTZOFFSETTO:+0600\r\nTZNAME:+06\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Central Brazilian Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Central Europe Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Central European Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Central Pacific Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Central Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Central Standard Time (Mexico)": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "China Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "E. Africa Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:EAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "E. Australia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "E. South America Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:20181104T000000\r\nRDATE:20181104T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180218T000000\r\nRDATE:20180218T000000\r\nRDATE:20190217T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0200\r\nTZOFFSETTO:-0200\r\nTZNAME:-02\r\nDTSTART:19700101T000000\r\nEND:DAYLIGHT", "Eastern Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Egypt Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Ekaterinburg Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Europe/Belfast": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "FLE Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Fiji Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700118T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=12,13,14,15,16,17,18;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20211114T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:20181104T020000\r\nRDATE:20181104T020000\r\nRDATE:20191110T020000\r\nRDATE:20201220T020000\r\nEND:DAYLIGHT", "GMT Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:BST\r\nDTSTART:19700329T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "GTB Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Georgian Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Greenwich Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:GMT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Hawaiian Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Iran Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0330\r\nTZOFFSETTO:+0430\r\nTZNAME:+0430\r\nDTSTART:20180321T235959\r\nRDATE:20180321T235959\r\nRDATE:20190321T235959\r\nRDATE:20200320T235959\r\nRDATE:20210321T235959\r\nRDATE:20220321T235959\r\nRDATE:20230321T235959\r\nRDATE:20240320T235959\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0430\r\nTZOFFSETTO:+0330\r\nTZNAME:+0330\r\nDTSTART:20180921T235959\r\nRDATE:20180921T235959\r\nRDATE:20190921T235959\r\nRDATE:20200920T235959\r\nRDATE:20210921T235959\r\nRDATE:20220921T235959\r\nRDATE:20230921T235959\r\nRDATE:20240920T235959\r\nEND:STANDARD", "Israel Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:IDT\r\nDTSTART:19700327T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYMONTHDAY=23,24,25,26,27,28,29;BYDAY=FR\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:IST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Jordan Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700326T235959\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1TH\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T010000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD", "Kaliningrad Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Korea Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:KST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Libya Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Line Islands Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Magadan Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Mauritius Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Middle East Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700329T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701025T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Montevideo Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Morocco Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20180325T020000\r\nRDATE:20180325T020000\r\nRDATE:20180617T020000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20180513T030000\r\nRDATE:20180513T030000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0000\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20190609T020000\r\nRDATE:20190609T020000\r\nRDATE:20200531T020000\r\nRDATE:20210516T020000\r\nRDATE:20220508T020000\r\nRDATE:20230430T020000\r\nRDATE:20240414T020000\r\nEND:STANDARD\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:+01\r\nDTSTART:20181028T030000\r\nRDATE:20181028T030000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0000\r\nTZNAME:+00\r\nDTSTART:20190505T030000\r\nRDATE:20190505T030000\r\nRDATE:20200419T030000\r\nRDATE:20210411T030000\r\nRDATE:20220327T030000\r\nRDATE:20230319T030000\r\nRDATE:20240310T030000\r\nEND:DAYLIGHT", "Mountain Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Mountain Standard Time (Mexico)": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700405T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701025T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "N. Central Asia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Namibia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:CAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "New Zealand Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1300\r\nTZNAME:NZDT\r\nDTSTART:19700927T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1200\r\nTZNAME:NZST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Newfoundland Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0230\r\nTZOFFSETTO:-0330\r\nTZNAME:NST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0330\r\nTZOFFSETTO:-0230\r\nTZNAME:NDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT", "North Asia East Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "North Asia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pacific SA Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20190407T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20190908T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYMONTHDAY=2,3,4,5,6,7,8;BYDAY=SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:20180812T000000\r\nRDATE:20180812T000000\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:20180513T000000\r\nRDATE:20180513T000000\r\nEND:STANDARD", "Pacific Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Pacific/Johnston": "BEGIN:STANDARD\r\nTZOFFSETFROM:-1000\r\nTZOFFSETTO:-1000\r\nTZNAME:HST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Pakistan Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:PKT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Paraguay Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19701004T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700322T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=4SU\r\nEND:STANDARD", "Romance Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "Russia Time Zone 10": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1100\r\nTZNAME:+11\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Russia Time Zone 11": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1200\r\nTZOFFSETTO:+1200\r\nTZNAME:+12\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Russia Time Zone 3": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0400\r\nTZOFFSETTO:+0400\r\nTZNAME:+04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Russian Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:MSK\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "SA Eastern Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0300\r\nTZOFFSETTO:-0300\r\nTZNAME:-03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "SA Pacific Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0500\r\nTZNAME:-05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "SA Western Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "SE Asia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0700\r\nTZOFFSETTO:+0700\r\nTZNAME:+07\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Samoa Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1400\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700405T040000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1400\r\nTZNAME:+14\r\nDTSTART:19700927T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=9;BYDAY=-1SU\r\nEND:DAYLIGHT", "Singapore Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "South Africa Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0200\r\nTZNAME:SAST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Sri Lanka Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0530\r\nTZOFFSETTO:+0530\r\nTZNAME:+0530\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Syria Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0200\r\nTZNAME:EET\r\nDTSTART:19701030T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1FR\r\nEND:STANDARD\r\nBEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0300\r\nTZNAME:EEST\r\nDTSTART:19700327T000000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1FR\r\nEND:DAYLIGHT", "Taipei Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:CST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Tasmania Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1100\r\nTZNAME:AEDT\r\nDTSTART:19701004T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+1100\r\nTZOFFSETTO:+1000\r\nTZNAME:AEST\r\nDTSTART:19700405T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=1SU\r\nEND:STANDARD", "Tokyo Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:JST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Tonga Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1300\r\nTZOFFSETTO:+1300\r\nTZNAME:+13\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Turkey Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0300\r\nTZOFFSETTO:+0300\r\nTZNAME:+03\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "US Eastern Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "US Mountain Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "US/Central": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0500\r\nTZNAME:CDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0600\r\nTZNAME:CST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "US/Eastern": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0500\r\nTZOFFSETTO:-0400\r\nTZNAME:EDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0500\r\nTZNAME:EST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "US/Mountain": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0600\r\nTZNAME:MDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0600\r\nTZOFFSETTO:-0700\r\nTZNAME:MST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "US/Pacific": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "US/Pacific-New": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:-0800\r\nTZOFFSETTO:-0700\r\nTZNAME:PDT\r\nDTSTART:19700308T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=2SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:-0700\r\nTZOFFSETTO:-0800\r\nTZNAME:PST\r\nDTSTART:19701101T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=11;BYDAY=1SU\r\nEND:STANDARD", "Ulaanbaatar Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:+08\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Venezuela Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:-0400\r\nTZOFFSETTO:-0400\r\nTZNAME:-04\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Vladivostok Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "W. Australia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0800\r\nTZOFFSETTO:+0800\r\nTZNAME:AWST\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "W. Central Africa Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0100\r\nTZNAME:WAT\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "W. Europe Standard Time": "BEGIN:DAYLIGHT\r\nTZOFFSETFROM:+0100\r\nTZOFFSETTO:+0200\r\nTZNAME:CEST\r\nDTSTART:19700329T020000\r\nRRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\r\nEND:DAYLIGHT\r\nBEGIN:STANDARD\r\nTZOFFSETFROM:+0200\r\nTZOFFSETTO:+0100\r\nTZNAME:CET\r\nDTSTART:19701025T030000\r\nRRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\r\nEND:STANDARD", "West Asia Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0500\r\nTZOFFSETTO:+0500\r\nTZNAME:+05\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "West Pacific Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+1000\r\nTZOFFSETTO:+1000\r\nTZNAME:+10\r\nDTSTART:19700101T000000\r\nEND:STANDARD", "Yakutsk Standard Time": "BEGIN:STANDARD\r\nTZOFFSETFROM:+0900\r\nTZOFFSETTO:+0900\r\nTZNAME:+09\r\nDTSTART:19700101T000000\r\nEND:STANDARD" };
  }
});

// node_modules/ical-expander/index.js
var require_ical_expander = __commonJS({
  "node_modules/ical-expander/index.js"(exports, module2) {
    "use strict";
    var ICAL2 = require_ical();
    var timezones = require_zones_compiled();
    var IcalExpander2 = class {
      constructor(opts) {
        this.maxIterations = opts.maxIterations != null ? opts.maxIterations : 1e3;
        this.skipInvalidDates = opts.skipInvalidDates != null ? opts.skipInvalidDates : false;
        this.jCalData = ICAL2.parse(opts.ics);
        this.component = new ICAL2.Component(this.jCalData);
        this.events = this.component.getAllSubcomponents("vevent").map((vevent) => new ICAL2.Event(vevent));
        if (this.skipInvalidDates) {
          this.events = this.events.filter((evt) => {
            try {
              evt.startDate.toJSDate();
              evt.endDate.toJSDate();
              return true;
            } catch (err) {
              return false;
            }
          });
        }
      }
      between(after, before) {
        function isEventWithinRange(startTime, endTime) {
          return (!after || endTime >= after.getTime()) && (!before || startTime <= before.getTime());
        }
        function getTimes(eventOrOccurrence) {
          const startTime = eventOrOccurrence.startDate.toJSDate().getTime();
          let endTime = eventOrOccurrence.endDate.toJSDate().getTime();
          if (eventOrOccurrence.endDate.isDate && endTime > startTime) {
            endTime -= 1;
          }
          return { startTime, endTime };
        }
        const exceptions = [];
        this.events.forEach((event) => {
          if (event.isRecurrenceException()) exceptions.push(event);
        });
        const ret = {
          events: [],
          occurrences: []
        };
        this.events.filter((e2) => !e2.isRecurrenceException()).forEach((event) => {
          const exdates = [];
          event.component.getAllProperties("exdate").forEach((exdateProp) => {
            const exdate = exdateProp.getFirstValue();
            exdates.push(exdate.toJSDate().getTime());
          });
          if (event.isRecurring()) {
            const iterator = event.iterator();
            let next;
            let i = 0;
            do {
              i += 1;
              next = iterator.next();
              if (next) {
                const occurrence = event.getOccurrenceDetails(next);
                const { startTime: startTime2, endTime: endTime2 } = getTimes(occurrence);
                const isOccurrenceExcluded = exdates.indexOf(startTime2) !== -1;
                const exception = exceptions.find((ex) => ex.uid === event.uid && ex.recurrenceId.toJSDate().getTime() === occurrence.startDate.toJSDate().getTime());
                if (before && startTime2 > before.getTime()) break;
                if (isEventWithinRange(startTime2, endTime2)) {
                  if (exception) {
                    ret.events.push(exception);
                  } else if (!isOccurrenceExcluded) {
                    ret.occurrences.push(occurrence);
                  }
                }
              }
            } while (next && (!this.maxIterations || i < this.maxIterations));
            return;
          }
          const { startTime, endTime } = getTimes(event);
          if (isEventWithinRange(startTime, endTime)) ret.events.push(event);
        });
        return ret;
      }
      before(before) {
        return this.between(void 0, before);
      }
      after(after) {
        return this.between(after);
      }
      all() {
        return this.between();
      }
    };
    function registerTimezones() {
      Object.keys(timezones).forEach((key) => {
        const icsData = timezones[key];
        const icsTimezone = `BEGIN:VTIMEZONE\r
TZID:${key}\r
${icsData}\r
END:VTIMEZONE`;
        const parsed = ICAL2.parse(`BEGIN:VCALENDAR
PRODID:-//tzurl.org//NONSGML Olson 2012h//EN
VERSION:2.0
${icsTimezone}
END:VCALENDAR`);
        const comp = new ICAL2.Component(parsed);
        const vtimezone = comp.getFirstSubcomponent("vtimezone");
        ICAL2.TimezoneService.register(key, new ICAL2.Timezone(vtimezone));
      });
    }
    registerTimezones();
    module2.exports = IcalExpander2;
  }
});

// node_modules/mml-react/dist/mml-react.esm.js
var mml_react_esm_exports = {};
__export(mml_react_esm_exports, {
  AddToCalendar: () => AddToCalendar,
  Button: () => Button,
  ButtonList: () => ButtonList,
  Card: () => Card2,
  CardBody: () => CardBody,
  CardHeader: () => CardHeader2,
  Carousel: () => Carousel,
  CarouselItem: () => CarouselItem,
  Col: () => Col,
  Error: () => Error$1,
  Icon: () => Icon3,
  Image: () => Image2,
  Input: () => Input,
  Loading: () => Loading,
  MD: () => MD,
  MML: () => MML,
  MMLTag: () => MMLTag,
  Number: () => Number2,
  Parse: () => Parse,
  Row: () => Row,
  Scheduler: () => Scheduler,
  SourceToXML: () => SourceToXML,
  Success: () => Success,
  Text: () => Text,
  Tree: () => Tree,
  XMLtoMMLTree: () => XMLtoMMLTree,
  converters: () => converters,
  truncate: () => truncate
});
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self2 = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self2, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function createCommonjsModule(fn, module2) {
  return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
}
function isXmlElement(node2) {
  return !!node2.children;
}
function isMobile() {
  var ua = typeof navigator !== "undefined" ? navigator.userAgent : "";
  if (!ua) return false;
  var mobileRE = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i;
  if (mobileRE.test(ua)) return true;
  if (typeof navigator !== "undefined" && navigator.maxTouchPoints > 1 && ua.indexOf("Macintosh") !== -1 && ua.indexOf("Safari") !== -1) return true;
  return false;
}
function formatTime(date, id) {
  return (0, import_dayjs4.default)(date).format(id === "outlookcom" ? "YYYY-MM-DDTHH:mm:ss" : "YYYYMMDDTHHmmss") + "Z";
}
function createQueryString(params) {
  if (params === void 0) {
    params = {};
  }
  return Object.keys(params).reduce(function(acc, key) {
    var value = params[key];
    if (value) acc += "&" + key + "=" + encodeURIComponent(value);
    return acc;
  }, "");
}
function buildUrl(event, id) {
  var start2 = event.start, end = event.end, title = event.title, location = event.location, description = event.description;
  var startFormatted = formatTime(start2, id);
  var endFormatted = formatTime(end, id);
  if (id === "google") return "https://calendar.google.com/calendar/render?action=TEMPLATE&dates=" + startFormatted + "/" + endFormatted + createQueryString({
    location,
    text: title,
    details: description
  });
  if (id === "outlookcom") return "https://outlook.live.com/owa/?rru=addevent" + createQueryString({
    startdt: startFormatted,
    enddt: endFormatted,
    subject: title,
    location,
    body: description,
    allday: "false"
  }) + "&path=/calendar/view/Month";
  var url = ["BEGIN:VCALENDAR", "VERSION:2.0", "BEGIN:VEVENT", "URL:" + getCurrentURL(), "DTSTART:" + startFormatted, "DTEND:" + endFormatted, "SUMMARY:" + title, "DESCRIPTION:" + description, "LOCATION:" + location, "END:VEVENT", "END:VCALENDAR"].join("\n");
  if (!isIE && isMobile()) url = encodeURI("data:text/calendar;charset=utf8," + url);
  return url;
}
function SourceToXML(source) {
  var src = source.trim();
  if (!src.startsWith("<mml")) src = "<mml>" + source + "</mml>";
  var unescapedAmps = /&(?!amp;|lt;|gt;)/g;
  src = src.replace(unescapedAmps, "&amp;");
  return (0, import_parse_xml.default)(src);
}
function convertNodes(nodes) {
  return nodes.reduce(function(acc, node2) {
    var element4 = node2;
    var children;
    if (element4.children) children = convertNodes(element4.children);
    var name2 = element4.name;
    if (node2.type === "text") {
      if (node2.text.trim().length) name2 = "text";
      else return acc;
    }
    acc.push(new MMLTag(name2, node2, children));
    return acc;
  }, []);
}
function XMLtoMMLTree(document4, customConvertors) {
  if (!document4 || !document4.children || !document4.children.length) throw new Error("bad input");
  var mmlNode = document4.children[0];
  if (mmlNode.name !== "mml") throw new Error("missing mml tag");
  return new Tree(mmlNode, convertNodes(mmlNode.children), customConvertors);
}
function Parse(source, customConvertors) {
  var XMLNodes = SourceToXML(source);
  return XMLtoMMLTree(XMLNodes, customConvertors);
}
var import_react207, import_parse_xml, import_dayjs4, import_sanitize_url4, import_react_markdown3, import_linkifyjs3, import_ical_expander, import_react_virtuoso2, import_isBetween, runtime_1, MMLTag, Card2, Icon3, CardHeader2, CardBody, ButtonList, SvgIcon, IconGoogle, IconMicrosoft, IconApple, isIE, getCurrentURL, CALENDAR_SERVICES, AddToCalendar, Button, Carousel, CarouselItem, Col, Error$1, Image2, Input, SIZE, Progress, Loading, truncate, matchMarkdownLinks2, MDLinkRender, markDownRenderers2, allowedMarkups, MD, Number2, Row, ITEMS_PER_PAGE, VERTICAL_COMPENSATION, INITIAL_INDEX, VIRTUOSO_START_INDEX, DatePickerSelect, getItemData, DatePickerDate, getItemData$1, DatePickerTime, DatePicker, setupIcalFilter, Scheduler, Success, Text, converters, Tree, MML;
var init_mml_react_esm = __esm({
  "node_modules/mml-react/dist/mml-react.esm.js"() {
    import_react207 = __toESM(require("react"));
    import_parse_xml = __toESM(require_src());
    import_dayjs4 = __toESM(require("dayjs"));
    import_sanitize_url4 = require("@braintree/sanitize-url");
    import_react_markdown3 = __toESM(require_react_markdown());
    import_linkifyjs3 = require("linkifyjs");
    import_ical_expander = __toESM(require_ical_expander());
    import_react_virtuoso2 = require("react-virtuoso");
    import_isBetween = __toESM(require("dayjs/plugin/isBetween"));
    runtime_1 = createCommonjsModule(function(module2) {
      var runtime = function(exports) {
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined$1;
        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
        function define(obj, key, value) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }
        try {
          define({}, "");
        } catch (err) {
          define = function(obj, key, value) {
            return obj[key] = value;
          };
        }
        function wrap3(innerFn, outerFn, self2, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []);
          generator._invoke = makeInvokeMethod(innerFn, self2, context);
          return generator;
        }
        exports.wrap = wrap3;
        function tryCatch(fn, obj, arg) {
          try {
            return { type: "normal", arg: fn.call(obj, arg) };
          } catch (err) {
            return { type: "throw", arg: err };
          }
        }
        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed";
        var ContinueSentinel = {};
        function Generator() {
        }
        function GeneratorFunction() {
        }
        function GeneratorFunctionPrototype() {
        }
        var IteratorPrototype = {};
        IteratorPrototype[iteratorSymbol] = function() {
          return this;
        };
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          IteratorPrototype = NativeIteratorPrototype;
        }
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
        GeneratorFunctionPrototype.constructor = GeneratorFunction;
        GeneratorFunction.displayName = define(
          GeneratorFunctionPrototype,
          toStringTagSymbol,
          "GeneratorFunction"
        );
        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function(method) {
            define(prototype, method, function(arg) {
              return this._invoke(method, arg);
            });
          });
        }
        exports.isGeneratorFunction = function(genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };
        exports.mark = function(genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
          }
          genFun.prototype = Object.create(Gp);
          return genFun;
        };
        exports.awrap = function(arg) {
          return { __await: arg };
        };
        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;
              if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                return PromiseImpl.resolve(value.__await).then(function(value2) {
                  invoke("next", value2, resolve, reject);
                }, function(err) {
                  invoke("throw", err, resolve, reject);
                });
              }
              return PromiseImpl.resolve(value).then(function(unwrapped) {
                result.value = unwrapped;
                resolve(result);
              }, function(error) {
                return invoke("throw", error, resolve, reject);
              });
            }
          }
          var previousPromise;
          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
          }
          this._invoke = enqueue;
        }
        defineIteratorMethods(AsyncIterator.prototype);
        AsyncIterator.prototype[asyncIteratorSymbol] = function() {
          return this;
        };
        exports.AsyncIterator = AsyncIterator;
        exports.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0) PromiseImpl = Promise;
          var iter = new AsyncIterator(
            wrap3(innerFn, outerFn, self2, tryLocsList),
            PromiseImpl
          );
          return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
        };
        function makeInvokeMethod(innerFn, self2, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }
            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              }
              return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while (true) {
              var delegate = context.delegate;
              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }
              if (context.method === "next") {
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }
                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }
              state = GenStateExecuting;
              var record = tryCatch(innerFn, self2, context);
              if (record.type === "normal") {
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                if (record.arg === ContinueSentinel) {
                  continue;
                }
                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted;
                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];
          if (method === undefined$1) {
            context.delegate = null;
            if (context.method === "throw") {
              if (delegate.iterator["return"]) {
                context.method = "return";
                context.arg = undefined$1;
                maybeInvokeDelegate(delegate, context);
                if (context.method === "throw") {
                  return ContinueSentinel;
                }
              }
              context.method = "throw";
              context.arg = new TypeError(
                "The iterator does not provide a 'throw' method"
              );
            }
            return ContinueSentinel;
          }
          var record = tryCatch(method, delegate.iterator, context.arg);
          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }
          var info = record.arg;
          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined$1;
            }
          } else {
            return info;
          }
          context.delegate = null;
          return ContinueSentinel;
        }
        defineIteratorMethods(Gp);
        define(Gp, toStringTagSymbol, "Generator");
        Gp[iteratorSymbol] = function() {
          return this;
        };
        Gp.toString = function() {
          return "[object Generator]";
        };
        function pushTryEntry(locs) {
          var entry = { tryLoc: locs[0] };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(tryLocsList) {
          this.tryEntries = [{ tryLoc: "root" }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }
        exports.keys = function(object) {
          var keys3 = [];
          for (var key in object) {
            keys3.push(key);
          }
          keys3.reverse();
          return function next() {
            while (keys3.length) {
              var key2 = keys3.pop();
              if (key2 in object) {
                next.value = key2;
                next.done = false;
                return next;
              }
            }
            next.done = true;
            return next;
          };
        };
        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }
            if (typeof iterable.next === "function") {
              return iterable;
            }
            if (!isNaN(iterable.length)) {
              var i = -1, next = function next2() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next2.value = iterable[i];
                    next2.done = false;
                    return next2;
                  }
                }
                next2.value = undefined$1;
                next2.done = true;
                return next2;
              };
              return next.next = next;
            }
          }
          return { next: doneResult };
        }
        exports.values = values;
        function doneResult() {
          return { value: undefined$1, done: true };
        }
        Context.prototype = {
          constructor: Context,
          reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            this.sent = this._sent = undefined$1;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined$1;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
              for (var name2 in this) {
                if (name2.charAt(0) === "t" && hasOwn.call(this, name2) && !isNaN(+name2.slice(1))) {
                  this[name2] = undefined$1;
                }
              }
            }
          },
          stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }
            return this.rval;
          },
          dispatchException: function(exception) {
            if (this.done) {
              throw exception;
            }
            var context = this;
            function handle2(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;
              if (caught) {
                context.method = "next";
                context.arg = undefined$1;
              }
              return !!caught;
            }
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;
              if (entry.tryLoc === "root") {
                return handle2("end");
              }
              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");
                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle2(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle2(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle2(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle2(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              finallyEntry = null;
            }
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }
            return this.complete(record);
          },
          complete: function(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }
            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }
            return ContinueSentinel;
          },
          finish: function(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }
                return thrown;
              }
            }
            throw new Error("illegal catch attempt");
          },
          delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName,
              nextLoc
            };
            if (this.method === "next") {
              this.arg = undefined$1;
            }
            return ContinueSentinel;
          }
        };
        return exports;
      }(
        // If this script is executing as a CommonJS module, use module.exports
        // as the regeneratorRuntime namespace. Otherwise create a new empty
        // object. Either way, the resulting object will be used to initialize
        // the regeneratorRuntime variable at the top of this file.
        module2.exports
      );
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    });
    MMLTag = /* @__PURE__ */ function() {
      function MMLTag2(name2, node2, children) {
        this.name = name2;
        this.node = node2;
        this.attributes = this.node.attributes || {};
        this.children = children;
      }
      var _proto = MMLTag2.prototype;
      _proto.getText = function getText() {
        if (this.node.type === "text") return this.node.text;
        else if (isXmlElement(this.node) && this.node.children.length) return this.node.children[0].text;
        return "";
      };
      _proto.initialState = function initialState2() {
        var _ref;
        var _this$attributes = this.attributes, name2 = _this$attributes.name, value = _this$attributes.value;
        if (name2) return _ref = {}, _ref[name2] = value, _ref;
        return {};
      };
      return MMLTag2;
    }();
    Card2 = function Card3(_ref) {
      var _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, children = _ref.children;
      return import_react207.default.createElement("div", {
        className: "mml-card " + className
      }, children);
    };
    Icon3 = function Icon4(_ref) {
      var name2 = _ref.name;
      return import_react207.default.createElement("i", {
        className: "mml-icon material-icons"
      }, name2);
    };
    CardHeader2 = function CardHeader3(_ref) {
      var text8 = _ref.text, _ref$icon = _ref.icon, icon2 = _ref$icon === void 0 ? "" : _ref$icon, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
      return import_react207.default.createElement("div", {
        className: "mml-card-header " + className
      }, icon2 && import_react207.default.createElement(Icon3, {
        name: icon2
      }), import_react207.default.createElement("span", {
        className: "mml-card-header__text"
      }, text8));
    };
    CardBody = function CardBody2(_ref) {
      var _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, children = _ref.children;
      return import_react207.default.createElement("div", {
        className: "mml-card-body " + className
      }, children);
    };
    ButtonList = function ButtonList2(_ref) {
      var children = _ref.children, _ref$variant = _ref.variant, variant = _ref$variant === void 0 ? "" : _ref$variant;
      return import_react207.default.createElement("div", {
        className: "mml-btnlist " + (variant === "floating" ? " mml-btnlist--floating" : "mml-btnlist--grounded")
      }, children);
    };
    SvgIcon = function SvgIcon2(_ref) {
      var path2 = _ref.path;
      return import_react207.default.createElement("i", {
        className: "mml-icon"
      }, import_react207.default.createElement("svg", {
        className: "mml-icon__svg",
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24"
      }, import_react207.default.createElement("path", {
        d: path2
      })));
    };
    IconGoogle = /* @__PURE__ */ import_react207.default.createElement(SvgIcon, {
      path: "M21.35 11.1h-9.17v2.73h6.5c-.33 3.8-3.5 5.44-6.5 5.44C8.36 19.27 5 16.25 5 12c0-4.1 3.2-7.27 7.2-7.27 3.1 0 4.9 1.97 4.9 1.97L19 4.72S16.56 2 12.1 2C6.42 2 2.03 6.8 2.03 12c0 5.05 4.13 10 10.22 10 5.35 0 9.25-3.67 9.25-9.1 0-1.15-.15-1.8-.15-1.8h0z"
    });
    IconMicrosoft = /* @__PURE__ */ import_react207.default.createElement(SvgIcon, {
      path: "M3 12V6.75l6-1.32v6.48L3 12m17-9v8.75l-10 .15V5.2L20 3M3 13l6 .1v6.8l-6-1.15V13m17 .25V22l-10-1.9v-7l10 .15z"
    });
    IconApple = /* @__PURE__ */ import_react207.default.createElement(SvgIcon, {
      path: "M18.7 19.5c-.83 1.24-1.7 2.45-3.05 2.47-1.34.03-1.77-.8-3.3-.8-1.53 0-2 .77-3.27.82-1.3.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.4c.87-1.52 2.43-2.48 4.12-2.5 1.28-.02 2.5.87 3.3.87.78 0 2.26-1.07 3.8-.9.65.03 2.47.26 3.64 1.98-.1.06-2.17 1.28-2.15 3.8.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.2-.7.85-1.83 1.5-2.95 1.42-.15-1.15.4-2.35 1.05-3.1z"
    });
    isIE = typeof window !== "undefined" && window.navigator.msSaveOrOpenBlob && window.Blob;
    getCurrentURL = function getCurrentURL2() {
      if (typeof window !== "undefined") return window.location.href;
      return "";
    };
    CALENDAR_SERVICES = [{
      id: "google",
      label: "Google",
      Icon: IconGoogle
    }, {
      id: "apple",
      label: "Apple Calendar",
      Icon: IconApple
    }, {
      id: "outlook",
      label: "Outlook",
      Icon: IconMicrosoft
    }, {
      id: "outlookcom",
      label: "Outlook.com",
      Icon: IconMicrosoft
    }];
    AddToCalendar = function AddToCalendar2(_ref2) {
      var title = _ref2.title, start2 = _ref2.start, end = _ref2.end, _ref2$className = _ref2.className, className = _ref2$className === void 0 ? "" : _ref2$className, _ref2$location = _ref2.location, location = _ref2$location === void 0 ? "" : _ref2$location, _ref2$description = _ref2.description, description = _ref2$description === void 0 ? "" : _ref2$description;
      var event = {
        start: start2,
        end,
        title,
        location,
        description
      };
      function handleLinkClick(event2) {
        event2.preventDefault();
        var url = event2.currentTarget.getAttribute("href");
        if (!isMobile() && (url.startsWith("data") || url.startsWith("BEGIN"))) {
          var filename = "download.ics";
          var blob = new Blob([url], {
            type: "text/calendar;charset=utf-8"
          });
          if (isIE) {
            window.navigator.msSaveOrOpenBlob(blob, filename);
          } else {
            var link3 = document.createElement("a");
            link3.href = window.URL.createObjectURL(blob);
            link3.setAttribute("download", filename);
            document.body.appendChild(link3);
            link3.click();
            document.body.removeChild(link3);
          }
        } else {
          window.open(url, "_blank");
        }
      }
      return import_react207.default.createElement(Card2, {
        className: "mml-add-to-calendar " + className
      }, import_react207.default.createElement(CardHeader2, {
        icon: "date_range",
        text: "Add to My Calendar"
      }), import_react207.default.createElement(CardBody, null, import_react207.default.createElement(ButtonList, null, CALENDAR_SERVICES.map(function(_ref3) {
        var id = _ref3.id, label = _ref3.label, Icon5 = _ref3.Icon;
        return import_react207.default.createElement("a", {
          key: id,
          className: "mml-btn " + (Icon5 ? "mml-btn--with-icon" : ""),
          onClick: handleLinkClick,
          href: buildUrl(event, id),
          target: "_blank",
          rel: "nofollow noreferrer noopener"
        }, Icon5, " ", label);
      }))));
    };
    Button = function Button2(_ref) {
      var _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, text8 = _ref.text, name2 = _ref.name, value = _ref.value, _ref$url = _ref.url, url = _ref$url === void 0 ? "" : _ref$url, variant = _ref.variant, icon2 = _ref.icon;
      if (icon2) {
        className += text8 ? " mml-btn--with-icon" : " mml-btn--icon";
      } else {
        className += " mml-btn--text";
      }
      className += variant === "floating" ? " mml-btn--floating" : " mml-btn--grounded";
      if (url) return import_react207.default.createElement("a", {
        className: "mml-btn " + className,
        href: (0, import_sanitize_url4.sanitizeUrl)(url),
        target: "_blank",
        rel: "nofollow noreferrer noopener"
      }, icon2 && import_react207.default.createElement(Icon3, {
        name: icon2
      }), text8);
      return import_react207.default.createElement("button", {
        className: "mml-btn " + className,
        type: "submit",
        name: name2,
        value,
        onClick: function onClick(event) {
          var _event$currentTarget, _event$currentTarget$;
          var input2 = document.createElement("input");
          input2.type = "hidden";
          input2.name = name2 || "";
          input2.value = value || "";
          (_event$currentTarget = event.currentTarget) == null ? void 0 : (_event$currentTarget$ = _event$currentTarget.closest("form")) == null ? void 0 : _event$currentTarget$.appendChild(input2);
        }
      }, icon2 && import_react207.default.createElement(Icon3, {
        name: icon2
      }), text8);
    };
    Carousel = function Carousel2(_ref) {
      var children = _ref.children, _ref$slideWidth = _ref.slideWidth, slideWidth = _ref$slideWidth === void 0 ? "120px" : _ref$slideWidth, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
      return import_react207.default.createElement("div", {
        className: "mml-carousel " + className
      }, import_react207.default.createElement("div", {
        className: "mml-carousel__track"
      }, import_react207.default.createElement("div", {
        className: "mml-carousel__slides"
      }, import_react207.Children.map(children, function(child) {
        return (0, import_react207.cloneElement)(child, {
          className: "mml-carousel__slide",
          slideWidth
        });
      }))));
    };
    CarouselItem = function CarouselItem2(_ref) {
      var children = _ref.children, slideWidth = _ref.slideWidth, _ref$width = _ref.width, width = _ref$width === void 0 ? "" : _ref$width, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
      var finalWidth = width || slideWidth;
      return import_react207.default.createElement("div", {
        className: "mml-carousel-item " + className,
        style: {
          flex: "0 0 " + finalWidth,
          minWidth: finalWidth
        }
      }, children);
    };
    Col = function Col2(_ref) {
      var children = _ref.children, _ref$width = _ref.width, width = _ref$width === void 0 ? 12 : _ref$width, _ref$offset = _ref.offset, offset = _ref$offset === void 0 ? 0 : _ref$offset, _ref$align = _ref.align, align = _ref$align === void 0 ? "left" : _ref$align;
      var classNames = "mml-col-" + width;
      if (offset) classNames = classNames + (" mml-offset-" + offset);
      classNames = classNames + (" mml-align-" + align);
      return import_react207.default.createElement("div", {
        className: classNames
      }, children);
    };
    Error$1 = function Error2(_ref) {
      var _ref$error = _ref.error, error = _ref$error === void 0 ? "" : _ref$error;
      if (!error) return null;
      return import_react207.default.createElement("span", {
        className: "mml-error"
      }, error);
    };
    Image2 = function Image3(_ref) {
      var src = _ref.src, _ref$alt = _ref.alt, alt = _ref$alt === void 0 ? "" : _ref$alt, _ref$title = _ref.title, title = _ref$title === void 0 ? "" : _ref$title, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
      return import_react207.default.createElement("img", {
        className: ("mml-image " + className).trim(),
        src,
        alt,
        title
      });
    };
    Input = function Input2(_ref) {
      var name2 = _ref.name, label = _ref.label, _ref$value = _ref.value, value = _ref$value === void 0 ? "" : _ref$value, _ref$type = _ref.type, type = _ref$type === void 0 ? "text" : _ref$type, _ref$placeholder = _ref.placeholder, placeholder = _ref$placeholder === void 0 ? "" : _ref$placeholder;
      var _useState = (0, import_react207.useState)(value), state = _useState[0], setState = _useState[1];
      var id = "mml-" + name2;
      return import_react207.default.createElement(import_react207.default.Fragment, null, label && import_react207.default.createElement("label", {
        className: "mml-card-header",
        htmlFor: id
      }, import_react207.default.createElement("span", {
        className: "mml-card-header__text"
      }, label)), import_react207.default.createElement("input", {
        id,
        className: "mml-input",
        name: name2,
        value: state,
        type,
        placeholder,
        onChange: function onChange(event) {
          return setState(event.target.value);
        }
      }));
    };
    SIZE = 44;
    Progress = function Progress2(_ref) {
      var size = _ref.size, _ref$thickness = _ref.thickness, thickness = _ref$thickness === void 0 ? 3.6 : _ref$thickness, color2 = _ref.color;
      thickness = typeof thickness === "string" ? parseFloat(thickness) : thickness;
      size = typeof size === "string" && /^\d+$/.test(size) || typeof size === "number" ? size + "px" : size;
      return import_react207.default.createElement("span", {
        className: "mml-progress",
        role: "progressbar",
        style: {
          width: size,
          height: size,
          color: color2
        }
      }, import_react207.default.createElement("svg", {
        className: "mml-progress__svg",
        viewBox: SIZE / 2 + " " + SIZE / 2 + " " + SIZE + " " + SIZE
      }, import_react207.default.createElement("circle", {
        className: "mml-progress__circle",
        cx: SIZE,
        cy: SIZE,
        r: (SIZE - thickness) / 2,
        fill: "none",
        strokeWidth: thickness
      })));
    };
    Loading = function Loading2(_ref) {
      var _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, _ref$loading = _ref.loading, loading = _ref$loading === void 0 ? false : _ref$loading, text8 = _ref.text, size = _ref.size, thickness = _ref.thickness, color2 = _ref.color;
      if (!loading) return null;
      return import_react207.default.createElement("div", {
        className: "mml-loading " + className
      }, import_react207.default.createElement(Progress, Object.assign({}, {
        size,
        thickness,
        color: color2
      })), text8 && import_react207.default.createElement("div", {
        className: "mml-loading__text"
      }, text8));
    };
    truncate = function truncate2(input2, length, end) {
      if (end === void 0) {
        end = "...";
      }
      if (input2.length > length) return "" + input2.substring(0, length - end.length) + end;
      return input2;
    };
    matchMarkdownLinks2 = function matchMarkdownLinks3(message) {
      var regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
      var matches = message.match(regexMdLinks);
      var singleMatch = /\[([^[]+)\]\((.*)\)/;
      var links = matches ? matches.map(function(match) {
        var i = singleMatch.exec(match);
        return i && i[2];
      }) : [];
      return links;
    };
    MDLinkRender = function MDLinkRender2(props) {
      if (!props.href || !props.href.startsWith("http") && !props.href.startsWith("mailto:")) return props.children;
      return import_react207.default.createElement("a", {
        href: props.href,
        target: "_blank",
        rel: "nofollow noreferrer noopener"
      }, props.children);
    };
    markDownRenderers2 = {
      link: MDLinkRender
    };
    allowedMarkups = [
      "html",
      // @ts-ignore
      "root",
      "text",
      "break",
      "paragraph",
      "emphasis",
      "strong",
      "link",
      "list",
      "listItem",
      "code",
      "inlineCode",
      "blockquote"
    ];
    MD = function MD2(_ref) {
      var text8 = _ref.text;
      if (!text8) return null;
      var newText = text8;
      var markdownLinks = matchMarkdownLinks2(newText);
      (0, import_linkifyjs3.find)(newText).forEach(function(_ref2) {
        var type = _ref2.type, href = _ref2.href, value = _ref2.value;
        var noParsingNeeded = markdownLinks && markdownLinks.filter(function(text9) {
          return (text9 == null ? void 0 : text9.indexOf(href)) !== -1;
        });
        if (noParsingNeeded.length > 0) return;
        var displayLink = type === "email" ? value : truncate(value.replace(/(http(s?):\/\/)?(www\.)?/, ""), 20);
        newText = newText.replace(value, "[" + displayLink + "](" + encodeURI(href) + ")");
      });
      return import_react207.default.createElement("div", {
        className: "mml-md"
      }, import_react207.default.createElement(import_react_markdown3.default, {
        allowedTypes: allowedMarkups,
        renderers: markDownRenderers2,
        source: newText,
        escapeHtml: true,
        unwrapDisallowed: true,
        transformLinkUri: function transformLinkUri(uri) {
          return uri.startsWith("app://") ? uri : import_react_markdown3.default.uriTransformer(uri);
        }
      }));
    };
    Number2 = function Number3(_ref) {
      var name2 = _ref.name, value = _ref.value;
      var _useState = (0, import_react207.useState)(parseInt("" + value, 10) || 0), state = _useState[0], setState = _useState[1];
      return import_react207.default.createElement("div", {
        className: "mml-number"
      }, import_react207.default.createElement("input", {
        name: name2,
        value: state,
        type: "hidden"
      }), import_react207.default.createElement("span", {
        className: "mml-btn mml-btn--floating mml-btn--icon mml-number__dec",
        onClick: function onClick() {
          return setState(state - 1);
        }
      }, import_react207.default.createElement(Icon3, {
        name: "remove"
      })), import_react207.default.createElement("span", {
        className: "mml-number__count"
      }, state), import_react207.default.createElement("span", {
        className: "mml-btn mml-btn--floating mml-btn--icon mml-number__inc",
        onClick: function onClick() {
          return setState(state + 1);
        }
      }, import_react207.default.createElement(Icon3, {
        name: "add"
      })));
    };
    Row = function Row2(_ref) {
      var children = _ref.children;
      return import_react207.default.createElement("div", {
        className: "mml-row"
      }, children);
    };
    ITEMS_PER_PAGE = 40;
    VERTICAL_COMPENSATION = 3;
    INITIAL_INDEX = ITEMS_PER_PAGE;
    VIRTUOSO_START_INDEX = 1e4;
    DatePickerSelect = function DatePickerSelect2(props) {
      var onChange = props.onChange, icalFilter = props.icalFilter, getItemData4 = props.getItemData, itemClassName = props.itemClassName, interval = props.interval, format = props.format, value = props.value;
      var generateItems = (0, import_react207.useCallback)(function(quantity, firstIdx) {
        return Array(quantity).fill(true).map(function(_, idx) {
          return getItemData4({
            interval,
            format,
            value,
            idx: firstIdx + idx
          });
        }).filter(function(newItem) {
          return !icalFilter || icalFilter && icalFilter(newItem.value);
        });
      }, [interval, format, value, icalFilter, getItemData4]);
      var _useState = (0, import_react207.useState)(generateItems(ITEMS_PER_PAGE * 2, -ITEMS_PER_PAGE)), items = _useState[0], setItems = _useState[1];
      var _useState2 = (0, import_react207.useState)(VIRTUOSO_START_INDEX), firstItemIndex = _useState2[0], setFirstItemIndex = _useState2[1];
      var initialIndexOffset = (0, import_react207.useRef)(INITIAL_INDEX);
      var _useState3 = (0, import_react207.useState)(null), selectedIdx = _useState3[0], setSelectedIdx = _useState3[1];
      var handleClick = (0, import_react207.useCallback)(function(item2) {
        onChange(item2.value);
        var firstItemIndex2 = initialIndexOffset.current || 0;
        var nextFirstItemIdx = firstItemIndex2 - INITIAL_INDEX - ITEMS_PER_PAGE;
        var missingTopItems = nextFirstItemIdx - item2.idx + VERTICAL_COMPENSATION;
        if (missingTopItems >= 0) {
          nextFirstItemIdx -= missingTopItems;
          initialIndexOffset.current -= firstItemIndex2 - missingTopItems;
          setItems(function(items2) {
            return [].concat(generateItems(missingTopItems, nextFirstItemIdx), items2);
          });
        }
        setSelectedIdx(item2.idx);
      }, [setItems, generateItems, initialIndexOffset, onChange]);
      var appendItems = (0, import_react207.useCallback)(function(lastItemIndex) {
        setItems(function(items2) {
          return [].concat(items2, generateItems(ITEMS_PER_PAGE, lastItemIndex));
        });
      }, [setItems, generateItems]);
      var prependItems = (0, import_react207.useCallback)(function() {
        var firstItemIndex2 = initialIndexOffset.current || 0;
        var nextFirstItemIdx = firstItemIndex2 - INITIAL_INDEX - ITEMS_PER_PAGE;
        if (initialIndexOffset) {
          initialIndexOffset.current -= ITEMS_PER_PAGE;
        }
        setItems(function(items2) {
          return [].concat(generateItems(ITEMS_PER_PAGE, nextFirstItemIdx), items2);
        });
        setFirstItemIndex(firstItemIndex2 - ITEMS_PER_PAGE);
        return false;
      }, [setItems, generateItems, initialIndexOffset]);
      (0, import_react207.useEffect)(function() {
        if (value) {
          var initialSelectedIdx = null;
          for (var i = 0; i < items.length; i++) {
            if (items[i].isSelected(value)) {
              initialSelectedIdx = items[i].idx;
              break;
            }
          }
          setSelectedIdx(initialSelectedIdx);
        }
      }, []);
      return import_react207.default.createElement(import_react_virtuoso2.Virtuoso, {
        data: items,
        firstItemIndex,
        itemContent: function itemContent(_, item2) {
          return import_react207.default.createElement("div", {
            className: itemClassName + (" mml-datepicker__item " + (item2.idx === selectedIdx ? "mml-datepicker__item--selected" : "")),
            onClick: function onClick() {
              return handleClick(item2);
            }
          }, item2.displayValue);
        },
        endReached: appendItems,
        startReached: prependItems
      });
    };
    getItemData = function getItemData2(props) {
      var idx = props.idx, interval = props.interval, value = props.value, format = props.format;
      var newValue = idx >= 0 ? (0, import_dayjs4.default)(value).add(idx * (interval * 24), "hour") : (0, import_dayjs4.default)(value).subtract(idx * (interval * 24) * -1, "hour");
      return {
        idx,
        value: newValue,
        displayValue: (0, import_dayjs4.default)(newValue).format(format),
        isSelected: function isSelected(currentValue) {
          return (0, import_dayjs4.default)(newValue).isSame(interval === 1 ? (0, import_dayjs4.default)(currentValue) : (0, import_dayjs4.default)(currentValue).add(interval, "day"), "date");
        }
      };
    };
    DatePickerDate = function DatePickerDate2(props) {
      return import_react207.default.createElement("div", {
        className: "mml-datepicker__select mml-datepicker__date"
      }, import_react207.default.createElement(DatePickerSelect, Object.assign({}, props, {
        itemClassName: "mml-datepicker__item--day",
        getItemData
      })));
    };
    import_dayjs4.default.extend(import_isBetween.default);
    getItemData$1 = function getItemData3(props) {
      var idx = props.idx, interval = props.interval, value = props.value, format = props.format;
      var newValue = idx >= 0 ? (0, import_dayjs4.default)(value).add(idx * interval, "minute") : (0, import_dayjs4.default)(value).subtract(idx * -1 * interval, "minute");
      return {
        idx,
        value: newValue,
        displayValue: (0, import_dayjs4.default)(newValue).format(format),
        isSelected: function isSelected(currentValue) {
          return (0, import_dayjs4.default)(newValue).isBetween(currentValue, (0, import_dayjs4.default)(currentValue).add(interval - 1, "minute"), "minute", "[]");
        }
      };
    };
    DatePickerTime = function DatePickerTime2(props) {
      return import_react207.default.createElement("div", {
        className: "mml-datepicker__select mml-datepicker__time"
      }, import_react207.default.createElement(DatePickerSelect, Object.assign({}, props, {
        itemClassName: "mml-datepicker__item--time",
        getItemData: getItemData$1
      })));
    };
    DatePicker = function DatePicker2(_ref) {
      var name2 = _ref.name, selected = _ref.selected, dateInterval = _ref.dateInterval, timeInterval = _ref.timeInterval, dateFormat = _ref.dateFormat, timeFormat = _ref.timeFormat, fullDay = _ref.fullDay, icalFilter = _ref.icalFilter;
      var _useState = (0, import_react207.useState)(selected), date = _useState[0], setDate = _useState[1];
      var handleChangeDate = function handleChangeDate2(value) {
        setDate(function(prevDate) {
          return prevDate.set("date", value.get("date")).set("month", value.get("month")).set("year", value.get("year"));
        });
      };
      var handleChangeTime = function handleChangeTime2(value) {
        setDate(function(prevDate) {
          return prevDate.set("minute", value.get("minute")).set("hour", value.get("hour"));
        });
      };
      return import_react207.default.createElement("div", {
        className: "mml-datepicker mml-datepicker--" + (fullDay ? "single" : "double")
      }, import_react207.default.createElement("input", {
        name: name2,
        value: date.toISOString(),
        type: "hidden"
      }), import_react207.default.createElement(DatePickerDate, {
        icalFilter,
        format: dateFormat,
        value: date,
        onChange: handleChangeDate,
        interval: dateInterval
      }), !fullDay && import_react207.default.createElement(DatePickerTime, {
        icalFilter,
        format: timeFormat,
        value: date,
        onChange: handleChangeTime,
        interval: timeInterval
      }));
    };
    setupIcalFilter = /* @__PURE__ */ function() {
      var _ref = /* @__PURE__ */ _asyncToGenerator(/* @__PURE__ */ runtime_1.mark(function _callee(icalURL, duration) {
        var response, body, icalExpander;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return fetch(icalURL, {
                  method: "GET",
                  redirect: "follow",
                  credentials: "same-origin"
                });
              case 2:
                response = _context.sent;
                _context.next = 5;
                return response.text();
              case 5:
                body = _context.sent;
                if (response.ok) {
                  _context.next = 8;
                  break;
                }
                throw new Error(body);
              case 8:
                icalExpander = new import_ical_expander.default({
                  ics: body,
                  maxIterations: 10
                });
                return _context.abrupt("return", function() {
                  return function(start2) {
                    if (!start2) return true;
                    var _icalExpander$between = icalExpander.between(start2.toDate(), start2.add(duration, "minute").toDate()), events = _icalExpander$between.events;
                    return !events.length;
                  };
                });
              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));
      return function setupIcalFilter2(_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();
    Scheduler = function Scheduler2(_ref2) {
      var name2 = _ref2.name, selected = _ref2.selected, icalAvailability = _ref2.icalAvailability, _ref2$duration = _ref2.duration, duration = _ref2$duration === void 0 ? 30 : _ref2$duration, _ref2$dateInterval = _ref2.dateInterval, dateInterval = _ref2$dateInterval === void 0 ? 1 : _ref2$dateInterval, _ref2$timeInterval = _ref2.timeInterval, timeInterval = _ref2$timeInterval === void 0 ? 30 : _ref2$timeInterval, _ref2$dateFormat = _ref2.dateFormat, dateFormat = _ref2$dateFormat === void 0 ? "ddd MMM DD" : _ref2$dateFormat, _ref2$timeFormat = _ref2.timeFormat, timeFormat = _ref2$timeFormat === void 0 ? "hh:mm A" : _ref2$timeFormat, _ref2$fullDay = _ref2.fullDay, fullDay = _ref2$fullDay === void 0 ? false : _ref2$fullDay;
      var _useState = (0, import_react207.useState)(false), loading = _useState[0], setLoading = _useState[1];
      var _useState2 = (0, import_react207.useState)(""), error = _useState2[0], setError = _useState2[1];
      var _useState3 = (0, import_react207.useState)(function() {
        return function() {
          return true;
        };
      }), icalFilter = _useState3[0], setIcalFilter = _useState3[1];
      (0, import_react207.useEffect)(function() {
        if (!icalAvailability) return;
        setLoading(true);
        setupIcalFilter(icalAvailability, duration).then(setIcalFilter)["catch"](function(err) {
          console.warn("loading ical failed", {
            icalAvailability,
            err
          });
          setError("iCal availability could not be loaded");
        })["finally"](function() {
          return setLoading(false);
        });
      }, [icalAvailability, duration]);
      return import_react207.default.createElement(Card2, {
        className: "mml-scheduler"
      }, import_react207.default.createElement(CardHeader2, {
        icon: "date_range",
        text: "Scheduler"
      }), import_react207.default.createElement(CardBody, null, error && !loading && import_react207.default.createElement(Error$1, {
        error: "Failed, error: " + error
      }), !error && loading && import_react207.default.createElement(Loading, {
        loading: true,
        text: "Loading availability"
      }), !error && !loading && import_react207.default.createElement(DatePicker, {
        name: name2,
        selected: selected ? (0, import_dayjs4.default)(selected) : (0, import_dayjs4.default)().startOf("hour"),
        dateInterval,
        timeInterval,
        dateFormat,
        timeFormat,
        fullDay,
        icalFilter
      })));
    };
    Success = function Success2(_ref) {
      var success = _ref.success;
      if (success) return import_react207.default.createElement("div", {
        className: "mml-success"
      }, success);
      return null;
    };
    Text = function Text2(_ref) {
      var text8 = _ref.text, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className;
      return import_react207.default.createElement("div", {
        className: ("mml-text " + className).trim()
      }, text8);
    };
    converters = {
      button: function button(tag) {
        return import_react207.default.createElement(Button, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText(),
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      },
      button_list: function button_list(tag, children) {
        return import_react207.default.createElement(ButtonList, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      input: function input(tag) {
        return import_react207.default.createElement(Input, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      },
      add_to_calendar: function add_to_calendar(tag) {
        return import_react207.default.createElement(AddToCalendar, Object.assign({}, tag.attributes, {
          key: tag.key,
          title: tag.attributes.title,
          start: tag.attributes.start,
          end: tag.attributes.end
        }));
      },
      col: function col(tag, children) {
        return import_react207.default.createElement(Col, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      row: function row(tag, children) {
        return import_react207.default.createElement(Row, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      icon: function icon(tag) {
        return import_react207.default.createElement(Icon3, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name
        }));
      },
      image: function image3(tag) {
        return import_react207.default.createElement(Image2, Object.assign({}, tag.attributes, {
          key: tag.key,
          src: tag.attributes.src
        }));
      },
      md: function md(tag) {
        return import_react207.default.createElement(MD, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText()
        }));
      },
      text: function text7(tag) {
        return import_react207.default.createElement(Text, Object.assign({}, tag.attributes, {
          key: tag.key,
          text: tag.getText()
        }));
      },
      scheduler: function scheduler(tag) {
        return import_react207.default.createElement(Scheduler, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          dateInterval: parseInt(tag.attributes.dateInterval, 10) || 1,
          timeInterval: parseInt(tag.attributes.timeInterval, 10) || 30,
          duration: parseInt(tag.attributes.duration, 10) || 30,
          selected: tag.attributes.selected,
          fullDay: tag.attributes.fullDay === "true",
          icalAvailability: tag.attributes.icalAvailability
        }));
      },
      carousel: function carousel(tag, children) {
        return import_react207.default.createElement(Carousel, Object.assign({
          slideWidth: tag.attributes.slideWidth
        }, tag.attributes, {
          key: tag.key
        }), children);
      },
      item: function item(tag, children) {
        return import_react207.default.createElement(CarouselItem, Object.assign({}, tag.attributes, {
          key: tag.key
        }), children);
      },
      number: function number2(tag) {
        return import_react207.default.createElement(Number2, Object.assign({}, tag.attributes, {
          key: tag.key,
          name: tag.attributes.name,
          value: tag.attributes.value
        }));
      }
    };
    Tree = /* @__PURE__ */ function() {
      function Tree2(node2, children, customConvertors) {
        this.converters = _extends({}, converters, customConvertors);
        this.node = node2;
        this.children = children;
        this.reactElements = this.toReact();
        this.name = node2.attributes.name;
        this.type = node2.attributes.type;
      }
      var _proto = Tree2.prototype;
      _proto.toReact = function toReact(parent) {
        var _this = this;
        if (parent === void 0) {
          parent = this;
        }
        var reactNodes = [];
        (parent.children || []).forEach(function(child, i) {
          var converter = _this.converters[child.name];
          if (!converter || !Object.hasOwnProperty.call(_this.converters, child.name)) {
            throw Error("Converter not found for tag " + child.name + ", Available converters are " + Object.keys(_this.converters));
          }
          var children = _this.toReact(child);
          child.key = "tag-" + child.name + "-position-" + i;
          reactNodes.push(converter(child, children));
        });
        return reactNodes;
      };
      return Tree2;
    }();
    MML = function MML2(_ref) {
      var source = _ref.source, onSubmit = _ref.onSubmit, converters2 = _ref.converters, _ref$theme = _ref.theme, theme = _ref$theme === void 0 ? "" : _ref$theme, _ref$className = _ref.className, className = _ref$className === void 0 ? "" : _ref$className, _ref$Loading = _ref.Loading, Loading$1 = _ref$Loading === void 0 ? Loading : _ref$Loading, _ref$Error = _ref.Error, Error3 = _ref$Error === void 0 ? Error$1 : _ref$Error, _ref$Success = _ref.Success, Success$1 = _ref$Success === void 0 ? Success : _ref$Success;
      var _useState = (0, import_react207.useState)(""), error = _useState[0], setError = _useState[1];
      var _useState2 = (0, import_react207.useState)({
        loading: false,
        error: "",
        success: ""
      }), submitState = _useState2[0], setSubmitState = _useState2[1];
      var tree = (0, import_react207.useMemo)(function() {
        try {
          return Parse(source, converters2);
        } catch (e2) {
          console.warn("mml parsing error: ", source, e2);
          setError("This chat message has invalid formatting and can't be shown");
          return null;
        }
      }, [source, converters2]);
      var handleSubmit = (0, import_react207.useCallback)(/* @__PURE__ */ function() {
        var _ref2 = _asyncToGenerator(/* @__PURE__ */ runtime_1.mark(function _callee(event) {
          var state;
          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  event.preventDefault();
                  state = {};
                  if (tree != null && tree.name) state.mml_name = tree.name;
                  new FormData(event.currentTarget).forEach(function(value, key) {
                    state[key] = value;
                  });
                  if (onSubmit) {
                    _context.next = 6;
                    break;
                  }
                  return _context.abrupt("return", console.warn("Forgot to pass onSubmit prop to <MML/>? payload:", state));
                case 6:
                  _context.prev = 6;
                  setSubmitState({
                    loading: true,
                    error: "",
                    success: ""
                  });
                  _context.next = 10;
                  return onSubmit(state);
                case 10:
                  setSubmitState({
                    loading: false,
                    error: "",
                    success: "submitted"
                  });
                  _context.next = 16;
                  break;
                case 13:
                  _context.prev = 13;
                  _context.t0 = _context["catch"](6);
                  setSubmitState({
                    loading: false,
                    error: "Failed to send the request. Please try again.",
                    success: ""
                  });
                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[6, 13]]);
        }));
        return function(_x) {
          return _ref2.apply(this, arguments);
        };
      }(), [onSubmit, tree]);
      return import_react207.default.createElement("div", {
        className: "mml-container " + theme + " " + className,
        "data-testid": "mml-container"
      }, error ? import_react207.default.createElement("div", {
        className: "mml-wrap"
      }, Error3 && import_react207.default.createElement(Error3, {
        error
      })) : import_react207.default.createElement("form", {
        onSubmit: handleSubmit,
        className: "mml-wrap",
        "data-testid": "mml-form"
      }, tree != null && tree.type ? import_react207.default.createElement("div", {
        className: "mml-card"
      }, tree == null ? void 0 : tree.reactElements) : tree == null ? void 0 : tree.reactElements, submitState.loading && Loading$1 && import_react207.default.createElement(Loading$1, {
        loading: submitState.loading
      }), submitState.success && Success$1 && import_react207.default.createElement(Success$1, {
        success: submitState.success
      }), submitState.error && Error3 && import_react207.default.createElement(Error3, {
        error: submitState.error
      })));
    };
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ACTIONS_NOT_WORKING_IN_THREAD: () => ACTIONS_NOT_WORKING_IN_THREAD,
  AIStateIndicator: () => AIStateIndicator,
  AIStates: () => AIStates,
  ATTACHMENT_GROUPS_ORDER: () => ATTACHMENT_GROUPS_ORDER,
  ActionsIcon: () => ActionsIcon,
  AddCommentForm: () => AddCommentForm,
  AmountBar: () => AmountBar,
  Attachment: () => Attachment,
  AttachmentActions: () => AttachmentActions,
  AttachmentActionsContainer: () => AttachmentActionsContainer,
  AttachmentPreviewList: () => AttachmentPreviewList,
  AttachmentSelector: () => AttachmentSelector,
  AttachmentWithinContainer: () => AttachmentWithinContainer,
  Audio: () => Audio,
  AudioContainer: () => AudioContainer,
  AudioRecorder: () => AudioRecorder,
  AutoCompleteTextarea: () => ReactTextareaAutocomplete,
  Avatar: () => Avatar,
  BaseImage: () => BaseImage,
  BinIcon: () => BinIcon,
  Card: () => Card,
  CardAudio: () => CardAudio,
  CardContainer: () => CardContainer,
  Channel: () => Channel,
  ChannelActionContext: () => ChannelActionContext,
  ChannelActionProvider: () => ChannelActionProvider,
  ChannelAvatar: () => ChannelAvatar,
  ChannelHeader: () => ChannelHeader,
  ChannelList: () => ChannelList,
  ChannelListContext: () => ChannelListContext,
  ChannelListContextProvider: () => ChannelListContextProvider,
  ChannelListMessenger: () => ChannelListMessenger,
  ChannelPreview: () => ChannelPreview,
  ChannelPreviewActionButtons: () => ChannelPreviewActionButtons,
  ChannelPreviewMessenger: () => ChannelPreviewMessenger,
  ChannelSearch: () => ChannelSearch,
  ChannelStateContext: () => ChannelStateContext,
  ChannelStateProvider: () => ChannelStateProvider,
  Chat: () => Chat,
  ChatAutoComplete: () => ChatAutoComplete,
  ChatContext: () => ChatContext,
  ChatProvider: () => ChatProvider,
  ChatView: () => ChatView,
  CheckSignIcon: () => CheckSignIcon,
  Checkmark: () => Checkmark,
  CloseIcon: () => CloseIcon,
  CommandItem: () => CommandItem,
  ComponentContext: () => ComponentContext,
  ComponentProvider: () => ComponentProvider,
  ConnectionStatus: () => ConnectionStatus,
  CooldownTimer: () => CooldownTimer,
  CustomMessageActionsList: () => CustomMessageActionsList,
  DateSeparator: () => DateSeparator,
  DefaultAttachmentSelectorComponents: () => DefaultAttachmentSelectorComponents,
  DefaultSuggestionList: () => List,
  DefaultSuggestionListItem: () => Item,
  DefaultTriggerProvider: () => DefaultTriggerProvider,
  DialogAnchor: () => DialogAnchor,
  DialogManager: () => DialogManager,
  DialogManagerProvider: () => DialogManagerProvider,
  DialogPortalDestination: () => DialogPortalDestination,
  DialogPortalEntry: () => DialogPortalEntry,
  DownloadButton: () => DownloadButton,
  DownloadIcon: () => DownloadIcon2,
  EditMessageForm: () => EditMessageForm,
  EmoticonItem: () => EmoticonItem,
  EmptyStateIndicator: () => EmptyStateIndicator,
  EndPollDialog: () => EndPollDialog,
  EventComponent: () => EventComponent,
  FileAttachment: () => FileAttachment,
  FileContainer: () => FileContainer,
  FileSizeIndicator: () => FileSizeIndicator,
  FixedHeightMessage: () => FixedHeightMessage,
  Gallery: () => Gallery,
  GalleryContainer: () => GalleryContainer,
  GiphyPreviewMessage: () => GiphyPreviewMessage,
  GroupAvatar: () => GroupAvatar,
  ImageComponent: () => ImageComponent,
  ImageContainer: () => ImageContainer,
  InfiniteScroll: () => InfiniteScroll,
  LinkIcon: () => LinkIcon,
  LinkPreviewList: () => LinkPreviewList,
  LinkPreviewState: () => LinkPreviewState,
  LoadMoreButton: () => LoadMoreButton,
  LoadMorePaginator: () => LoadMorePaginator,
  LoadingChannels: () => LoadingChannels,
  LoadingErrorIndicator: () => LoadingErrorIndicator,
  LoadingIndicator: () => LoadingIndicator,
  LoadingIndicatorIcon: () => LoadingIndicatorIcon,
  MAX_MESSAGE_REACTIONS_TO_FETCH: () => MAX_MESSAGE_REACTIONS_TO_FETCH,
  MAX_QUERY_CHANNELS_LIMIT: () => MAX_QUERY_CHANNELS_LIMIT,
  MESSAGE_ACTIONS: () => MESSAGE_ACTIONS,
  MML: () => MML3,
  MediaContainer: () => MediaContainer,
  MediaRecordingState: () => MediaRecordingState,
  Message: () => Message,
  MessageActions: () => MessageActions,
  MessageActionsBox: () => MessageActionsBox,
  MessageActionsWrapper: () => MessageActionsWrapper,
  MessageBounceProvider: () => MessageBounceProvider,
  MessageContext: () => MessageContext,
  MessageDeleted: () => MessageDeleted,
  MessageDeliveredIcon: () => MessageDeliveredIcon,
  MessageDeliveryStatus: () => MessageDeliveryStatus,
  MessageErrorIcon: () => MessageErrorIcon,
  MessageInput: () => MessageInput,
  MessageInputContext: () => MessageInputContext,
  MessageInputContextProvider: () => MessageInputContextProvider,
  MessageInputFlat: () => MessageInputFlat,
  MessageList: () => MessageList,
  MessageListContext: () => MessageListContext,
  MessageListContextProvider: () => MessageListContextProvider,
  MessageListNotifications: () => MessageListNotifications,
  MessageNotification: () => MessageNotification,
  MessageOptions: () => MessageOptions,
  MessageProvider: () => MessageProvider,
  MessageRepliesCountButton: () => MessageRepliesCountButton,
  MessageSimple: () => MessageSimple,
  MessageStatus: () => MessageStatus,
  MessageText: () => MessageText,
  MessageTimestamp: () => MessageTimestamp,
  MicIcon: () => MicIcon,
  Modal: () => Modal,
  ModalGallery: () => ModalGallery,
  PauseIcon: () => PauseIcon2,
  PinIcon: () => PinIcon,
  PinIndicator: () => PinIndicator,
  PlayButton: () => PlayButton,
  PlayIcon: () => PlayIcon,
  PlaybackRateButton: () => PlaybackRateButton,
  Poll: () => Poll,
  PollActions: () => PollActions,
  PollAnswerList: () => PollAnswerList,
  PollContent: () => PollContent,
  PollContext: () => PollContext,
  PollCreationDialog: () => PollCreationDialog,
  PollHeader: () => PollHeader,
  PollOptionList: () => PollOptionList,
  PollOptionSelector: () => PollOptionSelector,
  PollOptionsFullList: () => PollOptionsFullList,
  PollProvider: () => PollProvider,
  PollResults: () => PollResults,
  PollVote: () => PollVote,
  PollVoteListing: () => PollVoteListing,
  PopperTooltip: () => PopperTooltip,
  ProgressBar: () => ProgressBar,
  QuotedMessage: () => QuotedMessage,
  QuotedMessagePreview: () => QuotedMessagePreview,
  QuotedMessagePreviewHeader: () => QuotedMessagePreviewHeader,
  QuotedPoll: () => QuotedPoll,
  ReactionIcon: () => ReactionIcon,
  ReactionSelector: () => ReactionSelector,
  ReactionsList: () => ReactionsList,
  ReactionsListModal: () => ReactionsListModal,
  RecordingPermission: () => RecordingPermission,
  RecordingPermissionDeniedNotification: () => RecordingPermissionDeniedNotification,
  RecordingTimer: () => RecordingTimer,
  RetryIcon: () => RetryIcon,
  SUPPORTED_VIDEO_FORMATS: () => SUPPORTED_VIDEO_FORMATS,
  SafeAnchor: () => SafeAnchor,
  ScrollToBottomButton: () => ScrollToBottomButton,
  SearchBar: () => SearchBar,
  SearchInput: () => SearchInput,
  SearchResults: () => SearchResults,
  SendButton: () => SendButton,
  SendIcon: () => SendIcon,
  SetLinkPreviewMode: () => SetLinkPreviewMode,
  SimpleAttachmentSelector: () => SimpleAttachmentSelector,
  SimpleReactionsList: () => SimpleReactionsList,
  SpriteImage: () => SpriteImage,
  StartRecordingAudioButton: () => StartRecordingAudioButton,
  StreamEmoji: () => StreamEmoji,
  StreamedMessageText: () => StreamedMessageText,
  Streami18n: () => Streami18n,
  SuggestPollOptionForm: () => SuggestPollOptionForm,
  Thread: () => Thread,
  ThreadContext: () => ThreadContext,
  ThreadHeader: () => ThreadHeader,
  ThreadIcon: () => ThreadIcon,
  ThreadList: () => ThreadList,
  ThreadListItem: () => ThreadListItem,
  ThreadListItemUI: () => ThreadListItemUI,
  ThreadProvider: () => ThreadProvider,
  ThreadStart: () => ThreadStart,
  Tooltip: () => Tooltip,
  TranslationContext: () => TranslationContext,
  TranslationProvider: () => TranslationProvider,
  TypingContext: () => TypingContext,
  TypingIndicator: () => TypingIndicator,
  TypingProvider: () => TypingProvider,
  UNREAD_MESSAGE_SEPARATOR_CLASS: () => UNREAD_MESSAGE_SEPARATOR_CLASS,
  UnMemoizedLoadMorePaginator: () => UnMemoizedLoadMorePaginator,
  UnreadMessagesNotification: () => UnreadMessagesNotification,
  UnreadMessagesSeparator: () => UnreadMessagesSeparator,
  UnsupportedAttachment: () => UnsupportedAttachment,
  UnsupportedAttachmentContainer: () => UnsupportedAttachmentContainer,
  UploadButton: () => UploadButton,
  UploadIcon: () => UploadIcon,
  UserItem: () => UserItem,
  VirtualizedMessageList: () => VirtualizedMessageList,
  VoiceRecordingContainer: () => VoiceRecordingContainer,
  WaveProgressBar: () => WaveProgressBar,
  Window: () => Window,
  WithComponents: () => WithComponents,
  areMessagePropsEqual: () => areMessagePropsEqual,
  areMessageUIPropsEqual: () => areMessageUIPropsEqual,
  attachmentTypeIconMap: () => attachmentTypeIconMap,
  deTranslations: () => de_default,
  defaultAllowedTagNames: () => defaultAllowedTagNames,
  defaultAttachmentSelectorActionSet: () => defaultAttachmentSelectorActionSet,
  defaultDateTimeParser: () => defaultDateTimeParser,
  defaultPinPermissions: () => defaultPinPermissions,
  defaultReactionOptions: () => defaultReactionOptions,
  defaultRenderMessages: () => defaultRenderMessages,
  defaultScrollToItem: () => defaultScrollToItem,
  defaultTranslatorFunction: () => defaultTranslatorFunction,
  displayDuration: () => displayDuration,
  divMod: () => divMod,
  downSample: () => downSample,
  emojiMarkdownPlugin: () => emojiMarkdownPlugin,
  enTranslations: () => en_default,
  esTranslations: () => es_default,
  escapeRegExp: () => escapeRegExp,
  extractSortValue: () => extractSortValue,
  findLastPinnedChannelIndex: () => findLastPinnedChannelIndex,
  frTranslations: () => fr_default,
  getChannel: () => getChannel,
  getDisplayImage: () => getDisplayImage,
  getDisplayTitle: () => getDisplayTitle,
  getGroupChannelDisplayInfo: () => getGroupChannelDisplayInfo,
  getGroupStyles: () => getGroupStyles,
  getImages: () => getImages,
  getIsFirstUnreadMessage: () => getIsFirstUnreadMessage,
  getLastReceived: () => getLastReceived,
  getLatestMessagePreview: () => getLatestMessagePreview,
  getMessageActions: () => getMessageActions,
  getNonImageAttachments: () => getNonImageAttachments,
  getReadByTooltipText: () => getReadByTooltipText,
  getReadStates: () => getReadStates,
  getWholeChar: () => getWholeChar,
  handleActionWarning: () => handleActionWarning,
  hasMoreMessagesProbably: () => hasMoreMessagesProbably,
  hasNotMoreMessages: () => hasNotMoreMessages,
  hiTranslations: () => hi_default,
  htmlToTextPlugin: () => htmlToTextPlugin,
  insertIntro: () => insertIntro,
  isAudioAttachment: () => isAudioAttachment,
  isChannel: () => isChannel,
  isChannelArchived: () => isChannelArchived,
  isChannelPinned: () => isChannelPinned,
  isDate: () => isDate,
  isDateSeparatorMessage: () => isDateSeparatorMessage,
  isDayOrMoment: () => isDayOrMoment,
  isFileAttachment: () => isFileAttachment,
  isGalleryAttachmentType: () => isGalleryAttachmentType,
  isLanguageSupported: () => isLanguageSupported,
  isLocalAttachment: () => isLocalAttachment,
  isLocalAudioAttachment: () => isLocalAudioAttachment,
  isLocalFileAttachment: () => isLocalFileAttachment,
  isLocalImageAttachment: () => isLocalImageAttachment,
  isLocalMediaAttachment: () => isLocalMediaAttachment,
  isLocalVoiceRecordingAttachment: () => isLocalVoiceRecordingAttachment,
  isMediaAttachment: () => isMediaAttachment,
  isMessageBlocked: () => isMessageBlocked,
  isMessageBounced: () => isMessageBounced,
  isMessageEdited: () => isMessageEdited,
  isNumberOrString: () => isNumberOrString,
  isOnlyEmojis: () => isOnlyEmojis,
  isScrapedContent: () => isScrapedContent,
  isSvgAttachment: () => isSvgAttachment,
  isUploadedImage: () => isUploadedImage,
  isUserMuted: () => isUserMuted,
  isVoiceRecordingAttachment: () => isVoiceRecordingAttachment,
  itTranslations: () => it_default,
  jaTranslations: () => ja_default,
  keepLineBreaksPlugin: () => keepLineBreaksPlugin,
  koTranslations: () => ko_default,
  makeDateMessageId: () => makeDateMessageId,
  mapToUserNameOrId: () => mapToUserNameOrId,
  markDownRenderers: () => markDownRenderers,
  matchMarkdownLinks: () => matchMarkdownLinks,
  mentionsMarkdownPlugin: () => mentionsMarkdownPlugin,
  messageCodeBlocks: () => messageCodeBlocks,
  messageHasAttachments: () => messageHasAttachments,
  messageHasReactions: () => messageHasReactions,
  missingUseFlagHandlerParameterWarning: () => missingUseFlagHandlerParameterWarning,
  missingUseMuteHandlerParamsWarning: () => missingUseMuteHandlerParamsWarning,
  moveChannelUp: () => moveChannelUp,
  moveChannelUpwards: () => moveChannelUpwards,
  nlTranslations: () => nl_default,
  processMessages: () => processMessages,
  ptTranslations: () => pt_default,
  reactionHandlerWarning: () => reactionHandlerWarning,
  renderPreviewText: () => renderPreviewText,
  renderText: () => renderText,
  resampleWaveformData: () => resampleWaveformData,
  ruTranslations: () => ru_default,
  shouldConsiderArchivedChannels: () => shouldConsiderArchivedChannels,
  shouldConsiderPinnedChannels: () => shouldConsiderPinnedChannels,
  shouldRenderMessageActions: () => shouldRenderMessageActions,
  showMessageActionsBox: () => showMessageActionsBox,
  trTranslations: () => tr_default,
  upSample: () => upSample,
  useAIState: () => useAIState,
  useActionHandler: () => useActionHandler,
  useActiveThread: () => useActiveThread,
  useChannelActionContext: () => useChannelActionContext,
  useChannelDeletedListener: () => useChannelDeletedListener,
  useChannelEditMessageHandler: () => useEditMessageHandler,
  useChannelHiddenListener: () => useChannelHiddenListener,
  useChannelListContext: () => useChannelListContext,
  useChannelMembershipState: () => useChannelMembershipState,
  useChannelMentionsHandler: () => useMentionsHandlers,
  useChannelPreviewInfo: () => useChannelPreviewInfo,
  useChannelStateContext: () => useChannelStateContext,
  useChannelTruncatedListener: () => useChannelTruncatedListener,
  useChannelUpdatedListener: () => useChannelUpdatedListener,
  useChannelVisibleListener: () => useChannelVisibleListener,
  useChat: () => useChat,
  useChatContext: () => useChatContext,
  useComponentContext: () => useComponentContext,
  useConnectionRecoveredListener: () => useConnectionRecoveredListener,
  useCooldownTimer: () => useCooldownTimer,
  useCreateChatClient: () => useCreateChatClient,
  useDeleteHandler: () => useDeleteHandler,
  useDialog: () => useDialog,
  useDialogAnchor: () => useDialogAnchor,
  useDialogIsOpen: () => useDialogIsOpen,
  useDialogManager: () => useDialogManager,
  useEditHandler: () => useEditHandler,
  useEnrichedMessages: () => useEnrichedMessages,
  useFlagHandler: () => useFlagHandler,
  useLastReadData: () => useLastReadData,
  useMarkUnreadHandler: () => useMarkUnreadHandler,
  useMentionsHandler: () => useMentionsHandler,
  useMessageBounceContext: () => useMessageBounceContext,
  useMessageContext: () => useMessageContext,
  useMessageInputContext: () => useMessageInputContext,
  useMessageInputState: () => useMessageInputState,
  useMessageListContext: () => useMessageListContext,
  useMessageListElements: () => useMessageListElements,
  useMessageListScrollManager: () => useMessageListScrollManager,
  useMessageNewListener: () => useMessageNewListener,
  useMessageTextStreaming: () => useMessageTextStreaming,
  useMobileNavigation: () => useMobileNavigation,
  useMuteHandler: () => useMuteHandler,
  useNewMessageNotification: () => useNewMessageNotification,
  useNotificationAddedToChannelListener: () => useNotificationAddedToChannelListener,
  useNotificationMessageNewListener: () => useNotificationMessageNewListener,
  useNotificationRemovedFromChannelListener: () => useNotificationRemovedFromChannelListener,
  useOpenThreadHandler: () => useOpenThreadHandler,
  useOpenedDialogCount: () => useOpenedDialogCount,
  usePaginatedChannels: () => usePaginatedChannels,
  usePinHandler: () => usePinHandler,
  usePollAnswerPagination: () => usePollAnswerPagination,
  usePollContext: () => usePollContext,
  usePollOptionVotesPagination: () => usePollOptionVotesPagination,
  usePrependedMessagesCount: () => usePrependedMessagesCount,
  useReactionHandler: () => useReactionHandler,
  useReactionsFetcher: () => useReactionsFetcher,
  useRetryHandler: () => useRetryHandler,
  useScrollLocationLogic: () => useScrollLocationLogic,
  useShouldForceScrollToBottom: () => useShouldForceScrollToBottom,
  useStateStore: () => useStateStore,
  useThreadContext: () => useThreadContext,
  useThreadList: () => useThreadList,
  useThreadListItemContext: () => useThreadListItemContext,
  useThreadsViewContext: () => useThreadsViewContext,
  useTranslationContext: () => useTranslationContext,
  useTypingContext: () => useTypingContext,
  useUserHandler: () => useUserHandler,
  useUserPresenceChangedListener: () => useUserPresenceChangedListener,
  useUserRole: () => useUserRole,
  validateAndGetMessage: () => validateAndGetMessage,
  withChannelActionContext: () => withChannelActionContext,
  withChannelStateContext: () => withChannelStateContext,
  withChatContext: () => withChatContext,
  withComponentContext: () => withComponentContext,
  withMessageContext: () => withMessageContext,
  withTranslationContext: () => withTranslationContext,
  withTypingContext: () => withTypingContext
});
module.exports = __toCommonJS(src_exports);

// src/components/Attachment/Attachment.tsx
var import_react46 = __toESM(require("react"));

// src/components/Attachment/utils.tsx
var SUPPORTED_VIDEO_FORMATS = [
  "video/mp4",
  "video/ogg",
  "video/webm",
  "video/quicktime"
];
var isLocalAttachment = (attachment) => !!attachment.localMetadata?.id;
var isScrapedContent = (attachment) => attachment.og_scrape_url || attachment.title_link;
var isUploadedImage = (attachment) => attachment.type === "image" && !isScrapedContent(attachment);
var isLocalImageAttachment = (attachment) => isUploadedImage(attachment) && isLocalAttachment(attachment);
var isGalleryAttachmentType = (output) => Array.isArray(output.images);
var isAudioAttachment = (attachment) => attachment.type === "audio";
var isLocalAudioAttachment = (attachment) => isAudioAttachment(attachment) && isLocalAttachment(attachment);
var isVoiceRecordingAttachment = (attachment) => attachment.type === "voiceRecording";
var isLocalVoiceRecordingAttachment = (attachment) => isVoiceRecordingAttachment(attachment) && isLocalAttachment(attachment);
var isFileAttachment = (attachment) => attachment.type === "file" || !!(attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) === -1 && attachment.type !== "video");
var isLocalFileAttachment = (attachment) => isFileAttachment(attachment) && isLocalAttachment(attachment);
var isMediaAttachment = (attachment) => attachment.mime_type && SUPPORTED_VIDEO_FORMATS.indexOf(attachment.mime_type) !== -1 || attachment.type === "video";
var isLocalMediaAttachment = (attachment) => isMediaAttachment(attachment) && isLocalAttachment(attachment);
var isSvgAttachment = (attachment) => {
  const filename = attachment.fallback || "";
  return filename.toLowerCase().endsWith(".svg");
};
var divMod = (num, divisor) => [
  Math.floor(num / divisor),
  num % divisor
];
var displayDuration = (totalSeconds) => {
  if (!totalSeconds || totalSeconds < 0) return "00:00";
  const [hours, hoursLeftover] = divMod(totalSeconds, 3600);
  const [minutes, seconds] = divMod(hoursLeftover, 60);
  const roundedSeconds = Math.ceil(seconds);
  const prependHrsZero = hours.toString().length === 1 ? "0" : "";
  const prependMinZero = minutes.toString().length === 1 ? "0" : "";
  const prependSecZero = roundedSeconds.toString().length === 1 ? "0" : "";
  const minSec = `${prependMinZero}${minutes}:${prependSecZero}${roundedSeconds}`;
  return hours ? `${prependHrsZero}${hours}:` + minSec : minSec;
};

// src/components/Attachment/AttachmentContainer.tsx
var import_react45 = __toESM(require("react"));
var import_react_player2 = __toESM(require("react-player"));
var import_clsx10 = __toESM(require("clsx"));
var linkify = __toESM(require("linkifyjs"));

// src/components/Attachment/AttachmentActions.tsx
var import_react19 = __toESM(require("react"));

// src/context/ChannelActionContext.tsx
var import_react = __toESM(require("react"));
var ChannelActionContext = import_react.default.createContext(void 0);
var ChannelActionProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react.default.createElement(ChannelActionContext.Provider, { value }, children);
var useChannelActionContext = (componentName) => {
  const contextValue = (0, import_react.useContext)(ChannelActionContext);
  if (!contextValue) {
    console.warn(
      `The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};
var withChannelActionContext = (Component2) => {
  const WithChannelActionContextComponent = (props) => {
    const channelActionContext = useChannelActionContext();
    return /* @__PURE__ */ import_react.default.createElement(Component2, { ...props, ...channelActionContext });
  };
  WithChannelActionContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelActionContextComponent;
};

// src/context/ChannelListContext.tsx
var import_react2 = __toESM(require("react"));
var ChannelListContext = (0, import_react2.createContext)(
  void 0
);
var ChannelListContextProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react2.default.createElement(ChannelListContext.Provider, { value }, children);
var useChannelListContext = (componentName) => {
  const contextValue = (0, import_react2.useContext)(ChannelListContext);
  if (!contextValue) {
    console.warn(
      `The useChannelListContext hook was called outside of the ChannelListContext provider. Make sure this hook is called within the ChannelList component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};

// src/context/ChannelStateContext.tsx
var import_react3 = __toESM(require("react"));
var ChannelStateContext = import_react3.default.createContext(void 0);
var ChannelStateProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react3.default.createElement(ChannelStateContext.Provider, { value }, children);
var useChannelStateContext = (componentName) => {
  const contextValue = (0, import_react3.useContext)(ChannelStateContext);
  if (!contextValue) {
    console.warn(
      `The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};
var withChannelStateContext = (Component2) => {
  const WithChannelStateContextComponent = (props) => {
    const channelStateContext = useChannelStateContext();
    return /* @__PURE__ */ import_react3.default.createElement(Component2, { ...props, ...channelStateContext });
  };
  WithChannelStateContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithChannelStateContextComponent;
};

// src/context/ChatContext.tsx
var import_react4 = __toESM(require("react"));

// src/context/utils/getDisplayName.ts
var getDisplayName = (Component2) => Component2.displayName || Component2.name || "Component";

// src/context/ChatContext.tsx
var ChatContext = import_react4.default.createContext(void 0);
var ChatProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react4.default.createElement(ChatContext.Provider, { value }, children);
var useChatContext = (componentName) => {
  const contextValue = (0, import_react4.useContext)(ChatContext);
  if (!contextValue) {
    console.warn(
      `The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};
var withChatContext = (Component2) => {
  const WithChatContextComponent = (props) => {
    const chatContext = useChatContext();
    return /* @__PURE__ */ import_react4.default.createElement(Component2, { ...props, ...chatContext });
  };
  WithChatContextComponent.displayName = `WithChatContext${getDisplayName(Component2)}`;
  return WithChatContextComponent;
};

// src/context/ComponentContext.tsx
var import_react5 = __toESM(require("react"));
var ComponentContext = import_react5.default.createContext({});
var ComponentProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react5.default.createElement(ComponentContext.Provider, { value }, children);
var useComponentContext = (_componentName) => (0, import_react5.useContext)(ComponentContext);
var withComponentContext = (Component2) => {
  const WithComponentContextComponent = (props) => {
    const componentContext = useComponentContext();
    return /* @__PURE__ */ import_react5.default.createElement(Component2, { ...props, ...componentContext });
  };
  WithComponentContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithComponentContextComponent;
};

// src/context/DialogManagerContext.tsx
var import_react10 = __toESM(require("react"));

// src/components/Dialog/DialogManager.ts
var import_stream_chat = require("stream-chat");
var DialogManager = class {
  constructor({ id } = {}) {
    this.state = new import_stream_chat.StateStore({
      dialogsById: {}
    });
    this.id = id ?? (/* @__PURE__ */ new Date()).getTime().toString();
  }
  get openDialogCount() {
    return Object.values(this.state.getLatestValue().dialogsById).reduce(
      (count, dialog) => {
        if (dialog.isOpen) return count + 1;
        return count;
      },
      0
    );
  }
  getOrCreate({ id }) {
    let dialog = this.state.getLatestValue().dialogsById[id];
    if (!dialog) {
      dialog = {
        close: () => {
          this.close(id);
        },
        id,
        isOpen: false,
        open: () => {
          this.open({ id });
        },
        removalTimeout: void 0,
        remove: () => {
          this.remove(id);
        },
        toggle: (closeAll = false) => {
          this.toggle({ id }, closeAll);
        }
      };
      this.state.next((current) => ({
        ...current,
        ...{ dialogsById: { ...current.dialogsById, [id]: dialog } }
      }));
    }
    if (dialog.removalTimeout) {
      clearTimeout(dialog.removalTimeout);
      this.state.next((current) => ({
        ...current,
        ...{
          dialogsById: {
            ...current.dialogsById,
            [id]: {
              ...dialog,
              removalTimeout: void 0
            }
          }
        }
      }));
    }
    return dialog;
  }
  open(params, closeRest) {
    const dialog = this.getOrCreate(params);
    if (dialog.isOpen) return;
    if (closeRest) {
      this.closeAll();
    }
    this.state.next((current) => ({
      ...current,
      dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: true } }
    }));
  }
  close(id) {
    const dialog = this.state.getLatestValue().dialogsById[id];
    if (!dialog?.isOpen) return;
    this.state.next((current) => ({
      ...current,
      dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: false } }
    }));
  }
  closeAll() {
    Object.values(this.state.getLatestValue().dialogsById).forEach(
      (dialog) => dialog.close()
    );
  }
  toggle(params, closeAll = false) {
    if (this.state.getLatestValue().dialogsById[params.id]?.isOpen) {
      this.close(params.id);
    } else {
      this.open(params, closeAll);
    }
  }
  remove(id) {
    const state = this.state.getLatestValue();
    const dialog = state.dialogsById[id];
    if (!dialog) return;
    if (dialog.removalTimeout) {
      clearTimeout(dialog.removalTimeout);
    }
    this.state.next((current) => {
      const newDialogs = { ...current.dialogsById };
      delete newDialogs[id];
      return {
        ...current,
        dialogsById: newDialogs
      };
    });
  }
  /**
   * Marks the dialog state as unused. If the dialog id is referenced again quickly,
   * the state will not be removed. Otherwise, the state will be removed after
   * a short timeout.
   */
  markForRemoval(id) {
    const dialog = this.state.getLatestValue().dialogsById[id];
    if (!dialog) {
      return;
    }
    this.state.next((current) => ({
      ...current,
      dialogsById: {
        ...current.dialogsById,
        [id]: {
          ...dialog,
          removalTimeout: setTimeout(() => {
            this.remove(id);
          }, 16)
        }
      }
    }));
  }
};

// src/components/Dialog/DialogPortal.tsx
var import_react9 = __toESM(require("react"));

// src/components/Dialog/hooks/useDialog.ts
var import_react7 = require("react");

// src/store/hooks/useStateStore.ts
var import_react6 = require("react");
var import_shim = require("use-sync-external-store/shim");
var noop = () => {
};
function useStateStore(store, selector7) {
  const wrappedSubscription = (0, import_react6.useCallback)(
    (onStoreChange) => {
      const unsubscribe = store?.subscribeWithSelector(selector7, onStoreChange);
      return unsubscribe ?? noop;
    },
    [store, selector7]
  );
  const wrappedSnapshot = (0, import_react6.useMemo)(() => {
    let cachedTuple;
    return () => {
      const currentValue = store?.getLatestValue();
      if (!currentValue) return void 0;
      if (cachedTuple && cachedTuple[0] === currentValue) {
        return cachedTuple[1];
      }
      const newlySelected = selector7(currentValue);
      if (cachedTuple) {
        let selectededAreEqualToCached = true;
        for (const key in cachedTuple[1]) {
          if (cachedTuple[1][key] === newlySelected[key]) continue;
          selectededAreEqualToCached = false;
          break;
        }
        if (selectededAreEqualToCached) return cachedTuple[1];
      }
      cachedTuple = [currentValue, newlySelected];
      return cachedTuple[1];
    };
  }, [store, selector7]);
  const state = (0, import_shim.useSyncExternalStore)(wrappedSubscription, wrappedSnapshot);
  return state;
}

// src/components/Dialog/hooks/useDialog.ts
var useDialog = ({ id }) => {
  const { dialogManager } = useDialogManager();
  (0, import_react7.useEffect)(
    () => () => {
      dialogManager.markForRemoval(id);
    },
    [dialogManager, id]
  );
  return dialogManager.getOrCreate({ id });
};
var useDialogIsOpen = (id) => {
  const { dialogManager } = useDialogManager();
  const dialogIsOpenSelector = (0, import_react7.useCallback)(
    ({ dialogsById }) => ({ isOpen: !!dialogsById[id]?.isOpen }),
    [id]
  );
  return useStateStore(dialogManager.state, dialogIsOpenSelector).isOpen;
};
var openedDialogCountSelector = (nextValue) => ({
  openedDialogCount: Object.values(nextValue.dialogsById).reduce((count, dialog) => {
    if (dialog.isOpen) return count + 1;
    return count;
  }, 0)
});
var useOpenedDialogCount = () => {
  const { dialogManager } = useDialogManager();
  return useStateStore(dialogManager.state, openedDialogCountSelector).openedDialogCount;
};

// src/components/Portal/Portal.ts
var import_react8 = require("react");
var import_react_dom = require("react-dom");
var Portal = ({
  children,
  getPortalDestination,
  isOpen
}) => {
  const [portalDestination, setPortalDestination] = (0, import_react8.useState)(null);
  (0, import_react8.useLayoutEffect)(() => {
    const destination = getPortalDestination();
    if (!destination || !isOpen) return;
    setPortalDestination(destination);
  }, [getPortalDestination, isOpen]);
  if (!portalDestination) return null;
  return (0, import_react_dom.createPortal)(children, portalDestination);
};

// src/components/Dialog/DialogPortal.tsx
var DialogPortalDestination = () => {
  const { dialogManager } = useDialogManager();
  const openedDialogCount = useOpenedDialogCount();
  return /* @__PURE__ */ import_react9.default.createElement(
    "div",
    {
      className: "str-chat__dialog-overlay",
      "data-str-chat__portal-id": dialogManager.id,
      "data-testid": "str-chat__dialog-overlay",
      onClick: () => dialogManager.closeAll(),
      style: {
        "--str-chat__dialog-overlay-height": openedDialogCount > 0 ? "100%" : "0"
      }
    }
  );
};
var DialogPortalEntry = ({
  children,
  dialogId
}) => {
  const { dialogManager } = useDialogManager();
  const dialogIsOpen = useDialogIsOpen(dialogId);
  const getPortalDestination = (0, import_react9.useCallback)(
    () => document.querySelector(`div[data-str-chat__portal-id="${dialogManager.id}"]`),
    [dialogManager.id]
  );
  return /* @__PURE__ */ import_react9.default.createElement(Portal, { getPortalDestination, isOpen: dialogIsOpen }, children);
};

// src/context/DialogManagerContext.tsx
var DialogManagerProviderContext = import_react10.default.createContext(void 0);
var DialogManagerProvider = ({
  children,
  id
}) => {
  const [dialogManager] = (0, import_react10.useState)(() => new DialogManager({ id }));
  return /* @__PURE__ */ import_react10.default.createElement(DialogManagerProviderContext.Provider, { value: { dialogManager } }, children, /* @__PURE__ */ import_react10.default.createElement(DialogPortalDestination, null));
};
var useDialogManager = () => {
  const value = (0, import_react10.useContext)(DialogManagerProviderContext);
  return value;
};

// src/context/MessageContext.tsx
var import_react11 = __toESM(require("react"));
var MessageContext = import_react11.default.createContext(
  void 0
);
var MessageProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react11.default.createElement(MessageContext.Provider, { value }, children);
var useMessageContext = (_componentName) => {
  const contextValue = (0, import_react11.useContext)(MessageContext);
  if (!contextValue) {
    return {};
  }
  return contextValue;
};
var withMessageContext = (Component2) => {
  const WithMessageContextComponent = (props) => {
    const messageContext = useMessageContext();
    return /* @__PURE__ */ import_react11.default.createElement(Component2, { ...props, ...messageContext });
  };
  WithMessageContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithMessageContextComponent;
};

// src/context/MessageBounceContext.tsx
var import_react12 = __toESM(require("react"));
var MessageBounceContext = (0, import_react12.createContext)(
  void 0
);
function useMessageBounceContext(componentName) {
  const contextValue = (0, import_react12.useContext)(MessageBounceContext);
  if (!contextValue) {
    console.warn(
      `The useMessageBounceContext hook was called outside of the MessageBounceContext provider. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
}
function MessageBounceProvider({ children }) {
  const {
    handleRetry: doHandleRetry,
    message,
    setEditingState
  } = useMessageContext("MessageBounceProvider");
  if (!isMessageBounced(message)) {
    console.warn(
      `The MessageBounceProvider was rendered for a message that is not bounced. Have you missed the "isMessageBounced" check?`
    );
  }
  const { removeMessage } = useChannelActionContext("MessageBounceProvider");
  const handleDelete2 = (0, import_react12.useCallback)(() => {
    removeMessage(message);
  }, [message, removeMessage]);
  const handleEdit = (0, import_react12.useCallback)(
    (e2) => {
      setEditingState(e2);
    },
    [setEditingState]
  );
  const handleRetry = (0, import_react12.useCallback)(() => {
    doHandleRetry(message);
  }, [doHandleRetry, message]);
  const value = (0, import_react12.useMemo)(
    () => ({
      handleDelete: handleDelete2,
      handleEdit,
      handleRetry,
      message
    }),
    [handleDelete2, handleEdit, handleRetry, message]
  );
  return /* @__PURE__ */ import_react12.default.createElement(MessageBounceContext.Provider, { value }, children);
}

// src/context/MessageInputContext.tsx
var import_react13 = __toESM(require("react"));
var MessageInputContext = (0, import_react13.createContext)(void 0);
var MessageInputContextProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react13.default.createElement(MessageInputContext.Provider, { value }, children);
var useMessageInputContext = (componentName) => {
  const contextValue = (0, import_react13.useContext)(MessageInputContext);
  if (!contextValue) {
    console.warn(
      `The useMessageInputContext hook was called outside of the MessageInputContext provider. Make sure this hook is called within the MessageInput's UI component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};

// src/context/MessageListContext.tsx
var import_react14 = __toESM(require("react"));
var MessageListContext = (0, import_react14.createContext)(
  void 0
);
var MessageListContextProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react14.default.createElement(MessageListContext.Provider, { value }, children);
var useMessageListContext = (componentName) => {
  const contextValue = (0, import_react14.useContext)(MessageListContext);
  if (!contextValue) {
    console.warn(
      `The useMessageListContext hook was called outside of the MessageListContext provider. Make sure this hook is called within the MessageList component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};

// src/context/PollContext.tsx
var import_react15 = __toESM(require("react"));
var PollContext = import_react15.default.createContext(void 0);
var PollProvider = ({
  children,
  poll
}) => poll ? /* @__PURE__ */ import_react15.default.createElement(PollContext.Provider, { value: { poll } }, children) : null;
var usePollContext = () => {
  const contextValue = (0, import_react15.useContext)(PollContext);
  return contextValue;
};

// src/context/TranslationContext.tsx
var import_react16 = __toESM(require("react"));
var import_dayjs2 = __toESM(require("dayjs"));
var import_calendar = __toESM(require("dayjs/plugin/calendar"));
var import_localizedFormat = __toESM(require("dayjs/plugin/localizedFormat"));

// src/i18n/utils.ts
var import_dayjs = __toESM(require("dayjs"));
var notValidDateWarning = "MessageTimestamp was called without a message, or message has invalid created_at date.";
var noParsingFunctionWarning = "MessageTimestamp was called but there is no datetime parsing function available";
var isNumberOrString = (output) => typeof output === "string" || typeof output === "number";
var isDayOrMoment = (output) => !!output?.isSame;
var isDate = (output) => !!output?.getMonth;
function getDateString({
  calendar: calendar3,
  calendarFormats,
  format,
  formatDate,
  messageCreatedAt,
  t: t2,
  tDateTimeParser,
  timestampTranslationKey
}) {
  if (!messageCreatedAt || typeof messageCreatedAt === "string" && !Date.parse(messageCreatedAt)) {
    console.warn(notValidDateWarning);
    return null;
  }
  if (typeof formatDate === "function") {
    return formatDate(new Date(messageCreatedAt));
  }
  if (t2 && timestampTranslationKey) {
    const options = {};
    if (typeof calendar3 !== "undefined" && calendar3 !== null) options.calendar = calendar3;
    if (typeof calendarFormats !== "undefined" && calendarFormats !== null)
      options.calendarFormats = calendarFormats;
    if (typeof format !== "undefined" && format !== null) options.format = format;
    const translatedTimestamp = t2(timestampTranslationKey, {
      ...options,
      timestamp: new Date(messageCreatedAt)
    });
    const translationKeyFound = timestampTranslationKey !== translatedTimestamp;
    if (translationKeyFound) return translatedTimestamp;
  }
  if (!tDateTimeParser) {
    console.warn(noParsingFunctionWarning);
    return null;
  }
  const parsedTime = tDateTimeParser(messageCreatedAt);
  if (isDayOrMoment(parsedTime)) {
    return calendar3 && parsedTime.calendar ? parsedTime.calendar(void 0, calendarFormats || void 0) : parsedTime.format(format || void 0);
  }
  if (isDate(parsedTime)) {
    return parsedTime.toDateString();
  }
  if (isNumberOrString(parsedTime)) {
    return parsedTime;
  }
  return null;
}
var predefinedFormatters = {
  timestampFormatter: (streamI18n) => (value, _, {
    calendarFormats,
    ...options
  }) => {
    let parsedCalendarFormats;
    try {
      if (!options.calendar) {
        parsedCalendarFormats = {};
      } else if (typeof calendarFormats === "string") {
        parsedCalendarFormats = JSON.parse(calendarFormats);
      } else if (typeof calendarFormats === "object") {
        parsedCalendarFormats = calendarFormats;
      }
    } catch (e2) {
      console.error("[TIMESTAMP FORMATTER]", e2);
    }
    const result = getDateString({
      ...options,
      calendarFormats: parsedCalendarFormats,
      messageCreatedAt: value,
      tDateTimeParser: streamI18n.tDateTimeParser
    });
    if (!result || typeof result === "number") {
      return JSON.stringify(value);
    }
    return result;
  }
};
var defaultTranslatorFunction = (key) => key;
var defaultDateTimeParser = (input2) => (0, import_dayjs.default)(input2);
var isLanguageSupported = (language) => {
  const translations = [
    "de",
    "en",
    "es",
    "fr",
    "hi",
    "it",
    "ja",
    "ko",
    "nl",
    "pt",
    "ru",
    "tr"
  ];
  return translations.some((translation) => language === translation);
};

// src/context/TranslationContext.tsx
import_dayjs2.default.extend(import_calendar.default);
import_dayjs2.default.extend(import_localizedFormat.default);
var TranslationContext = import_react16.default.createContext({
  t: defaultTranslatorFunction,
  tDateTimeParser: defaultDateTimeParser,
  userLanguage: "en"
});
var TranslationProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react16.default.createElement(TranslationContext.Provider, { value }, children);
var useTranslationContext = (componentName) => {
  const contextValue = (0, import_react16.useContext)(TranslationContext);
  if (!contextValue) {
    console.warn(
      `The useTranslationContext hook was called outside of the TranslationContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};
var withTranslationContext = (Component2) => {
  const WithTranslationContextComponent = (props) => {
    const translationContext = useTranslationContext();
    return /* @__PURE__ */ import_react16.default.createElement(Component2, { ...props, ...translationContext });
  };
  WithTranslationContextComponent.displayName = `WithTranslationContext${getDisplayName(
    Component2
  )}`;
  return WithTranslationContextComponent;
};

// src/context/TypingContext.tsx
var import_react17 = __toESM(require("react"));
var TypingContext = import_react17.default.createContext(
  void 0
);
var TypingProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react17.default.createElement(TypingContext.Provider, { value }, children);
var useTypingContext = (componentName) => {
  const contextValue = (0, import_react17.useContext)(TypingContext);
  if (!contextValue) {
    console.warn(
      `The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`
    );
    return {};
  }
  return contextValue;
};
var withTypingContext = (Component2) => {
  const WithTypingContextComponent = (props) => {
    const typingContext = useTypingContext();
    return /* @__PURE__ */ import_react17.default.createElement(Component2, { ...props, ...typingContext });
  };
  WithTypingContextComponent.displayName = (Component2.displayName || Component2.name || "Component").replace("Base", "");
  return WithTypingContextComponent;
};

// src/context/WithComponents.tsx
var import_react18 = __toESM(require("react"));
function WithComponents({
  children,
  overrides
}) {
  const parentOverrides = (0, import_react18.useContext)(ComponentContext);
  const actualOverrides = { ...parentOverrides, ...overrides };
  return /* @__PURE__ */ import_react18.default.createElement(ComponentContext.Provider, { value: actualOverrides }, children);
}

// src/components/Attachment/AttachmentActions.tsx
var UnMemoizedAttachmentActions = (props) => {
  const { actionHandler, actions, id, text: text8 } = props;
  const { t: t2 } = useTranslationContext("UnMemoizedAttachmentActions");
  const handleActionClick = (event, name2, value) => actionHandler?.(name2, value, event);
  return /* @__PURE__ */ import_react19.default.createElement("div", { className: "str-chat__message-attachment-actions" }, /* @__PURE__ */ import_react19.default.createElement("div", { className: "str-chat__message-attachment-actions-form" }, /* @__PURE__ */ import_react19.default.createElement("span", null, text8), actions.map((action) => /* @__PURE__ */ import_react19.default.createElement(
    "button",
    {
      className: `str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--${action.style}`,
      "data-testid": `${action.name}`,
      "data-value": action.value,
      key: `${id}-${action.value}`,
      onClick: (event) => handleActionClick(event, action.name, action.value)
    },
    action.text ? t2(action.text) : null
  ))));
};
var AttachmentActions = import_react19.default.memo(
  UnMemoizedAttachmentActions
);

// src/components/Attachment/Audio.tsx
var import_react29 = __toESM(require("react"));

// src/components/Attachment/components/DownloadButton.tsx
var import_react22 = __toESM(require("react"));

// src/components/Attachment/icons.tsx
var import_react20 = __toESM(require("react"));
var DownloadIcon = ({ className }) => /* @__PURE__ */ import_react20.default.createElement(
  "svg",
  {
    className,
    "data-testid": "download",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react20.default.createElement(
    "path",
    {
      d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z",
      fill: "black"
    }
  )
);
var PlayTriangleIcon = () => /* @__PURE__ */ import_react20.default.createElement("svg", { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react20.default.createElement("path", { d: "M0.5 0V14L11.5 7L0.5 0Z", fill: "#080707" }));
var PauseIcon = () => /* @__PURE__ */ import_react20.default.createElement("svg", { fill: "none", viewBox: "0 0 12 14", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react20.default.createElement("path", { d: "M0 14H4V0H0V14ZM8 0V14H12V0H8Z", fill: "#080707" }));

// src/components/SafeAnchor/SafeAnchor.tsx
var import_react21 = __toESM(require("react"));
var import_sanitize_url = require("@braintree/sanitize-url");
var UnMemoizedSafeAnchor = (props) => {
  const { children, className, download, href, rel, target } = props;
  const { t: t2 } = useTranslationContext("SafeAnchor");
  if (!href) return null;
  const sanitized = (0, import_sanitize_url.sanitizeUrl)(href);
  return /* @__PURE__ */ import_react21.default.createElement(
    "a",
    {
      "aria-label": t2("aria/Attachment"),
      className,
      download,
      href: sanitized,
      rel,
      target
    },
    children
  );
};
var SafeAnchor = import_react21.default.memo(UnMemoizedSafeAnchor);

// src/components/Attachment/components/DownloadButton.tsx
var DownloadButton = ({ assetUrl }) => /* @__PURE__ */ import_react22.default.createElement(
  SafeAnchor,
  {
    className: "str-chat__message-attachment-file--item-download",
    download: true,
    href: assetUrl,
    target: "_blank"
  },
  /* @__PURE__ */ import_react22.default.createElement(DownloadIcon, { className: "str-chat__message-attachment-download-icon" })
);

// src/components/Attachment/components/FileSizeIndicator.tsx
var import_react23 = __toESM(require("react"));

// src/constants/limits.ts
var DEFAULT_INITIAL_CHANNEL_PAGE_SIZE = 25;
var DEFAULT_NEXT_CHANNEL_PAGE_SIZE = 100;
var DEFAULT_JUMP_TO_PAGE_SIZE = 100;
var DEFAULT_THREAD_PAGE_SIZE = 50;
var DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD = 250;
var DEFAULT_UPLOAD_SIZE_LIMIT_BYTES = 100 * 1024 * 1024;
var DEFAULT_HIGHLIGHT_DURATION = 500;

// src/components/MessageInput/hooks/utils.ts
var accentsMap = {
  a: "\xE1|\xE0|\xE3|\xE2|\xC0|\xC1|\xC3|\xC2",
  c: "\xE7|\xC7",
  e: "\xE9|\xE8|\xEA|\xC9|\xC8|\xCA",
  i: "\xED|\xEC|\xEE|\xCD|\xCC|\xCE",
  n: "\xF1|\xD1",
  o: "\xF3|\xF2|\xF4|\u0151|\xF5|\xD3|\xD2|\xD4|\xD5",
  u: "\xFA|\xF9|\xFB|\xFC|\xDA|\xD9|\xDB|\xDC"
};
var removeDiacritics = (text8) => {
  if (!text8) return "";
  return Object.keys(accentsMap).reduce(
    (acc, current) => acc.replace(new RegExp(accentsMap[current], "g"), current),
    text8
  );
};
var calculateLevenshtein = (query, name2) => {
  if (query.length === 0) return name2.length;
  if (name2.length === 0) return query.length;
  const matrix = [];
  let i;
  for (i = 0; i <= name2.length; i++) {
    matrix[i] = [i];
  }
  let j;
  for (j = 0; j <= query.length; j++) {
    matrix[0][j] = j;
  }
  for (i = 1; i <= name2.length; i++) {
    for (j = 1; j <= query.length; j++) {
      if (name2.charAt(i - 1) === query.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          // substitution
          Math.min(
            matrix[i][j - 1] + 1,
            // insertion
            matrix[i - 1][j] + 1
          )
        );
      }
    }
  }
  return matrix[name2.length][query.length];
};
var searchLocalUsers = (params) => {
  const { ownUserId, query, text: text8, useMentionsTransliteration, users } = params;
  const matchingUsers = users.filter((user) => {
    if (user.id === ownUserId) return false;
    if (!query) return true;
    let updatedId = removeDiacritics(user.id).toLowerCase();
    let updatedName = removeDiacritics(user.name).toLowerCase();
    let updatedQuery = removeDiacritics(query).toLowerCase();
    if (useMentionsTransliteration) {
      (async () => {
        const { default: transliterate } = await Promise.resolve().then(() => (init_index_modern(), index_modern_exports));
        updatedName = transliterate(user.name || "").toLowerCase();
        updatedQuery = transliterate(query).toLowerCase();
        updatedId = transliterate(user.id).toLowerCase();
      })();
    }
    const maxDistance = 3;
    const lastDigits = text8.slice(-(maxDistance + 1)).includes("@");
    if (updatedName) {
      const levenshtein2 = calculateLevenshtein(updatedQuery, updatedName);
      if (updatedName.includes(updatedQuery) || levenshtein2 <= maxDistance && lastDigits) {
        return true;
      }
    }
    const levenshtein = calculateLevenshtein(updatedQuery, updatedId);
    return updatedId.includes(updatedQuery) || levenshtein <= maxDistance && lastDigits;
  });
  return matchingUsers;
};
var checkUploadPermissions = async (params) => {
  const { addNotification, file, getAppSettings, t: t2, uploadType } = params;
  let appSettings = null;
  appSettings = await getAppSettings();
  const {
    allowed_file_extensions,
    allowed_mime_types,
    blocked_file_extensions,
    blocked_mime_types,
    size_limit
  } = (uploadType === "image" ? appSettings?.app?.image_upload_config : appSettings?.app?.file_upload_config) || {};
  const sendNotAllowedErrorNotification = () => addNotification(
    t2(`Upload type: "{{ type }}" is not allowed`, {
      type: file.type || "unknown type"
    }),
    "error"
  );
  if (allowed_file_extensions?.length) {
    const allowed = allowed_file_extensions.some(
      (ext) => file.name.toLowerCase().endsWith(ext.toLowerCase())
    );
    if (!allowed) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  if (blocked_file_extensions?.length) {
    const blocked = blocked_file_extensions.some(
      (ext) => file.name.toLowerCase().endsWith(ext.toLowerCase())
    );
    if (blocked) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  if (allowed_mime_types?.length) {
    const allowed = allowed_mime_types.some(
      (type) => type.toLowerCase() === file.type?.toLowerCase()
    );
    if (!allowed) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  if (blocked_mime_types?.length) {
    const blocked = blocked_mime_types.some(
      (type) => type.toLowerCase() === file.type?.toLowerCase()
    );
    if (blocked) {
      sendNotAllowedErrorNotification();
      return false;
    }
  }
  const sizeLimit = size_limit || DEFAULT_UPLOAD_SIZE_LIMIT_BYTES;
  if (file.size && file.size > sizeLimit) {
    addNotification(
      t2("File is too large: {{ size }}, maximum upload size is {{ limit }}", {
        limit: prettifyFileSize(sizeLimit),
        size: prettifyFileSize(file.size)
      }),
      "error"
    );
    return false;
  }
  return true;
};
function prettifyFileSize(bytes, precision = 3) {
  const units = ["B", "kB", "MB", "GB"];
  const exponent = Math.min(
    Math.floor(Math.log(bytes) / Math.log(1024)),
    units.length - 1
  );
  const mantissa = bytes / 1024 ** exponent;
  const formattedMantissa = precision === 0 ? Math.round(mantissa).toString() : mantissa.toPrecision(precision);
  return `${formattedMantissa} ${units[exponent]}`;
}

// src/components/Attachment/components/FileSizeIndicator.tsx
var FileSizeIndicator = ({
  fileSize,
  maximumFractionDigits
}) => {
  if (!(fileSize && Number.isFinite(Number(fileSize)))) return null;
  return /* @__PURE__ */ import_react23.default.createElement(
    "span",
    {
      className: "str-chat__message-attachment-file--item-size",
      "data-testid": "file-size-indicator"
    },
    prettifyFileSize(fileSize, maximumFractionDigits)
  );
};

// src/components/Attachment/components/ProgressBar.tsx
var import_clsx = __toESM(require("clsx"));
var import_react24 = __toESM(require("react"));
var ProgressBar = ({ className, onClick, progress }) => /* @__PURE__ */ import_react24.default.createElement(
  "div",
  {
    className: (0, import_clsx.default)(
      "str-chat__message-attachment-audio-widget--progress-track",
      className
    ),
    "data-progress": progress,
    "data-testid": "audio-progress",
    onClick,
    role: "progressbar",
    style: {
      "--str-chat__message-attachment-audio-widget-progress": progress + "%"
    }
  },
  /* @__PURE__ */ import_react24.default.createElement(
    "div",
    {
      className: "str-chat__message-attachment-audio-widget--progress-slider",
      style: { left: `${progress}px` }
    }
  )
);

// src/components/Attachment/components/PlaybackRateButton.tsx
var import_react25 = __toESM(require("react"));
var PlaybackRateButton = ({ children, onClick }) => /* @__PURE__ */ import_react25.default.createElement(
  "button",
  {
    className: "str-chat__message_attachment__playback-rate-button",
    "data-testid": "playback-rate-button",
    onClick
  },
  children
);

// src/components/Attachment/components/PlayButton.tsx
var import_react26 = __toESM(require("react"));
var PlayButton = ({ isPlaying, onClick }) => /* @__PURE__ */ import_react26.default.createElement(
  "button",
  {
    className: "str-chat__message-attachment-audio-widget--play-button",
    "data-testid": isPlaying ? "pause-audio" : "play-audio",
    onClick
  },
  isPlaying ? /* @__PURE__ */ import_react26.default.createElement(PauseIcon, null) : /* @__PURE__ */ import_react26.default.createElement(PlayTriangleIcon, null)
);

// src/components/Attachment/components/WaveProgressBar.tsx
var import_lodash2 = __toESM(require("lodash.throttle"));
var import_react27 = __toESM(require("react"));
var import_clsx2 = __toESM(require("clsx"));

// src/components/Attachment/audioSampling.ts
var resampleWaveformData = (waveformData, amplitudesCount) => waveformData.length === amplitudesCount ? waveformData : waveformData.length > amplitudesCount ? downSample(waveformData, amplitudesCount) : upSample(waveformData, amplitudesCount);
function downSample(data, targetOutputSize) {
  if (data.length <= targetOutputSize || targetOutputSize === 0) {
    return data;
  }
  if (targetOutputSize === 1) return [mean(data)];
  const result = [];
  const bucketSize = (data.length - 2) / (targetOutputSize - 2);
  let lastSelectedPointIndex = 0;
  result.push(data[lastSelectedPointIndex]);
  let maxAreaPoint, maxArea, triangleArea;
  for (let bucketIndex = 1; bucketIndex < targetOutputSize - 1; bucketIndex++) {
    const previousBucketRefPoint = data[lastSelectedPointIndex];
    const nextBucketMean = getNextBucketMean(data, bucketIndex, bucketSize);
    const currentBucketStartIndex = Math.floor((bucketIndex - 1) * bucketSize) + 1;
    const nextBucketStartIndex = Math.floor(bucketIndex * bucketSize) + 1;
    const countUnitsBetweenAtoC = 1 + nextBucketStartIndex - currentBucketStartIndex;
    maxArea = triangleArea = -1;
    for (let currentPointIndex = currentBucketStartIndex; currentPointIndex < nextBucketStartIndex; currentPointIndex++) {
      const countUnitsBetweenAtoB = Math.abs(currentPointIndex - currentBucketStartIndex) + 1;
      const countUnitsBetweenBtoC = countUnitsBetweenAtoC - countUnitsBetweenAtoB;
      const currentPointValue = data[currentPointIndex];
      triangleArea = triangleAreaHeron(
        triangleBase(
          Math.abs(previousBucketRefPoint - currentPointValue),
          countUnitsBetweenAtoB
        ),
        triangleBase(Math.abs(currentPointValue - nextBucketMean), countUnitsBetweenBtoC),
        triangleBase(
          Math.abs(previousBucketRefPoint - nextBucketMean),
          countUnitsBetweenAtoC
        )
      );
      if (triangleArea > maxArea) {
        maxArea = triangleArea;
        maxAreaPoint = data[currentPointIndex];
        lastSelectedPointIndex = currentPointIndex;
      }
    }
    if (typeof maxAreaPoint !== "undefined") result.push(maxAreaPoint);
  }
  result.push(data[data.length - 1]);
  return result;
}
var triangleAreaHeron = (a2, b, c) => {
  const s2 = (a2 + b + c) / 2;
  return Math.sqrt(s2 * (s2 - a2) * (s2 - b) * (s2 - c));
};
var triangleBase = (a2, b) => Math.sqrt(Math.pow(a2, 2) + Math.pow(b, 2));
var mean = (values) => values.reduce((acc, value) => acc + value, 0) / values.length;
var getNextBucketMean = (data, currentBucketIndex, bucketSize) => {
  const nextBucketStartIndex = Math.floor(currentBucketIndex * bucketSize) + 1;
  let nextNextBucketStartIndex = Math.floor((currentBucketIndex + 1) * bucketSize) + 1;
  nextNextBucketStartIndex = nextNextBucketStartIndex < data.length ? nextNextBucketStartIndex : data.length;
  return mean(data.slice(nextBucketStartIndex, nextNextBucketStartIndex));
};
var upSample = (values, targetSize) => {
  if (!values.length) {
    console.warn("Cannot extend empty array of amplitudes.");
    return values;
  }
  if (values.length > targetSize) {
    console.warn(
      "Requested to extend the waveformData that is longer than the target list size"
    );
    return values;
  }
  if (targetSize === values.length) return values;
  let [bucketSize, remainder] = divMod(targetSize, values.length);
  const result = [];
  for (let i = 0; i < values.length; i++) {
    const extra = remainder && remainder-- ? 1 : 0;
    result.push(...Array(bucketSize + extra).fill(values[i]));
  }
  return result;
};

// src/components/Attachment/components/WaveProgressBar.tsx
var WaveProgressBar = ({
  amplitudesCount = 40,
  progress = 0,
  relativeAmplitudeBarWidth = 2,
  relativeAmplitudeGap = 1,
  seek,
  waveformData
}) => {
  const [progressIndicator, setProgressIndicator] = (0, import_react27.useState)(null);
  const isDragging = (0, import_react27.useRef)(false);
  const [root4, setRoot] = (0, import_react27.useState)(null);
  const [trackAxisX, setTrackAxisX] = (0, import_react27.useState)();
  const lastRootWidth = (0, import_react27.useRef)(void 0);
  const handleDragStart = (e2) => {
    e2.preventDefault();
    if (!progressIndicator) return;
    isDragging.current = true;
    progressIndicator.style.cursor = "grabbing";
  };
  const handleDrag = (e2) => {
    if (!isDragging.current) return;
    seek({ ...e2 });
  };
  const handleDragStop = (0, import_react27.useCallback)(() => {
    if (!progressIndicator) return;
    isDragging.current = false;
    progressIndicator.style.removeProperty("cursor");
  }, [progressIndicator]);
  const getTrackAxisX = (0, import_react27.useMemo)(
    () => (0, import_lodash2.default)((rootWidth) => {
      if (rootWidth === lastRootWidth.current) return;
      lastRootWidth.current = rootWidth;
      const possibleAmpCount = Math.floor(
        rootWidth / (relativeAmplitudeGap + relativeAmplitudeBarWidth)
      );
      const tooManyAmplitudesToRender = possibleAmpCount < amplitudesCount;
      const barCount = tooManyAmplitudesToRender ? possibleAmpCount : amplitudesCount;
      const amplitudeBarWidthToGapRatio = relativeAmplitudeBarWidth / (relativeAmplitudeBarWidth + relativeAmplitudeGap);
      const barWidth = barCount && rootWidth / barCount * amplitudeBarWidthToGapRatio;
      setTrackAxisX({
        barCount,
        barWidth,
        gap: barWidth * (relativeAmplitudeGap / relativeAmplitudeBarWidth)
      });
    }, 1),
    [relativeAmplitudeBarWidth, relativeAmplitudeGap, amplitudesCount]
  );
  const resampledWaveformData = (0, import_react27.useMemo)(
    () => trackAxisX ? resampleWaveformData(waveformData, trackAxisX.barCount) : [],
    [trackAxisX, waveformData]
  );
  (0, import_react27.useEffect)(() => {
    document.addEventListener("pointerup", handleDragStop);
    return () => {
      document.removeEventListener("pointerup", handleDragStop);
    };
  }, [handleDragStop]);
  (0, import_react27.useEffect)(() => {
    if (!root4 || typeof ResizeObserver === "undefined") return;
    const observer = new ResizeObserver(([entry]) => {
      getTrackAxisX(entry.contentRect.width);
    });
    observer.observe(root4);
    return () => {
      observer.disconnect();
    };
  }, [getTrackAxisX, root4]);
  (0, import_react27.useLayoutEffect)(() => {
    if (!root4) return;
    const { width: rootWidth } = root4.getBoundingClientRect();
    getTrackAxisX(rootWidth);
  }, [getTrackAxisX, root4]);
  if (!waveformData.length || trackAxisX?.barCount === 0) return null;
  return /* @__PURE__ */ import_react27.default.createElement(
    "div",
    {
      className: "str-chat__wave-progress-bar__track",
      "data-testid": "wave-progress-bar-track",
      onClick: seek,
      onPointerDown: handleDragStart,
      onPointerMove: handleDrag,
      onPointerUp: handleDragStop,
      ref: setRoot,
      role: "progressbar",
      style: {
        "--str-chat__voice-recording-amplitude-bar-gap-width": trackAxisX?.gap + "px"
      }
    },
    resampledWaveformData.map((amplitude, i) => /* @__PURE__ */ import_react27.default.createElement(
      "div",
      {
        className: (0, import_clsx2.default)("str-chat__wave-progress-bar__amplitude-bar", {
          ["str-chat__wave-progress-bar__amplitude-bar--active"]: progress > i / resampledWaveformData.length * 100
        }),
        "data-testid": "amplitude-bar",
        key: `amplitude-${i}`,
        style: {
          "--str-chat__voice-recording-amplitude-bar-width": trackAxisX?.barWidth + "px",
          "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
        }
      }
    )),
    /* @__PURE__ */ import_react27.default.createElement(
      "div",
      {
        className: "str-chat__wave-progress-bar__progress-indicator",
        "data-testid": "wave-progress-bar-progress-indicator",
        ref: setProgressIndicator,
        style: { left: `${progress < 0 ? 0 : progress > 100 ? 100 : progress}%` }
      }
    )
  );
};

// src/components/Attachment/hooks/useAudioController.ts
var import_lodash3 = __toESM(require("lodash.throttle"));
var import_react28 = require("react");
var isSeekable = (audioElement) => !(audioElement.duration === Infinity || isNaN(audioElement.duration));
var elementIsPlaying = (audioElement) => audioElement && !(audioElement.paused || audioElement.ended);
var logError = (e2) => console.error("[AUDIO PLAYER]", e2);
var DEFAULT_PLAYBACK_RATES = [1, 1.5, 2];
var useAudioController = ({
  durationSeconds,
  mimeType,
  playbackRates = DEFAULT_PLAYBACK_RATES
} = {}) => {
  const { addNotification } = useChannelActionContext("useAudioController");
  const { t: t2 } = useTranslationContext("useAudioController");
  const [isPlaying, setIsPlaying] = (0, import_react28.useState)(false);
  const [playbackError, setPlaybackError] = (0, import_react28.useState)();
  const [canPlayRecord, setCanPlayRecord] = (0, import_react28.useState)(true);
  const [secondsElapsed, setSecondsElapsed] = (0, import_react28.useState)(0);
  const [playbackRateIndex, setPlaybackRateIndex] = (0, import_react28.useState)(0);
  const playTimeout = (0, import_react28.useRef)(void 0);
  const audioRef = (0, import_react28.useRef)(null);
  const registerError = (0, import_react28.useCallback)(
    (e2) => {
      logError(e2);
      setPlaybackError(e2);
      addNotification(e2.message, "error");
    },
    [addNotification]
  );
  const togglePlay = (0, import_react28.useCallback)(async () => {
    if (!audioRef.current) return;
    clearTimeout(playTimeout.current);
    playTimeout.current = void 0;
    if (mimeType && !audioRef.current.canPlayType(mimeType)) {
      registerError(
        new Error(t2("Recording format is not supported and cannot be reproduced"))
      );
      setCanPlayRecord(false);
      return;
    }
    if (elementIsPlaying(audioRef.current)) {
      audioRef.current.pause();
      setIsPlaying(false);
    } else {
      playTimeout.current = setTimeout(() => {
        if (!audioRef.current) return;
        try {
          audioRef.current.pause();
          setIsPlaying(false);
        } catch (e2) {
          registerError(new Error(t2("Failed to play the recording")));
        }
      }, 2e3);
      try {
        await audioRef.current.play();
        setIsPlaying(true);
      } catch (e2) {
        registerError(e2);
        setIsPlaying(false);
      } finally {
        clearTimeout(playTimeout.current);
        playTimeout.current = void 0;
      }
    }
  }, [mimeType, registerError, t2]);
  const increasePlaybackRate = () => {
    setPlaybackRateIndex((prev) => {
      if (!audioRef.current) return prev;
      const nextIndex = prev === playbackRates.length - 1 ? 0 : prev + 1;
      audioRef.current.playbackRate = playbackRates[nextIndex];
      return nextIndex;
    });
  };
  const seek = (0, import_react28.useMemo)(
    () => (0, import_lodash3.default)(({ clientX, currentTarget }) => {
      if (!(currentTarget && audioRef.current)) return;
      if (!isSeekable(audioRef.current)) {
        registerError(new Error(t2("Cannot seek in the recording")));
        return;
      }
      const { width, x } = currentTarget.getBoundingClientRect();
      const ratio = (clientX - x) / width;
      if (ratio > 1 || ratio < 0) return;
      const currentTime = ratio * audioRef.current.duration;
      setSecondsElapsed(currentTime);
      audioRef.current.currentTime = currentTime;
    }, 16),
    [registerError, t2]
  );
  (0, import_react28.useEffect)(() => {
    if (!audioRef.current) return;
    const audioElement = audioRef.current;
    const handleEnded = () => {
      setSecondsElapsed(audioElement?.duration ?? durationSeconds ?? 0);
      setIsPlaying(false);
    };
    audioElement.addEventListener("ended", handleEnded);
    const handleError = () => {
      addNotification(t2("Error reproducing the recording"), "error");
      setIsPlaying(false);
    };
    audioElement.addEventListener("error", handleError);
    const handleTimeupdate = () => {
      setSecondsElapsed(audioElement?.currentTime);
    };
    audioElement.addEventListener("timeupdate", handleTimeupdate);
    return () => {
      audioElement.pause();
      audioElement.removeEventListener("ended", handleEnded);
      audioElement.removeEventListener("error", handleError);
      audioElement.removeEventListener("timeupdate", handleTimeupdate);
    };
  }, [addNotification, durationSeconds, t2]);
  return {
    audioRef,
    canPlayRecord,
    increasePlaybackRate,
    isPlaying,
    playbackError,
    playbackRate: playbackRates[playbackRateIndex],
    progress: audioRef.current && secondsElapsed ? secondsElapsed / audioRef.current.duration * 100 : 0,
    secondsElapsed,
    seek,
    togglePlay
  };
};

// src/components/Attachment/Audio.tsx
var UnMemoizedAudio = (props) => {
  const {
    og: { asset_url, file_size, mime_type, title }
  } = props;
  const { audioRef, isPlaying, progress, seek, togglePlay } = useAudioController({
    mimeType: mime_type
  });
  if (!asset_url) return null;
  const dataTestId = "audio-widget";
  const rootClassName2 = "str-chat__message-attachment-audio-widget";
  return /* @__PURE__ */ import_react29.default.createElement("div", { className: rootClassName2, "data-testid": dataTestId }, /* @__PURE__ */ import_react29.default.createElement("audio", { ref: audioRef }, /* @__PURE__ */ import_react29.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })), /* @__PURE__ */ import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--play-controls" }, /* @__PURE__ */ import_react29.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })), /* @__PURE__ */ import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--text" }, /* @__PURE__ */ import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--text-first-row" }, /* @__PURE__ */ import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title), /* @__PURE__ */ import_react29.default.createElement(DownloadButton, { assetUrl: asset_url })), /* @__PURE__ */ import_react29.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--text-second-row" }, /* @__PURE__ */ import_react29.default.createElement(FileSizeIndicator, { fileSize: file_size }), /* @__PURE__ */ import_react29.default.createElement(ProgressBar, { onClick: seek, progress }))));
};
var Audio = import_react29.default.memo(UnMemoizedAudio);

// src/components/Attachment/VoiceRecording.tsx
var import_react35 = __toESM(require("react"));

// src/components/ReactFileUtilities/FileIcon/FileIcon.tsx
var import_react31 = __toESM(require("react"));

// src/components/ReactFileUtilities/FileIcon/FileIconSet.tsx
var import_react30 = __toESM(require("react"));
var import_clsx3 = __toESM(require("clsx"));
var DEFAULT_SIZE = 40;
var FilePdfIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-pdf", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "#F5F5F5"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#E71A01"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M16.39 8.90641C16.215 8.27341 15.787 7.95841 15.426 8.00441C14.99 8.06141 14.526 8.32041 14.34 8.72941C13.854 9.82141 14.768 12.8934 15.028 13.7674L15.073 13.9194C14.015 17.1134 10.394 23.4264 8.62002 23.8534C8.58302 23.4364 8.80602 22.2294 11.146 20.7244C11.266 20.5944 11.406 20.4374 11.471 20.3344C9.49302 21.3004 6.93108 22.8514 8.47102 24.0114C8.55602 24.0774 8.68502 24.1314 8.83402 24.1874C10.014 24.6244 11.666 23.1954 13.327 19.9544C15.157 19.3504 16.633 18.8964 18.722 18.5804C21.005 20.1304 22.538 20.4464 23.578 20.0474C23.866 19.9354 24.32 19.5734 24.45 19.1004C24.515 18.8774 24.608 18.5154 24.432 18.2274C23.842 17.2664 21.452 17.5954 20.032 17.7904C19.779 17.8254 19.557 17.8564 19.381 17.8744C17.552 16.7704 16.289 14.8014 15.778 13.3804C15.857 13.0784 15.936 12.7894 16.012 12.5124C16.397 11.1124 16.701 10.0064 16.392 8.90641H16.39ZM24.45 19.1004C23.605 20.1404 21.628 19.4164 20.05 18.4224C21.507 18.2644 23.01 18.1724 23.661 18.3764C24.488 18.6364 24.459 19.0444 24.451 19.1004H24.45ZM15.601 12.7404C15.296 11.6544 14.868 9.24041 15.555 8.46041C16.701 9.11641 16.266 10.5384 15.825 11.9834C15.748 12.2364 15.671 12.4894 15.601 12.7404ZM13.439 19.5834C15.156 18.9054 16.354 18.4494 18.118 18.1254C16.818 16.9554 16.028 15.6834 15.378 14.3834C14.915 16.0554 13.948 18.5894 13.438 19.5834H13.439Z",
      fill: "#E71A01",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M13.1719 33.0127V37.4219H12.1875V32.3018H13.1001L13.1719 33.0127ZM15.5132 34.1099V34.1816C15.5132 34.4505 15.4813 34.7 15.4175 34.9302C15.356 35.1603 15.2648 35.3608 15.144 35.5317C15.0233 35.7004 14.8729 35.8325 14.6929 35.9282C14.5151 36.0216 14.3101 36.0684 14.0776 36.0684C13.8521 36.0684 13.6561 36.0228 13.4897 35.9316C13.3234 35.8405 13.1833 35.7129 13.0693 35.5488C12.9577 35.3825 12.8677 35.1899 12.7993 34.9712C12.731 34.7524 12.6785 34.5177 12.6421 34.2671V34.0791C12.6785 33.8102 12.731 33.5641 12.7993 33.3408C12.8677 33.1152 12.9577 32.9204 13.0693 32.7563C13.1833 32.59 13.3223 32.4613 13.4863 32.3701C13.6527 32.279 13.8475 32.2334 14.0708 32.2334C14.3055 32.2334 14.5117 32.2778 14.6895 32.3667C14.8695 32.4556 15.0199 32.5832 15.1406 32.7495C15.2637 32.9159 15.356 33.1141 15.4175 33.3442C15.4813 33.5744 15.5132 33.8296 15.5132 34.1099ZM14.5254 34.1816V34.1099C14.5254 33.9526 14.5117 33.8079 14.4844 33.6758C14.4593 33.5413 14.4183 33.424 14.3613 33.3237C14.3066 33.2235 14.2337 33.146 14.1426 33.0913C14.0537 33.0343 13.9455 33.0059 13.8179 33.0059C13.6834 33.0059 13.5684 33.0275 13.4727 33.0708C13.3792 33.1141 13.3029 33.1768 13.2437 33.2588C13.1844 33.3408 13.14 33.4388 13.1104 33.5527C13.0807 33.6667 13.0625 33.7954 13.0557 33.939V34.4141C13.0671 34.5827 13.099 34.7342 13.1514 34.8687C13.2038 35.0008 13.2847 35.1056 13.394 35.1831C13.5034 35.2606 13.647 35.2993 13.8247 35.2993C13.9546 35.2993 14.064 35.2708 14.1528 35.2139C14.2417 35.1546 14.3135 35.0737 14.3682 34.9712C14.4251 34.8687 14.465 34.7502 14.4878 34.6157C14.5129 34.4813 14.5254 34.3366 14.5254 34.1816ZM18.3091 35.1934V30.75H19.3003V36H18.4082L18.3091 35.1934ZM15.9712 34.1953V34.1235C15.9712 33.841 16.0031 33.5846 16.0669 33.3545C16.1307 33.1221 16.2241 32.9227 16.3472 32.7563C16.4702 32.59 16.6217 32.4613 16.8018 32.3701C16.9818 32.279 17.1868 32.2334 17.417 32.2334C17.6335 32.2334 17.8226 32.279 17.9844 32.3701C18.1484 32.4613 18.2874 32.5911 18.4014 32.7598C18.5176 32.9261 18.611 33.1232 18.6816 33.3511C18.7523 33.5767 18.8035 33.8239 18.8354 34.0928V34.25C18.8035 34.5075 18.7523 34.7467 18.6816 34.9678C18.611 35.1888 18.5176 35.3825 18.4014 35.5488C18.2874 35.7129 18.1484 35.8405 17.9844 35.9316C17.8203 36.0228 17.6289 36.0684 17.4102 36.0684C17.18 36.0684 16.9749 36.0216 16.7949 35.9282C16.6172 35.8348 16.4668 35.7038 16.3438 35.5352C16.223 35.3665 16.1307 35.1683 16.0669 34.9404C16.0031 34.7126 15.9712 34.4642 15.9712 34.1953ZM16.9556 34.1235V34.1953C16.9556 34.348 16.967 34.4904 16.9897 34.6226C17.0148 34.7547 17.0547 34.8721 17.1094 34.9746C17.1663 35.0749 17.2393 35.1535 17.3281 35.2104C17.4193 35.2651 17.5298 35.2925 17.6597 35.2925C17.8283 35.2925 17.9673 35.2549 18.0767 35.1797C18.186 35.1022 18.2692 34.9963 18.3262 34.8618C18.3854 34.7274 18.4196 34.5724 18.4287 34.397V33.9492C18.4219 33.8057 18.4014 33.6769 18.3672 33.563C18.3353 33.4468 18.2874 33.3477 18.2236 33.2656C18.1621 33.1836 18.0846 33.1198 17.9912 33.0742C17.9001 33.0286 17.7918 33.0059 17.6665 33.0059C17.5389 33.0059 17.4295 33.0355 17.3384 33.0947C17.2472 33.1517 17.1732 33.2303 17.1162 33.3306C17.0615 33.4308 17.0205 33.5493 16.9932 33.686C16.9681 33.8205 16.9556 33.9663 16.9556 34.1235ZM21.3237 36H20.3325V31.9736C20.3325 31.6934 20.3872 31.4575 20.4966 31.2661C20.6082 31.0724 20.7643 30.9266 20.9648 30.8286C21.1676 30.7284 21.408 30.6782 21.686 30.6782C21.7772 30.6782 21.8649 30.6851 21.9492 30.6987C22.0335 30.7101 22.1156 30.7249 22.1953 30.7432L22.1851 31.4849C22.1418 31.4735 22.0962 31.4655 22.0483 31.4609C22.0005 31.4564 21.9447 31.4541 21.8809 31.4541C21.7624 31.4541 21.661 31.4746 21.5767 31.5156C21.4946 31.5544 21.432 31.6125 21.3887 31.6899C21.3454 31.7674 21.3237 31.862 21.3237 31.9736V36ZM22.062 32.3018V32.999H19.7822V32.3018H22.062Z",
      fill: "white"
    }
  )
);
var FileWordIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-word", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#4285F4"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#4285F4", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#4285F4", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#4285F4", fillRule: "evenodd" })
);
var FileWordIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-word-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_11084_64)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#3670D3" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#C1D8FF", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_11084_64",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#79A4F2" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#3375E2" })
  ))
);
var FilePowerPointIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-powerpoint", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z",
      fill: "white",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#D65537"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z",
      fill: "#D65537",
      fillRule: "evenodd"
    }
  )
);
var FilePowerPointIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-powerpoint-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_11084_76)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#AB381D" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M7 12C7 10.8954 7.89543 10 9 10H19C20.1046 10 21 10.8954 21 12V18C21 19.1046 20.1046 20 19 20H9C7.89543 20 7 19.1046 7 18V12ZM9 12H19V18H9V12ZM25 22C25 23.1046 24.1046 24 23 24H11V22H23V15H25V22Z",
      fill: "#FFB3A0",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_11084_76",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#DC7259" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#D14423" })
  ))
);
var FileExcelIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-excel", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z",
      fill: "white",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#0F9D58"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z",
      fill: "#0F9D58",
      fillRule: "evenodd"
    }
  )
);
var FileExcelIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-excel-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_11084_326)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#0C864B" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M12 13H7V15H12V13ZM12 17H7V19H12V17ZM7 21H12V23H7V21ZM23 13H14V15H23V13ZM14 17H23V19H14V17ZM23 21H14V23H23V21Z",
      fill: "#A8E7C9",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_11084_326",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#64AD8A" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#0C864B" })
  ))
);
var FileArchiveIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-archive", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z",
      fill: "white",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#F8B859"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z",
      fill: "#F8B859",
      fillRule: "evenodd"
    }
  )
);
var FileArchiveIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-archive-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_11086_246)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#B67A24" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M10 0H8V2H10V4H8V6H10V8H8V10H10V12H8V14H10V12H12V10H10V8H12V6H10V4H12V2H10V0ZM8 17C8 16.4477 8.44771 16 9 16H11C11.5523 16 12 16.4477 12 17V23C12 23.5523 11.5523 24 11 24H9C8.44771 24 8 23.5523 8 23V17ZM9 23V20H11V23H9Z",
      fill: "#FFE9C8",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_11086_246",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#FFC775" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#E69E34" })
  ))
);
var FileCodeIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-code", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#00ACA1"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z",
      fill: "#00ACA1",
      fillRule: "evenodd"
    }
  )
);
var FileCodeIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-code-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_11086_611)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#00ACA1" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M15 21V18.984L11.5 18L15 17V15L9 17V19L15 21ZM19 15V17.016L22.5 18L19 19V21L25 19V17L19 15Z",
      fill: "#A3DCD8",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_11086_611",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#7FC4BD" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#00ACA1" })
  ))
);
var FileAudioIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-audio", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z",
      fill: "white",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#2727B0"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z",
      fill: "#2727B0",
      fillRule: "evenodd"
    }
  )
);
var FileAudioIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-audio-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_11086_420)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#1919A5" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M8.87912 21.941H12.298L16.9521 24.7493C17.0307 24.8138 17.1293 24.849 17.2311 24.849C17.4738 24.8488 17.6705 24.6519 17.6703 24.4092V12.4399C17.6704 12.3381 17.6352 12.2396 17.5707 12.1609C17.4168 11.9732 17.1398 11.9457 16.9521 12.0996L12.298 14.908H8.87912C8.3936 14.908 8 15.3016 8 15.7871V21.0619C8 21.5474 8.3936 21.941 8.87912 21.941ZM12.9258 16.6664L15.9122 15.2224V21.6268L12.9258 20.1829H9.7583V16.6664H12.9258ZM19.8511 16.3517C19.474 16.4092 19.2397 16.6637 19.3283 16.9191L19.3262 16.92C19.5295 17.4995 19.6305 18.098 19.6284 18.6953C19.6305 19.2975 19.5237 19.9014 19.3196 20.4909C19.229 20.7462 19.4682 20.9996 19.8474 21.06C19.9008 21.0683 19.9542 21.072 20.0076 21.072C20.3259 21.072 20.6156 20.9234 20.6922 20.7057C20.9194 20.0451 21.0337 19.37 21.0374 18.6953C21.0349 18.0251 20.9211 17.3575 20.6955 16.7035C20.6053 16.4477 20.229 16.2908 19.8511 16.3517ZM22.1605 14.6028C22.5252 14.5163 22.9259 14.6454 23.055 14.8938C23.6891 16.1157 24 17.4042 24 18.6923C24.0004 19.9895 23.6796 21.2839 23.0521 22.5153C22.9503 22.7123 22.6763 22.8344 22.3828 22.8344C22.3071 22.8344 22.2301 22.8261 22.1543 22.8092C21.7863 22.7251 21.5914 22.4536 21.7185 22.2077C22.2988 21.0761 22.5922 19.8836 22.5931 18.6919C22.5931 17.5056 22.3054 16.3222 21.7276 15.2025C21.6001 14.9563 21.795 14.686 22.1605 14.6028Z",
      fill: "#AAAAFF",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_11086_420",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#4A4AB8" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#2727B0" })
  ))
);
var FileVideoIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-video", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M17.7168 33.172C18.2348 33.172 18.4238 33.655 18.4238 34.18C18.4238 34.642 18.2978 35.195 17.7168 35.195C17.1708 35.195 16.9888 34.642 16.9888 34.145C16.9888 33.683 17.1708 33.172 17.7168 33.172ZM19.5718 31.002H18.3818V32.7589H18.3678C18.1228 32.43 17.7798 32.262 17.3318 32.262C16.3028 32.262 15.7988 33.158 15.7988 34.103C15.7988 35.125 16.2818 36.1049 17.4228 36.1049C17.8428 36.1049 18.1928 35.923 18.4238 35.58H18.4378V36H19.5718V31.002ZM12.7095 34.1872C12.7095 33.7252 12.8775 33.1722 13.4305 33.1722C13.9835 33.1722 14.1585 33.7252 14.1585 34.1872C14.1585 34.6492 13.9835 35.1952 13.4305 35.1952C12.8775 35.1952 12.7095 34.6492 12.7095 34.1872ZM11.5195 34.1872C11.5195 35.2792 12.3035 36.1052 13.4305 36.1052C14.5575 36.1052 15.3485 35.2792 15.3485 34.1872C15.3485 33.0952 14.5575 32.2622 13.4305 32.2622C12.3035 32.2622 11.5195 33.0952 11.5195 34.1872ZM21.839 32.3671H22.574V33.1371H21.839V34.7891C21.839 35.0761 22.007 35.1391 22.266 35.1391C22.3142 35.1391 22.364 35.1357 22.4147 35.1323C22.4672 35.1287 22.5206 35.1251 22.574 35.1251V36.0001C22.481 36.0031 22.388 36.0099 22.295 36.0168C22.171 36.0259 22.047 36.0351 21.923 36.0351C20.908 36.0351 20.649 35.7411 20.649 34.7541V33.1371H20.047V32.3671H20.649V31.2681H21.839V32.3671Z",
      fill: "white",
      fillRule: "evenodd"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 28H34V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V28Z",
      fill: "#9D27B0"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V28H0V3Z", fill: "#F5F5F5" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z",
      fill: "#9D27B0"
    }
  )
);
var FileVideoIconAlt = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-video-alt", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear_18604_164254)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#7A1589" }),
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M9 17H25V24H9V17ZM27 14C27 12.8954 26.1046 12 25 12H22L24 15H21L19 12H17L19 15H16L14 12H12L14 15H11L9 12C7.9 12 7.01 12.9 7.01 14L7 24C7 25.1 7.9 26 9 26H25C26.1 26 27 25.1 27 24V14Z",
      fill: "#F3A8FF"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear_18604_164254",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "#A94AB8" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#9D27B0" })
  ))
);
var FileFallbackIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-fallback ", className),
    fill: "none",
    height: size,
    viewBox: "0 0 34 40",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M0 3C0 1.34315 1.34315 0 3 0H23L34 11V37C34 38.6569 32.6569 40 31 40H3C1.34315 40 0 38.6569 0 37V3Z",
      fill: "url(#paint0_linear)"
    }
  ),
  /* @__PURE__ */ import_react30.default.createElement("path", { d: "M34 11L26 11C24.3431 11 23 9.65685 23 8V0L34 11Z", fill: "#DBDBDB" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 13H23V15H8V13Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 17H18V19H8V17Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("path", { clipRule: "evenodd", d: "M8 21H23V23H8V21Z", fill: "#CFCFCF", fillRule: "evenodd" }),
  /* @__PURE__ */ import_react30.default.createElement("defs", null, /* @__PURE__ */ import_react30.default.createElement(
    "linearGradient",
    {
      gradientUnits: "userSpaceOnUse",
      id: "paint0_linear",
      x1: "0",
      x2: "0",
      y1: "0",
      y2: "40"
    },
    /* @__PURE__ */ import_react30.default.createElement("stop", { stopColor: "white" }),
    /* @__PURE__ */ import_react30.default.createElement("stop", { offset: "1", stopColor: "#DBDBDB" })
  ))
);
var FileImageIcon = ({
  className = "",
  size = DEFAULT_SIZE,
  ...props
}) => /* @__PURE__ */ import_react30.default.createElement(
  "svg",
  {
    className: (0, import_clsx3.default)("rfu-file-image", className),
    height: size,
    viewBox: "0 0 384 512",
    width: size,
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  },
  /* @__PURE__ */ import_react30.default.createElement(
    "path",
    {
      d: "M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48zm32-48h224V288l-23.5-23.5c-4.7-4.7-12.3-4.7-17 0L176 352l-39.5-39.5c-4.7-4.7-12.3-4.7-17 0L80 352v64zm48-240c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z",
      fill: "#414D54"
    }
  )
);

// src/components/ReactFileUtilities/FileIcon/mimeTypes.ts
var wordMimeTypes = [
  // Microsoft Word
  // .doc .dot
  "application/msword",
  // .doc .dot
  "application/msword-template",
  // .docx
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  // .dotx (no test)
  "application/vnd.openxmlformats-officedocument.wordprocessingml.template",
  // .docm
  "application/vnd.ms-word.document.macroEnabled.12",
  // .dotm (no test)
  "application/vnd.ms-word.template.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odt
  "application/vnd.oasis.opendocument.text",
  // .ott
  "application/vnd.oasis.opendocument.text-template",
  // .fodt
  "application/vnd.oasis.opendocument.text-flat-xml"
  // .uot
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var excelMimeTypes = [
  // .csv
  "text/csv",
  // TODO: maybe more data files
  // Microsoft Excel
  // .xls .xlt .xla (no test for .xla)
  "application/vnd.ms-excel",
  // .xlsx
  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
  // .xltx (no test)
  "application/vnd.openxmlformats-officedocument.spreadsheetml.template",
  // .xlsm
  "application/vnd.ms-excel.sheet.macroEnabled.12",
  // .xltm (no test)
  "application/vnd.ms-excel.template.macroEnabled.12",
  // .xlam (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // .xlsb (no test)
  "application/vnd.ms-excel.addin.macroEnabled.12",
  // LibreOffice/OpenOffice Calc
  // .ods
  "application/vnd.oasis.opendocument.spreadsheet",
  // .ots
  "application/vnd.oasis.opendocument.spreadsheet-template",
  // .fods
  "application/vnd.oasis.opendocument.spreadsheet-flat-xml"
  // .uos
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var powerpointMimeTypes = [
  // Microsoft Word
  // .ppt .pot .pps .ppa (no test for .ppa)
  "application/vnd.ms-powerpoint",
  // .pptx
  "application/vnd.openxmlformats-officedocument.presentationml.presentation",
  // .potx (no test)
  "application/vnd.openxmlformats-officedocument.presentationml.template",
  // .ppsx
  "application/vnd.openxmlformats-officedocument.presentationml.slideshow",
  // .ppam
  "application/vnd.ms-powerpoint.addin.macroEnabled.12",
  // .pptm
  "application/vnd.ms-powerpoint.presentation.macroEnabled.12",
  // .potm
  "application/vnd.ms-powerpoint.template.macroEnabled.12",
  // .ppsm
  "application/vnd.ms-powerpoint.slideshow.macroEnabled.12",
  // LibreOffice/OpenOffice Writer
  // .odp
  "application/vnd.oasis.opendocument.presentation",
  // .otp
  "application/vnd.oasis.opendocument.presentation-template",
  // .fodp
  "application/vnd.oasis.opendocument.presentation-flat-xml"
  // .uop
  // NOTE: firefox doesn't know mimetype so maybe ignore
];
var archiveFileTypes = [
  // .zip
  "application/zip",
  // .z7
  "application/x-7z-compressed",
  // .ar
  "application/x-archive",
  // .tar
  "application/x-tar",
  // .tar.gz
  "application/gzip",
  // .tar.Z
  "application/x-compress",
  // .tar.bz2
  "application/x-bzip",
  // .tar.lz
  "application/x-lzip",
  // .tar.lz4
  "application/x-lz4",
  // .tar.lzma
  "application/x-lzma",
  // .tar.lzo (no test)
  "application/x-lzop",
  // .tar.xz
  "application/x-xz",
  // .war
  "application/x-webarchive",
  // .rar
  "application/vnd.rar"
];
var codeFileTypes = [
  // .html .htm
  "text/html",
  // .css
  "text/css",
  // .js
  "application/x-javascript",
  "text/javascript",
  // .json
  "application/json",
  // .py
  "text/x-python",
  // .go
  "text/x-go",
  // .c
  "text/x-csrc",
  // .cpp
  "text/x-c++src",
  // .rb
  "application/x-ruby",
  // .rust
  "text/rust",
  // .java
  "text/x-java",
  // .php
  "application/x-php",
  // .cs
  "text/x-csharp",
  // .scala
  "text/x-scala",
  // .erl
  "text/x-erlang",
  // .sh
  "application/x-shellscript"
];

// src/components/ReactFileUtilities/FileIcon/iconMap.ts
function generateMimeTypeToIconMap({
  FileArchiveIcon: FileArchiveIcon2,
  FileCodeIcon: FileCodeIcon2,
  FileExcelIcon: FileExcelIcon2,
  FilePdfIcon: FilePdfIcon2,
  FilePowerPointIcon: FilePowerPointIcon2,
  FileWordIcon: FileWordIcon2
}) {
  const mimeTypeToIconMap = {
    "application/pdf": FilePdfIcon2
  };
  for (const type of wordMimeTypes) {
    mimeTypeToIconMap[type] = FileWordIcon2;
  }
  for (const type of excelMimeTypes) {
    mimeTypeToIconMap[type] = FileExcelIcon2;
  }
  for (const type of powerpointMimeTypes) {
    mimeTypeToIconMap[type] = FilePowerPointIcon2;
  }
  for (const type of archiveFileTypes) {
    mimeTypeToIconMap[type] = FileArchiveIcon2;
  }
  for (const type of codeFileTypes) {
    mimeTypeToIconMap[type] = FileCodeIcon2;
  }
  return mimeTypeToIconMap;
}
function generateGeneralTypeToIconMap({
  FileAltIcon,
  FileAudioIcon: FileAudioIcon2,
  FileImageIcon: FileImageIcon2,
  FileVideoIcon: FileVideoIcon2
}) {
  return {
    "audio/": FileAudioIcon2,
    "image/": FileImageIcon2,
    "text/": FileAltIcon,
    "video/": FileVideoIcon2
  };
}
var iconMap = {
  alt: {
    ...generateMimeTypeToIconMap({
      FileArchiveIcon: FileArchiveIconAlt,
      FileCodeIcon: FileCodeIconAlt,
      FileExcelIcon: FileExcelIconAlt,
      FilePdfIcon,
      FilePowerPointIcon: FilePowerPointIconAlt,
      FileWordIcon: FileWordIconAlt
    }),
    ...generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon,
      FileAudioIcon: FileAudioIconAlt,
      FileImageIcon,
      FileVideoIcon: FileVideoIconAlt
    }),
    fallback: FileFallbackIcon
  },
  standard: {
    ...generateMimeTypeToIconMap({
      FileArchiveIcon,
      FileCodeIcon,
      FileExcelIcon,
      FilePdfIcon,
      FilePowerPointIcon,
      FileWordIcon
    }),
    ...generateGeneralTypeToIconMap({
      FileAltIcon: FileFallbackIcon,
      FileAudioIcon,
      FileImageIcon,
      FileVideoIcon
    }),
    fallback: FileFallbackIcon
  }
};

// src/components/ReactFileUtilities/FileIcon/FileIcon.tsx
function mimeTypeToIcon(type = "standard", mimeType) {
  const theMap = iconMap[type] || iconMap["standard"];
  if (!mimeType) return theMap.fallback;
  const icon2 = theMap[mimeType];
  if (icon2) return icon2;
  if (mimeType.startsWith("audio/")) return theMap["audio/"];
  if (mimeType.startsWith("video/")) return theMap["video/"];
  if (mimeType.startsWith("image/")) return theMap["image/"];
  if (mimeType.startsWith("text/")) return theMap["text/"];
  return theMap.fallback;
}
var FileIcon = (props) => {
  const {
    big = false,
    mimeType,
    size = 50,
    sizeSmall = 20,
    type = "standard",
    ...rest
  } = props;
  const Icon5 = mimeTypeToIcon(type, mimeType);
  return /* @__PURE__ */ import_react31.default.createElement(Icon5, { ...rest, size: big ? size : sizeSmall });
};

// src/components/ReactFileUtilities/ImageDropzone.tsx
var import_clsx4 = __toESM(require("clsx"));
var import_react32 = __toESM(require("react"));
var import_react_dropzone = require("react-dropzone");
var ImageDropzone = ({
  accept: acceptedFiles = [],
  children,
  disabled,
  handleFiles,
  maxNumberOfFiles,
  multiple
}) => {
  const { t: t2 } = useTranslationContext("ImageDropzone");
  const handleDrop = (0, import_react32.useCallback)(
    (accepted) => {
      if (!handleFiles) {
        return;
      }
      if (accepted && accepted.length) {
        handleFiles(accepted);
      }
    },
    [handleFiles]
  );
  const accept = (0, import_react32.useMemo)(
    () => (typeof acceptedFiles === "string" ? acceptedFiles.split(",") : acceptedFiles).reduce((mediaTypeMap, mediaType) => {
      mediaTypeMap[mediaType] ?? (mediaTypeMap[mediaType] = []);
      return mediaTypeMap;
    }, {}),
    [acceptedFiles]
  );
  const { getRootProps, isDragAccept, isDragReject } = (0, import_react_dropzone.useDropzone)({
    accept,
    disabled,
    maxFiles: maxNumberOfFiles,
    multiple,
    noClick: true,
    onDrop: handleDrop
  });
  return /* @__PURE__ */ import_react32.default.createElement(
    "div",
    {
      ...getRootProps({
        className: (0, import_clsx4.default)("rfu-dropzone", {
          "rfu-dropzone--accept": isDragAccept,
          "rfu-dropzone--reject": isDragReject
        }),
        style: { position: "relative" }
      }),
      tabIndex: -1
    },
    /* @__PURE__ */ import_react32.default.createElement("div", { className: "rfu-dropzone__notifier" }, /* @__PURE__ */ import_react32.default.createElement("div", { className: "rfu-dropzone__inner" }, /* @__PURE__ */ import_react32.default.createElement(
      "svg",
      {
        height: "41",
        viewBox: "0 0 41 41",
        width: "41",
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react32.default.createElement(
        "path",
        {
          d: "M40.517 28.002V3.997c0-2.197-1.808-3.992-4.005-3.992H12.507a4.004 4.004 0 0 0-3.992 3.993v24.004a4.004 4.004 0 0 0 3.992 3.993h24.005c2.197 0 4.005-1.795 4.005-3.993zm-22.002-7.997l4.062 5.42 5.937-7.423 7.998 10H12.507l6.008-7.997zM.517 8.003V36c0 2.198 1.795 4.005 3.993 4.005h27.997V36H4.51V8.002H.517z",
          fill: "#000",
          fillRule: "nonzero"
        }
      )
    ), /* @__PURE__ */ import_react32.default.createElement("p", null, t2("Drag your files here to add to your post")))),
    children
  );
};

// src/components/ReactFileUtilities/UploadButton.tsx
var import_clsx5 = __toESM(require("clsx"));
var import_nanoid = require("nanoid");
var import_react34 = __toESM(require("react"));

// src/components/ReactFileUtilities/utils.ts
var import_react33 = require("react");
var useHandleFileChangeWrapper = (resetOnChange = false, handler) => (0, import_react33.useCallback)(
  ({ currentTarget }) => {
    const { files } = currentTarget;
    if (!files) return;
    try {
      handler?.(Array.from(files));
    } catch (error) {
      console.error(error);
    }
    if (resetOnChange) currentTarget.value = "";
  },
  [handler, resetOnChange]
);
async function dataTransferItemsToFiles(items) {
  if (!items || !items.length) {
    return [];
  }
  const fileLikes = getFileLikes(items);
  if (fileLikes.length) {
    return fileLikes;
  }
  const blobPromises = [];
  for (const item2 of items) {
    if (item2.type === "text/html") {
      blobPromises.push(
        new Promise((accept) => {
          item2.getAsString(async (s2) => {
            const imagePromises = extractImageSources(s2).map(
              (src) => getImageSource(fileLikes, src)
            );
            await Promise.all(imagePromises);
            accept();
          });
        })
      );
    }
  }
  await Promise.all(blobPromises);
  return fileLikes;
}
function getFileLikes(items) {
  const fileLikes = [];
  for (const item2 of items) {
    if (item2.kind === "file") {
      const file = item2.getAsFile();
      if (file) {
        fileLikes.push(file);
      }
    }
  }
  return fileLikes;
}
async function getImageSource(fileLikes, src) {
  let res;
  try {
    res = await fetch(src);
  } catch (e2) {
    return;
  }
  const contentType = res.headers.get("Content-type") || "application/octet-stream";
  const buf = await res.arrayBuffer();
  const blob = new Blob([buf], { type: contentType });
  fileLikes.push(blob);
}
var extractImageSources = (s2) => {
  const imageTags = new DOMParser().parseFromString(s2, "text/html").getElementsByTagName("img");
  return Array.from(imageTags, (tag) => tag.src).filter((tag) => tag);
};
var isBlobButNotFile = (obj) => obj instanceof Blob && !(obj instanceof File);
var createFileFromBlobs = ({
  blobsArray,
  fileName,
  mimeType
}) => {
  const concatenatedBlob = new Blob(blobsArray, { type: mimeType });
  return new File([concatenatedBlob], fileName, { type: concatenatedBlob.type });
};
var getExtensionFromMimeType = (mimeType) => {
  const match = mimeType.match(/\/([^/;]+)/);
  return match && match[1];
};
var getRecordedMediaTypeFromMimeType = (mimeType) => {
  const match = mimeType.match(/^(audio|video)\/.*$/);
  return match && match[1];
};
var readFileAsArrayBuffer = (file) => new Promise((resolve, reject) => {
  const fileReader = new FileReader();
  fileReader.onload = () => {
    resolve(fileReader.result);
  };
  fileReader.onerror = () => {
    reject(fileReader.error);
  };
  fileReader.readAsArrayBuffer(file);
});
var generateFileName = (mimeType) => `file_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(mimeType)}`;

// src/components/ReactFileUtilities/UploadButton.tsx
var UploadButton = (0, import_react34.forwardRef)(function UploadButton2({ onFileChange, resetOnChange = true, ...rest }, ref) {
  const handleInputChange = useHandleFileChangeWrapper(resetOnChange, onFileChange);
  return /* @__PURE__ */ import_react34.default.createElement("input", { onChange: handleInputChange, ref, type: "file", ...rest });
});
var FileInput = UploadButton;
var UploadFileInput = (0, import_react34.forwardRef)(function UploadFileInput2({
  className,
  onFileChange: onFileChangeCustom,
  ...props
}, ref) {
  const { t: t2 } = useTranslationContext("UploadFileInput");
  const { acceptedFiles = [], multipleUploads } = useChannelStateContext("UploadFileInput");
  const { isUploadEnabled, maxFilesLeft, uploadNewFiles } = useMessageInputContext("UploadFileInput");
  const id = (0, import_react34.useMemo)(() => (0, import_nanoid.nanoid)(), []);
  const onFileChange = (0, import_react34.useCallback)(
    (files) => {
      uploadNewFiles(files);
      onFileChangeCustom?.(files);
    },
    [onFileChangeCustom, uploadNewFiles]
  );
  return /* @__PURE__ */ import_react34.default.createElement(
    FileInput,
    {
      accept: acceptedFiles?.join(","),
      "aria-label": t2("aria/File upload"),
      "data-testid": "file-input",
      disabled: !isUploadEnabled || maxFilesLeft === 0,
      id,
      multiple: multipleUploads,
      ...props,
      className: (0, import_clsx5.default)("str-chat__file-input", className),
      onFileChange,
      ref
    }
  );
});

// src/components/Attachment/VoiceRecording.tsx
var rootClassName = "str-chat__message-attachment__voice-recording-widget";
var VoiceRecordingPlayer = ({
  attachment,
  playbackRates
}) => {
  const { t: t2 } = useTranslationContext("VoiceRecordingPlayer");
  const {
    asset_url,
    duration = 0,
    mime_type,
    title = t2("Voice message"),
    waveform_data
  } = attachment;
  const {
    audioRef,
    increasePlaybackRate,
    isPlaying,
    playbackRate,
    progress,
    secondsElapsed,
    seek,
    togglePlay
  } = useAudioController({
    durationSeconds: duration ?? 0,
    mimeType: mime_type,
    playbackRates
  });
  if (!asset_url) return null;
  const displayedDuration = secondsElapsed || duration;
  return /* @__PURE__ */ import_react35.default.createElement("div", { className: rootClassName, "data-testid": "voice-recording-widget" }, /* @__PURE__ */ import_react35.default.createElement("audio", { ref: audioRef }, /* @__PURE__ */ import_react35.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: mime_type })), /* @__PURE__ */ import_react35.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }), /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__metadata" }, /* @__PURE__ */ import_react35.default.createElement(
    "div",
    {
      className: "str-chat__message-attachment__voice-recording-widget__title",
      "data-testid": "voice-recording-title",
      title
    },
    title
  ), /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__audio-state" }, /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(displayedDuration) : /* @__PURE__ */ import_react35.default.createElement(
    FileSizeIndicator,
    {
      fileSize: attachment.file_size,
      maximumFractionDigits: 0
    }
  )), /* @__PURE__ */ import_react35.default.createElement(
    WaveProgressBar,
    {
      progress,
      seek,
      waveformData: waveform_data || []
    }
  ))), /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__right-section" }, isPlaying ? /* @__PURE__ */ import_react35.default.createElement(PlaybackRateButton, { disabled: !audioRef.current, onClick: increasePlaybackRate }, playbackRate.toFixed(1), "x") : /* @__PURE__ */ import_react35.default.createElement(FileIcon, { big: true, mimeType: mime_type, size: 40 })));
};
var QuotedVoiceRecording = ({ attachment }) => {
  const { t: t2 } = useTranslationContext();
  const title = attachment.title || t2("Voice message");
  return /* @__PURE__ */ import_react35.default.createElement("div", { className: rootClassName, "data-testid": "quoted-voice-recording-widget" }, /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__metadata" }, title && /* @__PURE__ */ import_react35.default.createElement(
    "div",
    {
      className: "str-chat__message-attachment__voice-recording-widget__title",
      "data-testid": "voice-recording-title",
      title
    },
    title
  ), /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__audio-state" }, /* @__PURE__ */ import_react35.default.createElement("div", { className: "str-chat__message-attachment__voice-recording-widget__timer" }, attachment.duration ? displayDuration(attachment.duration) : /* @__PURE__ */ import_react35.default.createElement(
    FileSizeIndicator,
    {
      fileSize: attachment.file_size,
      maximumFractionDigits: 0
    }
  )))), /* @__PURE__ */ import_react35.default.createElement(FileIcon, { big: true, mimeType: attachment.mime_type, size: 34 }));
};
var VoiceRecording = ({ attachment, isQuoted }) => isQuoted ? /* @__PURE__ */ import_react35.default.createElement(QuotedVoiceRecording, { attachment }) : /* @__PURE__ */ import_react35.default.createElement(VoiceRecordingPlayer, { attachment });

// src/components/Gallery/BaseImage.tsx
var import_react36 = __toESM(require("react"));
var import_clsx6 = __toESM(require("clsx"));
var BaseImage = (0, import_react36.forwardRef)(function BaseImage2({ ...props }, ref) {
  const { className: propsClassName, onError: propsOnError } = props;
  const [error, setError] = (0, import_react36.useState)(false);
  (0, import_react36.useEffect)(
    () => () => {
      setError(false);
    },
    [props.src]
  );
  return /* @__PURE__ */ import_react36.default.createElement(import_react36.default.Fragment, null, /* @__PURE__ */ import_react36.default.createElement(
    "img",
    {
      "data-testid": "str-chat__base-image",
      ...props,
      className: (0, import_clsx6.default)(propsClassName, "str-chat__base-image", {
        "str-chat__base-image--load-failed": error
      }),
      onError: (e2) => {
        setError(true);
        propsOnError?.(e2);
      },
      ref
    }
  ), error && /* @__PURE__ */ import_react36.default.createElement(DownloadButton, { assetUrl: props.src }));
});

// src/components/Gallery/Gallery.tsx
var import_react40 = __toESM(require("react"));
var import_sanitize_url2 = require("@braintree/sanitize-url");
var import_clsx8 = __toESM(require("clsx"));

// src/components/Modal/Modal.tsx
var import_clsx7 = __toESM(require("clsx"));
var import_react38 = __toESM(require("react"));
var import_focus = require("@react-aria/focus");

// src/components/Modal/icons.tsx
var import_react37 = __toESM(require("react"));
var CloseIconRound = () => /* @__PURE__ */ import_react37.default.createElement(
  "svg",
  {
    "data-testid": "close-icon-round",
    fill: "none",
    height: "28",
    viewBox: "0 0 28 28",
    width: "28",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react37.default.createElement("rect", { fill: "#72767E", height: "28", rx: "14", width: "28" }),
  /* @__PURE__ */ import_react37.default.createElement("circle", { cx: "14", cy: "14", fill: "#72767E", r: "12" }),
  /* @__PURE__ */ import_react37.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M28 14C28 21.732 21.732 28 14 28C6.26801 28 0 21.732 0 14C0 6.26801 6.26801 0 14 0C21.732 0 28 6.26801 28 14ZM26 14C26 20.6274 20.6274 26 14 26C7.37258 26 2 20.6274 2 14C2 7.37258 7.37258 2 14 2C20.6274 2 26 7.37258 26 14ZM19.59 7L21 8.41L15.41 14L21 19.59L19.59 21L14 15.41L8.41 21L7 19.59L12.59 14L7 8.41L8.41 7L14 12.59L19.59 7Z",
      fill: "white",
      fillRule: "evenodd"
    }
  )
);

// src/components/Modal/Modal.tsx
var Modal = ({
  children,
  className,
  onClose,
  open
}) => {
  const { t: t2 } = useTranslationContext("Modal");
  const innerRef = (0, import_react38.useRef)(null);
  const closeRef = (0, import_react38.useRef)(null);
  const handleClick = (event) => {
    const target = event.target;
    if (!innerRef.current || !closeRef.current) return;
    if (!innerRef.current.contains(target) || closeRef.current.contains(target))
      onClose?.(event);
  };
  (0, import_react38.useEffect)(() => {
    if (!open) return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape") onClose?.(event);
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [onClose, open]);
  if (!open) return null;
  return /* @__PURE__ */ import_react38.default.createElement(
    "div",
    {
      className: (0, import_clsx7.default)("str-chat__modal str-chat__modal--open", className),
      onClick: handleClick
    },
    /* @__PURE__ */ import_react38.default.createElement(import_focus.FocusScope, { autoFocus: true, contain: true }, /* @__PURE__ */ import_react38.default.createElement(
      "button",
      {
        className: "str-chat__modal__close-button",
        ref: closeRef,
        title: t2("Close")
      },
      /* @__PURE__ */ import_react38.default.createElement(CloseIconRound, null)
    ), /* @__PURE__ */ import_react38.default.createElement(
      "div",
      {
        className: "str-chat__modal__inner str-chat-react__modal__inner",
        ref: innerRef
      },
      children
    ))
  );
};

// src/components/Gallery/ModalGallery.tsx
var import_react39 = __toESM(require("react"));
var import_react_image_gallery = __toESM(require("react-image-gallery"));
var onError = (e2) => {
  e2.target.alt = "";
};
var renderItem = ({ original, originalAlt }) => /* @__PURE__ */ import_react39.default.createElement(
  BaseImage,
  {
    alt: originalAlt,
    className: "image-gallery-image",
    onError,
    src: original
  }
);
var ModalGallery = (props) => {
  const { images, index: index3 } = props;
  const { t: t2 } = useTranslationContext("ModalGallery");
  const formattedArray = (0, import_react39.useMemo)(
    () => images.map((image4) => {
      const imageSrc = image4.image_url || image4.thumb_url || "";
      return {
        original: imageSrc,
        originalAlt: t2("User uploaded content"),
        source: imageSrc
      };
    }),
    [images, t2]
  );
  return (
    // @ts-expect-error ignore the TS error as react-image-gallery was on @types/react@18 while stream-chat-react being upgraded to React 19 (https://github.com/xiaolin/react-image-gallery/issues/809)
    /* @__PURE__ */ import_react39.default.createElement(
      import_react_image_gallery.default,
      {
        items: formattedArray,
        renderItem,
        showIndex: true,
        showPlayButton: false,
        showThumbnails: false,
        startIndex: index3
      }
    )
  );
};

// src/components/Gallery/Gallery.tsx
var UnMemoizedGallery = (props) => {
  const { images, innerRefs } = props;
  const [index3, setIndex] = (0, import_react40.useState)(0);
  const [modalOpen, setModalOpen] = (0, import_react40.useState)(false);
  const { BaseImage: BaseImage3 = BaseImage, ModalGallery: ModalGallery2 = ModalGallery } = useComponentContext("Gallery");
  const { t: t2 } = useTranslationContext("Gallery");
  const imageFallbackTitle = t2("User uploaded content");
  const countImagesDisplayedInPreview = 4;
  const lastImageIndexInPreview = countImagesDisplayedInPreview - 1;
  const toggleModal = (selectedIndex) => {
    if (modalOpen) {
      setModalOpen(false);
    } else {
      setIndex(selectedIndex);
      setModalOpen(true);
    }
  };
  const renderImages = images.slice(0, countImagesDisplayedInPreview).map(
    (image4, i) => i === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? /* @__PURE__ */ import_react40.default.createElement(
      "button",
      {
        className: "str-chat__gallery-placeholder",
        "data-testid": "gallery-image-last",
        key: `gallery-image-${i}`,
        onClick: () => toggleModal(i),
        style: {
          backgroundImage: `url(${images[lastImageIndexInPreview].previewUrl || images[lastImageIndexInPreview].image_url || images[lastImageIndexInPreview].thumb_url})`,
          ...image4.style
        },
        ...innerRefs?.current && {
          ref: (r) => {
            innerRefs.current[i] = r;
          }
        }
      },
      /* @__PURE__ */ import_react40.default.createElement("p", null, t2("{{ imageCount }} more", {
        imageCount: images.length - countImagesDisplayedInPreview
      }))
    ) : /* @__PURE__ */ import_react40.default.createElement(
      "button",
      {
        className: "str-chat__gallery-image",
        "data-testid": "gallery-image",
        key: `gallery-image-${i}`,
        onClick: () => toggleModal(i)
      },
      /* @__PURE__ */ import_react40.default.createElement(
        BaseImage3,
        {
          alt: image4?.fallback || imageFallbackTitle,
          src: (0, import_sanitize_url2.sanitizeUrl)(image4.previewUrl || image4.image_url || image4.thumb_url),
          style: image4.style,
          title: image4?.fallback || imageFallbackTitle,
          ...innerRefs?.current && {
            ref: (r) => {
              innerRefs.current[i] = r;
            }
          }
        }
      )
    )
  );
  const className = (0, import_clsx8.default)("str-chat__gallery", {
    "str-chat__gallery--square": images.length > lastImageIndexInPreview,
    "str-chat__gallery-two-rows": images.length > 2
  });
  return /* @__PURE__ */ import_react40.default.createElement("div", { className }, renderImages, /* @__PURE__ */ import_react40.default.createElement(
    Modal,
    {
      className: "str-chat__gallery-modal",
      onClose: () => setModalOpen((modalOpen2) => !modalOpen2),
      open: modalOpen
    },
    /* @__PURE__ */ import_react40.default.createElement(ModalGallery2, { images, index: index3 })
  ));
};
var Gallery = import_react40.default.memo(UnMemoizedGallery);

// src/components/Gallery/Image.tsx
var import_react41 = __toESM(require("react"));
var import_sanitize_url3 = require("@braintree/sanitize-url");
var ImageComponent = (props) => {
  const {
    dimensions = {},
    fallback,
    image_url,
    innerRef,
    previewUrl,
    style,
    thumb_url
  } = props;
  const [modalIsOpen, setModalIsOpen] = (0, import_react41.useState)(false);
  const { BaseImage: BaseImage3 = BaseImage, ModalGallery: ModalGallery2 = ModalGallery } = useComponentContext("ImageComponent");
  const imageSrc = (0, import_sanitize_url3.sanitizeUrl)(previewUrl || image_url || thumb_url);
  const toggleModal = () => setModalIsOpen((modalIsOpen2) => !modalIsOpen2);
  return /* @__PURE__ */ import_react41.default.createElement(import_react41.default.Fragment, null, /* @__PURE__ */ import_react41.default.createElement(
    BaseImage3,
    {
      alt: fallback,
      className: "str-chat__message-attachment--img",
      "data-testid": "image-test",
      onClick: toggleModal,
      src: imageSrc,
      style,
      tabIndex: 0,
      title: fallback,
      ...dimensions,
      ...innerRef && { ref: innerRef }
    }
  ), /* @__PURE__ */ import_react41.default.createElement(Modal, { className: "str-chat__image-modal", onClose: toggleModal, open: modalIsOpen }, /* @__PURE__ */ import_react41.default.createElement(ModalGallery2, { images: [props], index: 0 })));
};

// src/components/Attachment/Card.tsx
var import_react42 = __toESM(require("react"));
var import_clsx9 = __toESM(require("clsx"));
var import_react_player = __toESM(require("react-player"));
var getHostFromURL = (url) => {
  if (url !== void 0 && url !== null) {
    const [trimmedUrl] = url.replace(/^(?:https?:\/\/)?(?:www\.)?/i, "").split("/");
    return trimmedUrl;
  }
  return null;
};
var UnableToRenderCard = ({ type }) => {
  const { t: t2 } = useTranslationContext("Card");
  return /* @__PURE__ */ import_react42.default.createElement(
    "div",
    {
      className: (0, import_clsx9.default)("str-chat__message-attachment-card", {
        [`str-chat__message-attachment-card--${type}`]: type
      })
    },
    /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card--content" }, /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, t2("this content could not be displayed")))
  );
};
var SourceLink = ({
  author_name,
  url
}) => /* @__PURE__ */ import_react42.default.createElement(
  "div",
  {
    className: "str-chat__message-attachment-card--source-link",
    "data-testid": "card-source-link"
  },
  /* @__PURE__ */ import_react42.default.createElement(
    SafeAnchor,
    {
      className: "str-chat__message-attachment-card--url",
      href: url,
      rel: "noopener noreferrer",
      target: "_blank"
    },
    author_name || getHostFromURL(url)
  )
);
var CardHeader = (props) => {
  const { asset_url, dimensions, image: image4, image_url, thumb_url, title, type } = props;
  let visual = null;
  if (asset_url && type === "video") {
    visual = /* @__PURE__ */ import_react42.default.createElement(
      import_react_player.default,
      {
        className: "react-player",
        controls: true,
        height: "100%",
        url: asset_url,
        width: "100%"
      }
    );
  } else if (image4) {
    visual = /* @__PURE__ */ import_react42.default.createElement(
      ImageComponent,
      {
        dimensions,
        fallback: title || image4,
        image_url,
        thumb_url
      }
    );
  }
  return visual ? /* @__PURE__ */ import_react42.default.createElement(
    "div",
    {
      className: "str-chat__message-attachment-card--header str-chat__message-attachment-card-react--header",
      "data-testid": "card-header"
    },
    visual
  ) : null;
};
var CardContent = (props) => {
  const { author_name, og_scrape_url, text: text8, title, title_link, type } = props;
  const url = title_link || og_scrape_url;
  return /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card--content" }, type === "audio" ? /* @__PURE__ */ import_react42.default.createElement(CardAudio, { og: props }) : /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card--flex" }, url && /* @__PURE__ */ import_react42.default.createElement(SourceLink, { author_name, url }), title && /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card--title" }, title), text8 && /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card--text" }, text8)));
};
var CardAudio = ({
  og: { asset_url, author_name, mime_type, og_scrape_url, text: text8, title, title_link }
}) => {
  const { audioRef, isPlaying, progress, seek, togglePlay } = useAudioController({
    mimeType: mime_type
  });
  const url = title_link || og_scrape_url;
  const dataTestId = "card-audio-widget";
  const rootClassName2 = "str-chat__message-attachment-card-audio-widget";
  return /* @__PURE__ */ import_react42.default.createElement("div", { className: rootClassName2, "data-testid": dataTestId }, asset_url && /* @__PURE__ */ import_react42.default.createElement(import_react42.default.Fragment, null, /* @__PURE__ */ import_react42.default.createElement("audio", { ref: audioRef }, /* @__PURE__ */ import_react42.default.createElement("source", { "data-testid": "audio-source", src: asset_url, type: "audio/mp3" })), /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-card-audio-widget--first-row" }, /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--play-controls" }, /* @__PURE__ */ import_react42.default.createElement(PlayButton, { isPlaying, onClick: togglePlay })), /* @__PURE__ */ import_react42.default.createElement(ProgressBar, { onClick: seek, progress }))), /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--second-row" }, url && /* @__PURE__ */ import_react42.default.createElement(SourceLink, { author_name, url }), title && /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--title" }, title), text8 && /* @__PURE__ */ import_react42.default.createElement("div", { className: "str-chat__message-attachment-audio-widget--description" }, text8)));
};
var UnMemoizedCard = (props) => {
  const { asset_url, giphy, image_url, thumb_url, title, title_link, type } = props;
  const { giphyVersion: giphyVersionName } = useChannelStateContext("CardHeader");
  let image4 = thumb_url || image_url;
  const dimensions = {};
  if (type === "giphy" && typeof giphy !== "undefined") {
    const giphyVersion = giphy[giphyVersionName];
    image4 = giphyVersion.url;
    dimensions.height = giphyVersion.height;
    dimensions.width = giphyVersion.width;
  }
  if (!title && !title_link && !asset_url && !image4) {
    return /* @__PURE__ */ import_react42.default.createElement(UnableToRenderCard, null);
  }
  return /* @__PURE__ */ import_react42.default.createElement(
    "div",
    {
      className: `str-chat__message-attachment-card str-chat__message-attachment-card--${type}`
    },
    /* @__PURE__ */ import_react42.default.createElement(CardHeader, { ...props, dimensions, image: image4 }),
    /* @__PURE__ */ import_react42.default.createElement(CardContent, { ...props })
  );
};
var Card = import_react42.default.memo(UnMemoizedCard);

// src/components/Attachment/FileAttachment.tsx
var import_react43 = __toESM(require("react"));
var UnMemoizedFileAttachment = ({
  attachment
}) => /* @__PURE__ */ import_react43.default.createElement("div", { className: "str-chat__message-attachment-file--item", "data-testid": "attachment-file" }, /* @__PURE__ */ import_react43.default.createElement(FileIcon, { className: "str-chat__file-icon", mimeType: attachment.mime_type }), /* @__PURE__ */ import_react43.default.createElement("div", { className: "str-chat__message-attachment-file--item-text" }, /* @__PURE__ */ import_react43.default.createElement("div", { className: "str-chat__message-attachment-file--item-first-row" }, /* @__PURE__ */ import_react43.default.createElement(
  "div",
  {
    className: "str-chat__message-attachment-file--item-name",
    "data-testid": "file-title"
  },
  attachment.title
), /* @__PURE__ */ import_react43.default.createElement(DownloadButton, { assetUrl: attachment.asset_url })), /* @__PURE__ */ import_react43.default.createElement(FileSizeIndicator, { fileSize: attachment.file_size })));
var FileAttachment = import_react43.default.memo(
  UnMemoizedFileAttachment
);

// src/components/Attachment/UnsupportedAttachment.tsx
var import_react44 = __toESM(require("react"));
var UnsupportedAttachment = ({
  attachment
}) => {
  const { t: t2 } = useTranslationContext("UnsupportedAttachment");
  return /* @__PURE__ */ import_react44.default.createElement(
    "div",
    {
      className: "str-chat__message-attachment-unsupported",
      "data-testid": "attachment-unsupported"
    },
    /* @__PURE__ */ import_react44.default.createElement(FileIcon, { className: "str-chat__file-icon" }),
    /* @__PURE__ */ import_react44.default.createElement("div", { className: "str-chat__message-attachment-unsupported__metadata" }, /* @__PURE__ */ import_react44.default.createElement(
      "div",
      {
        className: "str-chat__message-attachment-unsupported__title",
        "data-testid": "unsupported-attachment-title"
      },
      attachment.title || t2("Unsupported attachment")
    ))
  );
};

// src/components/Attachment/AttachmentContainer.tsx
var AttachmentWithinContainer = ({
  attachment,
  children,
  componentType
}) => {
  const isGAT = isGalleryAttachmentType(attachment);
  let extra = "";
  if (!isGAT) {
    extra = componentType === "card" && !attachment?.image_url && !attachment?.thumb_url ? "no-image" : attachment?.actions?.length ? "actions" : "";
  }
  const classNames = (0, import_clsx10.default)(
    "str-chat__message-attachment str-chat__message-attachment-dynamic-size",
    {
      [`str-chat__message-attachment--${componentType}`]: componentType,
      [`str-chat__message-attachment--${attachment?.type}`]: attachment?.type,
      [`str-chat__message-attachment--${componentType}--${extra}`]: componentType && extra,
      "str-chat__message-attachment--svg-image": isSvgAttachment(attachment),
      "str-chat__message-attachment-with-actions": extra === "actions"
    }
  );
  return /* @__PURE__ */ import_react45.default.createElement("div", { className: classNames }, children);
};
var AttachmentActionsContainer = ({
  actionHandler,
  attachment,
  AttachmentActions: AttachmentActions2 = AttachmentActions
}) => {
  if (!attachment.actions?.length) return null;
  return /* @__PURE__ */ import_react45.default.createElement(
    AttachmentActions2,
    {
      ...attachment,
      actionHandler,
      actions: attachment.actions,
      id: attachment.id || "",
      text: attachment.text || ""
    }
  );
};
function getCssDimensionsVariables(url) {
  const cssVars = {
    "--original-height": 1e6,
    "--original-width": 1e6
  };
  if (linkify.test(url, "url")) {
    const urlParams = new URL(url).searchParams;
    const oh = Number(urlParams.get("oh"));
    const ow = Number(urlParams.get("ow"));
    const originalHeight = oh > 1 ? oh : 1e6;
    const originalWidth = ow > 1 ? ow : 1e6;
    cssVars["--original-width"] = originalWidth;
    cssVars["--original-height"] = originalHeight;
  }
  return cssVars;
}
var GalleryContainer = ({
  attachment,
  Gallery: Gallery2 = Gallery
}) => {
  const imageElements = (0, import_react45.useRef)([]);
  const { imageAttachmentSizeHandler } = useChannelStateContext();
  const [attachmentConfigurations, setAttachmentConfigurations] = (0, import_react45.useState)([]);
  (0, import_react45.useLayoutEffect)(() => {
    if (imageElements.current && imageElements.current.every((element4) => !!element4) && imageAttachmentSizeHandler) {
      const newConfigurations = [];
      imageElements.current.forEach((element4, i) => {
        const config = imageAttachmentSizeHandler(attachment.images[i], element4);
        newConfigurations.push(config);
      });
      setAttachmentConfigurations(newConfigurations);
    }
  }, [imageElements, imageAttachmentSizeHandler, attachment]);
  const images = attachment.images.map((image4, i) => ({
    ...image4,
    previewUrl: attachmentConfigurations[i]?.url || "about:blank",
    style: getCssDimensionsVariables(
      attachment.images[i]?.image_url || attachment.images[i]?.thumb_url || ""
    )
  }));
  return /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType: "gallery" }, /* @__PURE__ */ import_react45.default.createElement(Gallery2, { images: images || [], innerRefs: imageElements, key: "gallery" }));
};
var ImageContainer = (props) => {
  const { attachment, Image: Image4 = ImageComponent } = props;
  const componentType = "image";
  const imageElement = (0, import_react45.useRef)(null);
  const { imageAttachmentSizeHandler } = useChannelStateContext();
  const [attachmentConfiguration, setAttachmentConfiguration] = (0, import_react45.useState)(void 0);
  (0, import_react45.useLayoutEffect)(() => {
    if (imageElement.current && imageAttachmentSizeHandler) {
      const config = imageAttachmentSizeHandler(attachment, imageElement.current);
      setAttachmentConfiguration(config);
    }
  }, [imageElement, imageAttachmentSizeHandler, attachment]);
  const imageConfig = {
    ...attachment,
    previewUrl: attachmentConfiguration?.url || "about:blank",
    style: getCssDimensionsVariables(attachment.image_url || attachment.thumb_url || "")
  };
  if (attachment.actions && attachment.actions.length) {
    return /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType }, /* @__PURE__ */ import_react45.default.createElement("div", { className: "str-chat__attachment" }, /* @__PURE__ */ import_react45.default.createElement(Image4, { ...imageConfig, innerRef: imageElement }), /* @__PURE__ */ import_react45.default.createElement(AttachmentActionsContainer, { ...props })));
  }
  return /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType }, /* @__PURE__ */ import_react45.default.createElement(Image4, { ...imageConfig, innerRef: imageElement }));
};
var CardContainer = (props) => {
  const { attachment, Card: Card4 = Card } = props;
  const componentType = "card";
  if (attachment.actions && attachment.actions.length) {
    return /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType }, /* @__PURE__ */ import_react45.default.createElement("div", { className: "str-chat__attachment" }, /* @__PURE__ */ import_react45.default.createElement(Card4, { ...attachment }), /* @__PURE__ */ import_react45.default.createElement(AttachmentActionsContainer, { ...props })));
  }
  return /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType }, /* @__PURE__ */ import_react45.default.createElement(Card4, { ...attachment }));
};
var FileContainer = ({
  attachment,
  File: File2 = FileAttachment
}) => {
  if (!attachment.asset_url) return null;
  return /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType: "file" }, /* @__PURE__ */ import_react45.default.createElement(File2, { attachment }));
};
var AudioContainer = ({
  attachment,
  Audio: Audio2 = Audio
}) => /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType: "audio" }, /* @__PURE__ */ import_react45.default.createElement("div", { className: "str-chat__attachment" }, /* @__PURE__ */ import_react45.default.createElement(Audio2, { og: attachment })));
var VoiceRecordingContainer = ({
  attachment,
  isQuoted,
  VoiceRecording: VoiceRecording2 = VoiceRecording
}) => /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType: "voiceRecording" }, /* @__PURE__ */ import_react45.default.createElement("div", { className: "str-chat__attachment" }, /* @__PURE__ */ import_react45.default.createElement(VoiceRecording2, { attachment, isQuoted })));
var MediaContainer = (props) => {
  const { attachment, Media = import_react_player2.default } = props;
  const componentType = "media";
  const { shouldGenerateVideoThumbnail, videoAttachmentSizeHandler } = useChannelStateContext();
  const videoElement = (0, import_react45.useRef)(null);
  const [attachmentConfiguration, setAttachmentConfiguration] = (0, import_react45.useState)();
  (0, import_react45.useLayoutEffect)(() => {
    if (videoElement.current && videoAttachmentSizeHandler) {
      const config = videoAttachmentSizeHandler(
        attachment,
        videoElement.current,
        shouldGenerateVideoThumbnail
      );
      setAttachmentConfiguration(config);
    }
  }, [videoElement, videoAttachmentSizeHandler, attachment]);
  const content3 = /* @__PURE__ */ import_react45.default.createElement(
    "div",
    {
      className: "str-chat__player-wrapper",
      "data-testid": "video-wrapper",
      ref: videoElement,
      style: getCssDimensionsVariables(attachment.thumb_url || "")
    },
    /* @__PURE__ */ import_react45.default.createElement(
      Media,
      {
        className: "react-player",
        config: { file: { attributes: { poster: attachmentConfiguration?.thumbUrl } } },
        controls: true,
        height: "100%",
        url: attachmentConfiguration?.url,
        width: "100%"
      }
    )
  );
  return attachment.actions?.length ? /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType }, /* @__PURE__ */ import_react45.default.createElement("div", { className: "str-chat__attachment" }, content3, /* @__PURE__ */ import_react45.default.createElement(AttachmentActionsContainer, { ...props }))) : /* @__PURE__ */ import_react45.default.createElement(AttachmentWithinContainer, { attachment, componentType }, content3);
};
var UnsupportedAttachmentContainer = ({
  attachment,
  UnsupportedAttachment: UnsupportedAttachment2 = UnsupportedAttachment
}) => /* @__PURE__ */ import_react45.default.createElement(import_react45.default.Fragment, null, /* @__PURE__ */ import_react45.default.createElement(UnsupportedAttachment2, { attachment }));

// src/components/Attachment/Attachment.tsx
var CONTAINER_MAP = {
  audio: AudioContainer,
  card: CardContainer,
  file: FileContainer,
  media: MediaContainer,
  unsupported: UnsupportedAttachmentContainer,
  voiceRecording: VoiceRecordingContainer
};
var ATTACHMENT_GROUPS_ORDER = [
  "card",
  "gallery",
  "image",
  "media",
  "audio",
  "voiceRecording",
  "file",
  "unsupported"
];
var Attachment = (props) => {
  const { attachments } = props;
  const groupedAttachments = (0, import_react46.useMemo)(
    () => renderGroupedAttachments(props),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [attachments]
  );
  return /* @__PURE__ */ import_react46.default.createElement("div", { className: "str-chat__attachment-list" }, ATTACHMENT_GROUPS_ORDER.reduce(
    (acc, groupName) => [...acc, ...groupedAttachments[groupName]],
    []
  ));
};
var renderGroupedAttachments = ({
  attachments,
  ...rest
}) => {
  const uploadedImages = attachments.filter(
    (attachment) => isUploadedImage(attachment)
  );
  const containers = attachments.filter((attachment) => !isUploadedImage(attachment)).reduce(
    (typeMap, attachment) => {
      const attachmentType = getAttachmentType(attachment);
      const Container = CONTAINER_MAP[attachmentType];
      typeMap[attachmentType].push(
        /* @__PURE__ */ import_react46.default.createElement(
          Container,
          {
            key: `${attachmentType}-${typeMap[attachmentType].length}`,
            ...rest,
            attachment
          }
        )
      );
      return typeMap;
    },
    {
      audio: [],
      card: [],
      file: [],
      media: [],
      unsupported: [],
      // not used in reduce
      // eslint-disable-next-line sort-keys
      image: [],
      // eslint-disable-next-line sort-keys
      gallery: [],
      voiceRecording: []
    }
  );
  if (uploadedImages.length > 1) {
    containers["gallery"] = [
      /* @__PURE__ */ import_react46.default.createElement(
        GalleryContainer,
        {
          key: "gallery-container",
          ...rest,
          attachment: {
            images: uploadedImages,
            type: "gallery"
          }
        }
      )
    ];
  } else if (uploadedImages.length === 1) {
    containers["image"] = [
      /* @__PURE__ */ import_react46.default.createElement(ImageContainer, { key: "image-container", ...rest, attachment: uploadedImages[0] })
    ];
  }
  return containers;
};
var getAttachmentType = (attachment) => {
  if (isScrapedContent(attachment)) {
    return "card";
  } else if (isMediaAttachment(attachment)) {
    return "media";
  } else if (isAudioAttachment(attachment)) {
    return "audio";
  } else if (isVoiceRecordingAttachment(attachment)) {
    return "voiceRecording";
  } else if (isFileAttachment(attachment)) {
    return "file";
  }
  return "unsupported";
};

// src/components/AutoCompleteTextarea/Item.jsx
var import_react47 = __toESM(require("react"));
var import_clsx11 = __toESM(require("clsx"));
var Item = import_react47.default.forwardRef(function Item2(props, innerRef) {
  const {
    className,
    component: Component2,
    item: item2,
    onClickHandler,
    onSelectHandler,
    selected,
    style
  } = props;
  const handleSelect = (0, import_react47.useCallback)(() => onSelectHandler(item2), [item2, onSelectHandler]);
  const handleClick = (0, import_react47.useCallback)(
    (event) => onClickHandler(event, item2),
    [item2, onClickHandler]
  );
  return /* @__PURE__ */ import_react47.default.createElement(
    "li",
    {
      className: (0, import_clsx11.default)(className, { "str-chat__suggestion-item--selected": selected }),
      style
    },
    /* @__PURE__ */ import_react47.default.createElement(
      "a",
      {
        href: "",
        onClick: handleClick,
        onFocus: handleSelect,
        onMouseEnter: handleSelect,
        ref: innerRef
      },
      /* @__PURE__ */ import_react47.default.createElement(Component2, { entity: item2, selected })
    )
  );
});

// src/components/AutoCompleteTextarea/List.jsx
var import_react53 = __toESM(require("react"));
var import_clsx13 = __toESM(require("clsx"));

// src/components/Message/renderText/regex.ts
function escapeRegExp(text8) {
  return text8.replace(/[-[\]{}()*+?.,/\\^$|#]/g, "\\$&");
}
var detectHttp = /(http(s?):\/\/)?(www\.)?/;
var messageCodeBlocks = (message) => {
  const codeRegex = /```[a-z]*\n[\s\S]*?\n```|`[a-z]*[\s\S]*?`/gm;
  const matches = message.match(codeRegex);
  return matches || [];
};
var matchMarkdownLinks = (message) => {
  const regexMdLinks = /\[([^[]+)\](\(.*\))/gm;
  const matches = message.match(regexMdLinks);
  const singleMatch = /\[([^[]+)\]\((.*)\)/;
  const links = matches ? matches.map((match) => {
    const i = singleMatch.exec(match);
    return i && [i[1], i[2]];
  }) : [];
  return links.flat();
};

// node_modules/unist-util-is/lib/index.js
var convert = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {Check}
   */
  function(test3) {
    if (test3 === null || test3 === void 0) {
      return ok;
    }
    if (typeof test3 === "function") {
      return castFactory(test3);
    }
    if (typeof test3 === "object") {
      return Array.isArray(test3) ? anyFactory(test3) : propsFactory(test3);
    }
    if (typeof test3 === "string") {
      return typeFactory(test3);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory(tests) {
  const checks2 = [];
  let index3 = -1;
  while (++index3 < tests.length) {
    checks2[index3] = convert(tests[index3]);
  }
  return castFactory(any);
  function any(...parameters) {
    let index4 = -1;
    while (++index4 < checks2.length) {
      if (checks2[index4].apply(this, parameters)) return true;
    }
    return false;
  }
}
function propsFactory(check) {
  const checkAsRecord = (
    /** @type {Record<string, unknown>} */
    check
  );
  return castFactory(all2);
  function all2(node2) {
    const nodeAsRecord = (
      /** @type {Record<string, unknown>} */
      /** @type {unknown} */
      node2
    );
    let key;
    for (key in check) {
      if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory(type);
  function type(node2) {
    return node2 && node2.type === check;
  }
}
function castFactory(testFunction) {
  return check;
  function check(value, index3, parent) {
    return Boolean(
      looksLikeANode(value) && testFunction.call(
        this,
        value,
        typeof index3 === "number" ? index3 : void 0,
        parent || void 0
      )
    );
  }
}
function ok() {
  return true;
}
function looksLikeANode(value) {
  return value !== null && typeof value === "object" && "type" in value;
}

// node_modules/unist-util-visit-parents/lib/color.js
function color(d) {
  return d;
}

// node_modules/unist-util-visit-parents/lib/index.js
var empty = [];
var CONTINUE = true;
var EXIT = false;
var SKIP = "skip";
function visitParents(tree, test3, visitor3, reverse) {
  let check;
  if (typeof test3 === "function" && typeof visitor3 !== "function") {
    reverse = visitor3;
    visitor3 = test3;
  } else {
    check = test3;
  }
  const is2 = convert(check);
  const step = reverse ? -1 : 1;
  factory(tree, void 0, [])();
  function factory(node2, index3, parents) {
    const value = (
      /** @type {Record<string, unknown>} */
      node2 && typeof node2 === "object" ? node2 : {}
    );
    if (typeof value.type === "string") {
      const name2 = (
        // `hast`
        typeof value.tagName === "string" ? value.tagName : (
          // `xast`
          typeof value.name === "string" ? value.name : void 0
        )
      );
      Object.defineProperty(visit2, "name", {
        value: "node (" + color(node2.type + (name2 ? "<" + name2 + ">" : "")) + ")"
      });
    }
    return visit2;
    function visit2() {
      let result = empty;
      let subresult;
      let offset;
      let grandparents;
      if (!test3 || is2(node2, index3, parents[parents.length - 1] || void 0)) {
        result = toResult(visitor3(node2, parents));
        if (result[0] === EXIT) {
          return result;
        }
      }
      if ("children" in node2 && node2.children) {
        const nodeAsParent = (
          /** @type {UnistParent} */
          node2
        );
        if (nodeAsParent.children && result[0] !== SKIP) {
          offset = (reverse ? nodeAsParent.children.length : -1) + step;
          grandparents = parents.concat(nodeAsParent);
          while (offset > -1 && offset < nodeAsParent.children.length) {
            const child = nodeAsParent.children[offset];
            subresult = factory(child, offset, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
          }
        }
      }
      return result;
    }
  }
}
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return value === null || value === void 0 ? empty : [value];
}

// node_modules/hast-util-is-element/lib/index.js
var convertElement = (
  // Note: overloads in JSDoc can’t yet use different `@template`s.
  /**
   * @type {(
   *   (<Condition extends TestFunction>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & Predicate<Condition, Element>) &
   *   (<Condition extends string>(test: Condition) => (element: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element & {tagName: Condition}) &
   *   ((test?: null | undefined) => (element?: unknown, index?: number | null | undefined, parent?: Parents | null | undefined, context?: unknown) => element is Element) &
   *   ((test?: Test) => Check)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {Check}
   */
  function(test3) {
    if (test3 === null || test3 === void 0) {
      return element;
    }
    if (typeof test3 === "string") {
      return tagNameFactory(test3);
    }
    if (typeof test3 === "object") {
      return anyFactory2(test3);
    }
    if (typeof test3 === "function") {
      return castFactory2(test3);
    }
    throw new Error("Expected function, string, or array as `test`");
  }
);
function anyFactory2(tests) {
  const checks2 = [];
  let index3 = -1;
  while (++index3 < tests.length) {
    checks2[index3] = convertElement(tests[index3]);
  }
  return castFactory2(any);
  function any(...parameters) {
    let index4 = -1;
    while (++index4 < checks2.length) {
      if (checks2[index4].apply(this, parameters)) return true;
    }
    return false;
  }
}
function tagNameFactory(check) {
  return castFactory2(tagName);
  function tagName(element4) {
    return element4.tagName === check;
  }
}
function castFactory2(testFunction) {
  return check;
  function check(value, index3, parent) {
    return Boolean(
      looksLikeAnElement(value) && testFunction.call(
        this,
        value,
        typeof index3 === "number" ? index3 : void 0,
        parent || void 0
      )
    );
  }
}
function element(element4) {
  return Boolean(
    element4 && typeof element4 === "object" && "type" in element4 && element4.type === "element" && "tagName" in element4 && typeof element4.tagName === "string"
  );
}
function looksLikeAnElement(value) {
  return value !== null && typeof value === "object" && "type" in value && "tagName" in value;
}

// node_modules/hast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/hast-util-find-and-replace/lib/index.js
var emptyOptions = {};
var defaultIgnore = ["math", "script", "style", "svg", "title"];
function findAndReplace(tree, list4, options) {
  const settings = options || emptyOptions;
  const ignored = convertElement(settings.ignore || defaultIgnore);
  const pairs = toPairs(list4);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node2, parents) {
    let index3 = -1;
    let grandparent;
    while (++index3 < parents.length) {
      const parent = parents[index3];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node2, parents);
    }
  }
  function handler(node2, parents) {
    const parent = parents[parents.length - 1];
    const find5 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start2 = 0;
    const siblings = parent.children;
    const index3 = siblings.indexOf(node2);
    let change = false;
    let nodes = [];
    find5.lastIndex = 0;
    let match = find5.exec(node2.value);
    while (match) {
      const position4 = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node2]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find5.lastIndex = position4 + 1;
      } else {
        if (start2 !== position4) {
          nodes.push({ type: "text", value: node2.value.slice(start2, position4) });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start2 = position4 + match[0].length;
        change = true;
      }
      if (!find5.global) {
        break;
      }
      match = find5.exec(node2.value);
    }
    if (change) {
      if (start2 < node2.value.length) {
        nodes.push({ type: "text", value: node2.value.slice(start2) });
      }
      parent.children.splice(index3, 1, ...nodes);
    } else {
      nodes = [node2];
    }
    return index3 + nodes.length;
  }
}
function toPairs(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list4 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index3 = -1;
  while (++index3 < list4.length) {
    const tuple = list4[index3];
    result.push([toExpression(tuple[0]), toFunction(tuple[1])]);
  }
  return result;
}
function toExpression(find5) {
  return typeof find5 === "string" ? new RegExp(escapeStringRegexp(find5), "g") : find5;
}
function toFunction(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/unist-builder/lib/index.js
function u(type, props, value) {
  const node2 = { type: String(type) };
  if ((value === void 0 || value === null) && (typeof props === "string" || Array.isArray(props))) {
    value = props;
  } else {
    Object.assign(node2, props);
  }
  if (Array.isArray(value)) {
    node2.children = value;
  } else if (value !== void 0 && value !== null) {
    node2.value = String(value);
  }
  return node2;
}

// src/components/Message/renderText/rehypePlugins/emojiMarkdownPlugin.ts
var import_emoji_regex = __toESM(require("emoji-regex"));
var emojiMarkdownPlugin = () => {
  const replace2 = (match) => u("element", { properties: {}, tagName: "emoji" }, [u("text", match)]);
  const transform3 = (node2) => findAndReplace(node2, [(0, import_emoji_regex.default)(), replace2]);
  return transform3;
};

// node_modules/unist-util-visit/lib/index.js
function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
  let reverse;
  let test3;
  let visitor3;
  if (typeof testOrVisitor === "function" && typeof visitorOrReverse !== "function") {
    test3 = void 0;
    visitor3 = testOrVisitor;
    reverse = visitorOrReverse;
  } else {
    test3 = testOrVisitor;
    visitor3 = visitorOrReverse;
    reverse = maybeReverse;
  }
  visitParents(tree, test3, overload, reverse);
  function overload(node2, parents) {
    const parent = parents[parents.length - 1];
    const index3 = parent ? parent.children.indexOf(node2) : void 0;
    return visitor3(node2, index3, parent);
  }
}

// src/components/Message/renderText/rehypePlugins/mentionsMarkdownPlugin.ts
var mentionsMarkdownPlugin = (mentioned_users) => () => {
  const mentioned_usernames = mentioned_users.map((user) => user.name || user.id).filter(Boolean).map(escapeRegExp);
  const mentionedUsersRegex = new RegExp(
    mentioned_usernames.map((username) => `@${username}`).join("|"),
    "g"
  );
  const replace2 = (match) => {
    const usernameOrId = match.replace("@", "");
    const user = mentioned_users.find(
      ({ id, name: name2 }) => name2 === usernameOrId || id === usernameOrId
    );
    return u("element", { mentionedUser: user, properties: {}, tagName: "mention" }, [
      u("text", match)
    ]);
  };
  const transform3 = (tree) => {
    if (!mentioned_usernames.length) return;
    visit(tree, (node2, index3, parent) => {
      if (typeof index3 === "undefined") return;
      if (!parent) return;
      const nextChild = parent.children.at(index3 + 1);
      const nextChildHref = nextChild?.properties?.href;
      if (node2.type === "text" && // text value has to have @ sign at the end of the string
      // and no other characters except whitespace can precede it
      // valid cases:   "text @", "@", " @"
      // invalid cases: "text@", "@text",
      /.?\s?@$|^@$/.test(node2.value) && nextChildHref?.startsWith("mailto:")) {
        const newTextValue = node2.value.replace(/@$/, "");
        const username = nextChildHref.replace("mailto:", "");
        parent.children[index3] = u("text", newTextValue);
        parent.children[index3 + 1] = u("text", `@${username}`);
      }
    });
    findAndReplace(tree, [mentionedUsersRegex, replace2]);
  };
  return transform3;
};

// src/components/Message/renderText/remarkPlugins/htmlToTextPlugin.ts
var visitor = (node2) => {
  if (node2.type !== "html") return;
  node2.type = "text";
};
var transform = (tree) => {
  visit(tree, visitor);
};
var htmlToTextPlugin = () => transform;

// src/components/Message/renderText/remarkPlugins/keepLineBreaksPlugin.ts
var visitor2 = (node2, index3, parent) => {
  if (!(index3 && parent && node2.position)) return;
  const prevSibling = parent.children.at(index3 - 1);
  if (!prevSibling?.position) return;
  if (node2.position.start.line === prevSibling.position.start.line) return;
  const ownStartLine = node2.position.start.line;
  const prevEndLine = prevSibling.position.end.line;
  const countTruncatedLineBreaks = ownStartLine - prevEndLine - 1;
  if (countTruncatedLineBreaks < 1) return;
  const lineBreaks = Array.from(
    { length: countTruncatedLineBreaks },
    () => u("break", { tagName: "br" })
  );
  parent.children = [
    ...parent.children.slice(0, index3),
    ...lineBreaks,
    ...parent.children.slice(index3)
  ];
  return;
};
var transform2 = (tree) => {
  visit(tree, visitor2);
};
var keepLineBreaksPlugin = () => transform2;

// src/components/Message/renderText/renderText.tsx
var import_react52 = __toESM(require("react"));

// node_modules/devlop/lib/default.js
function ok2() {
}
function unreachable() {
}

// node_modules/comma-separated-tokens/index.js
function stringify(values, options) {
  const settings = options || {};
  const input2 = values[values.length - 1] === "" ? [...values, ""] : values;
  return input2.join(
    (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
  ).trim();
}

// node_modules/estree-util-is-identifier-name/lib/index.js
var nameRe = /^[$_\p{ID_Start}][$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
var nameReJsx = /^[$_\p{ID_Start}][-$_\u{200C}\u{200D}\p{ID_Continue}]*$/u;
var emptyOptions2 = {};
function name(name2, options) {
  const settings = options || emptyOptions2;
  const re2 = settings.jsx ? nameReJsx : nameRe;
  return re2.test(name2);
}

// node_modules/hast-util-whitespace/lib/index.js
var re = /[ \t\n\f\r]/g;
function whitespace(thing) {
  return typeof thing === "object" ? thing.type === "text" ? empty2(thing.value) : false : empty2(thing);
}
function empty2(value) {
  return value.replace(re, "") === "";
}

// node_modules/property-information/lib/util/schema.js
var Schema = class {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space2) {
    this.property = property;
    this.normal = normal;
    if (space2) {
      this.space = space2;
    }
  }
};
Schema.prototype.property = {};
Schema.prototype.normal = {};
Schema.prototype.space = null;

// node_modules/property-information/lib/util/merge.js
function merge(definitions, space2) {
  const property = {};
  const normal = {};
  let index3 = -1;
  while (++index3 < definitions.length) {
    Object.assign(property, definitions[index3].property);
    Object.assign(normal, definitions[index3].normal);
  }
  return new Schema(property, normal, space2);
}

// node_modules/property-information/lib/normalize.js
function normalize(value) {
  return value.toLowerCase();
}

// node_modules/property-information/lib/util/info.js
var Info = class {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    this.property = property;
    this.attribute = attribute;
  }
};
Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

// node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated
});
var powers = 0;
var boolean = increment();
var booleanish = increment();
var overloadedBoolean = increment();
var number = increment();
var spaceSeparated = increment();
var commaSeparated = increment();
var commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

// node_modules/property-information/lib/util/defined-info.js
var checks = Object.keys(types_exports);
var DefinedInfo = class extends Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space2) {
    let index3 = -1;
    super(property, attribute);
    mark(this, "space", space2);
    if (typeof mask === "number") {
      while (++index3 < checks.length) {
        const check = checks[index3];
        mark(this, checks[index3], (mask & types_exports[check]) === types_exports[check]);
      }
    }
  }
};
DefinedInfo.prototype.defined = true;
function mark(values, key, value) {
  if (value) {
    values[key] = value;
  }
}

// node_modules/property-information/lib/util/create.js
var own = {}.hasOwnProperty;
function create(definition3) {
  const property = {};
  const normal = {};
  let prop;
  for (prop in definition3.properties) {
    if (own.call(definition3.properties, prop)) {
      const value = definition3.properties[prop];
      const info = new DefinedInfo(
        prop,
        definition3.transform(definition3.attributes || {}, prop),
        value,
        definition3.space
      );
      if (definition3.mustUseProperty && definition3.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }
      property[prop] = info;
      normal[normalize(prop)] = prop;
      normal[normalize(info.attribute)] = prop;
    }
  }
  return new Schema(property, normal, definition3.space);
}

// node_modules/property-information/lib/xlink.js
var xlink = create({
  space: "xlink",
  transform(_, prop) {
    return "xlink:" + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

// node_modules/property-information/lib/xml.js
var xml = create({
  space: "xml",
  transform(_, prop) {
    return "xml:" + prop.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

// node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}

// node_modules/property-information/lib/xmlns.js
var xmlns = create({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: caseInsensitiveTransform,
  properties: { xmlns: null, xmlnsXLink: null }
});

// node_modules/property-information/lib/aria.js
var aria = create({
  transform(_, prop) {
    return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});

// node_modules/property-information/lib/html.js
var html = create({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    blocking: spaceSeparated,
    capture: boolean,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    fetchPriority: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inert: boolean,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeToggle: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    popover: null,
    popoverTarget: null,
    popoverTargetAction: null,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shadowRootDelegatesFocus: boolean,
    shadowRootMode: null,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: boolean,
    // `<frame>`
    noHref: boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});

// node_modules/property-information/lib/svg.js
var svg = create({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    transformOrigin: "transform-origin",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    transformOrigin: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

// node_modules/property-information/lib/find.js
var valid = /^data[-\w.:]+$/i;
var dash = /-[a-z]/g;
var cap = /[A-Z]/g;
function find(schema, value) {
  const normal = normalize(value);
  let prop = value;
  let Type = Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      const rest = value.slice(5).replace(dash, camelcase);
      prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== "-") {
          dashes = "-" + dashes;
        }
        value = "data" + dashes;
      }
    }
    Type = DefinedInfo;
  }
  return new Type(prop, value);
}
function kebab($0) {
  return "-" + $0.toLowerCase();
}
function camelcase($0) {
  return $0.charAt(1).toUpperCase();
}

// node_modules/property-information/lib/hast-to-react.js
var hastToReact = {
  classId: "classID",
  dataType: "datatype",
  itemId: "itemID",
  strokeDashArray: "strokeDasharray",
  strokeDashOffset: "strokeDashoffset",
  strokeLineCap: "strokeLinecap",
  strokeLineJoin: "strokeLinejoin",
  strokeMiterLimit: "strokeMiterlimit",
  typeOf: "typeof",
  xLinkActuate: "xlinkActuate",
  xLinkArcRole: "xlinkArcrole",
  xLinkHref: "xlinkHref",
  xLinkRole: "xlinkRole",
  xLinkShow: "xlinkShow",
  xLinkTitle: "xlinkTitle",
  xLinkType: "xlinkType",
  xmlnsXLink: "xmlnsXlink"
};

// node_modules/property-information/index.js
var html2 = merge([xml, xlink, xmlns, aria, html], "html");
var svg2 = merge([xml, xlink, xmlns, aria, svg], "svg");

// node_modules/space-separated-tokens/index.js
function stringify2(values) {
  return values.join(" ").trim();
}

// node_modules/style-to-object/esm/index.mjs
var import_cjs = __toESM(require_cjs(), 1);
var esm_default = import_cjs.default.default || import_cjs.default;

// node_modules/unist-util-position/lib/index.js
var pointEnd = point("end");
var pointStart = point("start");
function point(type) {
  return point5;
  function point5(node2) {
    const point6 = node2 && node2.position && node2.position[type] || {};
    if (typeof point6.line === "number" && point6.line > 0 && typeof point6.column === "number" && point6.column > 0) {
      return {
        line: point6.line,
        column: point6.column,
        offset: typeof point6.offset === "number" && point6.offset > -1 ? point6.offset : void 0
      };
    }
  }
}
function position(node2) {
  const start2 = pointStart(node2);
  const end = pointEnd(node2);
  if (start2 && end) {
    return { start: start2, end };
  }
}

// node_modules/vfile-message/node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position2(value.position);
  }
  if ("start" in value || "end" in value) {
    return position2(value);
  }
  if ("line" in value || "column" in value) {
    return point2(value);
  }
  return "";
}
function point2(point5) {
  return index(point5 && point5.line) + ":" + index(point5 && point5.column);
}
function position2(pos) {
  return point2(pos && pos.start) + "-" + point2(pos && pos.end);
}
function index(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  /**
   * Create a message for `reason`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {Options | null | undefined} [options]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // eslint-disable-next-line complexity
  constructor(causeOrReason, optionsOrParentOrPlace, origin) {
    super();
    if (typeof optionsOrParentOrPlace === "string") {
      origin = optionsOrParentOrPlace;
      optionsOrParentOrPlace = void 0;
    }
    let reason = "";
    let options = {};
    let legacyCause = false;
    if (optionsOrParentOrPlace) {
      if ("line" in optionsOrParentOrPlace && "column" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("start" in optionsOrParentOrPlace && "end" in optionsOrParentOrPlace) {
        options = { place: optionsOrParentOrPlace };
      } else if ("type" in optionsOrParentOrPlace) {
        options = {
          ancestors: [optionsOrParentOrPlace],
          place: optionsOrParentOrPlace.position
        };
      } else {
        options = { ...optionsOrParentOrPlace };
      }
    }
    if (typeof causeOrReason === "string") {
      reason = causeOrReason;
    } else if (!options.cause && causeOrReason) {
      legacyCause = true;
      reason = causeOrReason.message;
      options.cause = causeOrReason;
    }
    if (!options.ruleId && !options.source && typeof origin === "string") {
      const index3 = origin.indexOf(":");
      if (index3 === -1) {
        options.ruleId = origin;
      } else {
        options.source = origin.slice(0, index3);
        options.ruleId = origin.slice(index3 + 1);
      }
    }
    if (!options.place && options.ancestors && options.ancestors) {
      const parent = options.ancestors[options.ancestors.length - 1];
      if (parent) {
        options.place = parent.position;
      }
    }
    const start2 = options.place && "start" in options.place ? options.place.start : options.place;
    this.ancestors = options.ancestors || void 0;
    this.cause = options.cause || void 0;
    this.column = start2 ? start2.column : void 0;
    this.fatal = void 0;
    this.file;
    this.message = reason;
    this.line = start2 ? start2.line : void 0;
    this.name = stringifyPosition(options.place) || "1:1";
    this.place = options.place || void 0;
    this.reason = this.message;
    this.ruleId = options.ruleId || void 0;
    this.source = options.source || void 0;
    this.stack = legacyCause && options.cause && typeof options.cause.stack === "string" ? options.cause.stack : "";
    this.actual;
    this.expected;
    this.note;
    this.url;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.column = void 0;
VFileMessage.prototype.line = void 0;
VFileMessage.prototype.ancestors = void 0;
VFileMessage.prototype.cause = void 0;
VFileMessage.prototype.fatal = void 0;
VFileMessage.prototype.place = void 0;
VFileMessage.prototype.ruleId = void 0;
VFileMessage.prototype.source = void 0;

// node_modules/hast-util-to-jsx-runtime/lib/index.js
var own2 = {}.hasOwnProperty;
var emptyMap = /* @__PURE__ */ new Map();
var cap2 = /[A-Z]/g;
var dashSomething = /-([a-z])/g;
var tableElements = /* @__PURE__ */ new Set(["table", "tbody", "thead", "tfoot", "tr"]);
var tableCellElement = /* @__PURE__ */ new Set(["td", "th"]);
var docs = "https://github.com/syntax-tree/hast-util-to-jsx-runtime";
function toJsxRuntime(tree, options) {
  if (!options || options.Fragment === void 0) {
    throw new TypeError("Expected `Fragment` in options");
  }
  const filePath = options.filePath || void 0;
  let create2;
  if (options.development) {
    if (typeof options.jsxDEV !== "function") {
      throw new TypeError(
        "Expected `jsxDEV` in options when `development: true`"
      );
    }
    create2 = developmentCreate(filePath, options.jsxDEV);
  } else {
    if (typeof options.jsx !== "function") {
      throw new TypeError("Expected `jsx` in production options");
    }
    if (typeof options.jsxs !== "function") {
      throw new TypeError("Expected `jsxs` in production options");
    }
    create2 = productionCreate(filePath, options.jsx, options.jsxs);
  }
  const state = {
    Fragment: options.Fragment,
    ancestors: [],
    components: options.components || {},
    create: create2,
    elementAttributeNameCase: options.elementAttributeNameCase || "react",
    evaluater: options.createEvaluater ? options.createEvaluater() : void 0,
    filePath,
    ignoreInvalidStyle: options.ignoreInvalidStyle || false,
    passKeys: options.passKeys !== false,
    passNode: options.passNode || false,
    schema: options.space === "svg" ? svg2 : html2,
    stylePropertyNameCase: options.stylePropertyNameCase || "dom",
    tableCellAlignToStyle: options.tableCellAlignToStyle !== false
  };
  const result = one(state, tree, void 0);
  if (result && typeof result !== "string") {
    return result;
  }
  return state.create(
    tree,
    state.Fragment,
    { children: result || void 0 },
    void 0
  );
}
function one(state, node2, key) {
  if (node2.type === "element") {
    return element2(state, node2, key);
  }
  if (node2.type === "mdxFlowExpression" || node2.type === "mdxTextExpression") {
    return mdxExpression(state, node2);
  }
  if (node2.type === "mdxJsxFlowElement" || node2.type === "mdxJsxTextElement") {
    return mdxJsxElement(state, node2, key);
  }
  if (node2.type === "mdxjsEsm") {
    return mdxEsm(state, node2);
  }
  if (node2.type === "root") {
    return root(state, node2, key);
  }
  if (node2.type === "text") {
    return text(state, node2);
  }
}
function element2(state, node2, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  if (node2.tagName.toLowerCase() === "svg" && parentSchema.space === "html") {
    schema = svg2;
    state.schema = schema;
  }
  state.ancestors.push(node2);
  const type = findComponentFromName(state, node2.tagName, false);
  const props = createElementProps(state, node2);
  let children = createChildren(state, node2);
  if (tableElements.has(node2.tagName)) {
    children = children.filter(function(child) {
      return typeof child === "string" ? !whitespace(child) : true;
    });
  }
  addNode(state, props, type, node2);
  addChildren(props, children);
  state.ancestors.pop();
  state.schema = parentSchema;
  return state.create(node2, type, props, key);
}
function mdxExpression(state, node2) {
  if (node2.data && node2.data.estree && state.evaluater) {
    const program = node2.data.estree;
    const expression = program.body[0];
    ok2(expression.type === "ExpressionStatement");
    return (
      /** @type {Child | undefined} */
      state.evaluater.evaluateExpression(expression.expression)
    );
  }
  crashEstree(state, node2.position);
}
function mdxEsm(state, node2) {
  if (node2.data && node2.data.estree && state.evaluater) {
    return (
      /** @type {Child | undefined} */
      state.evaluater.evaluateProgram(node2.data.estree)
    );
  }
  crashEstree(state, node2.position);
}
function mdxJsxElement(state, node2, key) {
  const parentSchema = state.schema;
  let schema = parentSchema;
  if (node2.name === "svg" && parentSchema.space === "html") {
    schema = svg2;
    state.schema = schema;
  }
  state.ancestors.push(node2);
  const type = node2.name === null ? state.Fragment : findComponentFromName(state, node2.name, true);
  const props = createJsxElementProps(state, node2);
  const children = createChildren(state, node2);
  addNode(state, props, type, node2);
  addChildren(props, children);
  state.ancestors.pop();
  state.schema = parentSchema;
  return state.create(node2, type, props, key);
}
function root(state, node2, key) {
  const props = {};
  addChildren(props, createChildren(state, node2));
  return state.create(node2, state.Fragment, props, key);
}
function text(_, node2) {
  return node2.value;
}
function addNode(state, props, type, node2) {
  if (typeof type !== "string" && type !== state.Fragment && state.passNode) {
    props.node = node2;
  }
}
function addChildren(props, children) {
  if (children.length > 0) {
    const value = children.length > 1 ? children : children[0];
    if (value) {
      props.children = value;
    }
  }
}
function productionCreate(_, jsx2, jsxs2) {
  return create2;
  function create2(_2, type, props, key) {
    const isStaticChildren = Array.isArray(props.children);
    const fn = isStaticChildren ? jsxs2 : jsx2;
    return key ? fn(type, props, key) : fn(type, props);
  }
}
function developmentCreate(filePath, jsxDEV) {
  return create2;
  function create2(node2, type, props, key) {
    const isStaticChildren = Array.isArray(props.children);
    const point5 = pointStart(node2);
    return jsxDEV(
      type,
      props,
      key,
      isStaticChildren,
      {
        columnNumber: point5 ? point5.column - 1 : void 0,
        fileName: filePath,
        lineNumber: point5 ? point5.line : void 0
      },
      void 0
    );
  }
}
function createElementProps(state, node2) {
  const props = {};
  let alignValue;
  let prop;
  for (prop in node2.properties) {
    if (prop !== "children" && own2.call(node2.properties, prop)) {
      const result = createProperty(state, prop, node2.properties[prop]);
      if (result) {
        const [key, value] = result;
        if (state.tableCellAlignToStyle && key === "align" && typeof value === "string" && tableCellElement.has(node2.tagName)) {
          alignValue = value;
        } else {
          props[key] = value;
        }
      }
    }
  }
  if (alignValue) {
    const style = (
      /** @type {Style} */
      props.style || (props.style = {})
    );
    style[state.stylePropertyNameCase === "css" ? "text-align" : "textAlign"] = alignValue;
  }
  return props;
}
function createJsxElementProps(state, node2) {
  const props = {};
  for (const attribute of node2.attributes) {
    if (attribute.type === "mdxJsxExpressionAttribute") {
      if (attribute.data && attribute.data.estree && state.evaluater) {
        const program = attribute.data.estree;
        const expression = program.body[0];
        ok2(expression.type === "ExpressionStatement");
        const objectExpression = expression.expression;
        ok2(objectExpression.type === "ObjectExpression");
        const property = objectExpression.properties[0];
        ok2(property.type === "SpreadElement");
        Object.assign(
          props,
          state.evaluater.evaluateExpression(property.argument)
        );
      } else {
        crashEstree(state, node2.position);
      }
    } else {
      const name2 = attribute.name;
      let value;
      if (attribute.value && typeof attribute.value === "object") {
        if (attribute.value.data && attribute.value.data.estree && state.evaluater) {
          const program = attribute.value.data.estree;
          const expression = program.body[0];
          ok2(expression.type === "ExpressionStatement");
          value = state.evaluater.evaluateExpression(expression.expression);
        } else {
          crashEstree(state, node2.position);
        }
      } else {
        value = attribute.value === null ? true : attribute.value;
      }
      props[name2] = /** @type {Props[keyof Props]} */
      value;
    }
  }
  return props;
}
function createChildren(state, node2) {
  const children = [];
  let index3 = -1;
  const countsByName = state.passKeys ? /* @__PURE__ */ new Map() : emptyMap;
  while (++index3 < node2.children.length) {
    const child = node2.children[index3];
    let key;
    if (state.passKeys) {
      const name2 = child.type === "element" ? child.tagName : child.type === "mdxJsxFlowElement" || child.type === "mdxJsxTextElement" ? child.name : void 0;
      if (name2) {
        const count = countsByName.get(name2) || 0;
        key = name2 + "-" + count;
        countsByName.set(name2, count + 1);
      }
    }
    const result = one(state, child, key);
    if (result !== void 0) children.push(result);
  }
  return children;
}
function createProperty(state, prop, value) {
  const info = find(state.schema, prop);
  if (value === null || value === void 0 || typeof value === "number" && Number.isNaN(value)) {
    return;
  }
  if (Array.isArray(value)) {
    value = info.commaSeparated ? stringify(value) : stringify2(value);
  }
  if (info.property === "style") {
    let styleObject = typeof value === "object" ? value : parseStyle(state, String(value));
    if (state.stylePropertyNameCase === "css") {
      styleObject = transformStylesToCssCasing(styleObject);
    }
    return ["style", styleObject];
  }
  return [
    state.elementAttributeNameCase === "react" && info.space ? hastToReact[info.property] || info.property : info.attribute,
    value
  ];
}
function parseStyle(state, value) {
  const result = {};
  try {
    esm_default(value, replacer);
  } catch (error) {
    if (!state.ignoreInvalidStyle) {
      const cause = (
        /** @type {Error} */
        error
      );
      const message = new VFileMessage("Cannot parse `style` attribute", {
        ancestors: state.ancestors,
        cause,
        ruleId: "style",
        source: "hast-util-to-jsx-runtime"
      });
      message.file = state.filePath || void 0;
      message.url = docs + "#cannot-parse-style-attribute";
      throw message;
    }
  }
  return result;
  function replacer(name2, value2) {
    let key = name2;
    if (key.slice(0, 2) !== "--") {
      if (key.slice(0, 4) === "-ms-") key = "ms-" + key.slice(4);
      key = key.replace(dashSomething, toCamel);
    }
    result[key] = value2;
  }
}
function findComponentFromName(state, name2, allowExpression) {
  let result;
  if (!allowExpression) {
    result = { type: "Literal", value: name2 };
  } else if (name2.includes(".")) {
    const identifiers = name2.split(".");
    let index3 = -1;
    let node2;
    while (++index3 < identifiers.length) {
      const prop = name(identifiers[index3]) ? { type: "Identifier", name: identifiers[index3] } : { type: "Literal", value: identifiers[index3] };
      node2 = node2 ? {
        type: "MemberExpression",
        object: node2,
        property: prop,
        computed: Boolean(index3 && prop.type === "Literal"),
        optional: false
      } : prop;
    }
    ok2(node2, "always a result");
    result = node2;
  } else {
    result = name(name2) && !/^[a-z]/.test(name2) ? { type: "Identifier", name: name2 } : { type: "Literal", value: name2 };
  }
  if (result.type === "Literal") {
    const name3 = (
      /** @type {keyof JSX.IntrinsicElements} */
      result.value
    );
    return own2.call(state.components, name3) ? state.components[name3] : name3;
  }
  if (state.evaluater) {
    return state.evaluater.evaluateExpression(result);
  }
  crashEstree(state);
}
function crashEstree(state, place) {
  const message = new VFileMessage(
    "Cannot handle MDX estrees without `createEvaluater`",
    {
      ancestors: state.ancestors,
      place,
      ruleId: "mdx-estree",
      source: "hast-util-to-jsx-runtime"
    }
  );
  message.file = state.filePath || void 0;
  message.url = docs + "#cannot-handle-mdx-estrees-without-createevaluater";
  throw message;
}
function transformStylesToCssCasing(domCasing) {
  const cssCasing = {};
  let from;
  for (from in domCasing) {
    if (own2.call(domCasing, from)) {
      cssCasing[transformStyleToCssCasing(from)] = domCasing[from];
    }
  }
  return cssCasing;
}
function transformStyleToCssCasing(from) {
  let to = from.replace(cap2, toDash);
  if (to.slice(0, 3) === "ms-") to = "-" + to;
  return to;
}
function toCamel(_, $1) {
  return $1.toUpperCase();
}
function toDash($0) {
  return "-" + $0.toLowerCase();
}

// node_modules/html-url-attributes/lib/index.js
var urlAttributes = {
  action: ["form"],
  cite: ["blockquote", "del", "ins", "q"],
  data: ["object"],
  formAction: ["button", "input"],
  href: ["a", "area", "base", "link"],
  icon: ["menuitem"],
  itemId: null,
  manifest: ["html"],
  ping: ["a", "area"],
  poster: ["video"],
  src: [
    "audio",
    "embed",
    "iframe",
    "img",
    "input",
    "script",
    "source",
    "track",
    "video"
  ]
};

// node_modules/react-markdown/lib/index.js
var import_jsx_runtime = require("react/jsx-runtime");

// node_modules/mdast-util-to-string/lib/index.js
var emptyOptions3 = {};
function toString(value, options) {
  const settings = options || emptyOptions3;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one2(value, includeImageAlt, includeHtml);
}
function one2(value, includeImageAlt, includeHtml) {
  if (node(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all(values, includeImageAlt, includeHtml) {
  const result = [];
  let index3 = -1;
  while (++index3 < values.length) {
    result[index3] = one2(values[index3], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node(value) {
  return Boolean(value && typeof value === "object");
}

// node_modules/decode-named-character-reference/index.dom.js
var element3 = document.createElement("i");
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element3.innerHTML = characterReference2;
  const char = element3.textContent;
  if (char.charCodeAt(char.length - 1) === 59 && value !== "semi") {
    return false;
  }
  return char === characterReference2 ? false : char;
}

// node_modules/micromark-util-chunked/index.js
function splice(list4, start2, remove, items) {
  const end = list4.length;
  let chunkStart = 0;
  let parameters;
  if (start2 < 0) {
    start2 = -start2 > end ? 0 : end + start2;
  } else {
    start2 = start2 > end ? end : start2;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < 1e4) {
    parameters = Array.from(items);
    parameters.unshift(start2, remove);
    list4.splice(...parameters);
  } else {
    if (remove) list4.splice(start2, remove);
    while (chunkStart < items.length) {
      parameters = items.slice(chunkStart, chunkStart + 1e4);
      parameters.unshift(start2, 0);
      list4.splice(...parameters);
      chunkStart += 1e4;
      start2 += 1e4;
    }
  }
}
function push(list4, items) {
  if (list4.length > 0) {
    splice(list4, list4.length, 0, items);
    return list4;
  }
  return items;
}

// node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty = {}.hasOwnProperty;
function combineExtensions(extensions) {
  const all2 = {};
  let index3 = -1;
  while (++index3 < extensions.length) {
    syntaxExtension(all2, extensions[index3]);
  }
  return all2;
}
function syntaxExtension(all2, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
    const left = maybe || (all2[hook] = {});
    const right = extension2[hook];
    let code4;
    if (right) {
      for (code4 in right) {
        if (!hasOwnProperty.call(left, code4)) left[code4] = [];
        const value = right[code4];
        constructs(
          // @ts-expect-error Looks like a list.
          left[code4],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
}
function constructs(existing, list4) {
  let index3 = -1;
  const before = [];
  while (++index3 < list4.length) {
    ;
    (list4[index3].add === "after" ? existing : before).push(list4[index3]);
  }
  splice(existing, 0, 0, before);
}

// node_modules/micromark-util-decode-numeric-character-reference/index.js
function decodeNumericCharacterReference(value, base) {
  const code4 = Number.parseInt(value, base);
  if (
    // C0 except for HT, LF, FF, CR, space.
    code4 < 9 || code4 === 11 || code4 > 13 && code4 < 32 || // Control character (DEL) of C0, and C1 controls.
    code4 > 126 && code4 < 160 || // Lone high surrogates and low surrogates.
    code4 > 55295 && code4 < 57344 || // Noncharacters.
    code4 > 64975 && code4 < 65008 || /* eslint-disable no-bitwise */
    (code4 & 65535) === 65535 || (code4 & 65535) === 65534 || /* eslint-enable no-bitwise */
    // Out of range
    code4 > 1114111
  ) {
    return "\uFFFD";
  }
  return String.fromCodePoint(code4);
}

// node_modules/micromark-util-normalize-identifier/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

// node_modules/micromark-util-character/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code4) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code4 !== null && (code4 < 32 || code4 === 127)
  );
}
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
function markdownLineEnding(code4) {
  return code4 !== null && code4 < -2;
}
function markdownLineEndingOrSpace(code4) {
  return code4 !== null && (code4 < 0 || code4 === 32);
}
function markdownSpace(code4) {
  return code4 === -2 || code4 === -1 || code4 === 32;
}
var unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
var unicodeWhitespace = regexCheck(/\s/);
function regexCheck(regex) {
  return check;
  function check(code4) {
    return code4 !== null && code4 > -1 && regex.test(String.fromCharCode(code4));
  }
}

// node_modules/micromark-util-sanitize-uri/index.js
function normalizeUri(value) {
  const result = [];
  let index3 = -1;
  let start2 = 0;
  let skip = 0;
  while (++index3 < value.length) {
    const code4 = value.charCodeAt(index3);
    let replace2 = "";
    if (code4 === 37 && asciiAlphanumeric(value.charCodeAt(index3 + 1)) && asciiAlphanumeric(value.charCodeAt(index3 + 2))) {
      skip = 2;
    } else if (code4 < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code4))) {
        replace2 = String.fromCharCode(code4);
      }
    } else if (code4 > 55295 && code4 < 57344) {
      const next = value.charCodeAt(index3 + 1);
      if (code4 < 56320 && next > 56319 && next < 57344) {
        replace2 = String.fromCharCode(code4, next);
        skip = 1;
      } else {
        replace2 = "\uFFFD";
      }
    } else {
      replace2 = String.fromCharCode(code4);
    }
    if (replace2) {
      result.push(value.slice(start2, index3), encodeURIComponent(replace2));
      start2 = index3 + skip + 1;
      replace2 = "";
    }
    if (skip) {
      index3 += skip;
      skip = 0;
    }
  }
  return result.join("") + value.slice(start2);
}

// node_modules/micromark-factory-space/index.js
function factorySpace(effects, ok3, type, max) {
  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
  let size = 0;
  return start2;
  function start2(code4) {
    if (markdownSpace(code4)) {
      effects.enter(type);
      return prefix(code4);
    }
    return ok3(code4);
  }
  function prefix(code4) {
    if (markdownSpace(code4) && size++ < limit) {
      effects.consume(code4);
      return prefix;
    }
    effects.exit(type);
    return ok3(code4);
  }
}

// node_modules/micromark/lib/initialize/content.js
var content = {
  tokenize: initializeContent
};
function initializeContent(effects) {
  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);
  let previous3;
  return contentStart;
  function afterContentStartConstruct(code4) {
    if (code4 === null) {
      effects.consume(code4);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return factorySpace(effects, contentStart, "linePrefix");
  }
  function paragraphInitial(code4) {
    effects.enter("paragraph");
    return lineStart(code4);
  }
  function lineStart(code4) {
    const token = effects.enter("chunkText", {
      contentType: "text",
      previous: previous3
    });
    if (previous3) {
      previous3.next = token;
    }
    previous3 = token;
    return data(code4);
  }
  function data(code4) {
    if (code4 === null) {
      effects.exit("chunkText");
      effects.exit("paragraph");
      effects.consume(code4);
      return;
    }
    if (markdownLineEnding(code4)) {
      effects.consume(code4);
      effects.exit("chunkText");
      return lineStart;
    }
    effects.consume(code4);
    return data;
  }
}

// node_modules/micromark/lib/initialize/document.js
var document2 = {
  tokenize: initializeDocument
};
var containerConstruct = {
  tokenize: tokenizeContainer
};
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start2;
  function start2(code4) {
    if (continued < stack.length) {
      const item2 = stack[continued];
      self2.containerState = item2[1];
      return effects.attempt(item2[0].continuation, documentContinue, checkNewContainers)(code4);
    }
    return checkNewContainers(code4);
  }
  function documentContinue(code4) {
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point5;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          point5 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      exitContainers(continued);
      let index3 = indexBeforeExits;
      while (index3 < self2.events.length) {
        self2.events[index3][1].end = {
          ...point5
        };
        index3++;
      }
      splice(self2.events, indexBeforeFlow + 1, 0, self2.events.slice(indexBeforeExits));
      self2.events.length = index3;
      return checkNewContainers(code4);
    }
    return start2(code4);
  }
  function checkNewContainers(code4) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code4);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code4);
      }
      self2.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);
    }
    self2.containerState = {};
    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code4);
  }
  function thereIsANewContainer(code4) {
    if (childFlow) closeFlow();
    exitContainers(continued);
    return documentContinued(code4);
  }
  function thereIsNoNewContainer(code4) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code4);
  }
  function documentContinued(code4) {
    self2.containerState = {};
    return effects.attempt(containerConstruct, containerContinue, flowStart)(code4);
  }
  function containerContinue(code4) {
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code4);
  }
  function flowStart(code4) {
    if (code4 === null) {
      if (childFlow) closeFlow();
      exitContainers(0);
      effects.consume(code4);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter("chunkFlow", {
      _tokenizer: childFlow,
      contentType: "flow",
      previous: childToken
    });
    return flowContinue(code4);
  }
  function flowContinue(code4) {
    if (code4 === null) {
      writeToChild(effects.exit("chunkFlow"), true);
      exitContainers(0);
      effects.consume(code4);
      return;
    }
    if (markdownLineEnding(code4)) {
      effects.consume(code4);
      writeToChild(effects.exit("chunkFlow"));
      continued = 0;
      self2.interrupt = void 0;
      return start2;
    }
    effects.consume(code4);
    return flowContinue;
  }
  function writeToChild(token, endOfFile) {
    const stream = self2.sliceStream(token);
    if (endOfFile) stream.push(null);
    token.previous = childToken;
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.defineSkip(token.start);
    childFlow.write(stream);
    if (self2.parser.lazy[token.start.line]) {
      let index3 = childFlow.events.length;
      while (index3--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index3][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index3][1].end || // …or ends after it.
          childFlow.events[index3][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point5;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
          if (seen) {
            point5 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      exitContainers(continued);
      index3 = indexBeforeExits;
      while (index3 < self2.events.length) {
        self2.events[index3][1].end = {
          ...point5
        };
        index3++;
      }
      splice(self2.events, indexBeforeFlow + 1, 0, self2.events.slice(indexBeforeExits));
      self2.events.length = index3;
    }
  }
  function exitContainers(size) {
    let index3 = stack.length;
    while (index3-- > size) {
      const entry = stack[index3];
      self2.containerState = entry[1];
      entry[0].exit.call(self2, effects);
    }
    stack.length = size;
  }
  function closeFlow() {
    childFlow.write([null]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok3, nok) {
  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok3, nok), "linePrefix", this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4);
}

// node_modules/micromark-util-classify-character/index.js
function classifyCharacter(code4) {
  if (code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
    return 1;
  }
  if (unicodePunctuation(code4)) {
    return 2;
  }
}

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index3 = -1;
  while (++index3 < constructs2.length) {
    const resolve = constructs2[index3].resolveAll;
    if (resolve && !called.includes(resolve)) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }
  return events;
}

// node_modules/micromark-core-commonmark/lib/attention.js
var attention = {
  name: "attention",
  resolveAll: resolveAllAttention,
  tokenize: tokenizeAttention
};
function resolveAllAttention(events, context) {
  let index3 = -1;
  let open;
  let group;
  let text8;
  let openingSequence;
  let closingSequence;
  let use;
  let nextEvents;
  let offset;
  while (++index3 < events.length) {
    if (events[index3][0] === "enter" && events[index3][1].type === "attentionSequence" && events[index3][1]._close) {
      open = index3;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index3][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index3][1]._open) && (events[index3][1].end.offset - events[index3][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index3][1].end.offset - events[index3][1].start.offset) % 3)) {
            continue;
          }
          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index3][1].end.offset - events[index3][1].start.offset > 1 ? 2 : 1;
          const start2 = {
            ...events[open][1].end
          };
          const end = {
            ...events[index3][1].start
          };
          movePoint(start2, -use);
          movePoint(end, use);
          openingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: start2,
            end: {
              ...events[open][1].end
            }
          };
          closingSequence = {
            type: use > 1 ? "strongSequence" : "emphasisSequence",
            start: {
              ...events[index3][1].start
            },
            end
          };
          text8 = {
            type: use > 1 ? "strongText" : "emphasisText",
            start: {
              ...events[open][1].end
            },
            end: {
              ...events[index3][1].start
            }
          };
          group = {
            type: use > 1 ? "strong" : "emphasis",
            start: {
              ...openingSequence.start
            },
            end: {
              ...closingSequence.end
            }
          };
          events[open][1].end = {
            ...openingSequence.start
          };
          events[index3][1].start = {
            ...closingSequence.end
          };
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [["enter", events[open][1], context], ["exit", events[open][1], context]]);
          }
          nextEvents = push(nextEvents, [["enter", group, context], ["enter", openingSequence, context], ["exit", openingSequence, context], ["enter", text8, context]]);
          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index3), context));
          nextEvents = push(nextEvents, [["exit", text8, context], ["enter", closingSequence, context], ["exit", closingSequence, context], ["exit", group, context]]);
          if (events[index3][1].end.offset - events[index3][1].start.offset) {
            offset = 2;
            nextEvents = push(nextEvents, [["enter", events[index3][1], context], ["exit", events[index3][1], context]]);
          } else {
            offset = 0;
          }
          splice(events, open - 1, index3 - open + 3, nextEvents);
          index3 = open + nextEvents.length - offset - 2;
          break;
        }
      }
    }
  }
  index3 = -1;
  while (++index3 < events.length) {
    if (events[index3][1].type === "attentionSequence") {
      events[index3][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok3) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous3 = this.previous;
  const before = classifyCharacter(previous3);
  let marker;
  return start2;
  function start2(code4) {
    marker = code4;
    effects.enter("attentionSequence");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      return inside;
    }
    const token = effects.exit("attentionSequence");
    const after = classifyCharacter(code4);
    const open = !after || after === 2 && before || attentionMarkers2.includes(code4);
    const close = !before || before === 2 && after || attentionMarkers2.includes(previous3);
    token._open = Boolean(marker === 42 ? open : open && (before || !close));
    token._close = Boolean(marker === 42 ? close : close && (after || !open));
    return ok3(code4);
  }
}
function movePoint(point5, offset) {
  point5.column += offset;
  point5.offset += offset;
  point5._bufferIndex += offset;
}

// node_modules/micromark-core-commonmark/lib/autolink.js
var autolink = {
  name: "autolink",
  tokenize: tokenizeAutolink
};
function tokenizeAutolink(effects, ok3, nok) {
  let size = 0;
  return start2;
  function start2(code4) {
    effects.enter("autolink");
    effects.enter("autolinkMarker");
    effects.consume(code4);
    effects.exit("autolinkMarker");
    effects.enter("autolinkProtocol");
    return open;
  }
  function open(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return schemeOrEmailAtext;
    }
    if (code4 === 64) {
      return nok(code4);
    }
    return emailAtext(code4);
  }
  function schemeOrEmailAtext(code4) {
    if (code4 === 43 || code4 === 45 || code4 === 46 || asciiAlphanumeric(code4)) {
      size = 1;
      return schemeInsideOrEmailAtext(code4);
    }
    return emailAtext(code4);
  }
  function schemeInsideOrEmailAtext(code4) {
    if (code4 === 58) {
      effects.consume(code4);
      size = 0;
      return urlInside;
    }
    if ((code4 === 43 || code4 === 45 || code4 === 46 || asciiAlphanumeric(code4)) && size++ < 32) {
      effects.consume(code4);
      return schemeInsideOrEmailAtext;
    }
    size = 0;
    return emailAtext(code4);
  }
  function urlInside(code4) {
    if (code4 === 62) {
      effects.exit("autolinkProtocol");
      effects.enter("autolinkMarker");
      effects.consume(code4);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    if (code4 === null || code4 === 32 || code4 === 60 || asciiControl(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return urlInside;
  }
  function emailAtext(code4) {
    if (code4 === 64) {
      effects.consume(code4);
      return emailAtSignOrDot;
    }
    if (asciiAtext(code4)) {
      effects.consume(code4);
      return emailAtext;
    }
    return nok(code4);
  }
  function emailAtSignOrDot(code4) {
    return asciiAlphanumeric(code4) ? emailLabel(code4) : nok(code4);
  }
  function emailLabel(code4) {
    if (code4 === 46) {
      effects.consume(code4);
      size = 0;
      return emailAtSignOrDot;
    }
    if (code4 === 62) {
      effects.exit("autolinkProtocol").type = "autolinkEmail";
      effects.enter("autolinkMarker");
      effects.consume(code4);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok3;
    }
    return emailValue(code4);
  }
  function emailValue(code4) {
    if ((code4 === 45 || asciiAlphanumeric(code4)) && size++ < 63) {
      const next = code4 === 45 ? emailValue : emailLabel;
      effects.consume(code4);
      return next;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/blank-line.js
var blankLine = {
  partial: true,
  tokenize: tokenizeBlankLine
};
function tokenizeBlankLine(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    return markdownSpace(code4) ? factorySpace(effects, after, "linePrefix")(code4) : after(code4);
  }
  function after(code4) {
    return code4 === null || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/block-quote.js
var blockQuote = {
  continuation: {
    tokenize: tokenizeBlockQuoteContinuation
  },
  exit,
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart
};
function tokenizeBlockQuoteStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    if (code4 === 62) {
      const state = self2.containerState;
      if (!state.open) {
        effects.enter("blockQuote", {
          _container: true
        });
        state.open = true;
      }
      effects.enter("blockQuotePrefix");
      effects.enter("blockQuoteMarker");
      effects.consume(code4);
      effects.exit("blockQuoteMarker");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    if (markdownSpace(code4)) {
      effects.enter("blockQuotePrefixWhitespace");
      effects.consume(code4);
      effects.exit("blockQuotePrefixWhitespace");
      effects.exit("blockQuotePrefix");
      return ok3;
    }
    effects.exit("blockQuotePrefix");
    return ok3(code4);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
  const self2 = this;
  return contStart;
  function contStart(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(effects, contBefore, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4);
    }
    return contBefore(code4);
  }
  function contBefore(code4) {
    return effects.attempt(blockQuote, ok3, nok)(code4);
  }
}
function exit(effects) {
  effects.exit("blockQuote");
}

// node_modules/micromark-core-commonmark/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("characterEscape");
    effects.enter("escapeMarker");
    effects.consume(code4);
    effects.exit("escapeMarker");
    return inside;
  }
  function inside(code4) {
    if (asciiPunctuation(code4)) {
      effects.enter("characterEscapeValue");
      effects.consume(code4);
      effects.exit("characterEscapeValue");
      effects.exit("characterEscape");
      return ok3;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let max;
  let test3;
  return start2;
  function start2(code4) {
    effects.enter("characterReference");
    effects.enter("characterReferenceMarker");
    effects.consume(code4);
    effects.exit("characterReferenceMarker");
    return open;
  }
  function open(code4) {
    if (code4 === 35) {
      effects.enter("characterReferenceMarkerNumeric");
      effects.consume(code4);
      effects.exit("characterReferenceMarkerNumeric");
      return numeric;
    }
    effects.enter("characterReferenceValue");
    max = 31;
    test3 = asciiAlphanumeric;
    return value(code4);
  }
  function numeric(code4) {
    if (code4 === 88 || code4 === 120) {
      effects.enter("characterReferenceMarkerHexadecimal");
      effects.consume(code4);
      effects.exit("characterReferenceMarkerHexadecimal");
      effects.enter("characterReferenceValue");
      max = 6;
      test3 = asciiHexDigit;
      return value;
    }
    effects.enter("characterReferenceValue");
    max = 7;
    test3 = asciiDigit;
    return value(code4);
  }
  function value(code4) {
    if (code4 === 59 && size) {
      const token = effects.exit("characterReferenceValue");
      if (test3 === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
        return nok(code4);
      }
      effects.enter("characterReferenceMarker");
      effects.consume(code4);
      effects.exit("characterReferenceMarker");
      effects.exit("characterReference");
      return ok3;
    }
    if (test3(code4) && size++ < max) {
      effects.consume(code4);
      return value;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/code-fenced.js
var nonLazyContinuation = {
  partial: true,
  tokenize: tokenizeNonLazyContinuation
};
var codeFenced = {
  concrete: true,
  name: "codeFenced",
  tokenize: tokenizeCodeFenced
};
function tokenizeCodeFenced(effects, ok3, nok) {
  const self2 = this;
  const closeStart = {
    partial: true,
    tokenize: tokenizeCloseStart
  };
  let initialPrefix = 0;
  let sizeOpen = 0;
  let marker;
  return start2;
  function start2(code4) {
    return beforeSequenceOpen(code4);
  }
  function beforeSequenceOpen(code4) {
    const tail = self2.events[self2.events.length - 1];
    initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    marker = code4;
    effects.enter("codeFenced");
    effects.enter("codeFencedFence");
    effects.enter("codeFencedFenceSequence");
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === marker) {
      sizeOpen++;
      effects.consume(code4);
      return sequenceOpen;
    }
    if (sizeOpen < 3) {
      return nok(code4);
    }
    effects.exit("codeFencedFenceSequence");
    return markdownSpace(code4) ? factorySpace(effects, infoBefore, "whitespace")(code4) : infoBefore(code4);
  }
  function infoBefore(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("codeFencedFence");
      return self2.interrupt ? ok3(code4) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code4);
    }
    effects.enter("codeFencedFenceInfo");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return info(code4);
  }
  function info(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return infoBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceInfo");
      return factorySpace(effects, metaBefore, "whitespace")(code4);
    }
    if (code4 === 96 && code4 === marker) {
      return nok(code4);
    }
    effects.consume(code4);
    return info;
  }
  function metaBefore(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return infoBefore(code4);
    }
    effects.enter("codeFencedFenceMeta");
    effects.enter("chunkString", {
      contentType: "string"
    });
    return meta(code4);
  }
  function meta(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("chunkString");
      effects.exit("codeFencedFenceMeta");
      return infoBefore(code4);
    }
    if (code4 === 96 && code4 === marker) {
      return nok(code4);
    }
    effects.consume(code4);
    return meta;
  }
  function atNonLazyBreak(code4) {
    return effects.attempt(closeStart, after, contentBefore)(code4);
  }
  function contentBefore(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return contentStart;
  }
  function contentStart(code4) {
    return initialPrefix > 0 && markdownSpace(code4) ? factorySpace(effects, beforeContentChunk, "linePrefix", initialPrefix + 1)(code4) : beforeContentChunk(code4);
  }
  function beforeContentChunk(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code4);
    }
    effects.enter("codeFlowValue");
    return contentChunk(code4);
  }
  function contentChunk(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("codeFlowValue");
      return beforeContentChunk(code4);
    }
    effects.consume(code4);
    return contentChunk;
  }
  function after(code4) {
    effects.exit("codeFenced");
    return ok3(code4);
  }
  function tokenizeCloseStart(effects2, ok4, nok2) {
    let size = 0;
    return startBefore;
    function startBefore(code4) {
      effects2.enter("lineEnding");
      effects2.consume(code4);
      effects2.exit("lineEnding");
      return start3;
    }
    function start3(code4) {
      effects2.enter("codeFencedFence");
      return markdownSpace(code4) ? factorySpace(effects2, beforeSequenceClose, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4) : beforeSequenceClose(code4);
    }
    function beforeSequenceClose(code4) {
      if (code4 === marker) {
        effects2.enter("codeFencedFenceSequence");
        return sequenceClose(code4);
      }
      return nok2(code4);
    }
    function sequenceClose(code4) {
      if (code4 === marker) {
        size++;
        effects2.consume(code4);
        return sequenceClose;
      }
      if (size >= sizeOpen) {
        effects2.exit("codeFencedFenceSequence");
        return markdownSpace(code4) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code4) : sequenceCloseAfter(code4);
      }
      return nok2(code4);
    }
    function sequenceCloseAfter(code4) {
      if (code4 === null || markdownLineEnding(code4)) {
        effects2.exit("codeFencedFence");
        return ok4(code4);
      }
      return nok2(code4);
    }
  }
}
function tokenizeNonLazyContinuation(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return lineStart;
  }
  function lineStart(code4) {
    return self2.parser.lazy[self2.now().line] ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/code-indented.js
var codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
var furtherStart = {
  partial: true,
  tokenize: tokenizeFurtherStart
};
function tokenizeCodeIndented(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    effects.enter("codeIndented");
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code4);
  }
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code4) : nok(code4);
  }
  function atBreak(code4) {
    if (code4 === null) {
      return after(code4);
    }
    if (markdownLineEnding(code4)) {
      return effects.attempt(furtherStart, atBreak, after)(code4);
    }
    effects.enter("codeFlowValue");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("codeFlowValue");
      return atBreak(code4);
    }
    effects.consume(code4);
    return inside;
  }
  function after(code4) {
    effects.exit("codeIndented");
    return ok3(code4);
  }
}
function tokenizeFurtherStart(effects, ok3, nok) {
  const self2 = this;
  return furtherStart2;
  function furtherStart2(code4) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return furtherStart2;
    }
    return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code4);
  }
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok3(code4) : markdownLineEnding(code4) ? furtherStart2(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/code-text.js
var codeText = {
  name: "codeText",
  previous,
  resolve: resolveCodeText,
  tokenize: tokenizeCodeText
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index3;
  let enter;
  if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
    index3 = headEnterIndex;
    while (++index3 < tailExitIndex) {
      if (events[index3][1].type === "codeTextData") {
        events[headEnterIndex][1].type = "codeTextPadding";
        events[tailExitIndex][1].type = "codeTextPadding";
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index3 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index3 <= tailExitIndex) {
    if (enter === void 0) {
      if (index3 !== tailExitIndex && events[index3][1].type !== "lineEnding") {
        enter = index3;
      }
    } else if (index3 === tailExitIndex || events[index3][1].type === "lineEnding") {
      events[enter][1].type = "codeTextData";
      if (index3 !== enter + 2) {
        events[enter][1].end = events[index3 - 1][1].end;
        events.splice(enter + 2, index3 - enter - 2);
        tailExitIndex -= index3 - enter - 2;
        index3 = enter + 2;
      }
      enter = void 0;
    }
  }
  return events;
}
function previous(code4) {
  return code4 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
}
function tokenizeCodeText(effects, ok3, nok) {
  const self2 = this;
  let sizeOpen = 0;
  let size;
  let token;
  return start2;
  function start2(code4) {
    effects.enter("codeText");
    effects.enter("codeTextSequence");
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === 96) {
      effects.consume(code4);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit("codeTextSequence");
    return between(code4);
  }
  function between(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 32) {
      effects.enter("space");
      effects.consume(code4);
      effects.exit("space");
      return between;
    }
    if (code4 === 96) {
      token = effects.enter("codeTextSequence");
      size = 0;
      return sequenceClose(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return between;
    }
    effects.enter("codeTextData");
    return data(code4);
  }
  function data(code4) {
    if (code4 === null || code4 === 32 || code4 === 96 || markdownLineEnding(code4)) {
      effects.exit("codeTextData");
      return between(code4);
    }
    effects.consume(code4);
    return data;
  }
  function sequenceClose(code4) {
    if (code4 === 96) {
      effects.consume(code4);
      size++;
      return sequenceClose;
    }
    if (size === sizeOpen) {
      effects.exit("codeTextSequence");
      effects.exit("codeText");
      return ok3(code4);
    }
    token.type = "codeTextData";
    return data(code4);
  }
}

// node_modules/micromark-util-subtokenize/lib/splice-buffer.js
var SpliceBuffer = class {
  /**
   * @param {ReadonlyArray<T> | null | undefined} [initial]
   *   Initial items (optional).
   * @returns
   *   Splice buffer.
   */
  constructor(initial) {
    this.left = initial ? [...initial] : [];
    this.right = [];
  }
  /**
   * Array access;
   * does not move the cursor.
   *
   * @param {number} index
   *   Index.
   * @return {T}
   *   Item.
   */
  get(index3) {
    if (index3 < 0 || index3 >= this.left.length + this.right.length) {
      throw new RangeError("Cannot access index `" + index3 + "` in a splice buffer of size `" + (this.left.length + this.right.length) + "`");
    }
    if (index3 < this.left.length) return this.left[index3];
    return this.right[this.right.length - index3 + this.left.length - 1];
  }
  /**
   * The length of the splice buffer, one greater than the largest index in the
   * array.
   */
  get length() {
    return this.left.length + this.right.length;
  }
  /**
   * Remove and return `list[0]`;
   * moves the cursor to `0`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  shift() {
    this.setCursor(0);
    return this.right.pop();
  }
  /**
   * Slice the buffer to get an array;
   * does not move the cursor.
   *
   * @param {number} start
   *   Start.
   * @param {number | null | undefined} [end]
   *   End (optional).
   * @returns {Array<T>}
   *   Array of items.
   */
  slice(start2, end) {
    const stop = end === null || end === void 0 ? Number.POSITIVE_INFINITY : end;
    if (stop < this.left.length) {
      return this.left.slice(start2, stop);
    }
    if (start2 > this.left.length) {
      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start2 + this.left.length).reverse();
    }
    return this.left.slice(start2).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());
  }
  /**
   * Mimics the behavior of Array.prototype.splice() except for the change of
   * interface necessary to avoid segfaults when patching in very large arrays.
   *
   * This operation moves cursor is moved to `start` and results in the cursor
   * placed after any inserted items.
   *
   * @param {number} start
   *   Start;
   *   zero-based index at which to start changing the array;
   *   negative numbers count backwards from the end of the array and values
   *   that are out-of bounds are clamped to the appropriate end of the array.
   * @param {number | null | undefined} [deleteCount=0]
   *   Delete count (default: `0`);
   *   maximum number of elements to delete, starting from start.
   * @param {Array<T> | null | undefined} [items=[]]
   *   Items to include in place of the deleted items (default: `[]`).
   * @return {Array<T>}
   *   Any removed items.
   */
  splice(start2, deleteCount, items) {
    const count = deleteCount || 0;
    this.setCursor(Math.trunc(start2));
    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);
    if (items) chunkedPush(this.left, items);
    return removed.reverse();
  }
  /**
   * Remove and return the highest-numbered item in the array, so
   * `list[list.length - 1]`;
   * Moves the cursor to `length`.
   *
   * @returns {T | undefined}
   *   Item, optional.
   */
  pop() {
    this.setCursor(Number.POSITIVE_INFINITY);
    return this.left.pop();
  }
  /**
   * Inserts a single item to the high-numbered side of the array;
   * moves the cursor to `length`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  push(item2) {
    this.setCursor(Number.POSITIVE_INFINITY);
    this.left.push(item2);
  }
  /**
   * Inserts many items to the high-numbered side of the array.
   * Moves the cursor to `length`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  pushMany(items) {
    this.setCursor(Number.POSITIVE_INFINITY);
    chunkedPush(this.left, items);
  }
  /**
   * Inserts a single item to the low-numbered side of the array;
   * Moves the cursor to `0`.
   *
   * @param {T} item
   *   Item.
   * @returns {undefined}
   *   Nothing.
   */
  unshift(item2) {
    this.setCursor(0);
    this.right.push(item2);
  }
  /**
   * Inserts many items to the low-numbered side of the array;
   * moves the cursor to `0`.
   *
   * @param {Array<T>} items
   *   Items.
   * @returns {undefined}
   *   Nothing.
   */
  unshiftMany(items) {
    this.setCursor(0);
    chunkedPush(this.right, items.reverse());
  }
  /**
   * Move the cursor to a specific position in the array. Requires
   * time proportional to the distance moved.
   *
   * If `n < 0`, the cursor will end up at the beginning.
   * If `n > length`, the cursor will end up at the end.
   *
   * @param {number} n
   *   Position.
   * @return {undefined}
   *   Nothing.
   */
  setCursor(n) {
    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;
    if (n < this.left.length) {
      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
      chunkedPush(this.right, removed.reverse());
    } else {
      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);
      chunkedPush(this.left, removed.reverse());
    }
  }
};
function chunkedPush(list4, right) {
  let chunkStart = 0;
  if (right.length < 1e4) {
    list4.push(...right);
  } else {
    while (chunkStart < right.length) {
      list4.push(...right.slice(chunkStart, chunkStart + 1e4));
      chunkStart += 1e4;
    }
  }
}

// node_modules/micromark-util-subtokenize/index.js
function subtokenize(eventsArray) {
  const jumps = {};
  let index3 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  const events = new SpliceBuffer(eventsArray);
  while (++index3 < events.length) {
    while (index3 in jumps) {
      index3 = jumps[index3];
    }
    event = events.get(index3);
    if (index3 && event[1].type === "chunkFlow" && events.get(index3 - 1)[1].type === "listItemPrefix") {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === "content") {
            break;
          }
          if (subevents[otherIndex][1].type === "chunkText") {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index3));
        index3 = jumps[index3];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index3;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events.get(otherIndex);
        if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events.get(lineIndex)[1].type = "lineEndingBlank";
            }
            otherEvent[1].type = "lineEnding";
            lineIndex = otherIndex;
          }
        } else if (otherEvent[1].type === "linePrefix") {
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = {
          ...events.get(lineIndex)[1].start
        };
        parameters = events.slice(lineIndex, index3);
        parameters.unshift(event);
        events.splice(lineIndex, index3 - lineIndex + 1, parameters);
      }
    }
  }
  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
  return !more;
}
function subcontent(events, eventIndex) {
  const token = events.get(eventIndex)[1];
  const context = events.get(eventIndex)[2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream;
  let previous3;
  let index3 = -1;
  let current = token;
  let adjust = 0;
  let start2 = 0;
  const breaks = [start2];
  while (current) {
    while (events.get(++startPosition)[1] !== current) {
    }
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(null);
      }
      if (previous3) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous3 = current;
    current = current.next;
  }
  current = token;
  while (++index3 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index3][0] === "exit" && childEvents[index3 - 1][0] === "enter" && childEvents[index3][1].type === childEvents[index3 - 1][1].type && childEvents[index3][1].start.line !== childEvents[index3][1].end.line
    ) {
      start2 = index3 + 1;
      breaks.push(start2);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
  } else {
    breaks.pop();
  }
  index3 = breaks.length;
  while (index3--) {
    const slice = childEvents.slice(breaks[index3], breaks[index3 + 1]);
    const start3 = startPositions.pop();
    jumps.push([start3, start3 + slice.length - 1]);
    events.splice(start3, 2, slice);
  }
  jumps.reverse();
  index3 = -1;
  while (++index3 < jumps.length) {
    gaps[adjust + jumps[index3][0]] = adjust + jumps[index3][1];
    adjust += jumps[index3][1] - jumps[index3][0] - 1;
  }
  return gaps;
}

// node_modules/micromark-core-commonmark/lib/content.js
var content2 = {
  resolve: resolveContent,
  tokenize: tokenizeContent
};
var continuationConstruct = {
  partial: true,
  tokenize: tokenizeContinuation
};
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok3) {
  let previous3;
  return chunkStart;
  function chunkStart(code4) {
    effects.enter("content");
    previous3 = effects.enter("chunkContent", {
      contentType: "content"
    });
    return chunkInside(code4);
  }
  function chunkInside(code4) {
    if (code4 === null) {
      return contentEnd(code4);
    }
    if (markdownLineEnding(code4)) {
      return effects.check(continuationConstruct, contentContinue, contentEnd)(code4);
    }
    effects.consume(code4);
    return chunkInside;
  }
  function contentEnd(code4) {
    effects.exit("chunkContent");
    effects.exit("content");
    return ok3(code4);
  }
  function contentContinue(code4) {
    effects.consume(code4);
    effects.exit("chunkContent");
    previous3.next = effects.enter("chunkContent", {
      contentType: "content",
      previous: previous3
    });
    previous3 = previous3.next;
    return chunkInside;
  }
}
function tokenizeContinuation(effects, ok3, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code4) {
    effects.exit("chunkContent");
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return factorySpace(effects, prefixed, "linePrefix");
  }
  function prefixed(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return nok(code4);
    }
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
      return ok3(code4);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code4);
  }
}

// node_modules/micromark-factory-destination/index.js
function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
  const limit = max || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start2;
  function start2(code4) {
    if (code4 === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code4);
      effects.exit(literalMarkerType);
      return enclosedBefore;
    }
    if (code4 === null || code4 === 32 || code4 === 41 || asciiControl(code4)) {
      return nok(code4);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return raw(code4);
  }
  function enclosedBefore(code4) {
    if (code4 === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code4);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    effects.enter("chunkString", {
      contentType: "string"
    });
    return enclosed(code4);
  }
  function enclosed(code4) {
    if (code4 === 62) {
      effects.exit("chunkString");
      effects.exit(stringType);
      return enclosedBefore(code4);
    }
    if (code4 === null || code4 === 60 || markdownLineEnding(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? enclosedEscape : enclosed;
  }
  function enclosedEscape(code4) {
    if (code4 === 60 || code4 === 62 || code4 === 92) {
      effects.consume(code4);
      return enclosed;
    }
    return enclosed(code4);
  }
  function raw(code4) {
    if (!balance && (code4 === null || code4 === 41 || markdownLineEndingOrSpace(code4))) {
      effects.exit("chunkString");
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok3(code4);
    }
    if (balance < limit && code4 === 40) {
      effects.consume(code4);
      balance++;
      return raw;
    }
    if (code4 === 41) {
      effects.consume(code4);
      balance--;
      return raw;
    }
    if (code4 === null || code4 === 32 || code4 === 40 || asciiControl(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? rawEscape : raw;
  }
  function rawEscape(code4) {
    if (code4 === 40 || code4 === 41 || code4 === 92) {
      effects.consume(code4);
      return raw;
    }
    return raw(code4);
  }
}

// node_modules/micromark-factory-label/index.js
function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
  const self2 = this;
  let size = 0;
  let seen;
  return start2;
  function start2(code4) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code4);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code4) {
    if (size > 999 || code4 === null || code4 === 91 || code4 === 93 && !seen || // To do: remove in the future once we’ve switched from
    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
    // which doesn’t need this.
    // Hidden footnotes hook.
    /* c8 ignore next 3 */
    code4 === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return atBreak;
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return labelInside(code4);
  }
  function labelInside(code4) {
    if (code4 === null || code4 === 91 || code4 === 93 || markdownLineEnding(code4) || size++ > 999) {
      effects.exit("chunkString");
      return atBreak(code4);
    }
    effects.consume(code4);
    if (!seen) seen = !markdownSpace(code4);
    return code4 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code4) {
    if (code4 === 91 || code4 === 92 || code4 === 93) {
      effects.consume(code4);
      size++;
      return labelInside;
    }
    return labelInside(code4);
  }
}

// node_modules/micromark-factory-title/index.js
function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
  let marker;
  return start2;
  function start2(code4) {
    if (code4 === 34 || code4 === 39 || code4 === 40) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      marker = code4 === 40 ? 41 : code4;
      return begin;
    }
    return nok(code4);
  }
  function begin(code4) {
    if (code4 === marker) {
      effects.enter(markerType);
      effects.consume(code4);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    return atBreak(code4);
  }
  function atBreak(code4) {
    if (code4 === marker) {
      effects.exit(stringType);
      return begin(marker);
    }
    if (code4 === null) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return factorySpace(effects, atBreak, "linePrefix");
    }
    effects.enter("chunkString", {
      contentType: "string"
    });
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker || code4 === null || markdownLineEnding(code4)) {
      effects.exit("chunkString");
      return atBreak(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? escape : inside;
  }
  function escape(code4) {
    if (code4 === marker || code4 === 92) {
      effects.consume(code4);
      return inside;
    }
    return inside(code4);
  }
}

// node_modules/micromark-factory-whitespace/index.js
function factoryWhitespace(effects, ok3) {
  let seen;
  return start2;
  function start2(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      seen = true;
      return start2;
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, start2, seen ? "linePrefix" : "lineSuffix")(code4);
    }
    return ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/definition.js
var definition = {
  name: "definition",
  tokenize: tokenizeDefinition
};
var titleBefore = {
  partial: true,
  tokenize: tokenizeTitleBefore
};
function tokenizeDefinition(effects, ok3, nok) {
  const self2 = this;
  let identifier;
  return start2;
  function start2(code4) {
    effects.enter("definition");
    return before(code4);
  }
  function before(code4) {
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionLabel",
      "definitionLabelMarker",
      "definitionLabelString"
    )(code4);
  }
  function labelAfter(code4) {
    identifier = normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1));
    if (code4 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code4);
      effects.exit("definitionMarker");
      return markerAfter;
    }
    return nok(code4);
  }
  function markerAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, destinationBefore)(code4) : destinationBefore(code4);
  }
  function destinationBefore(code4) {
    return factoryDestination(
      effects,
      destinationAfter,
      // Note: we don’t need to reset the way `markdown-rs` does.
      nok,
      "definitionDestination",
      "definitionDestinationLiteral",
      "definitionDestinationLiteralMarker",
      "definitionDestinationRaw",
      "definitionDestinationString"
    )(code4);
  }
  function destinationAfter(code4) {
    return effects.attempt(titleBefore, after, after)(code4);
  }
  function after(code4) {
    return markdownSpace(code4) ? factorySpace(effects, afterWhitespace, "whitespace")(code4) : afterWhitespace(code4);
  }
  function afterWhitespace(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("definition");
      self2.parser.defined.push(identifier);
      return ok3(code4);
    }
    return nok(code4);
  }
}
function tokenizeTitleBefore(effects, ok3, nok) {
  return titleBefore2;
  function titleBefore2(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, beforeMarker)(code4) : nok(code4);
  }
  function beforeMarker(code4) {
    return factoryTitle(effects, titleAfter, nok, "definitionTitle", "definitionTitleMarker", "definitionTitleString")(code4);
  }
  function titleAfter(code4) {
    return markdownSpace(code4) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code4) : titleAfterOptionalWhitespace(code4);
  }
  function titleAfterOptionalWhitespace(code4) {
    return code4 === null || markdownLineEnding(code4) ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("hardBreakEscape");
    effects.consume(code4);
    return after;
  }
  function after(code4) {
    if (markdownLineEnding(code4)) {
      effects.exit("hardBreakEscape");
      return ok3(code4);
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  resolve: resolveHeadingAtx,
  tokenize: tokenizeHeadingAtx
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content3;
  let text8;
  if (events[contentStart][1].type === "whitespace") {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content3 = {
      type: "atxHeadingText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text8 = {
      type: "chunkText",
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: "text"
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [["enter", content3, context], ["enter", text8, context], ["exit", text8, context], ["exit", content3, context]]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok3, nok) {
  let size = 0;
  return start2;
  function start2(code4) {
    effects.enter("atxHeading");
    return before(code4);
  }
  function before(code4) {
    effects.enter("atxHeadingSequence");
    return sequenceOpen(code4);
  }
  function sequenceOpen(code4) {
    if (code4 === 35 && size++ < 6) {
      effects.consume(code4);
      return sequenceOpen;
    }
    if (code4 === null || markdownLineEndingOrSpace(code4)) {
      effects.exit("atxHeadingSequence");
      return atBreak(code4);
    }
    return nok(code4);
  }
  function atBreak(code4) {
    if (code4 === 35) {
      effects.enter("atxHeadingSequence");
      return sequenceFurther(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("atxHeading");
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, atBreak, "whitespace")(code4);
    }
    effects.enter("atxHeadingText");
    return data(code4);
  }
  function sequenceFurther(code4) {
    if (code4 === 35) {
      effects.consume(code4);
      return sequenceFurther;
    }
    effects.exit("atxHeadingSequence");
    return atBreak(code4);
  }
  function data(code4) {
    if (code4 === null || code4 === 35 || markdownLineEndingOrSpace(code4)) {
      effects.exit("atxHeadingText");
      return atBreak(code4);
    }
    effects.consume(code4);
    return data;
  }
}

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "search",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var htmlRawNames = ["pre", "script", "style", "textarea"];

// node_modules/micromark-core-commonmark/lib/html-flow.js
var htmlFlow = {
  concrete: true,
  name: "htmlFlow",
  resolveTo: resolveToHtmlFlow,
  tokenize: tokenizeHtmlFlow
};
var blankLineBefore = {
  partial: true,
  tokenize: tokenizeBlankLineBefore
};
var nonLazyContinuationStart = {
  partial: true,
  tokenize: tokenizeNonLazyContinuationStart
};
function resolveToHtmlFlow(events) {
  let index3 = events.length;
  while (index3--) {
    if (events[index3][0] === "enter" && events[index3][1].type === "htmlFlow") {
      break;
    }
  }
  if (index3 > 1 && events[index3 - 2][1].type === "linePrefix") {
    events[index3][1].start = events[index3 - 2][1].start;
    events[index3 + 1][1].start = events[index3 - 2][1].start;
    events.splice(index3 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let closingTag;
  let buffer;
  let index3;
  let markerB;
  return start2;
  function start2(code4) {
    return before(code4);
  }
  function before(code4) {
    effects.enter("htmlFlow");
    effects.enter("htmlFlowData");
    effects.consume(code4);
    return open;
  }
  function open(code4) {
    if (code4 === 33) {
      effects.consume(code4);
      return declarationOpen;
    }
    if (code4 === 47) {
      effects.consume(code4);
      closingTag = true;
      return tagCloseStart;
    }
    if (code4 === 63) {
      effects.consume(code4);
      marker = 3;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      buffer = String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function declarationOpen(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      marker = 2;
      return commentOpenInside;
    }
    if (code4 === 91) {
      effects.consume(code4);
      marker = 5;
      index3 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      marker = 4;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code4);
  }
  function commentOpenInside(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code4);
  }
  function cdataOpenInside(code4) {
    const value = "CDATA[";
    if (code4 === value.charCodeAt(index3++)) {
      effects.consume(code4);
      if (index3 === value.length) {
        return self2.interrupt ? ok3 : continuation;
      }
      return cdataOpenInside;
    }
    return nok(code4);
  }
  function tagCloseStart(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      buffer = String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function tagName(code4) {
    if (code4 === null || code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      const slash = code4 === 47;
      const name2 = buffer.toLowerCase();
      if (!slash && !closingTag && htmlRawNames.includes(name2)) {
        marker = 1;
        return self2.interrupt ? ok3(code4) : continuation(code4);
      }
      if (htmlBlockNames.includes(buffer.toLowerCase())) {
        marker = 6;
        if (slash) {
          effects.consume(code4);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok3(code4) : continuation(code4);
      }
      marker = 7;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code4) : closingTag ? completeClosingTagAfter(code4) : completeAttributeNameBefore(code4);
    }
    if (code4 === 45 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return tagName;
    }
    return nok(code4);
  }
  function basicSelfClosing(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      return self2.interrupt ? ok3 : continuation;
    }
    return nok(code4);
  }
  function completeClosingTagAfter(code4) {
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeClosingTagAfter;
    }
    return completeEnd(code4);
  }
  function completeAttributeNameBefore(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      return completeEnd;
    }
    if (code4 === 58 || code4 === 95 || asciiAlpha(code4)) {
      effects.consume(code4);
      return completeAttributeName;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeNameBefore;
    }
    return completeEnd(code4);
  }
  function completeAttributeName(code4) {
    if (code4 === 45 || code4 === 46 || code4 === 58 || code4 === 95 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code4);
  }
  function completeAttributeNameAfter(code4) {
    if (code4 === 61) {
      effects.consume(code4);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code4);
  }
  function completeAttributeValueBefore(code4) {
    if (code4 === null || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96) {
      return nok(code4);
    }
    if (code4 === 34 || code4 === 39) {
      effects.consume(code4);
      markerB = code4;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAttributeValueBefore;
    }
    return completeAttributeValueUnquoted(code4);
  }
  function completeAttributeValueQuoted(code4) {
    if (code4 === markerB) {
      effects.consume(code4);
      markerB = null;
      return completeAttributeValueQuotedAfter;
    }
    if (code4 === null || markdownLineEnding(code4)) {
      return nok(code4);
    }
    effects.consume(code4);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code4) {
    if (code4 === null || code4 === 34 || code4 === 39 || code4 === 47 || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96 || markdownLineEndingOrSpace(code4)) {
      return completeAttributeNameAfter(code4);
    }
    effects.consume(code4);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code4) {
    if (code4 === 47 || code4 === 62 || markdownSpace(code4)) {
      return completeAttributeNameBefore(code4);
    }
    return nok(code4);
  }
  function completeEnd(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      return completeAfter;
    }
    return nok(code4);
  }
  function completeAfter(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return continuation(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return completeAfter;
    }
    return nok(code4);
  }
  function continuation(code4) {
    if (code4 === 45 && marker === 2) {
      effects.consume(code4);
      return continuationCommentInside;
    }
    if (code4 === 60 && marker === 1) {
      effects.consume(code4);
      return continuationRawTagOpen;
    }
    if (code4 === 62 && marker === 4) {
      effects.consume(code4);
      return continuationClose;
    }
    if (code4 === 63 && marker === 3) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    if (code4 === 93 && marker === 5) {
      effects.consume(code4);
      return continuationCdataInside;
    }
    if (markdownLineEnding(code4) && (marker === 6 || marker === 7)) {
      effects.exit("htmlFlowData");
      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("htmlFlowData");
      return continuationStart(code4);
    }
    effects.consume(code4);
    return continuation;
  }
  function continuationStart(code4) {
    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code4);
  }
  function continuationStartNonLazy(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return continuationBefore;
  }
  function continuationBefore(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      return continuationStart(code4);
    }
    effects.enter("htmlFlowData");
    return continuation(code4);
  }
  function continuationCommentInside(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationRawTagOpen(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      buffer = "";
      return continuationRawEndTag;
    }
    return continuation(code4);
  }
  function continuationRawEndTag(code4) {
    if (code4 === 62) {
      const name2 = buffer.toLowerCase();
      if (htmlRawNames.includes(name2)) {
        effects.consume(code4);
        return continuationClose;
      }
      return continuation(code4);
    }
    if (asciiAlpha(code4) && buffer.length < 8) {
      effects.consume(code4);
      buffer += String.fromCharCode(code4);
      return continuationRawEndTag;
    }
    return continuation(code4);
  }
  function continuationCdataInside(code4) {
    if (code4 === 93) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationDeclarationInside(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      return continuationClose;
    }
    if (code4 === 45 && marker === 2) {
      effects.consume(code4);
      return continuationDeclarationInside;
    }
    return continuation(code4);
  }
  function continuationClose(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("htmlFlowData");
      return continuationAfter(code4);
    }
    effects.consume(code4);
    return continuationClose;
  }
  function continuationAfter(code4) {
    effects.exit("htmlFlow");
    return ok3(code4);
  }
}
function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    if (markdownLineEnding(code4)) {
      effects.enter("lineEnding");
      effects.consume(code4);
      effects.exit("lineEnding");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    return self2.parser.lazy[self2.now().line] ? nok(code4) : ok3(code4);
  }
}
function tokenizeBlankLineBefore(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return effects.attempt(blankLine, ok3, nok);
  }
}

// node_modules/micromark-core-commonmark/lib/html-text.js
var htmlText = {
  name: "htmlText",
  tokenize: tokenizeHtmlText
};
function tokenizeHtmlText(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let index3;
  let returnState;
  return start2;
  function start2(code4) {
    effects.enter("htmlText");
    effects.enter("htmlTextData");
    effects.consume(code4);
    return open;
  }
  function open(code4) {
    if (code4 === 33) {
      effects.consume(code4);
      return declarationOpen;
    }
    if (code4 === 47) {
      effects.consume(code4);
      return tagCloseStart;
    }
    if (code4 === 63) {
      effects.consume(code4);
      return instruction;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return tagOpen;
    }
    return nok(code4);
  }
  function declarationOpen(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return commentOpenInside;
    }
    if (code4 === 91) {
      effects.consume(code4);
      index3 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return declaration;
    }
    return nok(code4);
  }
  function commentOpenInside(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return commentEnd;
    }
    return nok(code4);
  }
  function comment(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 45) {
      effects.consume(code4);
      return commentClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = comment;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return comment;
  }
  function commentClose(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return commentEnd;
    }
    return comment(code4);
  }
  function commentEnd(code4) {
    return code4 === 62 ? end(code4) : code4 === 45 ? commentClose(code4) : comment(code4);
  }
  function cdataOpenInside(code4) {
    const value = "CDATA[";
    if (code4 === value.charCodeAt(index3++)) {
      effects.consume(code4);
      return index3 === value.length ? cdata : cdataOpenInside;
    }
    return nok(code4);
  }
  function cdata(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.consume(code4);
      return cdataClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = cdata;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return cdata;
  }
  function cdataClose(code4) {
    if (code4 === 93) {
      effects.consume(code4);
      return cdataEnd;
    }
    return cdata(code4);
  }
  function cdataEnd(code4) {
    if (code4 === 62) {
      return end(code4);
    }
    if (code4 === 93) {
      effects.consume(code4);
      return cdataEnd;
    }
    return cdata(code4);
  }
  function declaration(code4) {
    if (code4 === null || code4 === 62) {
      return end(code4);
    }
    if (markdownLineEnding(code4)) {
      returnState = declaration;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return declaration;
  }
  function instruction(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (code4 === 63) {
      effects.consume(code4);
      return instructionClose;
    }
    if (markdownLineEnding(code4)) {
      returnState = instruction;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return instruction;
  }
  function instructionClose(code4) {
    return code4 === 62 ? end(code4) : instruction(code4);
  }
  function tagCloseStart(code4) {
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return tagClose;
    }
    return nok(code4);
  }
  function tagClose(code4) {
    if (code4 === 45 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagClose;
    }
    return tagCloseBetween(code4);
  }
  function tagCloseBetween(code4) {
    if (markdownLineEnding(code4)) {
      returnState = tagCloseBetween;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagCloseBetween;
    }
    return end(code4);
  }
  function tagOpen(code4) {
    if (code4 === 45 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagOpen;
    }
    if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    return nok(code4);
  }
  function tagOpenBetween(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      return end;
    }
    if (code4 === 58 || code4 === 95 || asciiAlpha(code4)) {
      effects.consume(code4);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenBetween;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenBetween;
    }
    return end(code4);
  }
  function tagOpenAttributeName(code4) {
    if (code4 === 45 || code4 === 46 || code4 === 58 || code4 === 95 || asciiAlphanumeric(code4)) {
      effects.consume(code4);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code4);
  }
  function tagOpenAttributeNameAfter(code4) {
    if (code4 === 61) {
      effects.consume(code4);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeNameAfter;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code4);
  }
  function tagOpenAttributeValueBefore(code4) {
    if (code4 === null || code4 === 60 || code4 === 61 || code4 === 62 || code4 === 96) {
      return nok(code4);
    }
    if (code4 === 34 || code4 === 39) {
      effects.consume(code4);
      marker = code4;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeValueBefore;
      return lineEndingBefore(code4);
    }
    if (markdownSpace(code4)) {
      effects.consume(code4);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code4);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      marker = void 0;
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code4 === null) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      returnState = tagOpenAttributeValueQuoted;
      return lineEndingBefore(code4);
    }
    effects.consume(code4);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueUnquoted(code4) {
    if (code4 === null || code4 === 34 || code4 === 39 || code4 === 60 || code4 === 61 || code4 === 96) {
      return nok(code4);
    }
    if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    effects.consume(code4);
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuotedAfter(code4) {
    if (code4 === 47 || code4 === 62 || markdownLineEndingOrSpace(code4)) {
      return tagOpenBetween(code4);
    }
    return nok(code4);
  }
  function end(code4) {
    if (code4 === 62) {
      effects.consume(code4);
      effects.exit("htmlTextData");
      effects.exit("htmlText");
      return ok3;
    }
    return nok(code4);
  }
  function lineEndingBefore(code4) {
    effects.exit("htmlTextData");
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return lineEndingAfter;
  }
  function lineEndingAfter(code4) {
    return markdownSpace(code4) ? factorySpace(effects, lineEndingAfterPrefix, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4) : lineEndingAfterPrefix(code4);
  }
  function lineEndingAfterPrefix(code4) {
    effects.enter("htmlTextData");
    return returnState(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/label-end.js
var labelEnd = {
  name: "labelEnd",
  resolveAll: resolveAllLabelEnd,
  resolveTo: resolveToLabelEnd,
  tokenize: tokenizeLabelEnd
};
var resourceConstruct = {
  tokenize: tokenizeResource
};
var referenceFullConstruct = {
  tokenize: tokenizeReferenceFull
};
var referenceCollapsedConstruct = {
  tokenize: tokenizeReferenceCollapsed
};
function resolveAllLabelEnd(events) {
  let index3 = -1;
  const newEvents = [];
  while (++index3 < events.length) {
    const token = events[index3][1];
    newEvents.push(events[index3]);
    if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
      const offset = token.type === "labelImage" ? 4 : 2;
      token.type = "data";
      index3 += offset;
    }
  }
  if (events.length !== newEvents.length) {
    splice(events, 0, events.length, newEvents);
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index3 = events.length;
  let offset = 0;
  let token;
  let open;
  let close;
  let media;
  while (index3--) {
    token = events[index3][1];
    if (open) {
      if (token.type === "link" || token.type === "labelLink" && token._inactive) {
        break;
      }
      if (events[index3][0] === "enter" && token.type === "labelLink") {
        token._inactive = true;
      }
    } else if (close) {
      if (events[index3][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
        open = index3;
        if (token.type !== "labelLink") {
          offset = 2;
          break;
        }
      }
    } else if (token.type === "labelEnd") {
      close = index3;
    }
  }
  const group = {
    type: events[open][1].type === "labelLink" ? "link" : "image",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  const label = {
    type: "label",
    start: {
      ...events[open][1].start
    },
    end: {
      ...events[close][1].end
    }
  };
  const text8 = {
    type: "labelText",
    start: {
      ...events[open + offset + 2][1].end
    },
    end: {
      ...events[close - 2][1].start
    }
  };
  media = [["enter", group, context], ["enter", label, context]];
  media = push(media, events.slice(open + 1, open + offset + 3));
  media = push(media, [["enter", text8, context]]);
  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));
  media = push(media, [["exit", text8, context], events[close - 2], events[close - 1], ["exit", label, context]]);
  media = push(media, events.slice(close + 1));
  media = push(media, [["exit", group, context]]);
  splice(events, open, events.length, media);
  return events;
}
function tokenizeLabelEnd(effects, ok3, nok) {
  const self2 = this;
  let index3 = self2.events.length;
  let labelStart;
  let defined;
  while (index3--) {
    if ((self2.events[index3][1].type === "labelImage" || self2.events[index3][1].type === "labelLink") && !self2.events[index3][1]._balanced) {
      labelStart = self2.events[index3][1];
      break;
    }
  }
  return start2;
  function start2(code4) {
    if (!labelStart) {
      return nok(code4);
    }
    if (labelStart._inactive) {
      return labelEndNok(code4);
    }
    defined = self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize({
      start: labelStart.end,
      end: self2.now()
    })));
    effects.enter("labelEnd");
    effects.enter("labelMarker");
    effects.consume(code4);
    effects.exit("labelMarker");
    effects.exit("labelEnd");
    return after;
  }
  function after(code4) {
    if (code4 === 40) {
      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code4);
    }
    if (code4 === 91) {
      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code4);
    }
    return defined ? labelEndOk(code4) : labelEndNok(code4);
  }
  function referenceNotFull(code4) {
    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code4);
  }
  function labelEndOk(code4) {
    return ok3(code4);
  }
  function labelEndNok(code4) {
    labelStart._balanced = true;
    return nok(code4);
  }
}
function tokenizeResource(effects, ok3, nok) {
  return resourceStart;
  function resourceStart(code4) {
    effects.enter("resource");
    effects.enter("resourceMarker");
    effects.consume(code4);
    effects.exit("resourceMarker");
    return resourceBefore;
  }
  function resourceBefore(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceOpen)(code4) : resourceOpen(code4);
  }
  function resourceOpen(code4) {
    if (code4 === 41) {
      return resourceEnd(code4);
    }
    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, "resourceDestination", "resourceDestinationLiteral", "resourceDestinationLiteralMarker", "resourceDestinationRaw", "resourceDestinationString", 32)(code4);
  }
  function resourceDestinationAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceBetween)(code4) : resourceEnd(code4);
  }
  function resourceDestinationMissing(code4) {
    return nok(code4);
  }
  function resourceBetween(code4) {
    if (code4 === 34 || code4 === 39 || code4 === 40) {
      return factoryTitle(effects, resourceTitleAfter, nok, "resourceTitle", "resourceTitleMarker", "resourceTitleString")(code4);
    }
    return resourceEnd(code4);
  }
  function resourceTitleAfter(code4) {
    return markdownLineEndingOrSpace(code4) ? factoryWhitespace(effects, resourceEnd)(code4) : resourceEnd(code4);
  }
  function resourceEnd(code4) {
    if (code4 === 41) {
      effects.enter("resourceMarker");
      effects.consume(code4);
      effects.exit("resourceMarker");
      effects.exit("resource");
      return ok3;
    }
    return nok(code4);
  }
}
function tokenizeReferenceFull(effects, ok3, nok) {
  const self2 = this;
  return referenceFull;
  function referenceFull(code4) {
    return factoryLabel.call(self2, effects, referenceFullAfter, referenceFullMissing, "reference", "referenceMarker", "referenceString")(code4);
  }
  function referenceFullAfter(code4) {
    return self2.parser.defined.includes(normalizeIdentifier(self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1))) ? ok3(code4) : nok(code4);
  }
  function referenceFullMissing(code4) {
    return nok(code4);
  }
}
function tokenizeReferenceCollapsed(effects, ok3, nok) {
  return referenceCollapsedStart;
  function referenceCollapsedStart(code4) {
    effects.enter("reference");
    effects.enter("referenceMarker");
    effects.consume(code4);
    effects.exit("referenceMarker");
    return referenceCollapsedOpen;
  }
  function referenceCollapsedOpen(code4) {
    if (code4 === 93) {
      effects.enter("referenceMarker");
      effects.consume(code4);
      effects.exit("referenceMarker");
      effects.exit("reference");
      return ok3;
    }
    return nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartImage
};
function tokenizeLabelStartImage(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    effects.enter("labelImage");
    effects.enter("labelImageMarker");
    effects.consume(code4);
    effects.exit("labelImageMarker");
    return open;
  }
  function open(code4) {
    if (code4 === 91) {
      effects.enter("labelMarker");
      effects.consume(code4);
      effects.exit("labelMarker");
      effects.exit("labelImage");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    return code4 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  resolveAll: labelEnd.resolveAll,
  tokenize: tokenizeLabelStartLink
};
function tokenizeLabelStartLink(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code4) {
    effects.enter("labelLink");
    effects.enter("labelMarker");
    effects.consume(code4);
    effects.exit("labelMarker");
    effects.exit("labelLink");
    return after;
  }
  function after(code4) {
    return code4 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/line-ending.js
var lineEnding = {
  name: "lineEnding",
  tokenize: tokenizeLineEnding
};
function tokenizeLineEnding(effects, ok3) {
  return start2;
  function start2(code4) {
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    return factorySpace(effects, ok3, "linePrefix");
  }
}

// node_modules/micromark-core-commonmark/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok3, nok) {
  let size = 0;
  let marker;
  return start2;
  function start2(code4) {
    effects.enter("thematicBreak");
    return before(code4);
  }
  function before(code4) {
    marker = code4;
    return atBreak(code4);
  }
  function atBreak(code4) {
    if (code4 === marker) {
      effects.enter("thematicBreakSequence");
      return sequence(code4);
    }
    if (size >= 3 && (code4 === null || markdownLineEnding(code4))) {
      effects.exit("thematicBreak");
      return ok3(code4);
    }
    return nok(code4);
  }
  function sequence(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      size++;
      return sequence;
    }
    effects.exit("thematicBreakSequence");
    return markdownSpace(code4) ? factorySpace(effects, atBreak, "whitespace")(code4) : atBreak(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/list.js
var list = {
  continuation: {
    tokenize: tokenizeListContinuation
  },
  exit: tokenizeListEnd,
  name: "list",
  tokenize: tokenizeListStart
};
var listItemPrefixWhitespaceConstruct = {
  partial: true,
  tokenize: tokenizeListItemPrefixWhitespace
};
var indentConstruct = {
  partial: true,
  tokenize: tokenizeIndent
};
function tokenizeListStart(effects, ok3, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size = 0;
  return start2;
  function start2(code4) {
    const kind = self2.containerState.type || (code4 === 42 || code4 === 43 || code4 === 45 ? "listUnordered" : "listOrdered");
    if (kind === "listUnordered" ? !self2.containerState.marker || code4 === self2.containerState.marker : asciiDigit(code4)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, {
          _container: true
        });
      }
      if (kind === "listUnordered") {
        effects.enter("listItemPrefix");
        return code4 === 42 || code4 === 45 ? effects.check(thematicBreak, nok, atMarker)(code4) : atMarker(code4);
      }
      if (!self2.interrupt || code4 === 49) {
        effects.enter("listItemPrefix");
        effects.enter("listItemValue");
        return inside(code4);
      }
    }
    return nok(code4);
  }
  function inside(code4) {
    if (asciiDigit(code4) && ++size < 10) {
      effects.consume(code4);
      return inside;
    }
    if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code4 === self2.containerState.marker : code4 === 41 || code4 === 46)) {
      effects.exit("listItemValue");
      return atMarker(code4);
    }
    return nok(code4);
  }
  function atMarker(code4) {
    effects.enter("listItemMarker");
    effects.consume(code4);
    effects.exit("listItemMarker");
    self2.containerState.marker = self2.containerState.marker || code4;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix)
    );
  }
  function onBlank(code4) {
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code4);
  }
  function otherPrefix(code4) {
    if (markdownSpace(code4)) {
      effects.enter("listItemPrefixWhitespace");
      effects.consume(code4);
      effects.exit("listItemPrefixWhitespace");
      return endOfPrefix;
    }
    return nok(code4);
  }
  function endOfPrefix(code4) {
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
    return ok3(code4);
  }
}
function tokenizeListContinuation(effects, ok3, nok) {
  const self2 = this;
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code4) {
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(effects, ok3, "listItemIndent", self2.containerState.size + 1)(code4);
  }
  function notBlank(code4) {
    if (self2.containerState.furtherBlankLines || !markdownSpace(code4)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code4);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code4);
  }
  function notInCurrentItem(code4) {
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    return factorySpace(effects, effects.attempt(list, ok3, nok), "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4);
  }
}
function tokenizeIndent(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "listItemIndent", self2.containerState.size + 1);
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok3(code4) : nok(code4);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "listItemPrefixWhitespace", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1);
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code4) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-core-commonmark/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  resolveTo: resolveToSetextUnderline,
  tokenize: tokenizeSetextUnderline
};
function resolveToSetextUnderline(events, context) {
  let index3 = events.length;
  let content3;
  let text8;
  let definition3;
  while (index3--) {
    if (events[index3][0] === "enter") {
      if (events[index3][1].type === "content") {
        content3 = index3;
        break;
      }
      if (events[index3][1].type === "paragraph") {
        text8 = index3;
      }
    } else {
      if (events[index3][1].type === "content") {
        events.splice(index3, 1);
      }
      if (!definition3 && events[index3][1].type === "definition") {
        definition3 = index3;
      }
    }
  }
  const heading3 = {
    type: "setextHeading",
    start: {
      ...events[text8][1].start
    },
    end: {
      ...events[events.length - 1][1].end
    }
  };
  events[text8][1].type = "setextHeadingText";
  if (definition3) {
    events.splice(text8, 0, ["enter", heading3, context]);
    events.splice(definition3 + 1, 0, ["exit", events[content3][1], context]);
    events[content3][1].end = {
      ...events[definition3][1].end
    };
  } else {
    events[content3][1] = heading3;
  }
  events.push(["exit", heading3, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok3, nok) {
  const self2 = this;
  let marker;
  return start2;
  function start2(code4) {
    let index3 = self2.events.length;
    let paragraph3;
    while (index3--) {
      if (self2.events[index3][1].type !== "lineEnding" && self2.events[index3][1].type !== "linePrefix" && self2.events[index3][1].type !== "content") {
        paragraph3 = self2.events[index3][1].type === "paragraph";
        break;
      }
    }
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph3)) {
      effects.enter("setextHeadingLine");
      marker = code4;
      return before(code4);
    }
    return nok(code4);
  }
  function before(code4) {
    effects.enter("setextHeadingLineSequence");
    return inside(code4);
  }
  function inside(code4) {
    if (code4 === marker) {
      effects.consume(code4);
      return inside;
    }
    effects.exit("setextHeadingLineSequence");
    return markdownSpace(code4) ? factorySpace(effects, after, "lineSuffix")(code4) : after(code4);
  }
  function after(code4) {
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("setextHeadingLine");
      return ok3(code4);
    }
    return nok(code4);
  }
}

// node_modules/micromark/lib/initialize/flow.js
var flow = {
  tokenize: initializeFlow
};
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content2, afterConstruct)), "linePrefix"))
  );
  return initial;
  function atBlankEnding(code4) {
    if (code4 === null) {
      effects.consume(code4);
      return;
    }
    effects.enter("lineEndingBlank");
    effects.consume(code4);
    effects.exit("lineEndingBlank");
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code4) {
    if (code4 === null) {
      effects.consume(code4);
      return;
    }
    effects.enter("lineEnding");
    effects.consume(code4);
    effects.exit("lineEnding");
    self2.currentConstruct = void 0;
    return initial;
  }
}

// node_modules/micromark/lib/initialize/text.js
var resolver = {
  resolveAll: createResolver()
};
var string = initializeFactory("string");
var text2 = initializeFactory("text");
function initializeFactory(field) {
  return {
    resolveAll: createResolver(field === "text" ? resolveAllLineSuffixes : void 0),
    tokenize: initializeText
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text8 = effects.attempt(constructs2, start2, notText);
    return start2;
    function start2(code4) {
      return atBreak(code4) ? text8(code4) : notText(code4);
    }
    function notText(code4) {
      if (code4 === null) {
        effects.consume(code4);
        return;
      }
      effects.enter("data");
      effects.consume(code4);
      return data;
    }
    function data(code4) {
      if (atBreak(code4)) {
        effects.exit("data");
        return text8(code4);
      }
      effects.consume(code4);
      return data;
    }
    function atBreak(code4) {
      if (code4 === null) {
        return true;
      }
      const list4 = constructs2[code4];
      let index3 = -1;
      if (list4) {
        while (++index3 < list4.length) {
          const item2 = list4[index3];
          if (!item2.previous || item2.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index3 = -1;
    let enter;
    while (++index3 <= events.length) {
      if (enter === void 0) {
        if (events[index3] && events[index3][1].type === "data") {
          enter = index3;
          index3++;
        }
      } else if (!events[index3] || events[index3][1].type !== "data") {
        if (index3 !== enter + 2) {
          events[enter][1].end = events[index3 - 1][1].end;
          events.splice(enter + 2, index3 - enter - 2);
          index3 = enter + 2;
        }
        enter = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index3 = chunks.length;
      let bufferIndex = -1;
      let size = 0;
      let tabs;
      while (index3--) {
        const chunk = chunks[index3];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }
          if (bufferIndex) break;
          bufferIndex = -1;
        } else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) {
        } else {
          index3++;
          break;
        }
      }
      if (size) {
        const token = {
          type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
          start: {
            _bufferIndex: index3 ? bufferIndex : data.start._bufferIndex + bufferIndex,
            _index: data.start._index + index3,
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size
          },
          end: {
            ...data.end
          }
        };
        data.end = {
          ...token.start
        };
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token);
        } else {
          events.splice(eventIndex, 0, ["enter", token, context], ["exit", token, context]);
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

// node_modules/micromark/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text3
});
var document3 = {
  [42]: list,
  [43]: list,
  [45]: list,
  [48]: list,
  [49]: list,
  [50]: list,
  [51]: list,
  [52]: list,
  [53]: list,
  [54]: list,
  [55]: list,
  [56]: list,
  [57]: list,
  [62]: blockQuote
};
var contentInitial = {
  [91]: definition
};
var flowInitial = {
  [-2]: codeIndented,
  [-1]: codeIndented,
  [32]: codeIndented
};
var flow2 = {
  [35]: headingAtx,
  [42]: thematicBreak,
  [45]: [setextUnderline, thematicBreak],
  [60]: htmlFlow,
  [61]: setextUnderline,
  [95]: thematicBreak,
  [96]: codeFenced,
  [126]: codeFenced
};
var string2 = {
  [38]: characterReference,
  [92]: characterEscape
};
var text3 = {
  [-5]: lineEnding,
  [-4]: lineEnding,
  [-3]: lineEnding,
  [33]: labelStartImage,
  [38]: characterReference,
  [42]: attention,
  [60]: [autolink, htmlText],
  [91]: labelStartLink,
  [92]: [hardBreakEscape, characterEscape],
  [93]: labelEnd,
  [95]: attention,
  [96]: codeText
};
var insideSpan = {
  null: [attention, resolver]
};
var attentionMarkers = {
  null: [42, 95]
};
var disable = {
  null: []
};

// node_modules/micromark/lib/create-tokenizer.js
function createTokenizer(parser, initialize, from) {
  let point5 = {
    _bufferIndex: -1,
    _index: 0,
    line: from && from.line || 1,
    column: from && from.column || 1,
    offset: from && from.offset || 0
  };
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    consume,
    enter,
    exit: exit3,
    interrupt: constructFactory(onsuccessfulcheck, {
      interrupt: true
    })
  };
  const context = {
    code: null,
    containerState: {},
    defineSkip,
    events: [],
    now,
    parser,
    previous: null,
    sliceSerialize,
    sliceStream,
    write
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write(slice) {
    chunks = push(chunks, slice);
    main();
    if (chunks[chunks.length - 1] !== null) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token, expandTabs) {
    return serializeChunks(sliceStream(token), expandTabs);
  }
  function sliceStream(token) {
    return sliceChunks(chunks, token);
  }
  function now() {
    const {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    } = point5;
    return {
      _bufferIndex,
      _index,
      line,
      column,
      offset
    };
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  }
  function main() {
    let chunkIndex;
    while (point5._index < chunks.length) {
      const chunk = chunks[point5._index];
      if (typeof chunk === "string") {
        chunkIndex = point5._index;
        if (point5._bufferIndex < 0) {
          point5._bufferIndex = 0;
        }
        while (point5._index === chunkIndex && point5._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point5._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code4) {
    consumed = void 0;
    expectedCode = code4;
    state = state(code4);
  }
  function consume(code4) {
    if (markdownLineEnding(code4)) {
      point5.line++;
      point5.column = 1;
      point5.offset += code4 === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code4 !== -1) {
      point5.column++;
      point5.offset++;
    }
    if (point5._bufferIndex < 0) {
      point5._index++;
    } else {
      point5._bufferIndex++;
      if (point5._bufferIndex === // Points w/ non-negative `_bufferIndex` reference
      // strings.
      /** @type {string} */
      chunks[point5._index].length) {
        point5._bufferIndex = -1;
        point5._index++;
      }
    }
    context.previous = code4;
    consumed = true;
  }
  function enter(type, fields) {
    const token = fields || {};
    token.type = type;
    token.start = now();
    context.events.push(["enter", token, context]);
    stack.push(token);
    return token;
  }
  function exit3(type) {
    const token = stack.pop();
    token.end = now();
    context.events.push(["exit", token, context]);
    return token;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? (
        /* c8 ignore next 1 */
        handleListOfConstructs(constructs2)
      ) : "tokenize" in constructs2 ? (
        // Looks like a construct.
        handleListOfConstructs([
          /** @type {Construct} */
          constructs2
        ])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map3) {
        return start2;
        function start2(code4) {
          const left = code4 !== null && map3[code4];
          const all2 = code4 !== null && map3.null;
          const list4 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(left) ? left : left ? [left] : [],
            ...Array.isArray(all2) ? all2 : all2 ? [all2] : []
          ];
          return handleListOfConstructs(list4)(code4);
        }
      }
      function handleListOfConstructs(list4) {
        listOfConstructs = list4;
        constructIndex = 0;
        if (list4.length === 0) {
          return bogusState;
        }
        return handleConstruct(list4[constructIndex]);
      }
      function handleConstruct(construct) {
        return start2;
        function start2(code4) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code4);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok3,
            nok
          )(code4);
        }
      }
      function ok3(code4) {
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code4) {
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from2) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(context.events, from2, context.events.length - from2, construct.resolve(context.events.slice(from2), context));
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return {
      from: startEventsIndex,
      restore
    };
    function restore() {
      point5 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }
  function accountForPotentialSkip() {
    if (point5.line in columnStart && point5.column < 2) {
      point5.column = columnStart[point5.line];
      point5.offset += columnStart[point5.line] - 1;
    }
  }
}
function sliceChunks(chunks, token) {
  const startIndex = token.start._index;
  const startBufferIndex = token.start._bufferIndex;
  const endIndex = token.end._index;
  const endBufferIndex = token.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      const head = view[0];
      if (typeof head === "string") {
        view[0] = head.slice(startBufferIndex);
      } else {
        view.shift();
      }
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index3 = -1;
  const result = [];
  let atTab;
  while (++index3 < chunks.length) {
    const chunk = chunks[index3];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else switch (chunk) {
      case -5: {
        value = "\r";
        break;
      }
      case -4: {
        value = "\n";
        break;
      }
      case -3: {
        value = "\r\n";
        break;
      }
      case -2: {
        value = expandTabs ? " " : "	";
        break;
      }
      case -1: {
        if (!expandTabs && atTab) continue;
        value = " ";
        break;
      }
      default: {
        value = String.fromCharCode(chunk);
      }
    }
    atTab = chunk === -2;
    result.push(value);
  }
  return result.join("");
}

// node_modules/micromark/lib/parse.js
function parse(options) {
  const settings = options || {};
  const constructs2 = (
    /** @type {FullNormalizedExtension} */
    combineExtensions([constructs_exports, ...settings.extensions || []])
  );
  const parser = {
    constructs: constructs2,
    content: create2(content),
    defined: [],
    document: create2(document2),
    flow: create2(flow),
    lazy: {},
    string: create2(string),
    text: create2(text2)
  };
  return parser;
  function create2(initial) {
    return creator;
    function creator(from) {
      return createTokenizer(parser, initial, from);
    }
  }
}

// node_modules/micromark/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}

// node_modules/micromark/lib/preprocess.js
var search = /[\0\t\n\r]/g;
function preprocess() {
  let column = 1;
  let buffer = "";
  let start2 = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end) {
    const chunks = [];
    let match;
    let next;
    let startPosition;
    let endPosition;
    let code4;
    value = buffer + (typeof value === "string" ? value.toString() : new TextDecoder(encoding || void 0).decode(value));
    startPosition = 0;
    buffer = "";
    if (start2) {
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }
      start2 = void 0;
    }
    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match && match.index !== void 0 ? match.index : value.length;
      code4 = value.charCodeAt(endPosition);
      if (!match) {
        buffer = value.slice(startPosition);
        break;
      }
      if (code4 === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }
        switch (code4) {
          case 0: {
            chunks.push(65533);
            column++;
            break;
          }
          case 9: {
            next = Math.ceil(column / 4) * 4;
            chunks.push(-2);
            while (column++ < next) chunks.push(-1);
            break;
          }
          case 10: {
            chunks.push(-4);
            column = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }
    return chunks;
  }
}

// node_modules/micromark-util-decode-string/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($0, $1, $2) {
  if ($1) {
    return $1;
  }
  const head = $2.charCodeAt(0);
  if (head === 35) {
    const head2 = $2.charCodeAt(1);
    const hex = head2 === 120 || head2 === 88;
    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
  }
  return decodeNamedCharacterReference($2) || $0;
}

// node_modules/mdast-util-from-markdown/node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition2(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position3(value.position);
  }
  if ("start" in value || "end" in value) {
    return position3(value);
  }
  if ("line" in value || "column" in value) {
    return point3(value);
  }
  return "";
}
function point3(point5) {
  return index2(point5 && point5.line) + ":" + index2(point5 && point5.column);
}
function position3(pos) {
  return point3(pos && pos.start) + "-" + point3(pos && pos.end);
}
function index2(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/mdast-util-from-markdown/lib/index.js
var own3 = {}.hasOwnProperty;
function fromMarkdown(value, encoding, options) {
  if (typeof encoding !== "string") {
    options = encoding;
    encoding = void 0;
  }
  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));
}
function compiler(options) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link3),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading3),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer,
      codeFencedFenceMeta: buffer,
      codeIndented: opener(codeFlow, buffer),
      codeText: opener(codeText2, buffer),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition3),
      definitionDestinationString: buffer,
      definitionLabelString: buffer,
      definitionTitleString: buffer,
      emphasis: opener(emphasis3),
      hardBreakEscape: opener(hardBreak3),
      hardBreakTrailing: opener(hardBreak3),
      htmlFlow: opener(html5, buffer),
      htmlFlowData: onenterdata,
      htmlText: opener(html5, buffer),
      htmlTextData: onenterdata,
      image: opener(image4),
      label: buffer,
      link: opener(link3),
      listItem: opener(listItem3),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list4, onenterlistordered),
      listUnordered: opener(list4),
      paragraph: opener(paragraph3),
      reference: onenterreference,
      referenceString: buffer,
      resourceDestinationString: buffer,
      resourceTitleString: buffer,
      setextHeading: opener(heading3),
      strong: opener(strong3),
      thematicBreak: opener(thematicBreak4)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      characterReference: onexitcharacterreference,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options || {}).mdastExtensions || []);
  const data = {};
  return compile;
  function compile(events) {
    let tree = {
      type: "root",
      children: []
    };
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter,
      exit: exit3,
      buffer,
      resume,
      data
    };
    const listStack = [];
    let index3 = -1;
    while (++index3 < events.length) {
      if (events[index3][1].type === "listOrdered" || events[index3][1].type === "listUnordered") {
        if (events[index3][0] === "enter") {
          listStack.push(index3);
        } else {
          const tail = listStack.pop();
          index3 = prepareList(events, tail, index3);
        }
      }
    }
    index3 = -1;
    while (++index3 < events.length) {
      const handler = config[events[index3][0]];
      if (own3.call(handler, events[index3][1].type)) {
        handler[events[index3][1].type].call(Object.assign({
          sliceSerialize: events[index3][2].sliceSerialize
        }, context), events[index3][1]);
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point4(events.length > 0 ? events[0][1].start : {
        line: 1,
        column: 1,
        offset: 0
      }),
      end: point4(events.length > 0 ? events[events.length - 2][1].end : {
        line: 1,
        column: 1,
        offset: 0
      })
    };
    index3 = -1;
    while (++index3 < config.transforms.length) {
      tree = config.transforms[index3](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start2, length) {
    let index3 = start2 - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem4;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index3 <= length) {
      const event = events[index3];
      switch (event[1].type) {
        case "listUnordered":
        case "listOrdered":
        case "blockQuote": {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
          break;
        }
        case "lineEndingBlank": {
          if (event[0] === "enter") {
            if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index3;
            }
            atMarker = void 0;
          }
          break;
        }
        case "linePrefix":
        case "listItemValue":
        case "listItemMarker":
        case "listItemPrefix":
        case "listItemPrefixWhitespace": {
          break;
        }
        default: {
          atMarker = void 0;
        }
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
        if (listItem4) {
          let tailIndex = index3;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
              if (tailEvent[0] === "exit") continue;
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
                listSpread = true;
              }
              tailEvent[1].type = "lineEnding";
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem4._spread = true;
          }
          listItem4.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);
          events.splice(lineIndex || index3, 0, ["exit", listItem4, event[2]]);
          index3++;
          length++;
        }
        if (event[1].type === "listItemPrefix") {
          const item2 = {
            type: "listItem",
            _spread: false,
            start: Object.assign({}, event[1].start),
            // @ts-expect-error: we’ll add `end` in a second.
            end: void 0
          };
          listItem4 = item2;
          events.splice(index3, 0, ["enter", item2, event[2]]);
          index3++;
          length++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start2][1]._spread = listSpread;
    return length;
  }
  function opener(create2, and) {
    return open;
    function open(token) {
      enter.call(this, create2(token), token);
      if (and) and.call(this, token);
    }
  }
  function buffer() {
    this.stack.push({
      type: "fragment",
      children: []
    });
  }
  function enter(node2, token, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    const siblings = parent.children;
    siblings.push(node2);
    this.stack.push(node2);
    this.tokenStack.push([token, errorHandler || void 0]);
    node2.position = {
      start: point4(token.start),
      // @ts-expect-error: `end` will be patched later.
      end: void 0
    };
  }
  function closer(and) {
    return close;
    function close(token) {
      if (and) and.call(this, token);
      exit3.call(this, token);
    }
  }
  function exit3(token, onExitError) {
    const node2 = this.stack.pop();
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error("Cannot close `" + token.type + "` (" + stringifyPosition2({
        start: token.start,
        end: token.end
      }) + "): it\u2019s not open");
    } else if (open[0].type !== token.type) {
      if (onExitError) {
        onExitError.call(this, token, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token, open[0]);
      }
    }
    node2.position.end = point4(token.end);
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    this.data.expectingFirstListItemValue = true;
  }
  function onenterlistitemvalue(token) {
    if (this.data.expectingFirstListItemValue) {
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
      this.data.expectingFirstListItemValue = void 0;
    }
  }
  function onexitcodefencedfenceinfo() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.lang = data2;
  }
  function onexitcodefencedfencemeta() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.meta = data2;
  }
  function onexitcodefencedfence() {
    if (this.data.flowCodeInside) return;
    this.buffer();
    this.data.flowCodeInside = true;
  }
  function onexitcodefenced() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    this.data.flowCodeInside = void 0;
  }
  function onexitcodeindented() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data2;
  }
  function onexitdefinitiondestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data2;
  }
  function onexitatxheadingsequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    if (!node2.depth) {
      const depth = this.sliceSerialize(token).length;
      node2.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    this.data.setextHeadingSlurpLineEnding = true;
  }
  function onexitsetextheadinglinesequence(token) {
    const node2 = this.stack[this.stack.length - 1];
    node2.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
  }
  function onexitsetextheading() {
    this.data.setextHeadingSlurpLineEnding = void 0;
  }
  function onenterdata(token) {
    const node2 = this.stack[this.stack.length - 1];
    const siblings = node2.children;
    let tail = siblings[siblings.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text8();
      tail.position = {
        start: point4(token.start),
        // @ts-expect-error: we’ll add `end` later.
        end: void 0
      };
      siblings.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token) {
    const tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point4(token.end);
  }
  function onexitlineending(token) {
    const context = this.stack[this.stack.length - 1];
    if (this.data.atHardBreak) {
      const tail = context.children[context.children.length - 1];
      tail.position.end = point4(token.end);
      this.data.atHardBreak = void 0;
      return;
    }
    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }
  function onexithardbreak() {
    this.data.atHardBreak = true;
  }
  function onexithtmlflow() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexithtmltext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexitcodetext() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.value = data2;
  }
  function onexitlink() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitimage() {
    const node2 = this.stack[this.stack.length - 1];
    if (this.data.inReference) {
      const referenceType = this.data.referenceType || "shortcut";
      node2.type += "Reference";
      node2.referenceType = referenceType;
      delete node2.url;
      delete node2.title;
    } else {
      delete node2.identifier;
      delete node2.label;
    }
    this.data.referenceType = void 0;
  }
  function onexitlabeltext(token) {
    const string3 = this.sliceSerialize(token);
    const ancestor = this.stack[this.stack.length - 2];
    ancestor.label = decodeString(string3);
    ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    const value = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    this.data.inReference = true;
    if (node2.type === "link") {
      const children = fragment.children;
      node2.children = children;
    } else {
      node2.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.url = data2;
  }
  function onexitresourcetitlestring() {
    const data2 = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.title = data2;
  }
  function onexitresource() {
    this.data.inReference = void 0;
  }
  function onenterreference() {
    this.data.referenceType = "collapsed";
  }
  function onexitreferencestring(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();
    this.data.referenceType = "full";
  }
  function onexitcharacterreferencemarker(token) {
    this.data.characterReferenceType = token.type;
  }
  function onexitcharacterreferencevalue(token) {
    const data2 = this.sliceSerialize(token);
    const type = this.data.characterReferenceType;
    let value;
    if (type) {
      value = decodeNumericCharacterReference(data2, type === "characterReferenceMarkerNumeric" ? 10 : 16);
      this.data.characterReferenceType = void 0;
    } else {
      const result = decodeNamedCharacterReference(data2);
      value = result;
    }
    const tail = this.stack[this.stack.length - 1];
    tail.value += value;
  }
  function onexitcharacterreference(token) {
    const tail = this.stack.pop();
    tail.position.end = point4(token.end);
  }
  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = this.sliceSerialize(token);
  }
  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = "mailto:" + this.sliceSerialize(token);
  }
  function blockQuote2() {
    return {
      type: "blockquote",
      children: []
    };
  }
  function codeFlow() {
    return {
      type: "code",
      lang: null,
      meta: null,
      value: ""
    };
  }
  function codeText2() {
    return {
      type: "inlineCode",
      value: ""
    };
  }
  function definition3() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis3() {
    return {
      type: "emphasis",
      children: []
    };
  }
  function heading3() {
    return {
      type: "heading",
      // @ts-expect-error `depth` will be set later.
      depth: 0,
      children: []
    };
  }
  function hardBreak3() {
    return {
      type: "break"
    };
  }
  function html5() {
    return {
      type: "html",
      value: ""
    };
  }
  function image4() {
    return {
      type: "image",
      title: null,
      url: "",
      alt: null
    };
  }
  function link3() {
    return {
      type: "link",
      title: null,
      url: "",
      children: []
    };
  }
  function list4(token) {
    return {
      type: "list",
      ordered: token.type === "listOrdered",
      start: null,
      spread: token._spread,
      children: []
    };
  }
  function listItem3(token) {
    return {
      type: "listItem",
      spread: token._spread,
      checked: null,
      children: []
    };
  }
  function paragraph3() {
    return {
      type: "paragraph",
      children: []
    };
  }
  function strong3() {
    return {
      type: "strong",
      children: []
    };
  }
  function text8() {
    return {
      type: "text",
      value: ""
    };
  }
  function thematicBreak4() {
    return {
      type: "thematicBreak"
    };
  }
}
function point4(d) {
  return {
    line: d.line,
    column: d.column,
    offset: d.offset
  };
}
function configure(combined, extensions) {
  let index3 = -1;
  while (++index3 < extensions.length) {
    const value = extensions[index3];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key;
  for (key in extension2) {
    if (own3.call(extension2, key)) {
      switch (key) {
        case "canContainEols": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "transforms": {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
          break;
        }
        case "enter":
        case "exit": {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
          break;
        }
      }
    }
  }
}
function defaultOnError(left, right) {
  if (left) {
    throw new Error("Cannot close `" + left.type + "` (" + stringifyPosition2({
      start: left.start,
      end: left.end
    }) + "): a different token (`" + right.type + "`, " + stringifyPosition2({
      start: right.start,
      end: right.end
    }) + ") is open");
  } else {
    throw new Error("Cannot close document, a token (`" + right.type + "`, " + stringifyPosition2({
      start: right.start,
      end: right.end
    }) + ") is still open");
  }
}

// node_modules/remark-parse/lib/index.js
function remarkParse(options) {
  const self2 = this;
  self2.parser = parser;
  function parser(doc) {
    return fromMarkdown(doc, {
      ...self2.data("settings"),
      ...options,
      // Note: these options are not in the readme.
      // The goal is for them to be set by plugins on `data` instead of being
      // passed by users.
      extensions: self2.data("micromarkExtensions") || [],
      mdastExtensions: self2.data("fromMarkdownExtensions") || []
    });
  }
}

// node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote(state, node2) {
  const result = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: state.wrap(state.all(node2), true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(state, node2) {
  const result = { type: "element", tagName: "br", properties: {}, children: [] };
  state.patch(node2, result);
  return [state.applyData(node2, result), { type: "text", value: "\n" }];
}

// node_modules/mdast-util-to-hast/lib/handlers/code.js
function code(state, node2) {
  const value = node2.value ? node2.value + "\n" : "";
  const properties = {};
  if (node2.lang) {
    properties.className = ["language-" + node2.lang];
  }
  let result = {
    type: "element",
    tagName: "code",
    properties,
    children: [{ type: "text", value }]
  };
  if (node2.meta) {
    result.data = { meta: node2.meta };
  }
  state.patch(node2, result);
  result = state.applyData(node2, result);
  result = { type: "element", tagName: "pre", properties: {}, children: [result] };
  state.patch(node2, result);
  return result;
}

// node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(state, node2) {
  const result = {
    type: "element",
    tagName: "del",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(state, node2) {
  const result = {
    type: "element",
    tagName: "em",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference(state, node2) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const id = String(node2.identifier).toUpperCase();
  const safeId = normalizeUri(id.toLowerCase());
  const index3 = state.footnoteOrder.indexOf(id);
  let counter;
  let reuseCounter = state.footnoteCounts.get(id);
  if (reuseCounter === void 0) {
    reuseCounter = 0;
    state.footnoteOrder.push(id);
    counter = state.footnoteOrder.length;
  } else {
    counter = index3 + 1;
  }
  reuseCounter += 1;
  state.footnoteCounts.set(id, reuseCounter);
  const link3 = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + clobberPrefix + "fn-" + safeId,
      id: clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(counter) }]
  };
  state.patch(node2, link3);
  const sup = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [link3]
  };
  state.patch(node2, sup);
  return state.applyData(node2, sup);
}

// node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading(state, node2) {
  const result = {
    type: "element",
    tagName: "h" + node2.depth,
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/html.js
function html3(state, node2) {
  if (state.options.allowDangerousHtml) {
    const result = { type: "raw", value: node2.value };
    state.patch(node2, result);
    return state.applyData(node2, result);
  }
  return void 0;
}

// node_modules/mdast-util-to-hast/lib/revert.js
function revert(state, node2) {
  const subtype = node2.referenceType;
  let suffix = "]";
  if (subtype === "collapsed") {
    suffix += "[]";
  } else if (subtype === "full") {
    suffix += "[" + (node2.label || node2.identifier) + "]";
  }
  if (node2.type === "imageReference") {
    return [{ type: "text", value: "![" + node2.alt + suffix }];
  }
  const contents = state.all(node2);
  const head = contents[0];
  if (head && head.type === "text") {
    head.value = "[" + head.value;
  } else {
    contents.unshift({ type: "text", value: "[" });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === "text") {
    tail.value += suffix;
  } else {
    contents.push({ type: "text", value: suffix });
  }
  return contents;
}

// node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const definition3 = state.definitionById.get(id);
  if (!definition3) {
    return revert(state, node2);
  }
  const properties = { src: normalizeUri(definition3.url || ""), alt: node2.alt };
  if (definition3.title !== null && definition3.title !== void 0) {
    properties.title = definition3.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/image.js
function image(state, node2) {
  const properties = { src: normalizeUri(node2.url) };
  if (node2.alt !== null && node2.alt !== void 0) {
    properties.alt = node2.alt;
  }
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode(state, node2) {
  const text8 = { type: "text", value: node2.value.replace(/\r?\n|\r/g, " ") };
  state.patch(node2, text8);
  const result = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [text8]
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
function linkReference(state, node2) {
  const id = String(node2.identifier).toUpperCase();
  const definition3 = state.definitionById.get(id);
  if (!definition3) {
    return revert(state, node2);
  }
  const properties = { href: normalizeUri(definition3.url || "") };
  if (definition3.title !== null && definition3.title !== void 0) {
    properties.title = definition3.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link.js
function link(state, node2) {
  const properties = { href: normalizeUri(node2.url) };
  if (node2.title !== null && node2.title !== void 0) {
    properties.title = node2.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem(state, node2, parent) {
  const results = state.all(node2);
  const loose = parent ? listLoose(parent) : listItemLoose(node2);
  const properties = {};
  const children = [];
  if (typeof node2.checked === "boolean") {
    const head = results[0];
    let paragraph3;
    if (head && head.type === "element" && head.tagName === "p") {
      paragraph3 = head;
    } else {
      paragraph3 = { type: "element", tagName: "p", properties: {}, children: [] };
      results.unshift(paragraph3);
    }
    if (paragraph3.children.length > 0) {
      paragraph3.children.unshift({ type: "text", value: " " });
    }
    paragraph3.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: node2.checked, disabled: true },
      children: []
    });
    properties.className = ["task-list-item"];
  }
  let index3 = -1;
  while (++index3 < results.length) {
    const child = results[index3];
    if (loose || index3 !== 0 || child.type !== "element" || child.tagName !== "p") {
      children.push({ type: "text", value: "\n" });
    }
    if (child.type === "element" && child.tagName === "p" && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];
  if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
    children.push({ type: "text", value: "\n" });
  }
  const result = { type: "element", tagName: "li", properties, children };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function listLoose(node2) {
  let loose = false;
  if (node2.type === "list") {
    loose = node2.spread || false;
    const children = node2.children;
    let index3 = -1;
    while (!loose && ++index3 < children.length) {
      loose = listItemLoose(children[index3]);
    }
  }
  return loose;
}
function listItemLoose(node2) {
  const spread = node2.spread;
  return spread === null || spread === void 0 ? node2.children.length > 1 : spread;
}

// node_modules/mdast-util-to-hast/lib/handlers/list.js
function list2(state, node2) {
  const properties = {};
  const results = state.all(node2);
  let index3 = -1;
  if (typeof node2.start === "number" && node2.start !== 1) {
    properties.start = node2.start;
  }
  while (++index3 < results.length) {
    const child = results[index3];
    if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
      properties.className = ["contains-task-list"];
      break;
    }
  }
  const result = {
    type: "element",
    tagName: node2.ordered ? "ol" : "ul",
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(state, node2) {
  const result = {
    type: "element",
    tagName: "p",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/root.js
function root2(state, node2) {
  const result = { type: "root", children: state.wrap(state.all(node2)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong(state, node2) {
  const result = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table.js
function table(state, node2) {
  const rows = state.all(node2);
  const firstRow = rows.shift();
  const tableContent = [];
  if (firstRow) {
    const head = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node2.children[0], head);
    tableContent.push(head);
  }
  if (rows.length > 0) {
    const body = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: state.wrap(rows, true)
    };
    const start2 = pointStart(node2.children[1]);
    const end = pointEnd(node2.children[node2.children.length - 1]);
    if (start2 && end) body.position = { start: start2, end };
    tableContent.push(body);
  }
  const result = {
    type: "element",
    tagName: "table",
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-row.js
function tableRow(state, node2, parent) {
  const siblings = parent ? parent.children : void 0;
  const rowIndex = siblings ? siblings.indexOf(node2) : 1;
  const tagName = rowIndex === 0 ? "th" : "td";
  const align = parent && parent.type === "table" ? parent.align : void 0;
  const length = align ? align.length : node2.children.length;
  let cellIndex = -1;
  const cells = [];
  while (++cellIndex < length) {
    const cell = node2.children[cellIndex];
    const properties = {};
    const alignValue = align ? align[cellIndex] : void 0;
    if (alignValue) {
      properties.align = alignValue;
    }
    let result2 = { type: "element", tagName, properties, children: [] };
    if (cell) {
      result2.children = state.all(cell);
      state.patch(cell, result2);
      result2 = state.applyData(cell, result2);
    }
    cells.push(result2);
  }
  const result = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: state.wrap(cells, true)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
function tableCell(state, node2) {
  const result = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/trim-lines/index.js
var tab = 9;
var space = 32;
function trimLines(value) {
  const source = String(value);
  const search2 = /\r?\n|\r/g;
  let match = search2.exec(source);
  let last = 0;
  const lines = [];
  while (match) {
    lines.push(
      trimLine(source.slice(last, match.index), last > 0, true),
      match[0]
    );
    last = match.index + match[0].length;
    match = search2.exec(source);
  }
  lines.push(trimLine(source.slice(last), last > 0, false));
  return lines.join("");
}
function trimLine(value, start2, end) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start2) {
    let code4 = value.codePointAt(startIndex);
    while (code4 === tab || code4 === space) {
      startIndex++;
      code4 = value.codePointAt(startIndex);
    }
  }
  if (end) {
    let code4 = value.codePointAt(endIndex - 1);
    while (code4 === tab || code4 === space) {
      endIndex--;
      code4 = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}

// node_modules/mdast-util-to-hast/lib/handlers/text.js
function text4(state, node2) {
  const result = { type: "text", value: trimLines(String(node2.value)) };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(state, node2) {
  const result = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/index.js
var handlers = {
  blockquote,
  break: hardBreak,
  code,
  delete: strikethrough,
  emphasis,
  footnoteReference,
  heading,
  html: html3,
  imageReference,
  image,
  inlineCode,
  linkReference,
  link,
  listItem,
  list: list2,
  paragraph,
  // @ts-expect-error: root is different, but hard to type.
  root: root2,
  strong,
  table,
  tableCell,
  tableRow,
  text: text4,
  thematicBreak: thematicBreak2,
  toml: ignore,
  yaml: ignore,
  definition: ignore,
  footnoteDefinition: ignore
};
function ignore() {
  return void 0;
}

// node_modules/@ungap/structured-clone/esm/types.js
var VOID = -1;
var PRIMITIVE = 0;
var ARRAY = 1;
var OBJECT = 2;
var DATE = 3;
var REGEXP = 4;
var MAP = 5;
var SET = 6;
var ERROR = 7;
var BIGINT = 8;

// node_modules/@ungap/structured-clone/esm/deserialize.js
var env = typeof self === "object" ? self : globalThis;
var deserializer = ($, _) => {
  const as = (out, index3) => {
    $.set(index3, out);
    return out;
  };
  const unpair = (index3) => {
    if ($.has(index3))
      return $.get(index3);
    const [type, value] = _[index3];
    switch (type) {
      case PRIMITIVE:
      case VOID:
        return as(value, index3);
      case ARRAY: {
        const arr = as([], index3);
        for (const index4 of value)
          arr.push(unpair(index4));
        return arr;
      }
      case OBJECT: {
        const object = as({}, index3);
        for (const [key, index4] of value)
          object[unpair(key)] = unpair(index4);
        return object;
      }
      case DATE:
        return as(new Date(value), index3);
      case REGEXP: {
        const { source, flags } = value;
        return as(new RegExp(source, flags), index3);
      }
      case MAP: {
        const map3 = as(/* @__PURE__ */ new Map(), index3);
        for (const [key, index4] of value)
          map3.set(unpair(key), unpair(index4));
        return map3;
      }
      case SET: {
        const set = as(/* @__PURE__ */ new Set(), index3);
        for (const index4 of value)
          set.add(unpair(index4));
        return set;
      }
      case ERROR: {
        const { name: name2, message } = value;
        return as(new env[name2](message), index3);
      }
      case BIGINT:
        return as(BigInt(value), index3);
      case "BigInt":
        return as(Object(BigInt(value)), index3);
      case "ArrayBuffer":
        return as(new Uint8Array(value).buffer, value);
      case "DataView": {
        const { buffer } = new Uint8Array(value);
        return as(new DataView(buffer), value);
      }
    }
    return as(new env[type](value), index3);
  };
  return unpair;
};
var deserialize = (serialized) => deserializer(/* @__PURE__ */ new Map(), serialized)(0);

// node_modules/@ungap/structured-clone/esm/serialize.js
var EMPTY = "";
var { toString: toString2 } = {};
var { keys } = Object;
var typeOf = (value) => {
  const type = typeof value;
  if (type !== "object" || !value)
    return [PRIMITIVE, type];
  const asString = toString2.call(value).slice(8, -1);
  switch (asString) {
    case "Array":
      return [ARRAY, EMPTY];
    case "Object":
      return [OBJECT, EMPTY];
    case "Date":
      return [DATE, EMPTY];
    case "RegExp":
      return [REGEXP, EMPTY];
    case "Map":
      return [MAP, EMPTY];
    case "Set":
      return [SET, EMPTY];
    case "DataView":
      return [ARRAY, asString];
  }
  if (asString.includes("Array"))
    return [ARRAY, asString];
  if (asString.includes("Error"))
    return [ERROR, asString];
  return [OBJECT, asString];
};
var shouldSkip = ([TYPE, type]) => TYPE === PRIMITIVE && (type === "function" || type === "symbol");
var serializer = (strict, json, $, _) => {
  const as = (out, value) => {
    const index3 = _.push(out) - 1;
    $.set(value, index3);
    return index3;
  };
  const pair = (value) => {
    if ($.has(value))
      return $.get(value);
    let [TYPE, type] = typeOf(value);
    switch (TYPE) {
      case PRIMITIVE: {
        let entry = value;
        switch (type) {
          case "bigint":
            TYPE = BIGINT;
            entry = value.toString();
            break;
          case "function":
          case "symbol":
            if (strict)
              throw new TypeError("unable to serialize " + type);
            entry = null;
            break;
          case "undefined":
            return as([VOID], value);
        }
        return as([TYPE, entry], value);
      }
      case ARRAY: {
        if (type) {
          let spread = value;
          if (type === "DataView") {
            spread = new Uint8Array(value.buffer);
          } else if (type === "ArrayBuffer") {
            spread = new Uint8Array(value);
          }
          return as([type, [...spread]], value);
        }
        const arr = [];
        const index3 = as([TYPE, arr], value);
        for (const entry of value)
          arr.push(pair(entry));
        return index3;
      }
      case OBJECT: {
        if (type) {
          switch (type) {
            case "BigInt":
              return as([type, value.toString()], value);
            case "Boolean":
            case "Number":
            case "String":
              return as([type, value.valueOf()], value);
          }
        }
        if (json && "toJSON" in value)
          return pair(value.toJSON());
        const entries = [];
        const index3 = as([TYPE, entries], value);
        for (const key of keys(value)) {
          if (strict || !shouldSkip(typeOf(value[key])))
            entries.push([pair(key), pair(value[key])]);
        }
        return index3;
      }
      case DATE:
        return as([TYPE, value.toISOString()], value);
      case REGEXP: {
        const { source, flags } = value;
        return as([TYPE, { source, flags }], value);
      }
      case MAP: {
        const entries = [];
        const index3 = as([TYPE, entries], value);
        for (const [key, entry] of value) {
          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))
            entries.push([pair(key), pair(entry)]);
        }
        return index3;
      }
      case SET: {
        const entries = [];
        const index3 = as([TYPE, entries], value);
        for (const entry of value) {
          if (strict || !shouldSkip(typeOf(entry)))
            entries.push(pair(entry));
        }
        return index3;
      }
    }
    const { message } = value;
    return as([TYPE, { name: type, message }], value);
  };
  return pair;
};
var serialize = (value, { json, lossy } = {}) => {
  const _ = [];
  return serializer(!(json || lossy), !!json, /* @__PURE__ */ new Map(), _)(value), _;
};

// node_modules/@ungap/structured-clone/esm/index.js
var esm_default2 = typeof structuredClone === "function" ? (
  /* c8 ignore start */
  (any, options) => options && ("json" in options || "lossy" in options) ? deserialize(serialize(any, options)) : structuredClone(any)
) : (any, options) => deserialize(serialize(any, options));

// node_modules/mdast-util-to-hast/lib/footer.js
function defaultFootnoteBackContent(_, rereferenceIndex) {
  const result = [{ type: "text", value: "\u21A9" }];
  if (rereferenceIndex > 1) {
    result.push({
      type: "element",
      tagName: "sup",
      properties: {},
      children: [{ type: "text", value: String(rereferenceIndex) }]
    });
  }
  return result;
}
function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {
  return "Back to reference " + (referenceIndex + 1) + (rereferenceIndex > 1 ? "-" + rereferenceIndex : "");
}
function footer(state) {
  const clobberPrefix = typeof state.options.clobberPrefix === "string" ? state.options.clobberPrefix : "user-content-";
  const footnoteBackContent = state.options.footnoteBackContent || defaultFootnoteBackContent;
  const footnoteBackLabel = state.options.footnoteBackLabel || defaultFootnoteBackLabel;
  const footnoteLabel = state.options.footnoteLabel || "Footnotes";
  const footnoteLabelTagName = state.options.footnoteLabelTagName || "h2";
  const footnoteLabelProperties = state.options.footnoteLabelProperties || {
    className: ["sr-only"]
  };
  const listItems = [];
  let referenceIndex = -1;
  while (++referenceIndex < state.footnoteOrder.length) {
    const definition3 = state.footnoteById.get(
      state.footnoteOrder[referenceIndex]
    );
    if (!definition3) {
      continue;
    }
    const content3 = state.all(definition3);
    const id = String(definition3.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    let rereferenceIndex = 0;
    const backReferences = [];
    const counts = state.footnoteCounts.get(id);
    while (counts !== void 0 && ++rereferenceIndex <= counts) {
      if (backReferences.length > 0) {
        backReferences.push({ type: "text", value: " " });
      }
      let children = typeof footnoteBackContent === "string" ? footnoteBackContent : footnoteBackContent(referenceIndex, rereferenceIndex);
      if (typeof children === "string") {
        children = { type: "text", value: children };
      }
      backReferences.push({
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + clobberPrefix + "fnref-" + safeId + (rereferenceIndex > 1 ? "-" + rereferenceIndex : ""),
          dataFootnoteBackref: "",
          ariaLabel: typeof footnoteBackLabel === "string" ? footnoteBackLabel : footnoteBackLabel(referenceIndex, rereferenceIndex),
          className: ["data-footnote-backref"]
        },
        children: Array.isArray(children) ? children : [children]
      });
    }
    const tail = content3[content3.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === "text") {
        tailTail.value += " ";
      } else {
        tail.children.push({ type: "text", value: " " });
      }
      tail.children.push(...backReferences);
    } else {
      content3.push(...backReferences);
    }
    const listItem3 = {
      type: "element",
      tagName: "li",
      properties: { id: clobberPrefix + "fn-" + safeId },
      children: state.wrap(content3, true)
    };
    state.patch(definition3, listItem3);
    listItems.push(listItem3);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: "element",
    tagName: "section",
    properties: { dataFootnotes: true, className: ["footnotes"] },
    children: [
      {
        type: "element",
        tagName: footnoteLabelTagName,
        properties: {
          ...esm_default2(footnoteLabelProperties),
          id: "footnote-label"
        },
        children: [{ type: "text", value: footnoteLabel }]
      },
      { type: "text", value: "\n" },
      {
        type: "element",
        tagName: "ol",
        properties: {},
        children: state.wrap(listItems, true)
      },
      { type: "text", value: "\n" }
    ]
  };
}

// node_modules/mdast-util-to-hast/lib/state.js
var own4 = {}.hasOwnProperty;
var emptyOptions4 = {};
function createState(tree, options) {
  const settings = options || emptyOptions4;
  const definitionById = /* @__PURE__ */ new Map();
  const footnoteById = /* @__PURE__ */ new Map();
  const footnoteCounts = /* @__PURE__ */ new Map();
  const handlers2 = { ...handlers, ...settings.handlers };
  const state = {
    all: all2,
    applyData,
    definitionById,
    footnoteById,
    footnoteCounts,
    footnoteOrder: [],
    handlers: handlers2,
    one: one3,
    options: settings,
    patch,
    wrap
  };
  visit(tree, function(node2) {
    if (node2.type === "definition" || node2.type === "footnoteDefinition") {
      const map3 = node2.type === "definition" ? definitionById : footnoteById;
      const id = String(node2.identifier).toUpperCase();
      if (!map3.has(id)) {
        map3.set(id, node2);
      }
    }
  });
  return state;
  function one3(node2, parent) {
    const type = node2.type;
    const handle2 = state.handlers[type];
    if (own4.call(state.handlers, type) && handle2) {
      return handle2(state, node2, parent);
    }
    if (state.options.passThrough && state.options.passThrough.includes(type)) {
      if ("children" in node2) {
        const { children, ...shallow } = node2;
        const result = esm_default2(shallow);
        result.children = state.all(node2);
        return result;
      }
      return esm_default2(node2);
    }
    const unknown = state.options.unknownHandler || defaultUnknownHandler;
    return unknown(state, node2, parent);
  }
  function all2(parent) {
    const values = [];
    if ("children" in parent) {
      const nodes = parent.children;
      let index3 = -1;
      while (++index3 < nodes.length) {
        const result = state.one(nodes[index3], parent);
        if (result) {
          if (index3 && nodes[index3 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = trimMarkdownSpaceStart(result.value);
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = trimMarkdownSpaceStart(head.value);
              }
            }
          }
          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }
    return values;
  }
}
function patch(from, to) {
  if (from.position) to.position = position(from);
}
function applyData(from, to) {
  let result = to;
  if (from && from.data) {
    const hName = from.data.hName;
    const hChildren = from.data.hChildren;
    const hProperties = from.data.hProperties;
    if (typeof hName === "string") {
      if (result.type === "element") {
        result.tagName = hName;
      } else {
        const children = "children" in result ? result.children : [result];
        result = { type: "element", tagName: hName, properties: {}, children };
      }
    }
    if (result.type === "element" && hProperties) {
      Object.assign(result.properties, esm_default2(hProperties));
    }
    if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
      result.children = hChildren;
    }
  }
  return result;
}
function defaultUnknownHandler(state, node2) {
  const data = node2.data || {};
  const result = "value" in node2 && !(own4.call(data, "hProperties") || own4.call(data, "hChildren")) ? { type: "text", value: node2.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: state.all(node2)
  };
  state.patch(node2, result);
  return state.applyData(node2, result);
}
function wrap(nodes, loose) {
  const result = [];
  let index3 = -1;
  if (loose) {
    result.push({ type: "text", value: "\n" });
  }
  while (++index3 < nodes.length) {
    if (index3) result.push({ type: "text", value: "\n" });
    result.push(nodes[index3]);
  }
  if (loose && nodes.length > 0) {
    result.push({ type: "text", value: "\n" });
  }
  return result;
}
function trimMarkdownSpaceStart(value) {
  let index3 = 0;
  let code4 = value.charCodeAt(index3);
  while (code4 === 9 || code4 === 32) {
    index3++;
    code4 = value.charCodeAt(index3);
  }
  return value.slice(index3);
}

// node_modules/mdast-util-to-hast/lib/index.js
function toHast(tree, options) {
  const state = createState(tree, options);
  const node2 = state.one(tree, void 0);
  const foot = footer(state);
  const result = Array.isArray(node2) ? { type: "root", children: node2 } : node2 || { type: "root", children: [] };
  if (foot) {
    ok2("children" in result);
    result.children.push({ type: "text", value: "\n" }, foot);
  }
  return result;
}

// node_modules/remark-rehype/lib/index.js
function remarkRehype(destination, options) {
  if (destination && "run" in destination) {
    return async function(tree, file) {
      const hastTree = (
        /** @type {HastRoot} */
        toHast(tree, { file, ...options })
      );
      await destination.run(hastTree, file);
    };
  }
  return function(tree, file) {
    return (
      /** @type {HastRoot} */
      toHast(tree, { file, ...destination || options })
    );
  };
}

// node_modules/bail/index.js
function bail(error) {
  if (error) {
    throw error;
  }
}

// node_modules/unified/lib/index.js
var import_extend = __toESM(require_extend(), 1);

// node_modules/is-plain-obj/index.js
function isPlainObject(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// node_modules/trough/index.js
function trough() {
  const fns = [];
  const pipeline = { run, use };
  return pipeline;
  function run(...values) {
    let middlewareIndex = -1;
    const callback = values.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next(null, ...values);
    function next(error, ...output) {
      const fn = fns[++middlewareIndex];
      let index3 = -1;
      if (error) {
        callback(error);
        return;
      }
      while (++index3 < values.length) {
        if (output[index3] === null || output[index3] === void 0) {
          output[index3] = values[index3];
        }
      }
      values = output;
      if (fn) {
        wrap2(fn, next)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }
  function use(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns.push(middelware);
    return pipeline;
  }
}
function wrap2(middleware, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware.apply(this, parameters);
    } catch (error) {
      const exception = (
        /** @type {Error} */
        error
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result instanceof Promise) {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error, ...output) {
    if (!called) {
      called = true;
      callback(error, ...output);
    }
  }
  function then(value) {
    done(null, value);
  }
}

// node_modules/vfile/lib/minpath.browser.js
var minpath = { basename, dirname, extname, join, sep: "/" };
function basename(path2, extname2) {
  if (extname2 !== void 0 && typeof extname2 !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path2);
  let start2 = 0;
  let end = -1;
  let index3 = path2.length;
  let seenNonSlash;
  if (extname2 === void 0 || extname2.length === 0 || extname2.length > path2.length) {
    while (index3--) {
      if (path2.codePointAt(index3) === 47) {
        if (seenNonSlash) {
          start2 = index3 + 1;
          break;
        }
      } else if (end < 0) {
        seenNonSlash = true;
        end = index3 + 1;
      }
    }
    return end < 0 ? "" : path2.slice(start2, end);
  }
  if (extname2 === path2) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extnameIndex = extname2.length - 1;
  while (index3--) {
    if (path2.codePointAt(index3) === 47) {
      if (seenNonSlash) {
        start2 = index3 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index3 + 1;
      }
      if (extnameIndex > -1) {
        if (path2.codePointAt(index3) === extname2.codePointAt(extnameIndex--)) {
          if (extnameIndex < 0) {
            end = index3;
          }
        } else {
          extnameIndex = -1;
          end = firstNonSlashEnd;
        }
      }
    }
  }
  if (start2 === end) {
    end = firstNonSlashEnd;
  } else if (end < 0) {
    end = path2.length;
  }
  return path2.slice(start2, end);
}
function dirname(path2) {
  assertPath(path2);
  if (path2.length === 0) {
    return ".";
  }
  let end = -1;
  let index3 = path2.length;
  let unmatchedSlash;
  while (--index3) {
    if (path2.codePointAt(index3) === 47) {
      if (unmatchedSlash) {
        end = index3;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end < 0 ? path2.codePointAt(0) === 47 ? "/" : "." : end === 1 && path2.codePointAt(0) === 47 ? "//" : path2.slice(0, end);
}
function extname(path2) {
  assertPath(path2);
  let index3 = path2.length;
  let end = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index3--) {
    const code4 = path2.codePointAt(index3);
    if (code4 === 47) {
      if (unmatchedSlash) {
        startPart = index3 + 1;
        break;
      }
      continue;
    }
    if (end < 0) {
      unmatchedSlash = true;
      end = index3 + 1;
    }
    if (code4 === 46) {
      if (startDot < 0) {
        startDot = index3;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path2.slice(startDot, end);
}
function join(...segments) {
  let index3 = -1;
  let joined;
  while (++index3 < segments.length) {
    assertPath(segments[index3]);
    if (segments[index3]) {
      joined = joined === void 0 ? segments[index3] : joined + "/" + segments[index3];
    }
  }
  return joined === void 0 ? "." : normalize2(joined);
}
function normalize2(path2) {
  assertPath(path2);
  const absolute = path2.codePointAt(0) === 47;
  let value = normalizeString(path2, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path2.codePointAt(path2.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path2, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index3 = -1;
  let code4;
  let lastSlashIndex;
  while (++index3 <= path2.length) {
    if (index3 < path2.length) {
      code4 = path2.codePointAt(index3);
    } else if (code4 === 47) {
      break;
    } else {
      code4 = 47;
    }
    if (code4 === 47) {
      if (lastSlash === index3 - 1 || dots === 1) {
      } else if (lastSlash !== index3 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.codePointAt(result.length - 1) !== 46 || result.codePointAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index3;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index3;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path2.slice(lastSlash + 1, index3);
        } else {
          result = path2.slice(lastSlash + 1, index3);
        }
        lastSegmentLength = index3 - lastSlash - 1;
      }
      lastSlash = index3;
      dots = 0;
    } else if (code4 === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path2) {
  if (typeof path2 !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path2)
    );
  }
}

// node_modules/vfile/lib/minproc.browser.js
var minproc = { cwd };
function cwd() {
  return "/";
}

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return Boolean(
    fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && "href" in fileUrlOrPath && fileUrlOrPath.href && "protocol" in fileUrlOrPath && fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
    fileUrlOrPath.auth === void 0
  );
}

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path2) {
  if (typeof path2 === "string") {
    path2 = new URL(path2);
  } else if (!isUrl(path2)) {
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path2 + "`"
    );
    error.code = "ERR_INVALID_ARG_TYPE";
    throw error;
  }
  if (path2.protocol !== "file:") {
    const error = new TypeError("The URL must be of scheme file");
    error.code = "ERR_INVALID_URL_SCHEME";
    throw error;
  }
  return getPathFromURLPosix(path2);
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error.code = "ERR_INVALID_FILE_URL_HOST";
    throw error;
  }
  const pathname = url.pathname;
  let index3 = -1;
  while (++index3 < pathname.length) {
    if (pathname.codePointAt(index3) === 37 && pathname.codePointAt(index3 + 1) === 50) {
      const third = pathname.codePointAt(index3 + 2);
      if (third === 70 || third === 102) {
        const error = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error.code = "ERR_INVALID_FILE_URL_PATH";
        throw error;
      }
    }
  }
  return decodeURIComponent(pathname);
}

// node_modules/vfile/lib/index.js
var order = (
  /** @type {const} */
  [
    "history",
    "path",
    "basename",
    "stem",
    "extname",
    "dirname"
  ]
);
var VFile = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Uint8Array` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    let options;
    if (!value) {
      options = {};
    } else if (isUrl(value)) {
      options = { path: value };
    } else if (typeof value === "string" || isUint8Array(value)) {
      options = { value };
    } else {
      options = value;
    }
    this.cwd = "cwd" in options ? "" : minproc.cwd();
    this.data = {};
    this.history = [];
    this.messages = [];
    this.value;
    this.map;
    this.result;
    this.stored;
    let index3 = -1;
    while (++index3 < order.length) {
      const field2 = order[index3];
      if (field2 in options && options[field2] !== void 0 && options[field2] !== null) {
        this[field2] = field2 === "history" ? [...options[field2]] : options[field2];
      }
    }
    let field;
    for (field in options) {
      if (!order.includes(field)) {
        this[field] = options[field];
      }
    }
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   *
   * @returns {string | undefined}
   *   Basename.
   */
  get basename() {
    return typeof this.path === "string" ? minpath.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} basename
   *   Basename.
   * @returns {undefined}
   *   Nothing.
   */
  set basename(basename2) {
    assertNonEmpty(basename2, "basename");
    assertPart(basename2, "basename");
    this.path = minpath.join(this.dirname || "", basename2);
  }
  /**
   * Get the parent path (example: `'~'`).
   *
   * @returns {string | undefined}
   *   Dirname.
   */
  get dirname() {
    return typeof this.path === "string" ? minpath.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} dirname
   *   Dirname.
   * @returns {undefined}
   *   Nothing.
   */
  set dirname(dirname2) {
    assertPath2(this.basename, "dirname");
    this.path = minpath.join(dirname2 || "", this.basename);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   *
   * @returns {string | undefined}
   *   Extname.
   */
  get extname() {
    return typeof this.path === "string" ? minpath.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   *
   * @param {string | undefined} extname
   *   Extname.
   * @returns {undefined}
   *   Nothing.
   */
  set extname(extname2) {
    assertPart(extname2, "extname");
    assertPath2(this.dirname, "extname");
    if (extname2) {
      if (extname2.codePointAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname2.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = minpath.join(this.dirname, this.stem + (extname2 || ""));
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   *   Path.
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {URL | string} path
   *   Path.
   * @returns {undefined}
   *   Nothing.
   */
  set path(path2) {
    if (isUrl(path2)) {
      path2 = urlToPath(path2);
    }
    assertNonEmpty(path2, "path");
    if (this.path !== path2) {
      this.history.push(path2);
    }
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   *
   * @returns {string | undefined}
   *   Stem.
   */
  get stem() {
    return typeof this.path === "string" ? minpath.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   *
   * @param {string} stem
   *   Stem.
   * @returns {undefined}
   *   Nothing.
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = minpath.join(this.dirname || "", stem + (this.extname || ""));
  }
  // Normal prototypal methods.
  /**
   * Create a fatal message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `true` (error; file not usable)
   * and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {never}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Never.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = true;
    throw message;
  }
  /**
   * Create an info message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `undefined` (info; change
   * likely not needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin);
    message.fatal = void 0;
    return message;
  }
  /**
   * Create a message for `reason` associated with the file.
   *
   * The `fatal` field of the message is set to `false` (warning; change may be
   * needed) and the `file` field is set to the current file path.
   * The message is added to the `messages` field on `file`.
   *
   * > 🪦 **Note**: also has obsolete signatures.
   *
   * @overload
   * @param {string} reason
   * @param {MessageOptions | null | undefined} [options]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {string} reason
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Node | NodeLike | null | undefined} parent
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {Point | Position | null | undefined} place
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @overload
   * @param {Error | VFileMessage} cause
   * @param {string | null | undefined} [origin]
   * @returns {VFileMessage}
   *
   * @param {Error | VFileMessage | string} causeOrReason
   *   Reason for message, should use markdown.
   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
   *   Configuration (optional).
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(causeOrReason, optionsOrParentOrPlace, origin) {
    const message = new VFileMessage(
      // @ts-expect-error: the overloads are fine.
      causeOrReason,
      optionsOrParentOrPlace,
      origin
    );
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Serialize the file.
   *
   * > **Note**: which encodings are supported depends on the engine.
   * > For info on Node.js, see:
   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
   *
   * @param {string | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Uint8Array`
   *   (default: `'utf-8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    if (this.value === void 0) {
      return "";
    }
    if (typeof this.value === "string") {
      return this.value;
    }
    const decoder = new TextDecoder(encoding || void 0);
    return decoder.decode(this.value);
  }
};
function assertPart(part, name2) {
  if (part && part.includes(minpath.sep)) {
    throw new Error(
      "`" + name2 + "` cannot be a path: did not expect `" + minpath.sep + "`"
    );
  }
}
function assertNonEmpty(part, name2) {
  if (!part) {
    throw new Error("`" + name2 + "` cannot be empty");
  }
}
function assertPath2(path2, name2) {
  if (!path2) {
    throw new Error("Setting `" + name2 + "` requires `path` to be set too");
  }
}
function isUint8Array(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/unified/lib/callable-instance.js
var CallableInstance = (
  /**
   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
   */
  /** @type {unknown} */
  /**
   * @this {Function}
   * @param {string | symbol} property
   * @returns {(...parameters: Array<unknown>) => unknown}
   */
  function(property) {
    const self2 = this;
    const constr = self2.constructor;
    const proto = (
      /** @type {Record<string | symbol, Function>} */
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      constr.prototype
    );
    const value = proto[property];
    const apply = function() {
      return value.apply(apply, arguments);
    };
    Object.setPrototypeOf(apply, proto);
    return apply;
  }
);

// node_modules/unified/lib/index.js
var own5 = {}.hasOwnProperty;
var Processor = class _Processor extends CallableInstance {
  /**
   * Create a processor.
   */
  constructor() {
    super("copy");
    this.Compiler = void 0;
    this.Parser = void 0;
    this.attachers = [];
    this.compiler = void 0;
    this.freezeIndex = -1;
    this.frozen = void 0;
    this.namespace = {};
    this.parser = void 0;
    this.transformers = trough();
  }
  /**
   * Copy a processor.
   *
   * @deprecated
   *   This is a private internal method and should not be used.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   New *unfrozen* processor ({@linkcode Processor}) that is
   *   configured to work the same as its ancestor.
   *   When the descendant processor is configured in the future it does not
   *   affect the ancestral processor.
   */
  copy() {
    const destination = (
      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
      new _Processor()
    );
    let index3 = -1;
    while (++index3 < this.attachers.length) {
      const attacher = this.attachers[index3];
      destination.use(...attacher);
    }
    destination.data((0, import_extend.default)(true, {}, this.namespace));
    return destination;
  }
  /**
   * Configure the processor with info available to all plugins.
   * Information is stored in an object.
   *
   * Typically, options can be given to a specific plugin, but sometimes it
   * makes sense to have information shared with several plugins.
   * For example, a list of HTML elements that are self-closing, which is
   * needed during all phases.
   *
   * > **Note**: setting information cannot occur on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * > **Note**: to register custom data in TypeScript, augment the
   * > {@linkcode Data} interface.
   *
   * @example
   *   This example show how to get and set info:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   const processor = unified().data('alpha', 'bravo')
   *
   *   processor.data('alpha') // => 'bravo'
   *
   *   processor.data() // => {alpha: 'bravo'}
   *
   *   processor.data({charlie: 'delta'})
   *
   *   processor.data() // => {charlie: 'delta'}
   *   ```
   *
   * @template {keyof Data} Key
   *
   * @overload
   * @returns {Data}
   *
   * @overload
   * @param {Data} dataset
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Key} key
   * @returns {Data[Key]}
   *
   * @overload
   * @param {Key} key
   * @param {Data[Key]} value
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @param {Data | Key} [key]
   *   Key to get or set, or entire dataset to set, or nothing to get the
   *   entire dataset (optional).
   * @param {Data[Key]} [value]
   *   Value to set (optional).
   * @returns {unknown}
   *   The current processor when setting, the value at `key` when getting, or
   *   the entire dataset when getting without key.
   */
  data(key, value) {
    if (typeof key === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", this.frozen);
        this.namespace[key] = value;
        return this;
      }
      return own5.call(this.namespace, key) && this.namespace[key] || void 0;
    }
    if (key) {
      assertUnfrozen("data", this.frozen);
      this.namespace = key;
      return this;
    }
    return this.namespace;
  }
  /**
   * Freeze a processor.
   *
   * Frozen processors are meant to be extended and not to be configured
   * directly.
   *
   * When a processor is frozen it cannot be unfrozen.
   * New processors working the same way can be created by calling the
   * processor.
   *
   * It’s possible to freeze processors explicitly by calling `.freeze()`.
   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
   * `.stringify()`, `.process()`, or `.processSync()` are called.
   *
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   The current processor.
   */
  freeze() {
    if (this.frozen) {
      return this;
    }
    const self2 = (
      /** @type {Processor} */
      /** @type {unknown} */
      this
    );
    while (++this.freezeIndex < this.attachers.length) {
      const [attacher, ...options] = this.attachers[this.freezeIndex];
      if (options[0] === false) {
        continue;
      }
      if (options[0] === true) {
        options[0] = void 0;
      }
      const transformer = attacher.call(self2, ...options);
      if (typeof transformer === "function") {
        this.transformers.use(transformer);
      }
    }
    this.frozen = true;
    this.freezeIndex = Number.POSITIVE_INFINITY;
    return this;
  }
  /**
   * Parse text to a syntax tree.
   *
   * > **Note**: `parse` freezes the processor if not already *frozen*.
   *
   * > **Note**: `parse` performs the parse phase, not the run phase or other
   * > phases.
   *
   * @param {Compatible | undefined} [file]
   *   file to parse (optional); typically `string` or `VFile`; any value
   *   accepted as `x` in `new VFile(x)`.
   * @returns {ParseTree extends undefined ? Node : ParseTree}
   *   Syntax tree representing `file`.
   */
  parse(file) {
    this.freeze();
    const realFile = vfile(file);
    const parser = this.parser || this.Parser;
    assertParser("parse", parser);
    return parser(String(realFile), realFile);
  }
  /**
   * Process the given file as configured on the processor.
   *
   * > **Note**: `process` freezes the processor if not already *frozen*.
   *
   * > **Note**: `process` performs the parse, run, and stringify phases.
   *
   * @overload
   * @param {Compatible | undefined} file
   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
   * @returns {undefined}
   *
   * @overload
   * @param {Compatible | undefined} [file]
   * @returns {Promise<VFileWithOutput<CompileResult>>}
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`]; any value accepted as
   *   `x` in `new VFile(x)`.
   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
   *   Callback (optional).
   * @returns {Promise<VFile> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise a promise, rejected with a fatal error or resolved with the
   *   processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  process(file, done) {
    const self2 = this;
    this.freeze();
    assertParser("process", this.parser || this.Parser);
    assertCompiler("process", this.compiler || this.Compiler);
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      const realFile = vfile(file);
      const parseTree = (
        /** @type {HeadTree extends undefined ? Node : HeadTree} */
        /** @type {unknown} */
        self2.parse(realFile)
      );
      self2.run(parseTree, realFile, function(error, tree, file2) {
        if (error || !tree || !file2) {
          return realDone(error);
        }
        const compileTree = (
          /** @type {CompileTree extends undefined ? Node : CompileTree} */
          /** @type {unknown} */
          tree
        );
        const compileResult = self2.stringify(compileTree, file2);
        if (looksLikeAValue(compileResult)) {
          file2.value = compileResult;
        } else {
          file2.result = compileResult;
        }
        realDone(
          error,
          /** @type {VFileWithOutput<CompileResult>} */
          file2
        );
      });
      function realDone(error, file2) {
        if (error || !file2) {
          reject(error);
        } else if (resolve) {
          resolve(file2);
        } else {
          ok2(done, "`done` is defined if `resolve` is not");
          done(void 0, file2);
        }
      }
    }
  }
  /**
   * Process the given file as configured on the processor.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `processSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `processSync` performs the parse, run, and stringify phases.
   *
   * @param {Compatible | undefined} [file]
   *   File (optional); typically `string` or `VFile`; any value accepted as
   *   `x` in `new VFile(x)`.
   * @returns {VFileWithOutput<CompileResult>}
   *   The processed file.
   *
   *   The parsed, transformed, and compiled value is available at
   *   `file.value` (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most
   *   > compilers return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  processSync(file) {
    let complete = false;
    let result;
    this.freeze();
    assertParser("processSync", this.parser || this.Parser);
    assertCompiler("processSync", this.compiler || this.Compiler);
    this.process(file, realDone);
    assertDone("processSync", "process", complete);
    ok2(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, file2) {
      complete = true;
      bail(error);
      result = file2;
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * > **Note**: `run` freezes the processor if not already *frozen*.
   *
   * > **Note**: `run` performs the run phase, not other phases.
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} file
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
   * @returns {undefined}
   *
   * @overload
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   * @param {Compatible | undefined} [file]
   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {(
   *   RunCallback<TailTree extends undefined ? Node : TailTree> |
   *   Compatible
   * )} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
   *   Callback (optional).
   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
   *   Nothing if `done` is given.
   *   Otherwise, a promise rejected with a fatal error or resolved with the
   *   transformed tree.
   */
  run(tree, file, done) {
    assertNode(tree);
    this.freeze();
    const transformers = this.transformers;
    if (!done && typeof file === "function") {
      done = file;
      file = void 0;
    }
    return done ? executor(void 0, done) : new Promise(executor);
    function executor(resolve, reject) {
      ok2(
        typeof file !== "function",
        "`file` can\u2019t be a `done` anymore, we checked"
      );
      const realFile = vfile(file);
      transformers.run(tree, realFile, realDone);
      function realDone(error, outputTree, file2) {
        const resultingTree = (
          /** @type {TailTree extends undefined ? Node : TailTree} */
          outputTree || tree
        );
        if (error) {
          reject(error);
        } else if (resolve) {
          resolve(resultingTree);
        } else {
          ok2(done, "`done` is defined if `resolve` is not");
          done(void 0, resultingTree, file2);
        }
      }
    }
  }
  /**
   * Run *transformers* on a syntax tree.
   *
   * An error is thrown if asynchronous transforms are configured.
   *
   * > **Note**: `runSync` freezes the processor if not already *frozen*.
   *
   * > **Note**: `runSync` performs the run phase, not other phases.
   *
   * @param {HeadTree extends undefined ? Node : HeadTree} tree
   *   Tree to transform and inspect.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {TailTree extends undefined ? Node : TailTree}
   *   Transformed tree.
   */
  runSync(tree, file) {
    let complete = false;
    let result;
    this.run(tree, file, realDone);
    assertDone("runSync", "run", complete);
    ok2(result, "we either bailed on an error or have a tree");
    return result;
    function realDone(error, tree2) {
      bail(error);
      result = tree2;
      complete = true;
    }
  }
  /**
   * Compile a syntax tree.
   *
   * > **Note**: `stringify` freezes the processor if not already *frozen*.
   *
   * > **Note**: `stringify` performs the stringify phase, not the run phase
   * > or other phases.
   *
   * @param {CompileTree extends undefined ? Node : CompileTree} tree
   *   Tree to compile.
   * @param {Compatible | undefined} [file]
   *   File associated with `node` (optional); any value accepted as `x` in
   *   `new VFile(x)`.
   * @returns {CompileResult extends undefined ? Value : CompileResult}
   *   Textual representation of the tree (see note).
   *
   *   > **Note**: unified typically compiles by serializing: most compilers
   *   > return `string` (or `Uint8Array`).
   *   > Some compilers, such as the one configured with
   *   > [`rehype-react`][rehype-react], return other values (in this case, a
   *   > React tree).
   *   > If you’re using a compiler that doesn’t serialize, expect different
   *   > result values.
   *   >
   *   > To register custom results in TypeScript, add them to
   *   > {@linkcode CompileResultMap}.
   *
   *   [rehype-react]: https://github.com/rehypejs/rehype-react
   */
  stringify(tree, file) {
    this.freeze();
    const realFile = vfile(file);
    const compiler2 = this.compiler || this.Compiler;
    assertCompiler("stringify", compiler2);
    assertNode(tree);
    return compiler2(tree, realFile);
  }
  /**
   * Configure the processor to use a plugin, a list of usable values, or a
   * preset.
   *
   * If the processor is already using a plugin, the previous plugin
   * configuration is changed based on the options that are passed in.
   * In other words, the plugin is not added a second time.
   *
   * > **Note**: `use` cannot be called on *frozen* processors.
   * > Call the processor first to create a new unfrozen processor.
   *
   * @example
   *   There are many ways to pass plugins to `.use()`.
   *   This example gives an overview:
   *
   *   ```js
   *   import {unified} from 'unified'
   *
   *   unified()
   *     // Plugin with options:
   *     .use(pluginA, {x: true, y: true})
   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
   *     .use(pluginA, {y: false, z: true})
   *     // Plugins:
   *     .use([pluginB, pluginC])
   *     // Two plugins, the second with options:
   *     .use([pluginD, [pluginE, {}]])
   *     // Preset with plugins and settings:
   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
   *     // Settings only:
   *     .use({settings: {position: false}})
   *   ```
   *
   * @template {Array<unknown>} [Parameters=[]]
   * @template {Node | string | undefined} [Input=undefined]
   * @template [Output=Input]
   *
   * @overload
   * @param {Preset | null | undefined} [preset]
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {PluggableList} list
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *
   * @overload
   * @param {Plugin<Parameters, Input, Output>} plugin
   * @param {...(Parameters | [boolean])} parameters
   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
   *
   * @param {PluggableList | Plugin | Preset | null | undefined} value
   *   Usable value.
   * @param {...unknown} parameters
   *   Parameters, when a plugin is given as a usable value.
   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
   *   Current processor.
   */
  use(value, ...parameters) {
    const attachers = this.attachers;
    const namespace = this.namespace;
    assertUnfrozen("use", this.frozen);
    if (value === null || value === void 0) {
    } else if (typeof value === "function") {
      addPlugin(value, parameters);
    } else if (typeof value === "object") {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value + "`");
    }
    return this;
    function add(value2) {
      if (typeof value2 === "function") {
        addPlugin(value2, []);
      } else if (typeof value2 === "object") {
        if (Array.isArray(value2)) {
          const [plugin, ...parameters2] = (
            /** @type {PluginTuple<Array<unknown>>} */
            value2
          );
          addPlugin(plugin, parameters2);
        } else {
          addPreset(value2);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value2 + "`");
      }
    }
    function addPreset(result) {
      if (!("plugins" in result) && !("settings" in result)) {
        throw new Error(
          "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither"
        );
      }
      addList(result.plugins);
      if (result.settings) {
        namespace.settings = (0, import_extend.default)(true, namespace.settings, result.settings);
      }
    }
    function addList(plugins) {
      let index3 = -1;
      if (plugins === null || plugins === void 0) {
      } else if (Array.isArray(plugins)) {
        while (++index3 < plugins.length) {
          const thing = plugins[index3];
          add(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, parameters2) {
      let index3 = -1;
      let entryIndex = -1;
      while (++index3 < attachers.length) {
        if (attachers[index3][0] === plugin) {
          entryIndex = index3;
          break;
        }
      }
      if (entryIndex === -1) {
        attachers.push([plugin, ...parameters2]);
      } else if (parameters2.length > 0) {
        let [primary, ...rest] = parameters2;
        const currentPrimary = attachers[entryIndex][1];
        if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
          primary = (0, import_extend.default)(true, currentPrimary, primary);
        }
        attachers[entryIndex] = [plugin, primary, ...rest];
      }
    }
  }
};
var unified = new Processor().freeze();
function assertParser(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `parser`");
  }
}
function assertCompiler(name2, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name2 + "` without `compiler`");
  }
}
function assertUnfrozen(name2, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name2 + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node2) {
  if (!isPlainObject(node2) || typeof node2.type !== "string") {
    throw new TypeError("Expected node, got `" + node2 + "`");
  }
}
function assertDone(name2, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name2 + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAValue(value) {
  return typeof value === "string" || isUint8Array2(value);
}
function isUint8Array2(value) {
  return Boolean(
    value && typeof value === "object" && "byteLength" in value && "byteOffset" in value
  );
}

// node_modules/react-markdown/lib/index.js
var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
var emptyPlugins = [];
var emptyRemarkRehypeOptions = { allowDangerousHtml: true };
var safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i;
var deprecations = [
  { from: "astPlugins", id: "remove-buggy-html-in-markdown-parser" },
  { from: "allowDangerousHtml", id: "remove-buggy-html-in-markdown-parser" },
  {
    from: "allowNode",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowElement"
  },
  {
    from: "allowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "allowedElements"
  },
  {
    from: "disallowedTypes",
    id: "replace-allownode-allowedtypes-and-disallowedtypes",
    to: "disallowedElements"
  },
  { from: "escapeHtml", id: "remove-buggy-html-in-markdown-parser" },
  { from: "includeElementIndex", id: "#remove-includeelementindex" },
  {
    from: "includeNodeIndex",
    id: "change-includenodeindex-to-includeelementindex"
  },
  { from: "linkTarget", id: "remove-linktarget" },
  { from: "plugins", id: "change-plugins-to-remarkplugins", to: "remarkPlugins" },
  { from: "rawSourcePos", id: "#remove-rawsourcepos" },
  { from: "renderers", id: "change-renderers-to-components", to: "components" },
  { from: "source", id: "change-source-to-children", to: "children" },
  { from: "sourcePos", id: "#remove-sourcepos" },
  { from: "transformImageUri", id: "#add-urltransform", to: "urlTransform" },
  { from: "transformLinkUri", id: "#add-urltransform", to: "urlTransform" }
];
function Markdown(options) {
  const allowedElements = options.allowedElements;
  const allowElement = options.allowElement;
  const children = options.children || "";
  const className = options.className;
  const components = options.components;
  const disallowedElements = options.disallowedElements;
  const rehypePlugins = options.rehypePlugins || emptyPlugins;
  const remarkPlugins = options.remarkPlugins || emptyPlugins;
  const remarkRehypeOptions = options.remarkRehypeOptions ? { ...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions } : emptyRemarkRehypeOptions;
  const skipHtml = options.skipHtml;
  const unwrapDisallowed = options.unwrapDisallowed;
  const urlTransform2 = options.urlTransform || defaultUrlTransform;
  const processor = unified().use(remarkParse).use(remarkPlugins).use(remarkRehype, remarkRehypeOptions).use(rehypePlugins);
  const file = new VFile();
  if (typeof children === "string") {
    file.value = children;
  } else {
    unreachable(
      "Unexpected value `" + children + "` for `children` prop, expected `string`"
    );
  }
  if (allowedElements && disallowedElements) {
    unreachable(
      "Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other"
    );
  }
  for (const deprecation of deprecations) {
    if (Object.hasOwn(options, deprecation.from)) {
      unreachable(
        "Unexpected `" + deprecation.from + "` prop, " + (deprecation.to ? "use `" + deprecation.to + "` instead" : "remove it") + " (see <" + changelog + "#" + deprecation.id + "> for more info)"
      );
    }
  }
  const mdastTree = processor.parse(file);
  let hastTree = processor.runSync(mdastTree, file);
  if (className) {
    hastTree = {
      type: "element",
      tagName: "div",
      properties: { className },
      // Assume no doctypes.
      children: (
        /** @type {Array<ElementContent>} */
        hastTree.type === "root" ? hastTree.children : [hastTree]
      )
    };
  }
  visit(hastTree, transform3);
  return toJsxRuntime(hastTree, {
    Fragment: import_jsx_runtime.Fragment,
    // @ts-expect-error
    // React components are allowed to return numbers,
    // but not according to the types in hast-util-to-jsx-runtime
    components,
    ignoreInvalidStyle: true,
    jsx: import_jsx_runtime.jsx,
    jsxs: import_jsx_runtime.jsxs,
    passKeys: true,
    passNode: true
  });
  function transform3(node2, index3, parent) {
    if (node2.type === "raw" && parent && typeof index3 === "number") {
      if (skipHtml) {
        parent.children.splice(index3, 1);
      } else {
        parent.children[index3] = { type: "text", value: node2.value };
      }
      return index3;
    }
    if (node2.type === "element") {
      let key;
      for (key in urlAttributes) {
        if (Object.hasOwn(urlAttributes, key) && Object.hasOwn(node2.properties, key)) {
          const value = node2.properties[key];
          const test3 = urlAttributes[key];
          if (test3 === null || test3.includes(node2.tagName)) {
            node2.properties[key] = urlTransform2(String(value || ""), key, node2);
          }
        }
      }
    }
    if (node2.type === "element") {
      let remove = allowedElements ? !allowedElements.includes(node2.tagName) : disallowedElements ? disallowedElements.includes(node2.tagName) : false;
      if (!remove && allowElement && typeof index3 === "number") {
        remove = !allowElement(node2, index3, parent);
      }
      if (remove && parent && typeof index3 === "number") {
        if (unwrapDisallowed && node2.children) {
          parent.children.splice(index3, 1, ...node2.children);
        } else {
          parent.children.splice(index3, 1);
        }
        return index3;
      }
    }
  }
}
function defaultUrlTransform(value) {
  const colon = value.indexOf(":");
  const questionMark = value.indexOf("?");
  const numberSign = value.indexOf("#");
  const slash = value.indexOf("/");
  if (
    // If there is no protocol, it’s relative.
    colon === -1 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
    slash !== -1 && colon > slash || questionMark !== -1 && colon > questionMark || numberSign !== -1 && colon > numberSign || // It is a protocol, it should be allowed.
    safeProtocol.test(value.slice(0, colon))
  ) {
    return value;
  }
  return "";
}

// src/components/Message/renderText/renderText.tsx
var import_linkifyjs = require("linkifyjs");
var import_lodash4 = __toESM(require("lodash.uniqby"));

// node_modules/ccount/index.js
function ccount(value, character) {
  const source = String(value);
  if (typeof character !== "string") {
    throw new TypeError("Expected character");
  }
  let count = 0;
  let index3 = source.indexOf(character);
  while (index3 !== -1) {
    count++;
    index3 = source.indexOf(character, index3 + character.length);
  }
  return count;
}

// node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp2(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/mdast-util-find-and-replace/lib/index.js
function findAndReplace2(tree, list4, options) {
  const settings = options || {};
  const ignored = convert(settings.ignore || []);
  const pairs = toPairs2(list4);
  let pairIndex = -1;
  while (++pairIndex < pairs.length) {
    visitParents(tree, "text", visitor3);
  }
  function visitor3(node2, parents) {
    let index3 = -1;
    let grandparent;
    while (++index3 < parents.length) {
      const parent = parents[index3];
      const siblings = grandparent ? grandparent.children : void 0;
      if (ignored(
        parent,
        siblings ? siblings.indexOf(parent) : void 0,
        grandparent
      )) {
        return;
      }
      grandparent = parent;
    }
    if (grandparent) {
      return handler(node2, parents);
    }
  }
  function handler(node2, parents) {
    const parent = parents[parents.length - 1];
    const find5 = pairs[pairIndex][0];
    const replace2 = pairs[pairIndex][1];
    let start2 = 0;
    const siblings = parent.children;
    const index3 = siblings.indexOf(node2);
    let change = false;
    let nodes = [];
    find5.lastIndex = 0;
    let match = find5.exec(node2.value);
    while (match) {
      const position4 = match.index;
      const matchObject = {
        index: match.index,
        input: match.input,
        stack: [...parents, node2]
      };
      let value = replace2(...match, matchObject);
      if (typeof value === "string") {
        value = value.length > 0 ? { type: "text", value } : void 0;
      }
      if (value === false) {
        find5.lastIndex = position4 + 1;
      } else {
        if (start2 !== position4) {
          nodes.push({
            type: "text",
            value: node2.value.slice(start2, position4)
          });
        }
        if (Array.isArray(value)) {
          nodes.push(...value);
        } else if (value) {
          nodes.push(value);
        }
        start2 = position4 + match[0].length;
        change = true;
      }
      if (!find5.global) {
        break;
      }
      match = find5.exec(node2.value);
    }
    if (change) {
      if (start2 < node2.value.length) {
        nodes.push({ type: "text", value: node2.value.slice(start2) });
      }
      parent.children.splice(index3, 1, ...nodes);
    } else {
      nodes = [node2];
    }
    return index3 + nodes.length;
  }
}
function toPairs2(tupleOrList) {
  const result = [];
  if (!Array.isArray(tupleOrList)) {
    throw new TypeError("Expected find and replace tuple or list of tuples");
  }
  const list4 = !tupleOrList[0] || Array.isArray(tupleOrList[0]) ? tupleOrList : [tupleOrList];
  let index3 = -1;
  while (++index3 < list4.length) {
    const tuple = list4[index3];
    result.push([toExpression2(tuple[0]), toFunction2(tuple[1])]);
  }
  return result;
}
function toExpression2(find5) {
  return typeof find5 === "string" ? new RegExp(escapeStringRegexp2(find5), "g") : find5;
}
function toFunction2(replace2) {
  return typeof replace2 === "function" ? replace2 : function() {
    return replace2;
  };
}

// node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = ["autolink", "link", "image", "label"];
function gfmAutolinkLiteralFromMarkdown() {
  return {
    transforms: [transformGfmAutolinkLiterals],
    enter: {
      literalAutolink: enterLiteralAutolink,
      literalAutolinkEmail: enterLiteralAutolinkValue,
      literalAutolinkHttp: enterLiteralAutolinkValue,
      literalAutolinkWww: enterLiteralAutolinkValue
    },
    exit: {
      literalAutolink: exitLiteralAutolink,
      literalAutolinkEmail: exitLiteralAutolinkEmail,
      literalAutolinkHttp: exitLiteralAutolinkHttp,
      literalAutolinkWww: exitLiteralAutolinkWww
    }
  };
}
function gfmAutolinkLiteralToMarkdown() {
  return {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ":",
        before: "[ps]",
        after: "\\/",
        inConstruct,
        notInConstruct
      }
    ]
  };
}
function enterLiteralAutolink(token) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token);
}
function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}
function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  const node2 = this.stack[this.stack.length - 1];
  ok2(node2.type === "link");
  node2.url = "http://" + this.sliceSerialize(token);
}
function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}
function exitLiteralAutolink(token) {
  this.exit(token);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace2(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [/(?<=^|\s|\p{P}|\p{S})([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/gu, findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_, protocol, domain2, path2, match) {
  let prefix = "";
  if (!previous2(match)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain2 = protocol + domain2;
    protocol = "";
    prefix = "http://";
  }
  if (!isCorrectDomain(domain2)) {
    return false;
  }
  const parts = splitUrl(domain2 + path2);
  if (!parts[0]) return false;
  const result = {
    type: "link",
    title: null,
    url: prefix + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_, atext, label, match) {
  if (
    // Not an expected previous character.
    !previous2(match, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain2) {
  const parts = domain2.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous2(match, email) {
  const code4 = match.input.charCodeAt(match.index - 1);
  return (match.index === 0 || unicodeWhitespace(code4) || unicodePunctuation(code4)) && // If it’s an email, the previous character should not be a slash.
  (!email || code4 !== 47);
}

// node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference2.peek = footnoteReferencePeek;
function enterFootnoteCallString() {
  this.buffer();
}
function enterFootnoteCall(token) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function enterFootnoteDefinition(token) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token
  );
}
function exitFootnoteCallString(token) {
  const label = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok2(node2.type === "footnoteReference");
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
  node2.label = label;
}
function exitFootnoteCall(token) {
  this.exit(token);
}
function exitFootnoteDefinitionLabelString(token) {
  const label = this.resume();
  const node2 = this.stack[this.stack.length - 1];
  ok2(node2.type === "footnoteDefinition");
  node2.identifier = normalizeIdentifier(
    this.sliceSerialize(token)
  ).toLowerCase();
  node2.label = label;
}
function exitFootnoteDefinition(token) {
  this.exit(token);
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteReference2(node2, _, state, info) {
  const tracker = state.createTracker(info);
  let value = tracker.move("[^");
  const exit3 = state.enter("footnoteReference");
  const subexit = state.enter("reference");
  value += tracker.move(
    state.safe(state.associationId(node2), { after: "]", before: value })
  );
  subexit();
  exit3();
  value += tracker.move("]");
  return value;
}
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteCallString: enterFootnoteCallString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteDefinition: enterFootnoteDefinition
    },
    exit: {
      gfmFootnoteCallString: exitFootnoteCallString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteDefinition: exitFootnoteDefinition
    }
  };
}
function gfmFootnoteToMarkdown(options) {
  let firstLineBlank = false;
  if (options && options.firstLineBlank) {
    firstLineBlank = true;
  }
  return {
    handlers: { footnoteDefinition, footnoteReference: footnoteReference2 },
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["label", "phrasing", "reference"] }]
  };
  function footnoteDefinition(node2, _, state, info) {
    const tracker = state.createTracker(info);
    let value = tracker.move("[^");
    const exit3 = state.enter("footnoteDefinition");
    const subexit = state.enter("label");
    value += tracker.move(
      state.safe(state.associationId(node2), { before: value, after: "]" })
    );
    subexit();
    value += tracker.move("]:");
    if (node2.children && node2.children.length > 0) {
      tracker.shift(4);
      value += tracker.move(
        (firstLineBlank ? "\n" : " ") + state.indentLines(
          state.containerFlow(node2, tracker.current()),
          firstLineBlank ? mapAll : mapExceptFirst
        )
      );
    }
    exit3();
    return value;
  }
}
function mapExceptFirst(line, index3, blank) {
  return index3 === 0 ? line : mapAll(line, index3, blank);
}
function mapAll(line, index3, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
function gfmStrikethroughFromMarkdown() {
  return {
    canContainEols: ["delete"],
    enter: { strikethrough: enterStrikethrough },
    exit: { strikethrough: exitStrikethrough }
  };
}
function gfmStrikethroughToMarkdown() {
  return {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: constructsWithoutStrikethrough
      }
    ],
    handlers: { delete: handleDelete }
  };
}
function enterStrikethrough(token) {
  this.enter({ type: "delete", children: [] }, token);
}
function exitStrikethrough(token) {
  this.exit(token);
}
function handleDelete(node2, _, state, info) {
  const tracker = state.createTracker(info);
  const exit3 = state.enter("strikethrough");
  let value = tracker.move("~~");
  value += state.containerPhrasing(node2, {
    ...tracker.current(),
    before: value,
    after: "~"
  });
  value += tracker.move("~~");
  exit3();
  return value;
}
function peekDelete() {
  return "~";
}

// node_modules/markdown-table/index.js
function markdownTable(table2, options = {}) {
  const align = (options.align || []).concat();
  const stringLength = options.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table2.length) {
    const row3 = [];
    const sizes2 = [];
    let columnIndex2 = -1;
    if (table2[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table2[rowIndex].length;
    }
    while (++columnIndex2 < table2[rowIndex].length) {
      const cell = serialize2(table2[rowIndex][columnIndex2]);
      if (options.alignDelimiters !== false) {
        const size = stringLength(cell);
        sizes2[columnIndex2] = size;
        if (longestCellByColumn[columnIndex2] === void 0 || size > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size;
        }
      }
      row3.push(cell);
    }
    cellMatrix[rowIndex] = row3;
    sizeMatrix[rowIndex] = sizes2;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code4 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code4;
    }
  }
  columnIndex = -1;
  const row2 = [];
  const sizes = [];
  while (++columnIndex < mostCellsPerRow) {
    const code4 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code4 === 99) {
      before = ":";
      after = ":";
    } else if (code4 === 108) {
      before = ":";
    } else if (code4 === 114) {
      after = ":";
    }
    let size = options.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell = before + "-".repeat(size) + after;
    if (options.alignDelimiters !== false) {
      size = before.length + size + after.length;
      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }
      sizes[columnIndex] = size;
    }
    row2[columnIndex] = cell;
  }
  cellMatrix.splice(1, 0, row2);
  sizeMatrix.splice(1, 0, sizes);
  rowIndex = -1;
  const lines = [];
  while (++rowIndex < cellMatrix.length) {
    const row3 = cellMatrix[rowIndex];
    const sizes2 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell = row3[columnIndex] || "";
      let before = "";
      let after = "";
      if (options.alignDelimiters !== false) {
        const size = longestCellByColumn[columnIndex] - (sizes2[columnIndex] || 0);
        const code4 = alignments[columnIndex];
        if (code4 === 114) {
          before = " ".repeat(size);
        } else if (code4 === 99) {
          if (size % 2) {
            before = " ".repeat(size / 2 + 0.5);
            after = " ".repeat(size / 2 - 0.5);
          } else {
            before = " ".repeat(size / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size);
        }
      }
      if (options.delimiterStart !== false && !columnIndex) {
        line.push("|");
      }
      if (options.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(options.alignDelimiters === false && cell === "") && (options.delimiterStart !== false || columnIndex)) {
        line.push(" ");
      }
      if (options.alignDelimiters !== false) {
        line.push(before);
      }
      line.push(cell);
      if (options.alignDelimiters !== false) {
        line.push(after);
      }
      if (options.padding !== false) {
        line.push(" ");
      }
      if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line.push("|");
      }
    }
    lines.push(
      options.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
    );
  }
  return lines.join("\n");
}
function serialize2(value) {
  return value === null || value === void 0 ? "" : String(value);
}
function defaultStringLength(value) {
  return value.length;
}
function toAlignment(value) {
  const code4 = typeof value === "string" ? value.codePointAt(0) : 0;
  return code4 === 67 || code4 === 99 ? 99 : code4 === 76 || code4 === 108 ? 108 : code4 === 82 || code4 === 114 ? 114 : 0;
}

// node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
function blockquote2(node2, _, state, info) {
  const exit3 = state.enter("blockquote");
  const tracker = state.createTracker(info);
  tracker.move("> ");
  tracker.shift(2);
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map
  );
  exit3();
  return value;
}
function map(line, _, blank) {
  return ">" + (blank ? "" : " ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list4, none) {
  if (typeof list4 === "string") {
    list4 = [list4];
  }
  if (!list4 || list4.length === 0) {
    return none;
  }
  let index3 = -1;
  while (++index3 < list4.length) {
    if (stack.includes(list4[index3])) {
      return true;
    }
  }
  return false;
}

// node_modules/mdast-util-to-markdown/lib/handle/break.js
function hardBreak2(_, _1, state, info) {
  let index3 = -1;
  while (++index3 < state.unsafe.length) {
    if (state.unsafe[index3].character === "\n" && patternInScope(state.stack, state.unsafe[index3])) {
      return /[ \t]/.test(info.before) ? "" : " ";
    }
  }
  return "\\\n";
}

// node_modules/longest-streak/index.js
function longestStreak(value, character) {
  const source = String(value);
  let index3 = source.indexOf(character);
  let expected = index3;
  let count = 0;
  let max = 0;
  if (typeof character !== "string" || character.length !== 1) {
    throw new Error("Expected character");
  }
  while (index3 !== -1) {
    if (index3 === expected) {
      if (++count > max) {
        max = count;
      }
    } else {
      count = 1;
    }
    expected = index3 + 1;
    index3 = source.indexOf(character, expected);
  }
  return max;
}

// node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
function formatCodeAsIndented(node2, state) {
  return Boolean(
    state.options.fences === false && node2.value && // If there’s no info…
    !node2.lang && // And there’s a non-whitespace character…
    /[^ \r\n]/.test(node2.value) && // And the value doesn’t start or end in a blank…
    !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node2.value)
  );
}

// node_modules/mdast-util-to-markdown/lib/util/check-fence.js
function checkFence(state) {
  const marker = state.options.fence || "`";
  if (marker !== "`" && marker !== "~") {
    throw new Error(
      "Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/code.js
function code2(node2, _, state, info) {
  const marker = checkFence(state);
  const raw = node2.value || "";
  const suffix = marker === "`" ? "GraveAccent" : "Tilde";
  if (formatCodeAsIndented(node2, state)) {
    const exit4 = state.enter("codeIndented");
    const value2 = state.indentLines(raw, map2);
    exit4();
    return value2;
  }
  const tracker = state.createTracker(info);
  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
  const exit3 = state.enter("codeFenced");
  let value = tracker.move(sequence);
  if (node2.lang) {
    const subexit = state.enter(`codeFencedLang${suffix}`);
    value += tracker.move(
      state.safe(node2.lang, {
        before: value,
        after: " ",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  if (node2.lang && node2.meta) {
    const subexit = state.enter(`codeFencedMeta${suffix}`);
    value += tracker.move(" ");
    value += tracker.move(
      state.safe(node2.meta, {
        before: value,
        after: "\n",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  value += tracker.move("\n");
  if (raw) {
    value += tracker.move(raw + "\n");
  }
  value += tracker.move(sequence);
  exit3();
  return value;
}
function map2(line, _, blank) {
  return (blank ? "" : "    ") + line;
}

// node_modules/mdast-util-to-markdown/lib/util/check-quote.js
function checkQuote(state) {
  const marker = state.options.quote || '"';
  if (marker !== '"' && marker !== "'") {
    throw new Error(
      "Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/definition.js
function definition2(node2, _, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("definition");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  value += tracker.move(
    state.safe(state.associationId(node2), {
      before: value,
      after: "]",
      ...tracker.current()
    })
  );
  value += tracker.move("]: ");
  subexit();
  if (
    // If there’s no url, or…
    !node2.url || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : "\n",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
function checkEmphasis(state) {
  const marker = state.options.emphasis || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js
function encodeCharacterReference(code4) {
  return "&#x" + code4.toString(16).toUpperCase() + ";";
}

// node_modules/mdast-util-to-markdown/lib/util/encode-info.js
function encodeInfo(outside, inside, marker) {
  const outsideKind = classifyCharacter(outside);
  const insideKind = classifyCharacter(inside);
  if (outsideKind === void 0) {
    return insideKind === void 0 ? (
      // Letter inside:
      // we have to encode *both* letters for `_` as it is looser.
      // it already forms for `*` (and GFMs `~`).
      marker === "_" ? { inside: true, outside: true } : { inside: false, outside: false }
    ) : insideKind === 1 ? (
      // Whitespace inside: encode both (letter, whitespace).
      { inside: true, outside: true }
    ) : (
      // Punctuation inside: encode outer (letter)
      { inside: false, outside: true }
    );
  }
  if (outsideKind === 1) {
    return insideKind === void 0 ? (
      // Letter inside: already forms.
      { inside: false, outside: false }
    ) : insideKind === 1 ? (
      // Whitespace inside: encode both (whitespace).
      { inside: true, outside: true }
    ) : (
      // Punctuation inside: already forms.
      { inside: false, outside: false }
    );
  }
  return insideKind === void 0 ? (
    // Letter inside: already forms.
    { inside: false, outside: false }
  ) : insideKind === 1 ? (
    // Whitespace inside: encode inner (whitespace).
    { inside: true, outside: false }
  ) : (
    // Punctuation inside: already forms.
    { inside: false, outside: false }
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
emphasis2.peek = emphasisPeek;
function emphasis2(node2, _, state, info) {
  const marker = checkEmphasis(state);
  const exit3 = state.enter("emphasis");
  const tracker = state.createTracker(info);
  const before = tracker.move(marker);
  let between = tracker.move(
    state.containerPhrasing(node2, {
      after: marker,
      before,
      ...tracker.current()
    })
  );
  const betweenHead = between.charCodeAt(0);
  const open = encodeInfo(
    info.before.charCodeAt(info.before.length - 1),
    betweenHead,
    marker
  );
  if (open.inside) {
    between = encodeCharacterReference(betweenHead) + between.slice(1);
  }
  const betweenTail = between.charCodeAt(between.length - 1);
  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);
  if (close.inside) {
    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);
  }
  const after = tracker.move(marker);
  exit3();
  state.attentionEncodeSurroundingInfo = {
    after: close.outside,
    before: open.outside
  };
  return before + between + after;
}
function emphasisPeek(_, _1, state) {
  return state.options.emphasis || "*";
}

// node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
function formatHeadingAsSetext(node2, state) {
  let literalWithBreak = false;
  visit(node2, function(node3) {
    if ("value" in node3 && /\r?\n|\r/.test(node3.value) || node3.type === "break") {
      literalWithBreak = true;
      return EXIT;
    }
  });
  return Boolean(
    (!node2.depth || node2.depth < 3) && toString(node2) && (state.options.setext || literalWithBreak)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/heading.js
function heading2(node2, _, state, info) {
  const rank = Math.max(Math.min(6, node2.depth || 1), 1);
  const tracker = state.createTracker(info);
  if (formatHeadingAsSetext(node2, state)) {
    const exit4 = state.enter("headingSetext");
    const subexit2 = state.enter("phrasing");
    const value2 = state.containerPhrasing(node2, {
      ...tracker.current(),
      before: "\n",
      after: "\n"
    });
    subexit2();
    exit4();
    return value2 + "\n" + (rank === 1 ? "=" : "-").repeat(
      // The whole size…
      value2.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1)
    );
  }
  const sequence = "#".repeat(rank);
  const exit3 = state.enter("headingAtx");
  const subexit = state.enter("phrasing");
  tracker.move(sequence + " ");
  let value = state.containerPhrasing(node2, {
    before: "# ",
    after: "\n",
    ...tracker.current()
  });
  if (/^[\t ]/.test(value)) {
    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1);
  }
  value = value ? sequence + " " + value : sequence;
  if (state.options.closeAtx) {
    value += " " + sequence;
  }
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/html.js
html4.peek = htmlPeek;
function html4(node2) {
  return node2.value || "";
}
function htmlPeek() {
  return "<";
}

// node_modules/mdast-util-to-markdown/lib/handle/image.js
image2.peek = imagePeek;
function image2(node2, _, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("image");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  value += tracker.move(
    state.safe(node2.alt, { before: value, after: "]", ...tracker.current() })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node2.url && node2.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function imagePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
imageReference2.peek = imageReferencePeek;
function imageReference2(node2, _, state, info) {
  const type = node2.referenceType;
  const exit3 = state.enter("imageReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  const alt = state.safe(node2.alt, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(alt + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference = state.safe(state.associationId(node2), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !alt || alt !== reference) {
    value += tracker.move(reference + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function imageReferencePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode2.peek = inlineCodePeek;
function inlineCode2(node2, _, state) {
  let value = node2.value || "";
  let sequence = "`";
  let index3 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = " " + value + " ";
  }
  while (++index3 < state.unsafe.length) {
    const pattern = state.unsafe[index3];
    const expression = state.compilePattern(pattern);
    let match;
    if (!pattern.atBreak) continue;
    while (match = expression.exec(value)) {
      let position4 = match.index;
      if (value.charCodeAt(position4) === 10 && value.charCodeAt(position4 - 1) === 13) {
        position4--;
      }
      value = value.slice(0, position4) + " " + value.slice(match.index + 1);
    }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
function formatLinkAsAutolink(node2, state) {
  const raw = toString(node2);
  return Boolean(
    !state.options.resourceLink && // If there’s a url…
    node2.url && // And there’s a no title…
    !node2.title && // And the content of `node` is a single text node…
    node2.children && node2.children.length === 1 && node2.children[0].type === "text" && // And if the url is the same as the content…
    (raw === node2.url || "mailto:" + raw === node2.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node2.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node2.url)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/link.js
link2.peek = linkPeek;
function link2(node2, _, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const tracker = state.createTracker(info);
  let exit3;
  let subexit;
  if (formatLinkAsAutolink(node2, state)) {
    const stack = state.stack;
    state.stack = [];
    exit3 = state.enter("autolink");
    let value2 = tracker.move("<");
    value2 += tracker.move(
      state.containerPhrasing(node2, {
        before: value2,
        after: ">",
        ...tracker.current()
      })
    );
    value2 += tracker.move(">");
    exit3();
    state.stack = stack;
    return value2;
  }
  exit3 = state.enter("link");
  subexit = state.enter("label");
  let value = tracker.move("[");
  value += tracker.move(
    state.containerPhrasing(node2, {
      before: value,
      after: "](",
      ...tracker.current()
    })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node2.url && node2.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node2.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node2.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node2.url, {
        before: value,
        after: node2.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node2.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node2.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function linkPeek(node2, _, state) {
  return formatLinkAsAutolink(node2, state) ? "<" : "[";
}

// node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
linkReference2.peek = linkReferencePeek;
function linkReference2(node2, _, state, info) {
  const type = node2.referenceType;
  const exit3 = state.enter("linkReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  const text8 = state.containerPhrasing(node2, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(text8 + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference = state.safe(state.associationId(node2), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !text8 || text8 !== reference) {
    value += tracker.move(reference + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function linkReferencePeek() {
  return "[";
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
function checkBulletOther(state) {
  const bullet = checkBullet(state);
  const bulletOther = state.options.bulletOther;
  if (!bulletOther) {
    return bullet === "*" ? "-" : "*";
  }
  if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
    throw new Error(
      "Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  }
  if (bulletOther === bullet) {
    throw new Error(
      "Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different"
    );
  }
  return bulletOther;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
function checkBulletOrdered(state) {
  const marker = state.options.bulletOrdered || ".";
  if (marker !== "." && marker !== ")") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule.js
function checkRule(state) {
  const marker = state.options.rule || "*";
  if (marker !== "*" && marker !== "-" && marker !== "_") {
    throw new Error(
      "Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/list.js
function list3(node2, parent, state, info) {
  const exit3 = state.enter("list");
  const bulletCurrent = state.bulletCurrent;
  let bullet = node2.ordered ? checkBulletOrdered(state) : checkBullet(state);
  const bulletOther = node2.ordered ? bullet === "." ? ")" : "." : checkBulletOther(state);
  let useDifferentMarker = parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
  if (!node2.ordered) {
    const firstListItem = node2.children ? node2.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (bullet === "*" || bullet === "-") && // Empty first list item:
      firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
      state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
      state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0
    ) {
      useDifferentMarker = true;
    }
    if (checkRule(state) === bullet && firstListItem) {
      let index3 = -1;
      while (++index3 < node2.children.length) {
        const item2 = node2.children[index3];
        if (item2 && item2.type === "listItem" && item2.children && item2.children[0] && item2.children[0].type === "thematicBreak") {
          useDifferentMarker = true;
          break;
        }
      }
    }
  }
  if (useDifferentMarker) {
    bullet = bulletOther;
  }
  state.bulletCurrent = bullet;
  const value = state.containerFlow(node2, info);
  state.bulletLastUsed = bullet;
  state.bulletCurrent = bulletCurrent;
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
  const style = state.options.listItemIndent || "one";
  if (style !== "tab" && style !== "one" && style !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style;
}

// node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem2(node2, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
  }
  let size = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
    size = Math.ceil(size / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size - bullet.length));
  tracker.shift(size);
  const exit3 = state.enter("listItem");
  const value = state.indentLines(
    state.containerFlow(node2, tracker.current()),
    map3
  );
  exit3();
  return value;
  function map3(line, index3, blank) {
    if (index3) {
      return (blank ? "" : " ".repeat(size)) + line;
    }
    return (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line;
  }
}

// node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
function paragraph2(node2, _, state, info) {
  const exit3 = state.enter("paragraph");
  const subexit = state.enter("phrasing");
  const value = state.containerPhrasing(node2, info);
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-phrasing/lib/index.js
var phrasing = (
  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
  convert([
    "break",
    "delete",
    "emphasis",
    // To do: next major: removed since footnotes were added to GFM.
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    // Enabled by `mdast-util-math`:
    "inlineMath",
    "link",
    "linkReference",
    // Enabled by `mdast-util-mdx`:
    "mdxJsxTextElement",
    // Enabled by `mdast-util-mdx`:
    "mdxTextExpression",
    "strong",
    "text",
    // Enabled by `mdast-util-directive`:
    "textDirective"
  ])
);

// node_modules/mdast-util-to-markdown/lib/handle/root.js
function root3(node2, _, state, info) {
  const hasPhrasing = node2.children.some(function(d) {
    return phrasing(d);
  });
  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow;
  return container.call(state, node2, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-strong.js
function checkStrong(state) {
  const marker = state.options.strong || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/strong.js
strong2.peek = strongPeek;
function strong2(node2, _, state, info) {
  const marker = checkStrong(state);
  const exit3 = state.enter("strong");
  const tracker = state.createTracker(info);
  const before = tracker.move(marker + marker);
  let between = tracker.move(
    state.containerPhrasing(node2, {
      after: marker,
      before,
      ...tracker.current()
    })
  );
  const betweenHead = between.charCodeAt(0);
  const open = encodeInfo(
    info.before.charCodeAt(info.before.length - 1),
    betweenHead,
    marker
  );
  if (open.inside) {
    between = encodeCharacterReference(betweenHead) + between.slice(1);
  }
  const betweenTail = between.charCodeAt(between.length - 1);
  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker);
  if (close.inside) {
    between = between.slice(0, -1) + encodeCharacterReference(betweenTail);
  }
  const after = tracker.move(marker + marker);
  exit3();
  state.attentionEncodeSurroundingInfo = {
    after: close.outside,
    before: open.outside
  };
  return before + between + after;
}
function strongPeek(_, _1, state) {
  return state.options.strong || "*";
}

// node_modules/mdast-util-to-markdown/lib/handle/text.js
function text5(node2, _, state, info) {
  return state.safe(node2.value, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
function checkRuleRepetition(state) {
  const repetition = state.options.ruleRepetition || 3;
  if (repetition < 3) {
    throw new Error(
      "Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more"
    );
  }
  return repetition;
}

// node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
function thematicBreak3(_, _1, state) {
  const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
  return state.options.ruleSpaces ? value.slice(0, -1) : value;
}

// node_modules/mdast-util-to-markdown/lib/handle/index.js
var handle = {
  blockquote: blockquote2,
  break: hardBreak2,
  code: code2,
  definition: definition2,
  emphasis: emphasis2,
  hardBreak: hardBreak2,
  heading: heading2,
  html: html4,
  image: image2,
  imageReference: imageReference2,
  inlineCode: inlineCode2,
  link: link2,
  linkReference: linkReference2,
  list: list3,
  listItem: listItem2,
  paragraph: paragraph2,
  root: root3,
  strong: strong2,
  text: text5,
  thematicBreak: thematicBreak3
};

// node_modules/mdast-util-gfm-table/lib/index.js
function gfmTableFromMarkdown() {
  return {
    enter: {
      table: enterTable,
      tableData: enterCell,
      tableHeader: enterCell,
      tableRow: enterRow
    },
    exit: {
      codeText: exitCodeText,
      table: exitTable,
      tableData: exit2,
      tableHeader: exit2,
      tableRow: exit2
    }
  };
}
function enterTable(token) {
  const align = token._align;
  ok2(align, "expected `_align` on table");
  this.enter(
    {
      type: "table",
      align: align.map(function(d) {
        return d === "none" ? null : d;
      }),
      children: []
    },
    token
  );
  this.data.inTable = true;
}
function exitTable(token) {
  this.exit(token);
  this.data.inTable = void 0;
}
function enterRow(token) {
  this.enter({ type: "tableRow", children: [] }, token);
}
function exit2(token) {
  this.exit(token);
}
function enterCell(token) {
  this.enter({ type: "tableCell", children: [] }, token);
}
function exitCodeText(token) {
  let value = this.resume();
  if (this.data.inTable) {
    value = value.replace(/\\([\\|])/g, replace);
  }
  const node2 = this.stack[this.stack.length - 1];
  ok2(node2.type === "inlineCode");
  node2.value = value;
  this.exit(token);
}
function replace($0, $1) {
  return $1 === "|" ? $1 : $0;
}
function gfmTableToMarkdown(options) {
  const settings = options || {};
  const padding = settings.tableCellPadding;
  const alignDelimiters = settings.tablePipeAlign;
  const stringLength = settings.stringLength;
  const around = padding ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      inlineCode: inlineCodeWithTable,
      table: handleTable,
      tableCell: handleTableCell,
      tableRow: handleTableRow
    }
  };
  function handleTable(node2, _, state, info) {
    return serializeData(handleTableAsData(node2, state, info), node2.align);
  }
  function handleTableRow(node2, _, state, info) {
    const row2 = handleTableRowAsData(node2, state, info);
    const value = serializeData([row2]);
    return value.slice(0, value.indexOf("\n"));
  }
  function handleTableCell(node2, _, state, info) {
    const exit3 = state.enter("tableCell");
    const subexit = state.enter("phrasing");
    const value = state.containerPhrasing(node2, {
      ...info,
      before: around,
      after: around
    });
    subexit();
    exit3();
    return value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node2, state, info) {
    const children = node2.children;
    let index3 = -1;
    const result = [];
    const subexit = state.enter("table");
    while (++index3 < children.length) {
      result[index3] = handleTableRowAsData(children[index3], state, info);
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node2, state, info) {
    const children = node2.children;
    let index3 = -1;
    const result = [];
    const subexit = state.enter("tableRow");
    while (++index3 < children.length) {
      result[index3] = handleTableCell(children[index3], node2, state, info);
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node2, parent, state) {
    let value = handle.inlineCode(node2, parent, state);
    if (state.stack.includes("tableCell")) {
      value = value.replace(/\|/g, "\\$&");
    }
    return value;
  }
}

// node_modules/mdast-util-gfm-task-list-item/lib/index.js
function gfmTaskListItemFromMarkdown() {
  return {
    exit: {
      taskListCheckValueChecked: exitCheck,
      taskListCheckValueUnchecked: exitCheck,
      paragraph: exitParagraphWithTaskListItem
    }
  };
}
function gfmTaskListItemToMarkdown() {
  return {
    unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
    handlers: { listItem: listItemWithTaskListItem }
  };
}
function exitCheck(token) {
  const node2 = this.stack[this.stack.length - 2];
  ok2(node2.type === "listItem");
  node2.checked = token.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token) {
  const parent = this.stack[this.stack.length - 2];
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node2 = this.stack[this.stack.length - 1];
    ok2(node2.type === "paragraph");
    const head = node2.children[0];
    if (head && head.type === "text") {
      const siblings = parent.children;
      let index3 = -1;
      let firstParaghraph;
      while (++index3 < siblings.length) {
        const sibling = siblings[index3];
        if (sibling.type === "paragraph") {
          firstParaghraph = sibling;
          break;
        }
      }
      if (firstParaghraph === node2) {
        head.value = head.value.slice(1);
        if (head.value.length === 0) {
          node2.children.shift();
        } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
          head.position.start.column++;
          head.position.start.offset++;
          node2.position.start = Object.assign({}, head.position.start);
        }
      }
    }
  }
  this.exit(token);
}
function listItemWithTaskListItem(node2, parent, state, info) {
  const head = node2.children[0];
  const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
  const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
  const tracker = state.createTracker(info);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value = handle.listItem(node2, parent, state, {
    ...info,
    ...tracker.current()
  });
  if (checkable) {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value;
  function check($0) {
    return $0 + checkbox;
  }
}

// node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown(),
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown(),
    gfmTableFromMarkdown(),
    gfmTaskListItemFromMarkdown()
  ];
}
function gfmToMarkdown(options) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown(),
      gfmFootnoteToMarkdown(options),
      gfmStrikethroughToMarkdown(),
      gfmTableToMarkdown(options),
      gfmTaskListItemToMarkdown()
    ]
  };
}

// node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
var wwwPrefix = {
  tokenize: tokenizeWwwPrefix,
  partial: true
};
var domain = {
  tokenize: tokenizeDomain,
  partial: true
};
var path = {
  tokenize: tokenizePath,
  partial: true
};
var trail = {
  tokenize: tokenizeTrail,
  partial: true
};
var emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
var wwwAutolink = {
  name: "wwwAutolink",
  tokenize: tokenizeWwwAutolink,
  previous: previousWww
};
var protocolAutolink = {
  name: "protocolAutolink",
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
var emailAutolink = {
  name: "emailAutolink",
  tokenize: tokenizeEmailAutolink,
  previous: previousEmail
};
var text6 = {};
function gfmAutolinkLiteral() {
  return {
    text: text6
  };
}
var code3 = 48;
while (code3 < 123) {
  text6[code3] = emailAutolink;
  code3++;
  if (code3 === 58) code3 = 65;
  else if (code3 === 91) code3 = 97;
}
text6[43] = emailAutolink;
text6[45] = emailAutolink;
text6[46] = emailAutolink;
text6[95] = emailAutolink;
text6[72] = [emailAutolink, protocolAutolink];
text6[104] = [emailAutolink, protocolAutolink];
text6[87] = [emailAutolink, wwwAutolink];
text6[119] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok3, nok) {
  const self2 = this;
  let dot;
  let data;
  return start2;
  function start2(code4) {
    if (!gfmAtext(code4) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code4);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code4);
  }
  function atext(code4) {
    if (gfmAtext(code4)) {
      effects.consume(code4);
      return atext;
    }
    if (code4 === 64) {
      effects.consume(code4);
      return emailDomain;
    }
    return nok(code4);
  }
  function emailDomain(code4) {
    if (code4 === 46) {
      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code4);
    }
    if (code4 === 45 || code4 === 95 || asciiAlphanumeric(code4)) {
      data = true;
      effects.consume(code4);
      return emailDomain;
    }
    return emailDomainAfter(code4);
  }
  function emailDomainDot(code4) {
    effects.consume(code4);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code4) {
    if (data && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok3(code4);
    }
    return nok(code4);
  }
}
function tokenizeWwwAutolink(effects, ok3, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code4) {
    if (code4 !== 87 && code4 !== 119 || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code4);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code4);
  }
  function wwwAfter(code4) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok3(code4);
  }
}
function tokenizeProtocolAutolink(effects, ok3, nok) {
  const self2 = this;
  let buffer = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code4) {
    if ((code4 === 72 || code4 === 104) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer += String.fromCodePoint(code4);
      effects.consume(code4);
      return protocolPrefixInside;
    }
    return nok(code4);
  }
  function protocolPrefixInside(code4) {
    if (asciiAlpha(code4) && buffer.length < 5) {
      buffer += String.fromCodePoint(code4);
      effects.consume(code4);
      return protocolPrefixInside;
    }
    if (code4 === 58) {
      const protocol = buffer.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code4);
        return protocolSlashesInside;
      }
    }
    return nok(code4);
  }
  function protocolSlashesInside(code4) {
    if (code4 === 47) {
      effects.consume(code4);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code4);
  }
  function afterProtocol(code4) {
    return code4 === null || asciiControl(code4) || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || unicodePunctuation(code4) ? nok(code4) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code4);
  }
  function protocolAfter(code4) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok3(code4);
  }
}
function tokenizeWwwPrefix(effects, ok3, nok) {
  let size = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code4) {
    if ((code4 === 87 || code4 === 119) && size < 3) {
      size++;
      effects.consume(code4);
      return wwwPrefixInside;
    }
    if (code4 === 46 && size === 3) {
      effects.consume(code4);
      return wwwPrefixAfter;
    }
    return nok(code4);
  }
  function wwwPrefixAfter(code4) {
    return code4 === null ? nok(code4) : ok3(code4);
  }
}
function tokenizeDomain(effects, ok3, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code4) {
    if (code4 === 46 || code4 === 95) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code4);
    }
    if (code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4) || code4 !== 45 && unicodePunctuation(code4)) {
      return domainAfter(code4);
    }
    seen = true;
    effects.consume(code4);
    return domainInside;
  }
  function domainAtPunctuation(code4) {
    if (code4 === 95) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code4);
    return domainInside;
  }
  function domainAfter(code4) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code4);
    }
    return ok3(code4);
  }
}
function tokenizePath(effects, ok3) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code4) {
    if (code4 === 40) {
      sizeOpen++;
      effects.consume(code4);
      return pathInside;
    }
    if (code4 === 41 && sizeClose < sizeOpen) {
      return pathAtPunctuation(code4);
    }
    if (code4 === 33 || code4 === 34 || code4 === 38 || code4 === 39 || code4 === 41 || code4 === 42 || code4 === 44 || code4 === 46 || code4 === 58 || code4 === 59 || code4 === 60 || code4 === 63 || code4 === 93 || code4 === 95 || code4 === 126) {
      return effects.check(trail, ok3, pathAtPunctuation)(code4);
    }
    if (code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      return ok3(code4);
    }
    effects.consume(code4);
    return pathInside;
  }
  function pathAtPunctuation(code4) {
    if (code4 === 41) {
      sizeClose++;
    }
    effects.consume(code4);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok3, nok) {
  return trail2;
  function trail2(code4) {
    if (code4 === 33 || code4 === 34 || code4 === 39 || code4 === 41 || code4 === 42 || code4 === 44 || code4 === 46 || code4 === 58 || code4 === 59 || code4 === 63 || code4 === 95 || code4 === 126) {
      effects.consume(code4);
      return trail2;
    }
    if (code4 === 38) {
      effects.consume(code4);
      return trailCharacterReferenceStart;
    }
    if (code4 === 93) {
      effects.consume(code4);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code4 === 60 || // So is whitespace.
      code4 === null || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)
    ) {
      return ok3(code4);
    }
    return nok(code4);
  }
  function trailBracketAfter(code4) {
    if (code4 === null || code4 === 40 || code4 === 91 || markdownLineEndingOrSpace(code4) || unicodeWhitespace(code4)) {
      return ok3(code4);
    }
    return trail2(code4);
  }
  function trailCharacterReferenceStart(code4) {
    return asciiAlpha(code4) ? trailCharacterReferenceInside(code4) : nok(code4);
  }
  function trailCharacterReferenceInside(code4) {
    if (code4 === 59) {
      effects.consume(code4);
      return trail2;
    }
    if (asciiAlpha(code4)) {
      effects.consume(code4);
      return trailCharacterReferenceInside;
    }
    return nok(code4);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok3, nok) {
  return start2;
  function start2(code4) {
    effects.consume(code4);
    return after;
  }
  function after(code4) {
    return asciiAlphanumeric(code4) ? nok(code4) : ok3(code4);
  }
}
function previousWww(code4) {
  return code4 === null || code4 === 40 || code4 === 42 || code4 === 95 || code4 === 91 || code4 === 93 || code4 === 126 || markdownLineEndingOrSpace(code4);
}
function previousProtocol(code4) {
  return !asciiAlpha(code4);
}
function previousEmail(code4) {
  return !(code4 === 47 || gfmAtext(code4));
}
function gfmAtext(code4) {
  return code4 === 43 || code4 === 45 || code4 === 46 || code4 === 95 || asciiAlphanumeric(code4);
}
function previousUnbalanced(events) {
  let index3 = events.length;
  let result = false;
  while (index3--) {
    const token = events[index3][1];
    if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
      result = true;
      break;
    }
    if (token._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events.length > 0 && !result) {
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}

// node_modules/micromark-extension-gfm-footnote/lib/syntax.js
var indent = {
  tokenize: tokenizeIndent2,
  partial: true
};
function gfmFootnote() {
  return {
    document: {
      [91]: {
        name: "gfmFootnoteDefinition",
        tokenize: tokenizeDefinitionStart,
        continuation: {
          tokenize: tokenizeDefinitionContinuation
        },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [91]: {
        name: "gfmFootnoteCall",
        tokenize: tokenizeGfmFootnoteCall
      },
      [93]: {
        name: "gfmPotentialFootnoteCall",
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  let index3 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index3--) {
    const token = self2.events[index3][1];
    if (token.type === "labelImage") {
      labelStart = token;
      break;
    }
    if (token.type === "gfmFootnoteCall" || token.type === "labelLink" || token.type === "label" || token.type === "image" || token.type === "link") {
      break;
    }
  }
  return start2;
  function start2(code4) {
    if (!labelStart || !labelStart._balanced) {
      return nok(code4);
    }
    const id = normalizeIdentifier(self2.sliceSerialize({
      start: labelStart.end,
      end: self2.now()
    }));
    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {
      return nok(code4);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok3(code4);
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index3 = events.length;
  let labelStart;
  while (index3--) {
    if (events[index3][1].type === "labelImage" && events[index3][0] === "enter") {
      labelStart = events[index3][1];
      break;
    }
  }
  events[index3 + 1][1].type = "data";
  events[index3 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events[index3 + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events[index3 + 3][1].end),
    end: Object.assign({}, events[index3 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string3 = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  const chunk = {
    type: "chunkString",
    contentType: "string",
    start: Object.assign({}, string3.start),
    end: Object.assign({}, string3.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events[index3 + 1],
    events[index3 + 2],
    ["enter", call, context],
    // The `[`
    events[index3 + 3],
    events[index3 + 4],
    // The `^`.
    ["enter", marker, context],
    ["exit", marker, context],
    // Everything in between.
    ["enter", string3, context],
    ["enter", chunk, context],
    ["exit", chunk, context],
    ["exit", string3, context],
    // The ending (`]`, properly parsed and labelled).
    events[events.length - 2],
    events[events.length - 1],
    ["exit", call, context]
  ];
  events.splice(index3, events.length - index3 + 1, ...replacement);
  return events;
}
function tokenizeGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size = 0;
  let data;
  return start2;
  function start2(code4) {
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code4) {
    if (code4 !== 94) return nok(code4);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code4) {
    if (
      // Too long.
      size > 999 || // Closing brace with nothing.
      code4 === 93 && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code4 === null || code4 === 91 || markdownLineEndingOrSpace(code4)
    ) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
        return nok(code4);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok3;
    }
    if (!markdownLineEndingOrSpace(code4)) {
      data = true;
    }
    size++;
    effects.consume(code4);
    return code4 === 92 ? callEscape : callData;
  }
  function callEscape(code4) {
    if (code4 === 91 || code4 === 92 || code4 === 93) {
      effects.consume(code4);
      size++;
      return callData;
    }
    return callData(code4);
  }
}
function tokenizeDefinitionStart(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier;
  let size = 0;
  let data;
  return start2;
  function start2(code4) {
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code4);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code4) {
    if (code4 === 94) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code4);
  }
  function labelInside(code4) {
    if (
      // Too long.
      size > 999 || // Closing brace with nothing.
      code4 === 93 && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code4 === null || code4 === 91 || markdownLineEndingOrSpace(code4)
    ) {
      return nok(code4);
    }
    if (code4 === 93) {
      effects.exit("chunkString");
      const token = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier = normalizeIdentifier(self2.sliceSerialize(token));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code4);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code4)) {
      data = true;
    }
    size++;
    effects.consume(code4);
    return code4 === 92 ? labelEscape : labelInside;
  }
  function labelEscape(code4) {
    if (code4 === 91 || code4 === 92 || code4 === 93) {
      effects.consume(code4);
      size++;
      return labelInside;
    }
    return labelInside(code4);
  }
  function labelAfter(code4) {
    if (code4 === 58) {
      effects.enter("definitionMarker");
      effects.consume(code4);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier)) {
        defined.push(identifier);
      }
      return factorySpace(effects, whitespaceAfter, "gfmFootnoteDefinitionWhitespace");
    }
    return nok(code4);
  }
  function whitespaceAfter(code4) {
    return ok3(code4);
  }
}
function tokenizeDefinitionContinuation(effects, ok3, nok) {
  return effects.check(blankLine, ok3, effects.attempt(indent, ok3, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(effects, afterPrefix, "gfmFootnoteDefinitionIndent", 4 + 1);
  function afterPrefix(code4) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok3(code4) : nok(code4);
  }
}

// node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js
function gfmStrikethrough(options) {
  const options_ = options || {};
  let single = options_.singleTilde;
  const tokenizer = {
    name: "strikethrough",
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: {
      [126]: tokenizer
    },
    insideSpan: {
      null: [tokenizer]
    },
    attentionMarkers: {
      null: [126]
    }
  };
  function resolveAllStrikethrough(events, context) {
    let index3 = -1;
    while (++index3 < events.length) {
      if (events[index3][0] === "enter" && events[index3][1].type === "strikethroughSequenceTemporary" && events[index3][1]._close) {
        let open = index3;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
          events[index3][1].end.offset - events[index3][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index3][1].type = "strikethroughSequence";
            events[open][1].type = "strikethroughSequence";
            const strikethrough2 = {
              type: "strikethrough",
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index3][1].end)
            };
            const text8 = {
              type: "strikethroughText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index3][1].start)
            };
            const nextEvents = [["enter", strikethrough2, context], ["enter", events[open][1], context], ["exit", events[open][1], context], ["enter", text8, context]];
            const insideSpan2 = context.parser.constructs.insideSpan.null;
            if (insideSpan2) {
              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan2, events.slice(open + 1, index3), context));
            }
            splice(nextEvents, nextEvents.length, 0, [["exit", text8, context], ["enter", events[index3][1], context], ["exit", events[index3][1], context], ["exit", strikethrough2, context]]);
            splice(events, open - 1, index3 - open + 3, nextEvents);
            index3 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index3 = -1;
    while (++index3 < events.length) {
      if (events[index3][1].type === "strikethroughSequenceTemporary") {
        events[index3][1].type = "data";
      }
    }
    return events;
  }
  function tokenizeStrikethrough(effects, ok3, nok) {
    const previous3 = this.previous;
    const events = this.events;
    let size = 0;
    return start2;
    function start2(code4) {
      if (previous3 === 126 && events[events.length - 1][1].type !== "characterEscape") {
        return nok(code4);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code4);
    }
    function more(code4) {
      const before = classifyCharacter(previous3);
      if (code4 === 126) {
        if (size > 1) return nok(code4);
        effects.consume(code4);
        size++;
        return more;
      }
      if (size < 2 && !single) return nok(code4);
      const token = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code4);
      token._open = !after || after === 2 && Boolean(before);
      token._close = !before || before === 2 && Boolean(after);
      return ok3(code4);
    }
  }
}

// node_modules/micromark-extension-gfm-table/lib/edit-map.js
var EditMap = class {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {undefined}
   */
  add(index3, remove, add) {
    addImplementation(this, index3, remove, add);
  }
  // To do: add this when moving to `micromark`.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {undefined}
  //  */
  // addBefore(index, remove, add) {
  //   addImplementation(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {undefined}
   */
  consume(events) {
    this.map.sort(function(a2, b) {
      return a2[0] - b[0];
    });
    if (this.map.length === 0) {
      return;
    }
    let index3 = this.map.length;
    const vecs = [];
    while (index3 > 0) {
      index3 -= 1;
      vecs.push(events.slice(this.map[index3][0] + this.map[index3][1]), this.map[index3][2]);
      events.length = this.map[index3][0];
    }
    vecs.push(events.slice());
    events.length = 0;
    let slice = vecs.pop();
    while (slice) {
      for (const element4 of slice) {
        events.push(element4);
      }
      slice = vecs.pop();
    }
    this.map.length = 0;
  }
};
function addImplementation(editMap, at, remove, add) {
  let index3 = 0;
  if (remove === 0 && add.length === 0) {
    return;
  }
  while (index3 < editMap.map.length) {
    if (editMap.map[index3][0] === at) {
      editMap.map[index3][1] += remove;
      editMap.map[index3][2].push(...add);
      return;
    }
    index3 += 1;
  }
  editMap.map.push([at, remove, add]);
}

// node_modules/micromark-extension-gfm-table/lib/infer.js
function gfmTableAlign(events, index3) {
  let inDelimiterRow = false;
  const align = [];
  while (index3 < events.length) {
    const event = events[index3];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(events[index3 + 1][1].type === "tableDelimiterMarker" ? "left" : "none");
        }
      } else if (event[1].type === "tableContent") {
        if (events[index3 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index3 += 1;
  }
  return align;
}

// node_modules/micromark-extension-gfm-table/lib/syntax.js
function gfmTable() {
  return {
    flow: {
      null: {
        name: "table",
        tokenize: tokenizeTable,
        resolveAll: resolveTable
      }
    }
  };
}
function tokenizeTable(effects, ok3, nok) {
  const self2 = this;
  let size = 0;
  let sizeB = 0;
  let seen;
  return start2;
  function start2(code4) {
    let index3 = self2.events.length - 1;
    while (index3 > -1) {
      const type = self2.events[index3][1].type;
      if (type === "lineEnding" || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type === "linePrefix") index3--;
      else break;
    }
    const tail = index3 > -1 ? self2.events[index3][1].type : null;
    const next = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    return next(code4);
  }
  function headRowBefore(code4) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code4);
  }
  function headRowStart(code4) {
    if (code4 === 124) {
      return headRowBreak(code4);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code4);
  }
  function headRowBreak(code4) {
    if (code4 === null) {
      return nok(code4);
    }
    if (markdownLineEnding(code4)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter("lineEnding");
        effects.consume(code4);
        effects.exit("lineEnding");
        return headDelimiterStart;
      }
      return nok(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, headRowBreak, "whitespace")(code4);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size += 1;
    }
    if (code4 === 124) {
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter("data");
    return headRowData(code4);
  }
  function headRowData(code4) {
    if (code4 === null || code4 === 124 || markdownLineEndingOrSpace(code4)) {
      effects.exit("data");
      return headRowBreak(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? headRowEscape : headRowData;
  }
  function headRowEscape(code4) {
    if (code4 === 92 || code4 === 124) {
      effects.consume(code4);
      return headRowData;
    }
    return headRowData(code4);
  }
  function headDelimiterStart(code4) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code4);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code4)) {
      return factorySpace(effects, headDelimiterBefore, "linePrefix", self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4)(code4);
    }
    return headDelimiterBefore(code4);
  }
  function headDelimiterBefore(code4) {
    if (code4 === 45 || code4 === 58) {
      return headDelimiterValueBefore(code4);
    }
    if (code4 === 124) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterCellBefore(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(effects, headDelimiterValueBefore, "whitespace")(code4);
    }
    return headDelimiterValueBefore(code4);
  }
  function headDelimiterValueBefore(code4) {
    if (code4 === 58) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code4);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code4 === 45) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      return headDelimiterCellAfter(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterLeftAlignmentAfter(code4) {
    if (code4 === 45) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterFiller(code4) {
    if (code4 === 45) {
      effects.consume(code4);
      return headDelimiterFiller;
    }
    if (code4 === 58) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code4);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code4);
  }
  function headDelimiterRightAlignmentAfter(code4) {
    if (markdownSpace(code4)) {
      return factorySpace(effects, headDelimiterCellAfter, "whitespace")(code4);
    }
    return headDelimiterCellAfter(code4);
  }
  function headDelimiterCellAfter(code4) {
    if (code4 === 124) {
      return headDelimiterBefore(code4);
    }
    if (code4 === null || markdownLineEnding(code4)) {
      if (!seen || size !== sizeB) {
        return headDelimiterNok(code4);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok3(code4);
    }
    return headDelimiterNok(code4);
  }
  function headDelimiterNok(code4) {
    return nok(code4);
  }
  function bodyRowStart(code4) {
    effects.enter("tableRow");
    return bodyRowBreak(code4);
  }
  function bodyRowBreak(code4) {
    if (code4 === 124) {
      effects.enter("tableCellDivider");
      effects.consume(code4);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code4 === null || markdownLineEnding(code4)) {
      effects.exit("tableRow");
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return factorySpace(effects, bodyRowBreak, "whitespace")(code4);
    }
    effects.enter("data");
    return bodyRowData(code4);
  }
  function bodyRowData(code4) {
    if (code4 === null || code4 === 124 || markdownLineEndingOrSpace(code4)) {
      effects.exit("data");
      return bodyRowBreak(code4);
    }
    effects.consume(code4);
    return code4 === 92 ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code4) {
    if (code4 === 92 || code4 === 124) {
      effects.consume(code4);
      return bodyRowData;
    }
    return bodyRowData(code4);
  }
}
function resolveTable(events, context) {
  let index3 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map3 = new EditMap();
  while (++index3 < events.length) {
    const event = events[index3];
    const token = event[1];
    if (event[0] === "enter") {
      if (token.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          flushTableEnd(map3, context, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token.start),
          // Note: correct end is set later.
          end: Object.assign({}, token.end)
        };
        map3.add(index3, 0, [["enter", currentTable, context]]);
      } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell = [0, index3 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token.start),
            // Note: correct end is set later.
            end: Object.assign({}, token.end)
          };
          map3.add(index3, 0, [["enter", currentBody, context]]);
        }
        rowKind = token.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell[2] === 0) {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(map3, context, lastCell, rowKind, void 0, currentCell);
            lastCell = [0, 0, 0, 0];
          }
          cell[2] = index3;
        }
      } else if (token.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell[0] = cell[1];
            currentCell = flushCell(map3, context, lastCell, rowKind, void 0, currentCell);
          }
          lastCell = cell;
          cell = [lastCell[1], index3, 0, 0];
        }
      }
    } else if (token.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index3;
    } else if (token.type === "tableRow" || token.type === "tableDelimiterRow") {
      lastTableEnd = index3;
      if (lastCell[1] !== 0) {
        cell[0] = cell[1];
        currentCell = flushCell(map3, context, lastCell, rowKind, index3, currentCell);
      } else if (cell[1] !== 0) {
        currentCell = flushCell(map3, context, cell, rowKind, index3, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token.type === "data" || token.type === "tableDelimiterMarker" || token.type === "tableDelimiterFiller")) {
      cell[3] = index3;
    }
  }
  if (lastTableEnd !== 0) {
    flushTableEnd(map3, context, lastTableEnd, currentTable, currentBody);
  }
  map3.consume(context.events);
  index3 = -1;
  while (++index3 < context.events.length) {
    const event = context.events[index3];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context.events, index3);
    }
  }
  return events;
}
function flushCell(map3, context, range, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range[0] !== 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
    map3.add(range[0], 0, [["exit", previousCell, context]]);
  }
  const now = getPoint(context.events, range[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map3.add(range[1], 0, [["enter", previousCell, context]]);
  if (range[2] !== 0) {
    const relatedStart = getPoint(context.events, range[2]);
    const relatedEnd = getPoint(context.events, range[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map3.add(range[2], 0, [["enter", valueToken, context]]);
    if (rowKind !== 2) {
      const start2 = context.events[range[2]];
      const end = context.events[range[3]];
      start2[1].end = Object.assign({}, end[1].end);
      start2[1].type = "chunkText";
      start2[1].contentType = "text";
      if (range[3] > range[2] + 1) {
        const a2 = range[2] + 1;
        const b = range[3] - range[2] - 1;
        map3.add(a2, b, []);
      }
    }
    map3.add(range[3] + 1, 0, [["exit", valueToken, context]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
    map3.add(rowEnd, 0, [["exit", previousCell, context]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map3, context, index3, table2, tableBody) {
  const exits = [];
  const related = getPoint(context.events, index3);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context]);
  }
  table2.end = Object.assign({}, related);
  exits.push(["exit", table2, context]);
  map3.add(index3 + 1, 0, exits);
}
function getPoint(events, index3) {
  const event = events[index3];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}

// node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js
var tasklistCheck = {
  name: "tasklistCheck",
  tokenize: tokenizeTasklistCheck
};
function gfmTaskListItem() {
  return {
    text: {
      [91]: tasklistCheck
    }
  };
}
function tokenizeTasklistCheck(effects, ok3, nok) {
  const self2 = this;
  return open;
  function open(code4) {
    if (
      // Exit if there’s stuff before.
      self2.previous !== null || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code4);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code4);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code4) {
    if (markdownLineEndingOrSpace(code4)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code4);
      effects.exit("taskListCheckValueUnchecked");
      return close;
    }
    if (code4 === 88 || code4 === 120) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code4);
      effects.exit("taskListCheckValueChecked");
      return close;
    }
    return nok(code4);
  }
  function close(code4) {
    if (code4 === 93) {
      effects.enter("taskListCheckMarker");
      effects.consume(code4);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code4);
  }
  function after(code4) {
    if (markdownLineEnding(code4)) {
      return ok3(code4);
    }
    if (markdownSpace(code4)) {
      return effects.check({
        tokenize: spaceThenNonSpace
      }, ok3, nok)(code4);
    }
    return nok(code4);
  }
}
function spaceThenNonSpace(effects, ok3, nok) {
  return factorySpace(effects, after, "whitespace");
  function after(code4) {
    return code4 === null ? nok(code4) : ok3(code4);
  }
}

// node_modules/micromark-extension-gfm/index.js
function gfm(options) {
  return combineExtensions([
    gfmAutolinkLiteral(),
    gfmFootnote(),
    gfmStrikethrough(options),
    gfmTable(),
    gfmTaskListItem()
  ]);
}

// node_modules/remark-gfm/lib/index.js
var emptyOptions5 = {};
function remarkGfm(options) {
  const self2 = (
    /** @type {Processor<Root>} */
    this
  );
  const settings = options || emptyOptions5;
  const data = self2.data();
  const micromarkExtensions = data.micromarkExtensions || (data.micromarkExtensions = []);
  const fromMarkdownExtensions = data.fromMarkdownExtensions || (data.fromMarkdownExtensions = []);
  const toMarkdownExtensions = data.toMarkdownExtensions || (data.toMarkdownExtensions = []);
  micromarkExtensions.push(gfm(settings));
  fromMarkdownExtensions.push(gfmFromMarkdown());
  toMarkdownExtensions.push(gfmToMarkdown(settings));
}

// src/components/Message/renderText/componentRenderers/Anchor.tsx
var import_clsx12 = __toESM(require("clsx"));
var import_react48 = __toESM(require("react"));
var Anchor = ({ children, href }) => {
  const isEmail = href?.startsWith("mailto:");
  const isUrl2 = href?.startsWith("http");
  if (!href || !isEmail && !isUrl2) return /* @__PURE__ */ import_react48.default.createElement(import_react48.default.Fragment, null, children);
  return /* @__PURE__ */ import_react48.default.createElement(
    "a",
    {
      className: (0, import_clsx12.default)({ "str-chat__message-url-link": isUrl2 }),
      href,
      rel: "nofollow noreferrer noopener",
      target: "_blank"
    },
    children
  );
};

// src/components/Message/renderText/componentRenderers/Emoji.tsx
var import_react49 = __toESM(require("react"));
var Emoji = ({ children }) => /* @__PURE__ */ import_react49.default.createElement("span", { className: "inline-text-emoji", "data-testid": "inline-text-emoji" }, children);

// src/components/Message/renderText/componentRenderers/Mention.tsx
var import_react50 = __toESM(require("react"));
var Mention = ({
  children,
  node: { mentionedUser }
}) => /* @__PURE__ */ import_react50.default.createElement("span", { className: "str-chat__message-mention", "data-user-id": mentionedUser.id }, children);

// src/components/UtilityComponents/NullComponent.tsx
var NullComponent = () => null;

// src/components/UtilityComponents/ErrorBoundary.tsx
var import_react51 = require("react");
var ErrorBoundary = class extends import_react51.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
  componentDidCatch(error, information) {
    console.error(error, information);
  }
  render() {
    if (this.state.hasError) {
      return this.props.fallback;
    }
    return this.props.children;
  }
};

// src/components/Message/renderText/renderText.tsx
var defaultAllowedTagNames = [
  "html",
  "text",
  "br",
  "p",
  "em",
  "strong",
  "a",
  "ol",
  "ul",
  "li",
  "code",
  "pre",
  "blockquote",
  "del",
  "table",
  "thead",
  "tbody",
  "th",
  "tr",
  "td",
  "tfoot",
  // custom types (tagNames)
  "emoji",
  "mention"
];
function formatUrlForDisplay(url) {
  try {
    return decodeURIComponent(url).replace(detectHttp, "");
  } catch (e2) {
    return url;
  }
}
function encodeDecode(url) {
  try {
    return encodeURI(decodeURIComponent(url));
  } catch (error) {
    return url;
  }
}
var urlTransform = (uri) => uri.startsWith("app://") ? uri : defaultUrlTransform(uri);
var getPluginsForward = (plugins) => plugins;
var markDownRenderers = {
  a: Anchor,
  emoji: Emoji,
  mention: Mention
};
var renderText = (text8, mentionedUsers, {
  allowedTagNames = defaultAllowedTagNames,
  customMarkDownRenderers,
  getRehypePlugins = getPluginsForward,
  getRemarkPlugins = getPluginsForward
} = {}) => {
  if (!text8) return null;
  if (text8.trim().length === 1) return /* @__PURE__ */ import_react52.default.createElement(import_react52.default.Fragment, null, text8);
  let newText = text8;
  const markdownLinks = matchMarkdownLinks(newText);
  const codeBlocks = messageCodeBlocks(newText);
  (0, import_lodash4.default)([...(0, import_linkifyjs.find)(newText, "email"), ...(0, import_linkifyjs.find)(newText, "url")], "value").forEach(
    ({ href, type, value }) => {
      const linkIsInBlock = codeBlocks.some((block) => block?.includes(value));
      const noParsingNeeded = markdownLinks && markdownLinks.filter((text9) => {
        const strippedHref = href?.replace(detectHttp, "");
        const strippedText = text9?.replace(detectHttp, "");
        if (!strippedHref || !strippedText) return false;
        return strippedHref.includes(strippedText) || strippedText.includes(strippedHref);
      });
      if (noParsingNeeded.length > 0 || linkIsInBlock) return;
      try {
        if (type === "email" && mentionedUsers) {
          const emailMatchesWithName = mentionedUsers.some((u2) => u2.name === value);
          if (emailMatchesWithName) {
            newText = newText.replace(
              new RegExp(escapeRegExp(value), "g"),
              (match, position4) => {
                const isMention = newText.charAt(position4 - 1) === "@";
                return isMention ? match : `[${match}](${encodeDecode(href)})`;
              }
            );
            return;
          }
        }
        const displayLink = type === "email" ? value : formatUrlForDisplay(href);
        newText = newText.replace(
          new RegExp(escapeRegExp(value), "g"),
          `[${displayLink}](${encodeDecode(href)})`
        );
      } catch (e2) {
      }
    }
  );
  const remarkPlugins = [
    htmlToTextPlugin,
    keepLineBreaksPlugin,
    [remarkGfm, { singleTilde: false }]
  ];
  const rehypePlugins = [emojiMarkdownPlugin];
  if (mentionedUsers?.length) {
    rehypePlugins.push(mentionsMarkdownPlugin(mentionedUsers));
  }
  return /* @__PURE__ */ import_react52.default.createElement(ErrorBoundary, { fallback: /* @__PURE__ */ import_react52.default.createElement(import_react52.default.Fragment, null, text8) }, /* @__PURE__ */ import_react52.default.createElement(
    Markdown,
    {
      allowedElements: allowedTagNames,
      components: {
        ...markDownRenderers,
        ...customMarkDownRenderers
      },
      rehypePlugins: getRehypePlugins(rehypePlugins),
      remarkPlugins: getRemarkPlugins(remarkPlugins),
      skipHtml: true,
      unwrapDisallowed: true,
      urlTransform
    },
    newText
  ));
};

// src/components/AutoCompleteTextarea/List.jsx
var List = ({
  className,
  component,
  currentTrigger,
  dropdownScroll,
  getSelectedItem,
  getTextToReplace,
  itemClassName,
  itemStyle,
  onSelect,
  selectionEnd,
  style,
  SuggestionItem: PropSuggestionItem,
  value: propValue,
  values
}) => {
  const { AutocompleteSuggestionItem } = useComponentContext("SuggestionList");
  const SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;
  const [selectedItemIndex, setSelectedItemIndex] = (0, import_react53.useState)(void 0);
  const itemsRef = [];
  const isSelected = (item2) => selectedItemIndex === values.findIndex((value) => getId(value) === getId(item2));
  const getId = (item2) => {
    const textToReplace = getTextToReplace(item2);
    if (textToReplace.key) {
      return textToReplace.key;
    }
    if (typeof item2 === "string" || !item2.key) {
      return textToReplace.text;
    }
    return item2.key;
  };
  const findItemIndex = (0, import_react53.useCallback)(
    (item2) => values.findIndex(
      (value) => value.id ? value.id === item2.id : value.name === item2.name
    ),
    [values]
  );
  const modifyText = (value) => {
    if (!value) return;
    onSelect(getTextToReplace(value));
    if (getSelectedItem) getSelectedItem(value);
  };
  const handleClick = (0, import_react53.useCallback)(
    (e2, item2) => {
      e2?.preventDefault();
      const index3 = findItemIndex(item2);
      modifyText(values[index3]);
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [modifyText, findItemIndex]
  );
  const selectItem = (0, import_react53.useCallback)(
    (item2) => {
      const index3 = findItemIndex(item2);
      setSelectedItemIndex(index3);
    },
    [findItemIndex]
  );
  const handleKeyDown = (0, import_react53.useCallback)(
    (event) => {
      if (event.key === "ArrowUp") {
        setSelectedItemIndex((prevSelected) => {
          if (prevSelected === void 0) return 0;
          const newIndex = prevSelected === 0 ? values.length - 1 : prevSelected - 1;
          dropdownScroll(itemsRef[newIndex]);
          return newIndex;
        });
      }
      if (event.key === "ArrowDown") {
        setSelectedItemIndex((prevSelected) => {
          if (prevSelected === void 0) return 0;
          const newIndex = prevSelected === values.length - 1 ? 0 : prevSelected + 1;
          dropdownScroll(itemsRef[newIndex]);
          return newIndex;
        });
      }
      if ((event.key === "Enter" || event.key === "Tab") && selectedItemIndex !== void 0) {
        handleClick(event, values[selectedItemIndex]);
      }
      return null;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [selectedItemIndex, values]
  );
  (0, import_react53.useEffect)(() => {
    document.addEventListener("keydown", handleKeyDown, false);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
  (0, import_react53.useEffect)(() => {
    if (values?.length) selectItem(values[0]);
  }, [values]);
  const restructureItem = (0, import_react53.useCallback)(
    (item2) => {
      const matched = item2.name || item2.id;
      const textBeforeCursor = propValue.slice(0, selectionEnd);
      const triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);
      const editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));
      const parts = matched.split(new RegExp(`(${editedPropValue})`, "gi"));
      const itemNameParts = { match: editedPropValue, parts };
      return { ...item2, itemNameParts };
    },
    [propValue, selectionEnd, currentTrigger]
  );
  const restructuredValues = (0, import_react53.useMemo)(
    () => values.map(restructureItem),
    [values, restructureItem]
  );
  return /* @__PURE__ */ import_react53.default.createElement("ul", { className: (0, import_clsx13.default)("str-chat__suggestion-list", className), style }, restructuredValues.map((item2, i) => /* @__PURE__ */ import_react53.default.createElement(
    SuggestionItem,
    {
      className: itemClassName,
      component,
      item: item2,
      key: getId(item2),
      onClickHandler: handleClick,
      onSelectHandler: selectItem,
      ref: (ref) => {
        itemsRef[i] = ref;
      },
      selected: isSelected(item2),
      style: itemStyle,
      value: propValue
    }
  )));
};

// src/components/AutoCompleteTextarea/Textarea.jsx
var import_react60 = __toESM(require("react"));
var import_prop_types = __toESM(require("prop-types"));
var import_react_textarea_autosize = __toESM(require("react-textarea-autosize"));
var import_textarea_caret = __toESM(require("textarea-caret"));
var import_clsx17 = __toESM(require("clsx"));

// src/components/AutoCompleteTextarea/utils.js
var DEFAULT_CARET_POSITION = "next";
function defaultScrollToItem(container, item2) {
  if (!item2) return;
  const itemHeight = parseInt(getComputedStyle(item2).getPropertyValue("height"), 10);
  const containerHight = parseInt(getComputedStyle(container).getPropertyValue("height"), 10) - itemHeight;
  const actualScrollTop = container.scrollTop;
  const itemOffsetTop = item2.offsetTop;
  if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {
    return;
  }
  container.scrollTop = itemOffsetTop;
}
var errorMessage = (message) => console.error(
  `RTA: dataProvider fails: ${message}
    
Check the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues`
);
var triggerPropsCheck = ({ trigger }) => {
  if (!trigger) return Error("Invalid prop trigger. Prop missing.");
  const triggers = Object.entries(trigger);
  for (let i = 0; i < triggers.length; i += 1) {
    const [triggerChar, settings] = triggers[i];
    if (typeof triggerChar !== "string" || triggerChar.length !== 1) {
      return Error(
        "Invalid prop trigger. Keys of the object has to be string / one character."
      );
    }
    const triggerSetting = settings;
    const { callback, dataProvider, output } = triggerSetting;
    if (!dataProvider || typeof dataProvider !== "function") {
      return Error("Invalid prop trigger: dataProvider should be defined.");
    }
    if (output && typeof output !== "function") {
      return Error("Invalid prop trigger: output should be a function.");
    }
    if (callback && typeof callback !== "function") {
      return Error("Invalid prop trigger: callback should be a function.");
    }
  }
  return null;
};

// src/components/CommandItem/CommandItem.tsx
var import_react54 = __toESM(require("react"));
var UnMemoizedCommandItem = (props) => {
  const { entity } = props;
  return /* @__PURE__ */ import_react54.default.createElement("div", { className: "str-chat__slash-command" }, /* @__PURE__ */ import_react54.default.createElement("span", { className: "str-chat__slash-command-header" }, /* @__PURE__ */ import_react54.default.createElement("strong", null, entity.name), " ", entity.args), /* @__PURE__ */ import_react54.default.createElement("br", null), /* @__PURE__ */ import_react54.default.createElement("span", { className: "str-chat__slash-command-description" }, entity.description));
};
var CommandItem = import_react54.default.memo(
  UnMemoizedCommandItem
);

// src/components/UserItem/UserItem.tsx
var import_react59 = __toESM(require("react"));
var import_clsx16 = __toESM(require("clsx"));

// src/components/Avatar/Avatar.tsx
var import_clsx14 = __toESM(require("clsx"));
var import_react56 = __toESM(require("react"));

// src/components/Threads/icons.tsx
var import_react55 = __toESM(require("react"));
var Icon = {
  MessageBubble: (props) => /* @__PURE__ */ import_react55.default.createElement(
    "svg",
    {
      className: "str-chat__icon str-chat__icon--message-bubble",
      fill: "none",
      height: "14",
      viewBox: "0 0 14 14",
      width: "14",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ import_react55.default.createElement(
      "path",
      {
        d: "M1.66659 1.66665H12.3333V9.66665H2.44659L1.66659 10.4466V1.66665ZM1.66659 0.333313C0.933252 0.333313 0.339919 0.933313 0.339919 1.66665L0.333252 13.6666L2.99992 11H12.3333C13.0666 11 13.6666 10.4 13.6666 9.66665V1.66665C13.6666 0.933313 13.0666 0.333313 12.3333 0.333313H1.66659ZM2.99992 6.99998H10.9999V8.33331H2.99992V6.99998ZM2.99992 4.99998H10.9999V6.33331H2.99992V4.99998ZM2.99992 2.99998H10.9999V4.33331H2.99992V2.99998Z",
        fill: "currentColor"
      }
    )
  ),
  MessageBubbleEmpty: (props) => /* @__PURE__ */ import_react55.default.createElement(
    "svg",
    {
      className: "str-chat__icon str-chat__icon--message-bubble-empty",
      fill: "none",
      height: "20",
      viewBox: "0 0 20 20",
      width: "20",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ import_react55.default.createElement(
      "path",
      {
        d: "M18 0H2C0.9 0 0 0.9 0 2V20L4 16H18C19.1 16 20 15.1 20 14V2C20 0.9 19.1 0 18 0ZM18 14H4L2 16V2H18V14Z",
        fill: "currentColor"
      }
    )
  ),
  Reload: (props) => /* @__PURE__ */ import_react55.default.createElement(
    "svg",
    {
      className: "str-chat__icon str-chat__icon--reload",
      fill: "none",
      height: "22",
      viewBox: "0 0 16 22",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ import_react55.default.createElement(
      "path",
      {
        d: "M8 3V0L4 4L8 8V5C11.31 5 14 7.69 14 11C14 12.01 13.75 12.97 13.3 13.8L14.76 15.26C15.54 14.03 16 12.57 16 11C16 6.58 12.42 3 8 3ZM8 17C4.69 17 2 14.31 2 11C2 9.99 2.25 9.03 2.7 8.2L1.24 6.74C0.46 7.97 0 9.43 0 11C0 15.42 3.58 19 8 19V22L12 18L8 14V17Z",
        fill: "currentColor"
      }
    )
  ),
  User: (props) => /* @__PURE__ */ import_react55.default.createElement(
    "svg",
    {
      className: "str-chat__icon str-chat__icon--user",
      fill: "none",
      height: "16",
      viewBox: "0 0 16 16",
      width: "16",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ import_react55.default.createElement(
      "path",
      {
        d: "M8 2C9.1 2 10 2.9 10 4C10 5.1 9.1 6 8 6C6.9 6 6 5.1 6 4C6 2.9 6.9 2 8 2ZM8 12C10.7 12 13.8 13.29 14 14H2C2.23 13.28 5.31 12 8 12ZM8 0C5.79 0 4 1.79 4 4C4 6.21 5.79 8 8 8C10.21 8 12 6.21 12 4C12 1.79 10.21 0 8 0ZM8 10C5.33 10 0 11.34 0 14V16H16V14C16 11.34 10.67 10 8 10Z",
        fill: "currentColor"
      }
    )
  )
};

// src/utils/getChannel.ts
var WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};
var getChannel = async ({
  channel,
  client,
  id,
  members,
  options,
  type
}) => {
  if (!channel && !type) {
    throw new Error("Channel or channel type have to be provided to query a channel.");
  }
  const theChannel = channel || client.channel(type, id, { members });
  const originalCid = theChannel?.id ? theChannel.cid : members && members.length ? generateChannelTempCid(theChannel.type, members) : void 0;
  if (!originalCid) {
    throw new Error(
      "Channel ID or channel members array have to be provided to query a channel."
    );
  }
  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
  if (queryPromise) {
    await queryPromise;
  } else {
    try {
      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = theChannel.watch(options);
      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
    } finally {
      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];
    }
  }
  return theChannel;
};
var generateChannelTempCid = (channelType, members) => {
  if (!members) return;
  const membersStr = [...members].sort().join(",");
  return `${channelType}:!members-${membersStr}`;
};

// src/utils/getWholeChar.ts
var getWholeChar = (str, i) => {
  const code4 = str.charCodeAt(i);
  if (Number.isNaN(code4)) return "";
  if (code4 < 55296 || code4 > 57343) return str.charAt(i);
  if (55296 <= code4 && code4 <= 56319) {
    if (str.length <= i + 1) {
      throw "High surrogate without following low surrogate";
    }
    const next = str.charCodeAt(i + 1);
    if (56320 > next || next > 57343) {
      throw "High surrogate without following low surrogate";
    }
    return str.charAt(i) + str.charAt(i + 1);
  }
  if (i === 0) {
    throw "Low surrogate without preceding high surrogate";
  }
  const prev = str.charCodeAt(i - 1);
  if (55296 > prev || prev > 56319) {
    throw "Low surrogate without preceding high surrogate";
  }
  return "";
};

// src/components/Avatar/Avatar.tsx
var Avatar = (props) => {
  const {
    className,
    image: image4,
    name: name2,
    onClick = () => void 0,
    onMouseOver = () => void 0
  } = props;
  const [error, setError] = (0, import_react56.useState)(false);
  (0, import_react56.useEffect)(() => {
    setError(false);
  }, [image4]);
  const nameStr = name2?.toString() || "";
  const initials = getWholeChar(nameStr, 0);
  const showImage = image4 && !error;
  return /* @__PURE__ */ import_react56.default.createElement(
    "div",
    {
      className: (0, import_clsx14.default)(`str-chat__avatar str-chat__message-sender-avatar`, className, {
        ["str-chat__avatar--multiple-letters"]: initials.length > 1,
        ["str-chat__avatar--no-letters"]: !initials.length,
        ["str-chat__avatar--one-letter"]: initials.length === 1
      }),
      "data-testid": "avatar",
      onClick,
      onMouseOver,
      role: "button",
      title: name2
    },
    showImage ? /* @__PURE__ */ import_react56.default.createElement(
      "img",
      {
        alt: initials,
        className: "str-chat__avatar-image",
        "data-testid": "avatar-img",
        onError: () => setError(true),
        src: image4
      }
    ) : /* @__PURE__ */ import_react56.default.createElement(import_react56.default.Fragment, null, !!initials.length && /* @__PURE__ */ import_react56.default.createElement(
      "div",
      {
        className: (0, import_clsx14.default)("str-chat__avatar-fallback"),
        "data-testid": "avatar-fallback"
      },
      initials
    ), !initials.length && /* @__PURE__ */ import_react56.default.createElement(Icon.User, null))
  );
};

// src/components/Avatar/ChannelAvatar.tsx
var import_react57 = __toESM(require("react"));
var ChannelAvatar = ({
  groupChannelDisplayInfo,
  image: image4,
  name: name2,
  user,
  ...sharedProps
}) => {
  if (groupChannelDisplayInfo) {
    return /* @__PURE__ */ import_react57.default.createElement(GroupAvatar, { groupChannelDisplayInfo, ...sharedProps });
  }
  return /* @__PURE__ */ import_react57.default.createElement(Avatar, { image: image4, name: name2, user, ...sharedProps });
};

// src/components/Avatar/GroupAvatar.tsx
var import_clsx15 = __toESM(require("clsx"));
var import_react58 = __toESM(require("react"));
var GroupAvatar = ({
  className,
  groupChannelDisplayInfo,
  onClick,
  onMouseOver
}) => /* @__PURE__ */ import_react58.default.createElement(
  "div",
  {
    className: (0, import_clsx15.default)(
      `str-chat__avatar-group`,
      { "str-chat__avatar-group--three-part": groupChannelDisplayInfo.length === 3 },
      className
    ),
    "data-testid": "group-avatar",
    onClick,
    onMouseOver,
    role: "button"
  },
  groupChannelDisplayInfo.slice(0, 4).map(({ image: image4, name: name2 }, i) => /* @__PURE__ */ import_react58.default.createElement(
    Avatar,
    {
      className: (0, import_clsx15.default)({
        "str-chat__avatar--single": groupChannelDisplayInfo.length === 3 && i === 0
      }),
      image: image4,
      key: `${name2}-${image4}-${i}`,
      name: name2
    }
  ))
);

// src/components/UserItem/UserItem.tsx
var UnMemoizedUserItem = ({ Avatar: Avatar2 = Avatar, entity }) => {
  const hasEntity = !!Object.keys(entity).length;
  const itemParts = entity?.itemNameParts;
  const renderName = () => {
    if (!hasEntity) return null;
    return itemParts.parts.map((part, i) => {
      const matches = part.toLowerCase() === itemParts.match.toLowerCase();
      return /* @__PURE__ */ import_react59.default.createElement(
        "span",
        {
          className: (0, import_clsx16.default)({
            "str-chat__emoji-item--highlight": matches,
            "str-chat__emoji-item--part": !matches
          }),
          key: `part-${i}`
        },
        part
      );
    });
  };
  return /* @__PURE__ */ import_react59.default.createElement("div", { className: "str-chat__user-item" }, /* @__PURE__ */ import_react59.default.createElement(
    Avatar2,
    {
      className: "str-chat__avatar--autocomplete-item",
      image: entity.image,
      name: entity.name || entity.id
    }
  ), /* @__PURE__ */ import_react59.default.createElement("span", { className: "str-chat__user-item--name", "data-testid": "user-item-name" }, renderName()), /* @__PURE__ */ import_react59.default.createElement("div", { className: "str-chat__user-item-at" }, "@"));
};
var UserItem = import_react59.default.memo(UnMemoizedUserItem);

// src/utils/browsers.ts
var isSafari = () => {
  if (typeof navigator === "undefined") return false;
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || "");
};

// src/components/AutoCompleteTextarea/Textarea.jsx
var ReactTextareaAutocomplete = class extends import_react60.default.Component {
  constructor(props) {
    super(props);
    // FIXME: unused method
    __publicField(this, "getSelectionPosition", () => {
      if (!this.textareaRef) return null;
      return {
        selectionEnd: this.textareaRef.selectionEnd,
        selectionStart: this.textareaRef.selectionStart
      };
    });
    // FIXME: unused method
    __publicField(this, "getSelectedText", () => {
      if (!this.textareaRef) return null;
      const { selectionEnd, selectionStart } = this.textareaRef;
      if (selectionStart === selectionEnd) return null;
      return this.state.value.substr(selectionStart, selectionEnd - selectionStart);
    });
    __publicField(this, "setCaretPosition", (position4 = 0) => {
      if (!this.textareaRef) return;
      this.textareaRef.focus();
      this.textareaRef.setSelectionRange(position4, position4);
    });
    __publicField(this, "getCaretPosition", () => {
      if (!this.textareaRef) return 0;
      return this.textareaRef.selectionEnd;
    });
    /**
     * isComposing prevents double submissions in Korean and other languages.
     * starting point for a read:
     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing
     * In the long term, the fix should happen by handling keypress, but changing this has unknown implications.
     * @param event React.KeyboardEvent
     */
    __publicField(this, "_defaultShouldSubmit", (event) => event.key === "Enter" && !event.shiftKey && !event.nativeEvent.isComposing);
    __publicField(this, "_handleKeyDown", (event) => {
      const { shouldSubmit = this._defaultShouldSubmit } = this.props;
      if ((event.key === "ArrowUp" || event.key === "ArrowDown") && this.dropdownRef)
        event.preventDefault();
      if (shouldSubmit?.(event)) return this._onEnter(event);
      if (event.key === " ") return this._onSpace(event);
      if (event.key === "Escape") return this._closeAutocomplete();
    });
    __publicField(this, "_onEnter", async (event) => {
      if (!this.textareaRef) return;
      const trigger = this.state.currentTrigger;
      if (!trigger || !this.state.data) {
        event.persist();
        await this._replaceWord();
        if (this.textareaRef) {
          this.textareaRef.selectionEnd = 0;
        }
        this.props.handleSubmit(event);
        this._closeAutocomplete();
      }
    });
    __publicField(this, "_onSpace", () => {
      if (!this.props.replaceWord || !this.textareaRef) return;
      const hasFocus = this.textareaRef.matches(":focus");
      if (!hasFocus) return;
      this._replaceWord();
    });
    __publicField(this, "_replaceWord", async () => {
      const { value } = this.state;
      const lastWordRegex = /([^\s]+)(\s*)$/;
      const match = lastWordRegex.exec(value.slice(0, this.getCaretPosition()));
      const lastWord = match && match[1];
      if (!lastWord) return;
      const spaces = match[2];
      const newWord = await this.props.replaceWord(lastWord);
      if (newWord == null) return;
      const textBeforeWord = value.slice(0, this.getCaretPosition() - match[0].length);
      const textAfterCaret = value.slice(this.getCaretPosition(), -1);
      const newText = textBeforeWord + newWord + spaces + textAfterCaret;
      this.setState(
        {
          value: newText
        },
        () => {
          const e2 = new CustomEvent("change", { bubbles: true });
          this.textareaRef.dispatchEvent(e2);
          if (this.props.onChange) this.props.onChange(e2);
        }
      );
    });
    __publicField(this, "_onSelect", (newToken) => {
      const {
        closeCommandsList,
        closeMentionsList,
        onChange,
        showCommandsList,
        showMentionsList
      } = this.props;
      const {
        currentTrigger: stateTrigger,
        selectionEnd,
        value: textareaValue
      } = this.state;
      const currentTrigger = showCommandsList ? "/" : showMentionsList ? "@" : stateTrigger;
      if (!currentTrigger) return;
      const computeCaretPosition = (position4, token, startToken) => {
        switch (position4) {
          case "start":
            return startToken;
          case "next":
          case "end":
            return startToken + token.length;
          default:
            if (!Number.isInteger(position4)) {
              throw new Error(
                'RTA: caretPosition should be "start", "next", "end" or number.'
              );
            }
            return position4;
        }
      };
      const textToModify = showCommandsList ? "/" : showMentionsList ? "@" : textareaValue.slice(0, selectionEnd);
      const startOfTokenPosition = textToModify.lastIndexOf(currentTrigger);
      const newTokenString = newToken.caretPosition === "next" ? `${newToken.text} ` : newToken.text;
      const newCaretPosition = computeCaretPosition(
        newToken.caretPosition,
        newTokenString,
        startOfTokenPosition
      );
      const modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;
      const valueToReplace = textareaValue.replace(textToModify, modifiedText);
      this.setState(
        {
          dataLoading: false,
          value: valueToReplace
        },
        () => {
          const e2 = new CustomEvent("change", { bubbles: true });
          this.textareaRef.dispatchEvent(e2);
          if (onChange) onChange(e2);
          this.setCaretPosition(newCaretPosition);
        }
      );
      this._closeAutocomplete();
      if (showCommandsList) closeCommandsList();
      if (showMentionsList) closeMentionsList();
    });
    __publicField(this, "_getItemOnSelect", (paramTrigger) => {
      const { currentTrigger: stateTrigger } = this.state;
      const triggerSettings = this._getCurrentTriggerSettings(paramTrigger);
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger || !triggerSettings) return null;
      const { callback } = triggerSettings;
      if (!callback) return null;
      return (item2) => {
        if (typeof callback !== "function") {
          throw new Error(
            'Output functor is not defined! You have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type'
          );
        }
        if (callback) {
          return callback(item2, currentTrigger);
        }
        return null;
      };
    });
    __publicField(this, "_getTextToReplace", (paramTrigger) => {
      const { actualToken, currentTrigger: stateTrigger } = this.state;
      const triggerSettings = this._getCurrentTriggerSettings(paramTrigger);
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger || !triggerSettings) return null;
      const { output } = triggerSettings;
      return (item2) => {
        if (typeof item2 === "object" && (!output || typeof output !== "function")) {
          throw new Error(
            'Output functor is not defined! If you are using items as object you have to define "output" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type'
          );
        }
        if (output) {
          const textToReplace = output(item2, currentTrigger);
          if (!textToReplace || typeof textToReplace === "number") {
            throw new Error(
              `Output functor should return string or object in shape {text: string, caretPosition: string | number}.
Got "${String(
                textToReplace
              )}". Check the implementation for trigger "${currentTrigger}" and its token "${actualToken}"

See https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.
`
            );
          }
          if (typeof textToReplace === "string") {
            return {
              caretPosition: DEFAULT_CARET_POSITION,
              text: textToReplace
            };
          }
          if (!textToReplace.text && currentTrigger !== ":") {
            throw new Error(
              `Output "text" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger "${currentTrigger}" and its token "${actualToken}"
`
            );
          }
          if (!textToReplace.caretPosition) {
            throw new Error(
              `Output "caretPosition" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger "${currentTrigger}" and its token "${actualToken}"
`
            );
          }
          return textToReplace;
        }
        if (typeof item2 !== "string") {
          throw new Error("Output item should be string\n");
        }
        return {
          caretPosition: DEFAULT_CARET_POSITION,
          text: `${currentTrigger}${item2}${currentTrigger}`
        };
      };
    });
    __publicField(this, "_getCurrentTriggerSettings", (paramTrigger) => {
      const { currentTrigger: stateTrigger } = this.state;
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger) return null;
      return this.props.trigger[currentTrigger];
    });
    __publicField(this, "_getValuesFromProvider", () => {
      const { actualToken, currentTrigger } = this.state;
      const triggerSettings = this._getCurrentTriggerSettings();
      if (!currentTrigger || !triggerSettings) return;
      const { component, dataProvider } = triggerSettings;
      if (typeof dataProvider !== "function") {
        throw new Error("Trigger provider has to be a function!");
      }
      this.setState({ dataLoading: true });
      dataProvider(actualToken, this.state.value, (data, token) => {
        if (token !== this.state.actualToken) return;
        if (!Array.isArray(data)) {
          throw new Error("Trigger provider has to provide an array!");
        }
        if (currentTrigger !== this.state.currentTrigger) return;
        if (!data.length) {
          this._closeAutocomplete();
          return;
        }
        this.setState({
          component,
          data,
          dataLoading: false
        });
      });
    });
    __publicField(this, "_getSuggestions", (paramTrigger) => {
      const { currentTrigger: stateTrigger, data } = this.state;
      const currentTrigger = paramTrigger || stateTrigger;
      if (!currentTrigger || !data || data && !data.length) return null;
      return data;
    });
    /**
     * Close autocomplete, also clean up trigger (to avoid slow promises)
     */
    __publicField(this, "_closeAutocomplete", () => {
      this.setState({
        currentTrigger: null,
        data: null,
        dataLoading: false,
        left: null,
        top: null
      });
    });
    __publicField(this, "_cleanUpProps", () => {
      const props = { ...this.props };
      const notSafe = [
        "additionalTextareaProps",
        "className",
        "closeCommandsList",
        "closeMentionsList",
        "closeOnClickOutside",
        "containerClassName",
        "containerStyle",
        "disableMentions",
        "dropdownClassName",
        "dropdownStyle",
        "grow",
        "handleSubmit",
        "innerRef",
        "itemClassName",
        "itemStyle",
        "listClassName",
        "listStyle",
        "loaderClassName",
        "loaderStyle",
        "loadingComponent",
        "minChar",
        "movePopupAsYouType",
        "onCaretPositionChange",
        "onChange",
        "ref",
        "replaceWord",
        "scrollToItem",
        "shouldSubmit",
        "showCommandsList",
        "showMentionsList",
        "SuggestionItem",
        "SuggestionList",
        "trigger",
        "value"
      ];
      for (const prop in props) {
        if (notSafe.includes(prop)) delete props[prop];
      }
      return props;
    });
    __publicField(this, "_isCommand", (text8) => {
      if (text8[0] !== "/") return false;
      const tokens = text8.split(" ");
      return tokens.length <= 1;
    });
    __publicField(this, "_changeHandler", (e2) => {
      const { minChar, movePopupAsYouType, onCaretPositionChange, onChange, trigger } = this.props;
      const { left, top } = this.state;
      const textarea = e2.target;
      const { selectionEnd, selectionStart, value } = textarea;
      if (onChange) {
        e2.persist();
        onChange(e2);
      }
      if (onCaretPositionChange) onCaretPositionChange(this.getCaretPosition());
      this.setState({ value });
      let currentTrigger;
      let lastToken;
      if (this._isCommand(value)) {
        currentTrigger = "/";
        lastToken = value;
      } else {
        const triggerTokens = Object.keys(trigger).join().replace("/", "");
        const triggerNorWhitespace = `[^\\s${triggerTokens}]*`;
        const regex = new RegExp(
          `(?!^|\\W)?[${triggerTokens}]${triggerNorWhitespace}\\s?${triggerNorWhitespace}$`,
          "g"
        );
        const tokenMatch = value.slice(0, selectionEnd).match(regex);
        lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();
        currentTrigger = lastToken && Object.keys(trigger).find((a2) => a2 === lastToken[0]) || null;
      }
      if (!lastToken || lastToken.length <= minChar) {
        this._closeAutocomplete();
        return;
      }
      const actualToken = lastToken.slice(1);
      if (!currentTrigger) return;
      if (movePopupAsYouType || top === null && left === null || // if we have single char - trigger it means we want to re-position the autocomplete
      lastToken.length === 1) {
        const { left: newLeft, top: newTop } = (0, import_textarea_caret.default)(textarea, selectionEnd);
        this.setState({
          // make position relative to textarea
          left: newLeft,
          top: newTop - this.textareaRef.scrollTop || 0
        });
      }
      this.setState(
        {
          actualToken,
          currentTrigger,
          selectionEnd,
          selectionStart
        },
        () => {
          try {
            this._getValuesFromProvider();
          } catch (err) {
            errorMessage(err.message);
          }
        }
      );
    });
    __publicField(this, "_selectHandler", (e2) => {
      const { onCaretPositionChange, onSelect } = this.props;
      if (onCaretPositionChange) onCaretPositionChange(this.getCaretPosition());
      if (onSelect) {
        e2.persist();
        onSelect(e2);
      }
    });
    // The textarea itself is outside the auto-select dropdown.
    __publicField(this, "_onClickAndBlurHandler", (e2) => {
      const { closeOnClickOutside, onBlur } = this.props;
      const el = e2.relatedTarget;
      const focusedAwayInSafari = isSafari() && e2.type === "blur";
      if (this.dropdownRef && el instanceof Node && this.dropdownRef.contains(el) || focusedAwayInSafari) {
        return;
      }
      if (closeOnClickOutside) this._closeAutocomplete();
      if (onBlur) {
        e2.persist();
        onBlur(e2);
      }
    });
    __publicField(this, "_onScrollHandler", () => this._closeAutocomplete());
    __publicField(this, "_dropdownScroll", (item2) => {
      const { scrollToItem } = this.props;
      if (!scrollToItem) return;
      if (scrollToItem === true) {
        defaultScrollToItem(this.dropdownRef, item2);
        return;
      }
      if (typeof scrollToItem !== "function" || scrollToItem.length !== 2) {
        throw new Error(
          "`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item."
        );
      }
      scrollToItem(this.dropdownRef, item2);
    });
    __publicField(this, "getTriggerProps", () => {
      const { showCommandsList, showMentionsList, trigger } = this.props;
      const { component, currentTrigger, selectionEnd, value } = this.state;
      const selectedItem = this._getItemOnSelect();
      const suggestionData = this._getSuggestions();
      const textToReplace = this._getTextToReplace();
      const triggerProps = {
        component,
        currentTrigger,
        getSelectedItem: selectedItem,
        getTextToReplace: textToReplace,
        selectionEnd,
        value,
        values: suggestionData
      };
      if (showCommandsList && trigger["/"] || showMentionsList && trigger["@"]) {
        let currentCommands;
        const getCommands = trigger[showCommandsList ? "/" : "@"].dataProvider;
        getCommands?.("", showCommandsList ? "/" : "@", (data) => {
          currentCommands = data;
        });
        triggerProps.component = showCommandsList ? CommandItem : UserItem;
        triggerProps.currentTrigger = showCommandsList ? "/" : "@";
        triggerProps.getTextToReplace = this._getTextToReplace(
          showCommandsList ? "/" : "@"
        );
        triggerProps.getSelectedItem = this._getItemOnSelect(showCommandsList ? "/" : "@");
        triggerProps.selectionEnd = 1;
        triggerProps.value = showCommandsList ? "/" : "@";
        triggerProps.values = currentCommands;
      }
      return triggerProps;
    });
    __publicField(this, "setDropdownRef", (element4) => {
      this.dropdownRef = element4;
    });
    const { loadingComponent, trigger, value } = this.props;
    if (!loadingComponent) {
      throw new Error("RTA: loadingComponent is not defined");
    }
    if (!trigger) {
      throw new Error("RTA: trigger is not defined");
    }
    this.state = {
      actualToken: "",
      component: null,
      currentTrigger: null,
      data: null,
      dataLoading: false,
      isComposing: false,
      left: null,
      selectionEnd: 0,
      selectionStart: 0,
      top: null,
      value: value || ""
    };
  }
  /**
   * setup to emulate the UNSAFE_componentWillReceiveProps
   */
  static getDerivedStateFromProps(props, state) {
    if (props.value !== state.propsValue || !state.value) {
      return { propsValue: props.value, value: props.value };
    } else {
      return null;
    }
  }
  renderSuggestionListContainer() {
    const {
      disableMentions,
      dropdownClassName,
      dropdownStyle,
      itemClassName,
      itemStyle,
      listClassName,
      SuggestionItem,
      SuggestionList = List
    } = this.props;
    const { isComposing } = this.state;
    const triggerProps = this.getTriggerProps();
    if (isComposing || !triggerProps.values || !triggerProps.currentTrigger || disableMentions && triggerProps.currentTrigger === "@")
      return null;
    return /* @__PURE__ */ import_react60.default.createElement(
      "div",
      {
        className: (0, import_clsx17.default)("str-chat__suggestion-list-container", dropdownClassName),
        ref: this.setDropdownRef,
        style: dropdownStyle
      },
      /* @__PURE__ */ import_react60.default.createElement(
        SuggestionList,
        {
          className: listClassName,
          dropdownScroll: this._dropdownScroll,
          itemClassName: (0, import_clsx17.default)("str-chat__suggestion-list-item", itemClassName),
          itemStyle,
          onSelect: this._onSelect,
          SuggestionItem,
          ...triggerProps
        }
      )
    );
  }
  render() {
    const { className, containerClassName, containerStyle, style } = this.props;
    const {
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onScroll,
      onSelect,
      ...restAdditionalTextareaProps
    } = this.props.additionalTextareaProps || {};
    let { maxRows } = this.props;
    const { dataLoading, value } = this.state;
    if (!this.props.grow) maxRows = 1;
    return /* @__PURE__ */ import_react60.default.createElement(
      "div",
      {
        className: (0, import_clsx17.default)("rta", containerClassName, {
          ["rta--loading"]: dataLoading
        }),
        style: containerStyle
      },
      this.renderSuggestionListContainer(),
      /* @__PURE__ */ import_react60.default.createElement(
        import_react_textarea_autosize.default,
        {
          "data-testid": "message-input",
          ...this._cleanUpProps(),
          className: (0, import_clsx17.default)("rta__textarea", className),
          maxRows,
          onBlur: (e2) => {
            this._onClickAndBlurHandler(e2);
            onBlur?.(e2);
          },
          onChange: (e2) => {
            this._changeHandler(e2);
            onChange?.(e2);
          },
          onClick: (e2) => {
            this._onClickAndBlurHandler(e2);
            onClick?.(e2);
          },
          onCompositionEnd: () => this.setState((pv) => ({ ...pv, isComposing: false })),
          onCompositionStart: () => this.setState((pv) => ({ ...pv, isComposing: true })),
          onFocus: (e2) => {
            this.props.onFocus?.(e2);
            onFocus?.(e2);
          },
          onKeyDown: (e2) => {
            this._handleKeyDown(e2);
            onKeyDown?.(e2);
          },
          onScroll: (e2) => {
            this._onScrollHandler(e2);
            onScroll?.(e2);
          },
          onSelect: (e2) => {
            this._selectHandler(e2);
            onSelect?.(e2);
          },
          ref: (ref) => {
            this.props?.innerRef(ref);
            this.textareaRef = ref;
          },
          style,
          value,
          ...restAdditionalTextareaProps,
          defaultValue: void 0
        }
      )
    );
  }
};
__publicField(ReactTextareaAutocomplete, "defaultProps", {
  closeOnClickOutside: true,
  maxRows: 10,
  minChar: 1,
  movePopupAsYouType: false,
  scrollToItem: true,
  value: ""
});
ReactTextareaAutocomplete.propTypes = {
  className: import_prop_types.default.string,
  closeOnClickOutside: import_prop_types.default.bool,
  containerClassName: import_prop_types.default.string,
  containerStyle: import_prop_types.default.object,
  disableMentions: import_prop_types.default.bool,
  dropdownClassName: import_prop_types.default.string,
  dropdownStyle: import_prop_types.default.object,
  itemClassName: import_prop_types.default.string,
  itemStyle: import_prop_types.default.object,
  listClassName: import_prop_types.default.string,
  listStyle: import_prop_types.default.object,
  loaderClassName: import_prop_types.default.string,
  loaderStyle: import_prop_types.default.object,
  loadingComponent: import_prop_types.default.elementType,
  minChar: import_prop_types.default.number,
  onBlur: import_prop_types.default.func,
  onCaretPositionChange: import_prop_types.default.func,
  onChange: import_prop_types.default.func,
  onSelect: import_prop_types.default.func,
  shouldSubmit: import_prop_types.default.func,
  style: import_prop_types.default.object,
  SuggestionList: import_prop_types.default.elementType,
  trigger: triggerPropsCheck,
  value: import_prop_types.default.string
};

// src/components/Channel/Channel.tsx
var import_react258 = __toESM(require("react"));
var import_lodash22 = __toESM(require("lodash.debounce"));
var import_lodash23 = __toESM(require("lodash.defaultsdeep"));
var import_lodash24 = __toESM(require("lodash.throttle"));
var import_nanoid11 = require("nanoid");
var import_clsx65 = __toESM(require("clsx"));

// src/components/Channel/channelState.ts
var makeChannelReducer = () => (state, action) => {
  switch (action.type) {
    case "closeThread": {
      return {
        ...state,
        thread: null,
        threadLoadingMore: false,
        threadMessages: []
      };
    }
    case "copyMessagesFromChannel": {
      const { channel, parentId } = action;
      return {
        ...state,
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        // copying messages from channel happens with new message - this resets the suppressAutoscroll
        suppressAutoscroll: false,
        threadMessages: parentId ? { ...channel.state.threads }[parentId] || [] : state.threadMessages
      };
    }
    case "copyStateFromChannelOnEvent": {
      const { channel } = action;
      return {
        ...state,
        members: { ...channel.state.members },
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        read: { ...channel.state.read },
        watcherCount: channel.state.watcher_count,
        watchers: { ...channel.state.watchers }
      };
    }
    case "initStateFromChannel": {
      const { channel, hasMore } = action;
      return {
        ...state,
        hasMore,
        loading: false,
        members: { ...channel.state.members },
        messages: [...channel.state.messages],
        pinnedMessages: [...channel.state.pinnedMessages],
        read: { ...channel.state.read },
        watcherCount: channel.state.watcher_count,
        watchers: { ...channel.state.watchers }
      };
    }
    case "jumpToLatestMessage": {
      return {
        ...state,
        hasMoreNewer: false,
        highlightedMessageId: void 0,
        loading: false,
        suppressAutoscroll: false
      };
    }
    case "jumpToMessageFinished": {
      return {
        ...state,
        hasMoreNewer: action.channel.state.messagePagination.hasNext,
        highlightedMessageId: action.highlightedMessageId,
        messages: action.channel.state.messages
      };
    }
    case "clearHighlightedMessage": {
      return {
        ...state,
        highlightedMessageId: void 0
      };
    }
    case "loadMoreFinished": {
      const { hasMore, messages } = action;
      return {
        ...state,
        hasMore,
        loadingMore: false,
        messages,
        suppressAutoscroll: false
      };
    }
    case "loadMoreNewerFinished": {
      const { hasMoreNewer, messages } = action;
      return {
        ...state,
        hasMoreNewer,
        loadingMoreNewer: false,
        messages
      };
    }
    case "loadMoreThreadFinished": {
      const { threadHasMore, threadMessages } = action;
      return {
        ...state,
        threadHasMore,
        threadLoadingMore: false,
        threadMessages
      };
    }
    case "openThread": {
      const { channel, message } = action;
      return {
        ...state,
        thread: message,
        threadHasMore: true,
        threadMessages: message.id ? { ...channel.state.threads }[message.id] || [] : [],
        threadSuppressAutoscroll: false
      };
    }
    case "setError": {
      const { error } = action;
      return { ...state, error };
    }
    case "setLoadingMore": {
      const { loadingMore } = action;
      return { ...state, loadingMore, suppressAutoscroll: loadingMore };
    }
    case "setLoadingMoreNewer": {
      const { loadingMoreNewer } = action;
      return { ...state, loadingMoreNewer };
    }
    case "setThread": {
      const { message } = action;
      return { ...state, thread: message };
    }
    case "setTyping": {
      const { channel } = action;
      return {
        ...state,
        typing: { ...channel.state.typing }
      };
    }
    case "startLoadingThread": {
      return {
        ...state,
        threadLoadingMore: true,
        threadSuppressAutoscroll: true
      };
    }
    case "updateThreadOnEvent": {
      const { channel, message } = action;
      if (!state.thread) return state;
      return {
        ...state,
        thread: message?.id === state.thread.id ? channel.state.formatMessage(message) : state.thread,
        threadMessages: state.thread?.id ? { ...channel.state.threads }[state.thread.id] || [] : []
      };
    }
    default:
      return state;
  }
};
var initialState = {
  error: null,
  hasMore: true,
  hasMoreNewer: false,
  loading: true,
  loadingMore: false,
  members: {},
  messages: [],
  pinnedMessages: [],
  read: {},
  suppressAutoscroll: false,
  thread: null,
  threadHasMore: true,
  threadLoadingMore: false,
  threadMessages: [],
  threadSuppressAutoscroll: false,
  typing: {},
  watcherCount: 0,
  watchers: {}
};

// src/components/Channel/hooks/useCreateChannelStateContext.ts
var import_react61 = require("react");

// src/i18n/de.json
var de_default = {
  "Add a comment": "Einen Kommentar hinzuf\xFCgen",
  "Add an option": "Eine Option hinzuf\xFCgen",
  "All results loaded": "Alle Ergebnisse geladen",
  "Allow access to camera": "Zugriff auf Kamera erlauben",
  "Allow access to microphone": "Zugriff auf Mikrofon erlauben",
  "Allow comments": "Kommentare erlauben",
  "Allow option suggestion": "Optionsvorschl\xE4ge erlauben",
  "An error has occurred during recording": "Ein Fehler ist w\xE4hrend der Aufnahme aufgetreten",
  "An error has occurred during the recording processing": "Ein Fehler ist w\xE4hrend der Aufnahmeverarbeitung aufgetreten",
  Anonymous: "Anonym",
  "Anonymous poll": "Anonyme Umfrage",
  Archive: "Archivieren",
  "Ask a question": "Eine Frage stellen",
  "Attach files": "Dateien anh\xE4ngen",
  Cancel: "Abbrechen",
  "Cannot seek in the recording": "In der Aufnahme kann nicht gesucht werden",
  "Channel Missing": "Kanal fehlt",
  Close: "Schlie\xDFen",
  "Close emoji picker": "Emoji-Auswahl schlie\xDFen",
  "Commands matching": "\xDCbereinstimmende Befehle",
  "Connection failure, reconnecting now...": "Verbindungsfehler, Wiederherstellung der Verbindung...",
  Create: "Erstellen",
  "Create poll": "Umfrage erstellen",
  Delete: "L\xF6schen",
  Delivered: "Zugestellt",
  "Download attachment {{ name }}": "Anhang {{ name }} herunterladen",
  "Drag your files here": "Ziehen Sie Ihre Dateien hierher",
  "Drag your files here to add to your post": "Ziehen Sie Ihre Dateien hierher, um sie Ihrem Beitrag hinzuzuf\xFCgen",
  "Edit Message": "Nachricht bearbeiten",
  "Edit message request failed": "Anfrage zum Bearbeiten der Nachricht fehlgeschlagen",
  Edited: "Bearbeitet",
  "Emoji matching": "Passende Emojis",
  "Empty message...": "Leere Nachricht...",
  End: "Beenden",
  "End vote": "Abstimmung beenden",
  "Error adding flag": "Fehler beim Hinzuf\xFCgen des Flags",
  "Error connecting to chat, refresh the page to try again.": "Verbindungsfehler zum Chat, aktualisieren Sie die Seite, um es erneut zu versuchen.",
  "Error deleting message": "Fehler beim L\xF6schen der Nachricht",
  "Error fetching reactions": "Fehler beim Laden von Reaktionen",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fehler beim Markieren der Nachricht als ungelesen. Kann keine \xE4lteren ungelesenen Nachrichten markieren als die neuesten 100 Kanalnachrichten.",
  "Error muting a user ...": "Fehler beim Stummschalten eines Nutzers.",
  "Error pinning message": "Fehler beim Pinnen der Nachricht",
  "Error removing message pin": "Fehler beim Entfernen der gepinnten Nachricht",
  "Error reproducing the recording": "Fehler bei der Wiedergabe der Aufnahme",
  "Error starting recording": "Fehler beim Starten der Aufnahme",
  "Error unmuting a user ...": "Fehler beim Aufheben der Stummschaltung eines Nutzers ...",
  "Error uploading attachment": "Fehler beim Hochladen des Anhangs",
  "Error uploading file": "Fehler beim Hochladen der Datei",
  "Error uploading image": "Fehler beim Hochladen des Bildes",
  "Error \xB7 Unsent": "Fehler \xB7 Nicht gesendet",
  "Error: {{ errorMessage }}": "Fehler: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Fehler beim Springen zur ersten ungelesenen Nachricht",
  "Failed to mark channel as read": "Fehler beim Markieren des Kanals als gelesen",
  "Failed to play the recording": "Wiedergabe der Aufnahme fehlgeschlagen",
  File: "Datei",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Datei ist zu gro\xDF: {{ size }}, maximale Upload-Gr\xF6\xDFe betr\xE4gt {{ limit }}",
  Flag: "Melden",
  "Generating...": "Generieren...",
  "Latest Messages": "Neueste Nachrichten",
  "Load more": "Mehr laden",
  "Mark as unread": "Als ungelesen markieren",
  "Maximum number of votes (from 2 to 10)": "Maximale Anzahl der Stimmen (von 2 bis 10)",
  Menu: "Men\xFC",
  "Message Failed \xB7 Click to try again": "Nachricht fehlgeschlagen \xB7 Klicken, um es erneut zu versuchen",
  "Message Failed \xB7 Unauthorized": "Nachricht fehlgeschlagen \xB7 Nicht autorisiert",
  "Message deleted": "Nachricht gel\xF6scht",
  "Message has been successfully flagged": "Nachricht wurde erfolgreich gemeldet",
  "Message pinned": "Nachricht angeheftet",
  "Message was blocked by moderation policies": "Nachricht wurde durch moderationsrichtlinien blockiert",
  "Messages have been marked unread.": "Nachrichten wurden als ungelesen markiert.",
  "Missing permissions to upload the attachment": "Fehlende Berechtigungen zum Hochladen des Anhangs",
  "Multiple answers": "Mehrere Antworten",
  Mute: "Stummschalten",
  New: "Neu",
  "New Messages!": "Neue Nachrichten!",
  "No chats here yet\u2026": "Noch keine Chats hier...",
  "No results found": "Keine Ergebnisse gefunden",
  "Nobody will be able to vote in this poll anymore.": "Niemand kann mehr in dieser Umfrage abstimmen.",
  "Nothing yet...": "Noch nichts...",
  Ok: "Ok",
  "Open emoji picker": "Emoji-Auswahl \xF6ffnen",
  "Option already exists": "Option existiert bereits",
  Options: "Optionen",
  "People matching": "Passende Personen",
  Pin: "Anheften",
  "Pinned by": "Angeheftet von",
  Poll: "Umfrage",
  "Poll comments": "Umfragekommentare",
  "Poll options": "Umfrageoptionen",
  "Poll results": "Umfrageergebnisse",
  Question: "Frage",
  Quote: "Zitieren",
  "Recording format is not supported and cannot be reproduced": "Aufnahmeformat wird nicht unterst\xFCtzt und kann nicht wiedergegeben werden",
  Reply: "Antworten",
  "Reply to Message": "Auf Nachricht antworten",
  Search: "Suche",
  "Searching...": "Suchen...",
  "See all options ({{count}})_one": "Alle Optionen anzeigen ({{count}})",
  "See all options ({{count}})_other": "Alle Optionen anzeigen ({{count}})",
  "Select one": "Eine ausw\xE4hlen",
  "Select one or more": "Eine oder mehrere ausw\xE4hlen",
  "Select up to {{count}}_one": "Bis zu {{count}} ausw\xE4hlen",
  "Select up to {{count}}_other": "Bis zu {{count}} ausw\xE4hlen",
  Send: "Senden",
  "Send Anyway": "Trotzdem senden",
  "Send message request failed": "Senden der Nachrichtenanfrage fehlgeschlagen",
  "Sending...": "Senden...",
  "Show all": "Alle anzeigen",
  Shuffle: "Mischen",
  "Slow Mode ON": "Langsamer Modus EIN",
  "Some of the files will not be accepted": "Einige der Dateien werden nicht akzeptiert",
  "Start typing to search": "Tippen Sie, um zu suchen",
  Submit: "Absenden",
  "Suggest an option": "Eine Option vorschlagen",
  "Thinking...": "Denken...",
  "This message did not meet our content guidelines": "Diese Nachricht entsprach nicht unseren Inhaltsrichtlinien",
  "This message was deleted...": "Diese Nachricht wurde gel\xF6scht...",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf die Kamera in Ihrem Browser",
  "To start recording, allow the microphone access in your browser": "Um mit der Aufnahme zu beginnen, erlauben Sie den Zugriff auf das Mikrofon in Ihrem Browser",
  "Type a number from 2 to 10": "Geben Sie eine Zahl von 2 bis 10 ein",
  "Type your message": "Nachricht eingeben",
  Unarchive: "Archivierung aufheben",
  Unmute: "Stummschaltung aufheben",
  Unpin: "Anheftung aufheben",
  "Unread messages": "Ungelesene Nachrichten",
  "Unsupported attachment": "Nicht unterst\xFCtzter Anhang",
  "Update your comment": "Ihren Kommentar aktualisieren",
  'Upload type: "{{ type }}" is not allowed': 'Upload-Typ: "{{ type }}" ist nicht erlaubt',
  "User uploaded content": "Vom Benutzer hochgeladener Inhalt",
  "View results": "Ergebnisse anzeigen",
  "View {{count}} comments_one": "{{count}} Kommentar anzeigen",
  "View {{count}} comments_other": "{{count}} Kommentare anzeigen",
  "Voice message": "Sprachnachricht",
  "Vote ended": "Abstimmung beendet",
  "Wait until all attachments have uploaded": "Bitte warten, bis alle Anh\xE4nge hochgeladen wurden",
  You: "Du",
  "You have no channels currently": "Du hast momentan noch keine Kan\xE4le",
  "You've reached the maximum number of files": "Die maximale Anzahl an Dateien ist erreicht",
  "aria/Attachment": "Anhang",
  "aria/Cancel Reply": "Antwort abbrechen",
  "aria/Cancel upload": "Upload abbrechen",
  "aria/Channel list": "Kanalliste",
  "aria/Channel search results": "Kanalsuchergebnisse",
  "aria/Close thread": "Thread schlie\xDFen",
  "aria/Download attachment": "Anhang herunterladen",
  "aria/Emoji picker": "Emoji-Auswahl",
  "aria/File input": "Dateieingabe",
  "aria/File upload": "Datei hochladen",
  "aria/Image input": "Bildeingabe",
  "aria/Load More Channels": "Mehr Kan\xE4le laden",
  "aria/Menu": "Men\xFC",
  "aria/Message Options": "Nachrichtenoptionen",
  "aria/Open Attachment Selector": "Anhang-Auswahl \xF6ffnen",
  "aria/Open Message Actions Menu": "Nachrichtenaktionsmen\xFC \xF6ffnen",
  "aria/Open Reaction Selector": "Reaktionsauswahl \xF6ffnen",
  "aria/Open Thread": "Thread \xF6ffnen",
  "aria/Reaction list": "Reaktionsliste",
  "aria/Remove attachment": "Anhang entfernen",
  "aria/Retry upload": "Upload erneut versuchen",
  "aria/Search results": "Suchergebnisse",
  "aria/Search results header filter button": "Suchergebnisse-Kopfzeilen-Filterbutton",
  "aria/Send": "Senden",
  "aria/Stop AI Generation": "KI-Generierung stoppen",
  "ban-command-args": "[@Benutzername] [Text]",
  "ban-command-description": "Einen Benutzer verbannen",
  "giphy-command-args": "[Text]",
  "giphy-command-description": "Poste ein zuf\xE4lliges Gif in den Kanal",
  live: "live",
  "mute-command-args": "[@Benutzername]",
  "mute-command-description": "Stummschalten eines Benutzers",
  replyCount_one: "1 Antwort",
  replyCount_other: "{{ count }} Antworten",
  "search-results-header-filter-source-button-label--channels": "Kan\xE4le",
  "search-results-header-filter-source-button-label--messages": "Nachrichten",
  "search-results-header-filter-source-button-label--users": "Benutzer",
  searchResultsCount_one: "1 Ergebnis",
  searchResultsCount_other: "{{ count }} Ergebnisse",
  "this content could not be displayed": "Dieser Inhalt konnte nicht angezeigt werden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@Benutzername]",
  "unban-command-description": "Einen Benutzer entbannen",
  "unmute-command-args": "[@Benutzername]",
  "unmute-command-description": "Stummschaltung eines Benutzers aufheben",
  unreadMessagesSeparatorText_one: "1 ungelesene Nachricht",
  unreadMessagesSeparatorText_other: "{{count}} ungelesene Nachrichten",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} und {{moreCount}} mehr",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} und {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} und {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mehr",
  "{{ memberCount }} members": "{{ memberCount }} Mitglieder",
  "{{ user }} has been muted": "{{ user }} wurde stummgeschaltet",
  "{{ user }} has been unmuted": "Die Stummschaltung von {{ user }} wurde aufgehoben",
  "{{ user }} is typing...": "{{ user }} tippt...",
  "{{ users }} and more are typing...": "{{ users }} und mehr tippen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} und {{ user }} tippen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ungelesen",
  "{{count}} unread_other": "{{count}} ungelesen",
  "{{count}} votes_one": "{{count}} Stimme",
  "{{count}} votes_other": "{{count}} Stimmen",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Anhang...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} hat erstellt: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} hat abgestimmt: {{pollOptionText}}"
};

// src/i18n/en.json
var en_default = {
  "Add a comment": "Add a comment",
  "Add an option": "Add an option",
  "All results loaded": "All results loaded",
  "Allow access to camera": "Allow access to camera",
  "Allow access to microphone": "Allow access to microphone",
  "Allow comments": "Allow comments",
  "Allow option suggestion": "Allow option suggestion",
  "An error has occurred during recording": "An error has occurred during recording",
  "An error has occurred during the recording processing": "An error has occurred during the recording processing",
  Anonymous: "Anonymous",
  "Anonymous poll": "Anonymous poll",
  Archive: "Archive",
  "Ask a question": "Ask a question",
  "Attach files": "Attach files",
  Cancel: "Cancel",
  "Cannot seek in the recording": "Cannot seek in the recording",
  "Channel Missing": "Channel Missing",
  Close: "Close",
  "Close emoji picker": "Close emoji picker",
  "Commands matching": "Commands matching",
  "Connection failure, reconnecting now...": "Connection failure, reconnecting now...",
  Create: "Create",
  "Create poll": "Create poll",
  Delete: "Delete",
  Delivered: "Delivered",
  "Download attachment {{ name }}": "Download attachment {{ name }}",
  "Drag your files here": "Drag your files here",
  "Drag your files here to add to your post": "Drag your files here to add to your post",
  "Edit Message": "Edit Message",
  "Edit message request failed": "Edit message request failed",
  Edited: "Edited",
  "Emoji matching": "Emoji matching",
  "Empty message...": "Empty message...",
  End: "End",
  "End vote": "End vote",
  "Error adding flag": "Error adding flag",
  "Error connecting to chat, refresh the page to try again.": "Error connecting to chat, refresh the page to try again.",
  "Error deleting message": "Error deleting message",
  "Error fetching reactions": "Error loading reactions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.",
  "Error muting a user ...": "Error muting a user ...",
  "Error pinning message": "Error pinning message",
  "Error removing message pin": "Error removing message pin",
  "Error reproducing the recording": "Error reproducing the recording",
  "Error starting recording": "Error starting recording",
  "Error unmuting a user ...": "Error unmuting a user ...",
  "Error uploading attachment": "Error uploading attachment",
  "Error uploading file": "Error uploading file",
  "Error uploading image": "Error uploading image",
  "Error \xB7 Unsent": "Error \xB7 Unsent",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Failed to jump to the first unread message",
  "Failed to mark channel as read": "Failed to mark channel as read",
  "Failed to play the recording": "Failed to play the recording",
  File: "File",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "File is too large: {{ size }}, maximum upload size is {{ limit }}",
  Flag: "Flag",
  "Generating...": "Generating...",
  "Latest Messages": "Latest Messages",
  "Load more": "Load more",
  "Mark as unread": "Mark as unread",
  "Maximum number of votes (from 2 to 10)": "Maximum number of votes (from 2 to 10)",
  Menu: "Menu",
  "Message Failed \xB7 Click to try again": "Message Failed \xB7 Click to try again",
  "Message Failed \xB7 Unauthorized": "Message Failed \xB7 Unauthorized",
  "Message deleted": "Message deleted",
  "Message has been successfully flagged": "Message has been successfully flagged",
  "Message pinned": "Message pinned",
  "Message was blocked by moderation policies": "Message was blocked by moderation policies",
  "Messages have been marked unread.": "Messages have been marked unread.",
  "Missing permissions to upload the attachment": "Missing permissions to upload the attachment",
  "Multiple answers": "Multiple answers",
  Mute: "Mute",
  New: "New",
  "New Messages!": "New Messages!",
  "No chats here yet\u2026": "No chats here yet\u2026",
  "No results found": "No results found",
  "Nobody will be able to vote in this poll anymore.": "Nobody will be able to vote in this poll anymore.",
  "Nothing yet...": "Nothing yet...",
  Ok: "Ok",
  "Open emoji picker": "Open emoji picker",
  "Option already exists": "Option already exists",
  Options: "Options",
  "People matching": "People matching",
  Pin: "Pin",
  "Pinned by": "Pinned by",
  Poll: "Poll",
  "Poll comments": "Poll comments",
  "Poll options": "Poll options",
  "Poll results": "Poll results",
  Question: "Question",
  Quote: "Quote",
  "Recording format is not supported and cannot be reproduced": "Recording format is not supported and cannot be reproduced",
  Reply: "Reply",
  "Reply to Message": "Reply to Message",
  Search: "Search",
  "Searching...": "Searching...",
  "See all options ({{count}})_one": "See all options ({{count}})",
  "See all options ({{count}})_other": "See all options ({{count}})",
  "Select one": "Select one",
  "Select one or more": "Select one or more",
  "Select up to {{count}}_one": "Select up to {{count}}",
  "Select up to {{count}}_other": "Select up to {{count}}",
  Send: "Send",
  "Send Anyway": "Send Anyway",
  "Send message request failed": "Send message request failed",
  "Sending...": "Sending...",
  "Show all": "Show all",
  Shuffle: "Shuffle",
  "Slow Mode ON": "Slow Mode ON",
  "Some of the files will not be accepted": "Some of the files will not be accepted",
  "Start typing to search": "Start typing to search",
  Submit: "Submit",
  "Suggest an option": "Suggest an option",
  "Thinking...": "Thinking...",
  "This message did not meet our content guidelines": "This message did not meet our content guidelines",
  "This message was deleted...": "This message was deleted...",
  Thread: "Thread",
  "To start recording, allow the camera access in your browser": "To start recording, allow the camera access in your browser",
  "To start recording, allow the microphone access in your browser": "To start recording, allow the microphone access in your browser",
  "Type a number from 2 to 10": "Type a number from 2 to 10",
  "Type your message": "Type your message",
  Unarchive: "Unarchive",
  Unmute: "Unmute",
  Unpin: "Unpin",
  "Unread messages": "Unread messages",
  "Unsupported attachment": "Unsupported attachment",
  "Update your comment": "Update your comment",
  'Upload type: "{{ type }}" is not allowed': 'Upload type: "{{ type }}" is not allowed',
  "User uploaded content": "User uploaded content",
  "View results": "View results",
  "View {{count}} comments_one": "View {{count}} comment",
  "View {{count}} comments_other": "View {{count}} comments",
  "Voice message": "Voice message",
  "Vote ended": "Vote ended",
  "Wait until all attachments have uploaded": "Wait until all attachments have uploaded",
  You: "You",
  "You have no channels currently": "You have no channels currently",
  "You've reached the maximum number of files": "You've reached the maximum number of files",
  "aria/Attachment": "Attachment",
  "aria/Cancel Reply": "Cancel Reply",
  "aria/Cancel upload": "Cancel upload",
  "aria/Channel list": "Channel list",
  "aria/Channel search results": "Channel search results",
  "aria/Close thread": "Close thread",
  "aria/Download attachment": "aria/Download attachment",
  "aria/Emoji picker": "Emoji picker",
  "aria/File input": "File input",
  "aria/File upload": "File upload",
  "aria/Image input": "Image input",
  "aria/Load More Channels": "Load More Channels",
  "aria/Menu": "Menu",
  "aria/Message Options": "Message Options",
  "aria/Open Attachment Selector": "aria/Open Attachment Selector",
  "aria/Open Message Actions Menu": "Open Message Actions Menu",
  "aria/Open Reaction Selector": "Open Reaction Selector",
  "aria/Open Thread": "Open Thread",
  "aria/Reaction list": "Reaction list",
  "aria/Remove attachment": "Remove attachment",
  "aria/Retry upload": "Retry upload",
  "aria/Search results": "Search results",
  "aria/Search results header filter button": "Search results header filter button",
  "aria/Send": "Send",
  "aria/Stop AI Generation": "Stop AI Generation",
  live: "live",
  replyCount_one: "1 reply",
  replyCount_other: "{{ count }} replies",
  "search-results-header-filter-source-button-label--channels": "channels",
  "search-results-header-filter-source-button-label--messages": "messages",
  "search-results-header-filter-source-button-label--users": "users",
  searchResultsCount_one: "1 result",
  searchResultsCount_other: "{{ count }} results",
  "this content could not be displayed": "this content could not be displayed",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  unreadMessagesSeparatorText_one: "1 unread message",
  unreadMessagesSeparatorText_other: "{{count}} unread messages",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} and {{ moreCount }} more",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }}, and {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} and {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} more",
  "{{ memberCount }} members": "{{ memberCount }} members",
  "{{ user }} has been muted": "{{ user }} has been muted",
  "{{ user }} has been unmuted": "{{ user }} has been unmuted",
  "{{ user }} is typing...": "{{ user }} is typing...",
  "{{ users }} and more are typing...": "{{ users }} and more are typing...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} and {{ user }} are typing...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} unread",
  "{{count}} unread_other": "{{count}} unread",
  "{{count}} votes_one": "{{count}} vote",
  "{{count}} votes_other": "{{count}} votes",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Attachment...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} created: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}"
};

// src/i18n/es.json
var es_default = {
  "Add a comment": "Agregar un comentario",
  "Add an option": "Agregar una opci\xF3n",
  "All results loaded": "Todos los resultados cargados",
  "Allow access to camera": "Permitir acceso a la c\xE1mara",
  "Allow access to microphone": "Permitir acceso al micr\xF3fono",
  "Allow comments": "Permitir comentarios",
  "Allow option suggestion": "Permitir sugerencia de opciones",
  "An error has occurred during recording": "Se ha producido un error durante la grabaci\xF3n",
  "An error has occurred during the recording processing": "Se ha producido un error durante el procesamiento de la grabaci\xF3n",
  Anonymous: "An\xF3nimo",
  "Anonymous poll": "Encuesta an\xF3nima",
  Archive: "Archivo",
  "Ask a question": "Hacer una pregunta",
  "Attach files": "Adjuntar archivos",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "No se puede buscar en la grabaci\xF3n",
  "Channel Missing": "Falta canal",
  Close: "Cerrar",
  "Close emoji picker": "Cerrar el selector de emojis",
  "Commands matching": "Coincidencia de comandos",
  "Connection failure, reconnecting now...": "Fallo de conexi\xF3n, reconectando ahora...",
  Create: "Crear",
  "Create poll": "Crear encuesta",
  Delete: "Borrar",
  Delivered: "Entregado",
  "Download attachment {{ name }}": "Descargar adjunto {{ name }}",
  "Drag your files here": "Arrastra tus archivos aqu\xED",
  "Drag your files here to add to your post": "Arrastra tus archivos aqu\xED para agregarlos a tu publicaci\xF3n",
  "Edit Message": "Editar mensaje",
  "Edit message request failed": "Error al editar la solicitud de mensaje",
  Edited: "Editado",
  "Emoji matching": "Coincidencia de emoji",
  "Empty message...": "Mensaje vac\xEDo...",
  End: "Final",
  "End vote": "Finalizar votaci\xF3n",
  "Error adding flag": "Error al agregar la bandera",
  "Error connecting to chat, refresh the page to try again.": "Error al conectarse al chat, actualice la p\xE1gina para volver a intentarlo.",
  "Error deleting message": "Error al eliminar el mensaje",
  "Error fetching reactions": "Error al cargar las reacciones",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Error al marcar el mensaje como no le\xEDdo. No se pueden marcar mensajes no le\xEDdos m\xE1s antiguos que los \xFAltimos 100 mensajes del canal.",
  "Error muting a user ...": "Error al silenciar el usuario...",
  "Error pinning message": "Error al fijar el mensaje",
  "Error removing message pin": "Error al quitar el pin del mensaje",
  "Error reproducing the recording": "Error al reproducir la grabaci\xF3n",
  "Error starting recording": "Error al iniciar la grabaci\xF3n",
  "Error unmuting a user ...": "Error al desactivar el silencio del usuario...",
  "Error uploading attachment": "Error al subir el archivo adjunto",
  "Error uploading file": "Error al cargar el archivo",
  "Error uploading image": "Error al subir la imagen",
  "Error \xB7 Unsent": "Error \xB7 No enviado",
  "Error: {{ errorMessage }}": "Error: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Error al saltar al primer mensaje no le\xEDdo",
  "Failed to mark channel as read": "Error al marcar el canal como le\xEDdo",
  "Failed to play the recording": "No se pudo reproducir la grabaci\xF3n",
  File: "Archivo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "El archivo es demasiado grande: {{ size }}, el tama\xF1o m\xE1ximo de carga es de {{ limit }}",
  Flag: "Marcar",
  "Generating...": "Generando...",
  "Latest Messages": "\xDAltimos mensajes",
  "Load more": "Cargar m\xE1s",
  "Mark as unread": "Marcar como no le\xEDdo",
  "Maximum number of votes (from 2 to 10)": "N\xFAmero m\xE1ximo de votos (de 2 a 10)",
  Menu: "Men\xFA",
  "Message Failed \xB7 Click to try again": "Mensaje fallido \xB7 Haga clic para volver a intentarlo",
  "Message Failed \xB7 Unauthorized": "Mensaje fallido \xB7 No autorizado",
  "Message deleted": "Mensaje eliminado",
  "Message has been successfully flagged": "El mensaje se marc\xF3 correctamente",
  "Message pinned": "Mensaje fijado",
  "Message was blocked by moderation policies": "El mensaje fue bloqueado por las pol\xEDticas de moderaci\xF3n",
  "Messages have been marked unread.": "Los mensajes han sido marcados como no le\xEDdos.",
  "Missing permissions to upload the attachment": "Faltan permisos para subir el archivo adjunto",
  "Multiple answers": "M\xFAltiples respuestas",
  Mute: "Silenciar",
  New: "Nuevo",
  "New Messages!": "\xA1Nuevos mensajes!",
  "No chats here yet\u2026": "A\xFAn no hay mensajes aqu\xED...",
  "No results found": "No se han encontrado resultados",
  "Nobody will be able to vote in this poll anymore.": "Nadie podr\xE1 votar en esta encuesta.",
  "Nothing yet...": "Nada a\xFAn...",
  Ok: "Ok",
  "Open emoji picker": "Abrir el selector de emojis",
  "Option already exists": "La opci\xF3n ya existe",
  Options: "Opciones",
  "People matching": "Personas que coinciden",
  Pin: "Fijar",
  "Pinned by": "Fijado por",
  Poll: "Encuesta",
  "Poll comments": "Comentarios de la encuesta",
  "Poll options": "Opciones de la encuesta",
  "Poll results": "Resultados de la encuesta",
  Question: "Pregunta",
  Quote: "Citar",
  "Recording format is not supported and cannot be reproduced": "El formato de grabaci\xF3n no es compatible y no se puede reproducir",
  Reply: "Responder",
  "Reply to Message": "Responder al mensaje",
  Search: "Buscar",
  "Searching...": "Buscando...",
  "See all options ({{count}})_many": "Ver todas las opciones ({{count}})",
  "See all options ({{count}})_one": "Ver todas las opciones ({{count}})",
  "See all options ({{count}})_other": "Ver todas las opciones ({{count}})",
  "Select one": "Seleccionar uno",
  "Select one or more": "Seleccionar uno o m\xE1s",
  "Select up to {{count}}_many": "Selecciona hasta {{count}}",
  "Select up to {{count}}_one": "Selecciona hasta {{count}}",
  "Select up to {{count}}_other": "Selecciona hasta {{count}}",
  Send: "Enviar",
  "Send Anyway": "Enviar de todos modos",
  "Send message request failed": "Error al enviar la solicitud de mensaje",
  "Sending...": "Enviando...",
  "Show all": "Mostrar todo",
  Shuffle: "Mezclar",
  "Slow Mode ON": "Modo lento activado",
  "Some of the files will not be accepted": "Algunos archivos no ser\xE1n aceptados",
  "Start typing to search": "Empieza a escribir para buscar",
  Submit: "Enviar",
  "Suggest an option": "Sugerir una opci\xF3n",
  "Thinking...": "Pensando...",
  "This message did not meet our content guidelines": "Este mensaje no cumple con nuestras directrices de contenido",
  "This message was deleted...": "Este mensaje fue eliminado...",
  Thread: "Hilo",
  "To start recording, allow the camera access in your browser": "Para comenzar a grabar, permita el acceso a la c\xE1mara en su navegador",
  "To start recording, allow the microphone access in your browser": "Para comenzar a grabar, permita el acceso al micr\xF3fono en su navegador",
  "Type a number from 2 to 10": "Escribe un n\xFAmero del 2 al 10",
  "Type your message": "Escribe tu mensaje",
  Unarchive: "Desarchivar",
  Unmute: "Activar sonido",
  Unpin: "Desfijar",
  "Unread messages": "Mensajes no le\xEDdos",
  "Unsupported attachment": "Adjunto no compatible",
  "Update your comment": "Actualizar tu comentario",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de carga: "{{ type }}" no est\xE1 permitido',
  "User uploaded content": "Contenido subido por el usuario",
  "View results": "Ver resultados",
  "View {{count}} comments_many": "Ver {{count}} comentarios",
  "View {{count}} comments_one": "Ver {{count}} comentario",
  "View {{count}} comments_other": "Ver {{count}} comentarios",
  "Voice message": "Mensaje de voz",
  "Vote ended": "Votaci\xF3n finalizada",
  "Wait until all attachments have uploaded": "Espere hasta que se hayan cargado todos los archivos adjuntos",
  You: "T\xFA",
  "You have no channels currently": "Actualmente no tienes canales",
  "You've reached the maximum number of files": "Has alcanzado el n\xFAmero m\xE1ximo de archivos",
  "aria/Attachment": "Adjunto",
  "aria/Cancel Reply": "Cancelar respuesta",
  "aria/Cancel upload": "Cancelar carga",
  "aria/Channel list": "Lista de canales",
  "aria/Channel search results": "Resultados de b\xFAsqueda de canales",
  "aria/Close thread": "Cerrar hilo",
  "aria/Download attachment": "Descargar adjunto",
  "aria/Emoji picker": "Selector de emojis",
  "aria/File input": "Entrada de archivo",
  "aria/File upload": "Carga de archivo",
  "aria/Image input": "Entrada de imagen",
  "aria/Load More Channels": "Cargar m\xE1s canales",
  "aria/Menu": "Men\xFA",
  "aria/Message Options": "Opciones de mensaje",
  "aria/Open Attachment Selector": "Abrir selector de adjuntos",
  "aria/Open Message Actions Menu": "Abrir men\xFA de acciones de mensaje",
  "aria/Open Reaction Selector": "Abrir selector de reacciones",
  "aria/Open Thread": "Abrir hilo",
  "aria/Reaction list": "Lista de reacciones",
  "aria/Remove attachment": "Eliminar adjunto",
  "aria/Retry upload": "Reintentar carga",
  "aria/Search results": "Resultados de b\xFAsqueda",
  "aria/Search results header filter button": "Bot\xF3n de filtro del encabezado de resultados de b\xFAsqueda",
  "aria/Send": "Enviar",
  "aria/Stop AI Generation": "Detener generaci\xF3n de IA",
  "ban-command-args": "[@usuario] [texto]",
  "ban-command-description": "Prohibir a un usuario",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Publicar un gif aleatorio en el canal",
  live: "En vivo",
  "mute-command-args": "[@usuario]",
  "mute-command-description": "Silenciar a un usuario",
  replyCount_many: "{{ count }} respuestas",
  replyCount_one: "1 respuesta",
  replyCount_other: "{{ count }} respuestas",
  "search-results-header-filter-source-button-label--channels": "canales",
  "search-results-header-filter-source-button-label--messages": "mensajes",
  "search-results-header-filter-source-button-label--users": "usuarios",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "Este contenido no se pudo mostrar",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@usuario]",
  "unban-command-description": "Quitar la prohibici\xF3n a un usuario",
  "unmute-command-args": "[@usuario]",
  "unmute-command-description": "Desactivar el silencio de un usuario",
  unreadMessagesSeparatorText_many: "{{count}} mensajes no le\xEDdos",
  unreadMessagesSeparatorText_one: "1 mensaje no le\xEDdo",
  unreadMessagesSeparatorText_other: "{{count}} mensajes no le\xEDdos",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} y {{ moreCount }} m\xE1s",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} y {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} y {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} m\xE1s",
  "{{ memberCount }} members": "{{ memberCount }} miembros",
  "{{ user }} has been muted": "{{ user }} ha sido silenciado",
  "{{ user }} has been unmuted": "Se ha desactivado el silencio de {{ user }}",
  "{{ user }} is typing...": "{{ user }} est\xE1 escribiendo...",
  "{{ users }} and more are typing...": "{{ users }} y m\xE1s est\xE1n escribiendo...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} y {{ user }} est\xE1n escribiendo...",
  "{{ watcherCount }} online": "{{ watcherCount }} en l\xEDnea",
  "{{count}} unread_many": "{{count}} no le\xEDdos",
  "{{count}} unread_one": "{{count}} no le\xEDdo",
  "{{count}} unread_other": "{{count}} no le\xEDdos",
  "{{count}} votes_many": "{{count}} votos",
  "{{count}} votes_one": "1 voto",
  "{{count}} votes_other": "{{count}} votos",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Adjunto...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} cre\xF3: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} vot\xF3: {{pollOptionText}}"
};

// src/i18n/fr.json
var fr_default = {
  "Add a comment": "Ajouter un commentaire",
  "Add an option": "Ajouter une option",
  "All results loaded": "Tous les r\xE9sultats sont charg\xE9s",
  "Allow access to camera": "Autoriser l'acc\xE8s \xE0 la cam\xE9ra",
  "Allow access to microphone": "Autoriser l'acc\xE8s au microphone",
  "Allow comments": "Autoriser les commentaires",
  "Allow option suggestion": "Autoriser la suggestion d'options",
  "An error has occurred during recording": "Une erreur s'est produite pendant l'enregistrement",
  "An error has occurred during the recording processing": "Une erreur s'est produite pendant le traitement de l'enregistrement",
  Anonymous: "Anonyme",
  "Anonymous poll": "Sondage anonyme",
  Archive: "Archive",
  "Ask a question": "Poser une question",
  "Attach files": "Joindre des fichiers",
  Cancel: "Annuler",
  "Cannot seek in the recording": "Impossible de rechercher dans l'enregistrement",
  "Channel Missing": "Canal Manquant",
  Close: "Fermer",
  "Close emoji picker": "Fermer le s\xE9lecteur d'\xE9mojis",
  "Commands matching": "Correspondance des commandes",
  "Connection failure, reconnecting now...": "\xC9chec de la connexion, reconnexion en cours...",
  Create: "Cr\xE9er",
  "Create poll": "Cr\xE9er un sondage",
  Delete: "Supprimer",
  Delivered: "Publi\xE9",
  "Download attachment {{ name }}": "T\xE9l\xE9charger la pi\xE8ce jointe {{ name }}",
  "Drag your files here": "Glissez vos fichiers ici",
  "Drag your files here to add to your post": "Glissez vos fichiers ici pour les ajouter \xE0 votre publication",
  "Edit Message": "\xC9diter un message",
  "Edit message request failed": "\xC9chec de la demande de modification du message",
  Edited: "Modifi\xE9",
  "Emoji matching": "Correspondance d'\xE9mojis",
  "Empty message...": "Message vide...",
  End: "Fin",
  "End vote": "Fin du vote",
  "Error adding flag": "Erreur lors de l'ajout du signalement",
  "Error connecting to chat, refresh the page to try again.": "Erreur de connexion au chat, rafra\xEEchissez la page pour r\xE9essayer.",
  "Error deleting message": "Erreur lors de la suppression du message",
  "Error fetching reactions": "Erreur lors du chargement des r\xE9actions",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erreur lors de la marque du message comme non lu. Impossible de marquer des messages non lus plus anciens que les 100 derniers messages du canal.",
  "Error muting a user ...": "Erreur lors de la mise en sourdine d'un utilisateur...",
  "Error pinning message": "Erreur lors de l'\xE9pinglage du message",
  "Error removing message pin": "Erreur lors du retrait de l'\xE9pinglage du message",
  "Error reproducing the recording": "Erreur lors de la reproduction de l'enregistrement",
  "Error starting recording": "Erreur lors du d\xE9marrage de l'enregistrement",
  "Error unmuting a user ...": "Erreur lors du d\xE9marrage de la sourdine d'un utilisateur ...",
  "Error uploading attachment": "Erreur lors du t\xE9l\xE9chargement de la pi\xE8ce jointe",
  "Error uploading file": "Erreur lors du t\xE9l\xE9chargement du fichier",
  "Error uploading image": "Erreur lors de l'envoi de l'image",
  "Error \xB7 Unsent": "Erreur - Non envoy\xE9",
  "Error: {{ errorMessage }}": "Erreur : {{ errorMessage }}",
  "Failed to jump to the first unread message": "\xC9chec du saut vers le premier message non lu",
  "Failed to mark channel as read": "\xC9chec du marquage du canal comme lu",
  "Failed to play the recording": "Impossible de lire l'enregistrement",
  File: "Fichier",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Le fichier est trop volumineux : {{ size }}, la taille maximale de t\xE9l\xE9chargement est de {{ limit }}",
  Flag: "Signaler",
  "Generating...": "G\xE9n\xE9ration...",
  "Latest Messages": "Derniers messages",
  "Load more": "Charger plus",
  "Mark as unread": "Marquer comme non lu",
  "Maximum number of votes (from 2 to 10)": "Nombre maximum de votes (de 2 \xE0 10)",
  Menu: "Menu",
  "Message Failed \xB7 Click to try again": "\xC9chec de l'envoi du message - Cliquez pour r\xE9essayer",
  "Message Failed \xB7 Unauthorized": "\xC9chec de l'envoi du message - Non autoris\xE9",
  "Message deleted": "Message supprim\xE9",
  "Message has been successfully flagged": "Le message a \xE9t\xE9 signal\xE9 avec succ\xE8s",
  "Message pinned": "Message \xE9pingl\xE9",
  "Message was blocked by moderation policies": "Le message a \xE9t\xE9 bloqu\xE9 par les politiques de mod\xE9ration",
  "Messages have been marked unread.": "Les messages ont \xE9t\xE9 marqu\xE9s comme non lus.",
  "Missing permissions to upload the attachment": "Autorisations manquantes pour t\xE9l\xE9charger la pi\xE8ce jointe",
  "Multiple answers": "R\xE9ponses multiples",
  Mute: "Muet",
  New: "Nouveau",
  "New Messages!": "Nouveaux Messages!",
  "No chats here yet\u2026": "Pas encore de messages ici...",
  "No results found": "Aucun r\xE9sultat trouv\xE9",
  "Nobody will be able to vote in this poll anymore.": "Personne ne pourra plus voter dans ce sondage.",
  "Nothing yet...": "Rien pour l'instant...",
  Ok: "D'accord",
  "Open emoji picker": "Ouvrir le s\xE9lecteur d'\xE9mojis",
  "Option already exists": "L'option existe d\xE9j\xE0",
  Options: "Options",
  "People matching": "Correspondance de personnes",
  Pin: "\xC9pingler",
  "Pinned by": "\xC9pingl\xE9 par",
  Poll: "Sondage",
  "Poll comments": "Commentaires du sondage",
  "Poll options": "Options du sondage",
  "Poll results": "R\xE9sultats du sondage",
  Question: "Question",
  Quote: "Citer",
  "Recording format is not supported and cannot be reproduced": "Le format d'enregistrement n'est pas pris en charge et ne peut pas \xEAtre reproduit",
  Reply: "R\xE9pondre",
  "Reply to Message": "R\xE9pondre au message",
  Search: "Rechercher",
  "Searching...": "Recherche en cours...",
  "See all options ({{count}})_many": "Voir toutes les options ({{count}})",
  "See all options ({{count}})_one": "Voir toutes les options ({{count}})",
  "See all options ({{count}})_other": "Voir toutes les options ({{count}})",
  "Select one": "S\xE9lectionner un",
  "Select one or more": "S\xE9lectionner un ou plusieurs",
  "Select up to {{count}}_many": "S\xE9lectionner jusqu'\xE0 {{count}}",
  "Select up to {{count}}_one": "S\xE9lectionner jusqu'\xE0 {{count}}",
  "Select up to {{count}}_other": "S\xE9lectionner jusqu'\xE0 {{count}}",
  Send: "Envoyer",
  "Send Anyway": "Envoyer quand m\xEAme",
  "Send message request failed": "\xC9chec de la demande d'envoi de message",
  "Sending...": "Envoi en cours...",
  "Show all": "Tout afficher",
  Shuffle: "M\xE9langer",
  "Slow Mode ON": "Mode lent activ\xE9",
  "Some of the files will not be accepted": "Certains fichiers ne seront pas accept\xE9s",
  "Start typing to search": "Commencez \xE0 taper pour rechercher",
  Submit: "Envoyer",
  "Suggest an option": "Sugg\xE9rer une option",
  "Thinking...": "R\xE9flexion...",
  "This message did not meet our content guidelines": "Ce message ne respecte pas nos directives de contenu",
  "This message was deleted...": "Ce message a \xE9t\xE9 supprim\xE9...",
  Thread: "Fil de discussion",
  "To start recording, allow the camera access in your browser": "Pour commencer l'enregistrement, autorisez l'acc\xE8s \xE0 la cam\xE9ra dans votre navigateur",
  "To start recording, allow the microphone access in your browser": "Pour commencer l'enregistrement, autorisez l'acc\xE8s au microphone dans votre navigateur",
  "Type a number from 2 to 10": "Tapez un nombre de 2 \xE0 10",
  "Type your message": "Tapez votre message",
  Unarchive: "D\xE9sarchiver",
  Unmute: "D\xE9sactiver muet",
  Unpin: "D\xE9tacher",
  "Unread messages": "Messages non lus",
  "Unsupported attachment": "Pi\xE8ce jointe non prise en charge",
  "Update your comment": "Mettre \xE0 jour votre commentaire",
  'Upload type: "{{ type }}" is not allowed': `Le type de fichier : "{{ type }}" n'est pas autoris\xE9`,
  "User uploaded content": "Contenu t\xE9l\xE9charg\xE9 par l'utilisateur",
  "View results": "Voir les r\xE9sultats",
  "View {{count}} comments_many": "Voir {{count}} commentaires",
  "View {{count}} comments_one": "Voir {{count}} commentaire",
  "View {{count}} comments_other": "Voir {{count}} commentaires",
  "Voice message": "Message vocal",
  "Vote ended": "Vote termin\xE9",
  "Wait until all attachments have uploaded": "Attendez que toutes les pi\xE8ces jointes soient t\xE9l\xE9charg\xE9es",
  You: "Vous",
  "You have no channels currently": "Vous n'avez actuellement aucun canal",
  "You've reached the maximum number of files": "Vous avez atteint le nombre maximal de fichiers",
  "aria/Attachment": "Pi\xE8ce jointe",
  "aria/Cancel Reply": "Annuler la r\xE9ponse",
  "aria/Cancel upload": "Annuler le t\xE9l\xE9chargement",
  "aria/Channel list": "Liste des canaux",
  "aria/Channel search results": "R\xE9sultats de recherche de canaux",
  "aria/Close thread": "Fermer le fil",
  "aria/Download attachment": "T\xE9l\xE9charger la pi\xE8ce jointe",
  "aria/Emoji picker": "S\xE9lecteur d'\xE9mojis",
  "aria/File input": "Entr\xE9e de fichier",
  "aria/File upload": "T\xE9l\xE9chargement de fichier",
  "aria/Image input": "Entr\xE9e d'image",
  "aria/Load More Channels": "Charger plus de canaux",
  "aria/Menu": "Menu",
  "aria/Message Options": "Options du message",
  "aria/Open Attachment Selector": "Ouvrir le s\xE9lecteur de pi\xE8ces jointes",
  "aria/Open Message Actions Menu": "Ouvrir le menu des actions du message",
  "aria/Open Reaction Selector": "Ouvrir le s\xE9lecteur de r\xE9actions",
  "aria/Open Thread": "Ouvrir le fil",
  "aria/Reaction list": "Liste des r\xE9actions",
  "aria/Remove attachment": "Supprimer la pi\xE8ce jointe",
  "aria/Retry upload": "R\xE9essayer le t\xE9l\xE9chargement",
  "aria/Search results": "R\xE9sultats de recherche",
  "aria/Search results header filter button": "Bouton de filtre d'en-t\xEAte des r\xE9sultats de recherche",
  "aria/Send": "Envoyer",
  "aria/Stop AI Generation": "Arr\xEAter la g\xE9n\xE9ration d'IA",
  "ban-command-args": "[@nomdutilisateur] [texte]",
  "ban-command-description": "Bannir un utilisateur",
  "giphy-command-args": "[texte]",
  "giphy-command-description": "Poster un GIF al\xE9atoire dans le canal",
  live: "en direct",
  "mute-command-args": "[@nomdutilisateur]",
  "mute-command-description": "Muter un utilisateur",
  replyCount_many: "{{ count }} r\xE9ponses",
  replyCount_one: "1 r\xE9ponse",
  replyCount_other: "{{ count }} r\xE9ponses",
  "search-results-header-filter-source-button-label--channels": "canaux",
  "search-results-header-filter-source-button-label--messages": "messages",
  "search-results-header-filter-source-button-label--users": "utilisateurs",
  searchResultsCount_many: "{{ count }} r\xE9sultats",
  searchResultsCount_one: "1 r\xE9sultat",
  searchResultsCount_other: "{{ count }} r\xE9sultats",
  "this content could not be displayed": "ce contenu n'a pas pu \xEAtre affich\xE9",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomdutilisateur]",
  "unban-command-description": "D\xE9bannir un utilisateur",
  "unmute-command-args": "[@nomdutilisateur]",
  "unmute-command-description": "D\xE9muter un utilisateur",
  unreadMessagesSeparatorText_many: "{{count}} messages non lus",
  unreadMessagesSeparatorText_one: "1 message non lu",
  unreadMessagesSeparatorText_other: "{{count}} messages non lus",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} et {{ moreCount }} autres",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} et {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} et {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} suppl\xE9mentaires",
  "{{ memberCount }} members": "{{ memberCount }} membres",
  "{{ user }} has been muted": "{{ user }} a \xE9t\xE9 mis en sourdine",
  "{{ user }} has been unmuted": "{{ user }} n'est plus en sourdine",
  "{{ user }} is typing...": "{{ user }} est en train d'\xE9crire...",
  "{{ users }} and more are typing...": "{{ users }} et plus sont en train d'\xE9crire...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} et {{ user }} sont en train d'\xE9crire...",
  "{{ watcherCount }} online": "{{ watcherCount }} en ligne",
  "{{count}} unread_many": "{{count}} non lus",
  "{{count}} unread_one": "{{count}} non lu",
  "{{count}} unread_other": "{{count}} non lus",
  "{{count}} votes_many": "{{count}} votes",
  "{{count}} votes_one": "{{count}} vote",
  "{{count}} votes_other": "{{count}} votes",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Pi\xE8ce jointe...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} a cr\xE9\xE9 : {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} a vot\xE9 : {{pollOptionText}}"
};

// src/i18n/hi.json
var hi_default = {
  "Add a comment": "\u090F\u0915 \u091F\u093F\u092A\u094D\u092A\u0923\u0940 \u091C\u094B\u0921\u093C\u0947\u0902",
  "Add an option": "\u090F\u0915 \u0935\u093F\u0915\u0932\u094D\u092A \u091C\u094B\u0921\u093C\u0947\u0902",
  "All results loaded": "\u0938\u092D\u0940 \u092A\u0930\u093F\u0923\u093E\u092E \u0932\u094B\u0921 \u0939\u094B \u0917\u090F",
  "Allow access to camera": "\u0915\u0948\u092E\u0930\u093E \u0924\u0915 \u092A\u0939\u0941\u0901\u091A \u0926\u0947\u0902",
  "Allow access to microphone": "\u092E\u093E\u0907\u0915\u094D\u0930\u094B\u092B\u093C\u094B\u0928 \u0924\u0915 \u092A\u0939\u0941\u0901\u091A \u0926\u0947\u0902",
  "Allow comments": "\u091F\u093F\u092A\u094D\u092A\u0923\u093F\u092F\u093E\u0901 \u0915\u0940 \u0905\u0928\u0941\u092E\u0924\u093F \u0926\u0947\u0902",
  "Allow option suggestion": "\u0935\u093F\u0915\u0932\u094D\u092A \u0938\u0941\u091D\u093E\u0935 \u0915\u0940 \u0905\u0928\u0941\u092E\u0924\u093F \u0926\u0947\u0902",
  "An error has occurred during recording": "\u0930\u0947\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u0915\u0947 \u0926\u094C\u0930\u093E\u0928 \u090F\u0915 \u0924\u094D\u0930\u0941\u091F\u093F \u0906 \u0917\u0908 \u0939\u0948",
  "An error has occurred during the recording processing": "\u0930\u0947\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u092A\u094D\u0930\u094B\u0938\u0947\u0938\u093F\u0902\u0917 \u0915\u0947 \u0926\u094C\u0930\u093E\u0928 \u090F\u0915 \u0924\u094D\u0930\u0941\u091F\u093F \u0906 \u0917\u0908 \u0939\u0948",
  Anonymous: "\u0917\u0941\u092E\u0928\u093E\u092E",
  "Anonymous poll": "\u0917\u0941\u092E\u0928\u093E\u092E \u092E\u0924\u0926\u093E\u0928",
  Archive: "\u0906\u0930\u094D\u0915\u093E\u0907\u0935",
  "Ask a question": "\u090F\u0915 \u092A\u094D\u0930\u0936\u094D\u0928 \u092A\u0942\u091B\u0947\u0902",
  "Attach files": "\u092B\u093E\u0907\u0932\u094D\u0938 \u0905\u091F\u0948\u091A \u0915\u0930\u0947",
  Cancel: "\u0930\u0926\u094D\u0926 \u0915\u0930\u0947\u0902",
  "Cannot seek in the recording": "\u0930\u0947\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u092E\u0947\u0902 \u0916\u094B\u091C \u0928\u0939\u0940\u0902 \u0915\u0940 \u091C\u093E \u0938\u0915\u0924\u0940",
  "Channel Missing": "\u091A\u0948\u0928\u0932 \u0909\u092A\u0932\u092C\u094D\u0927 \u0928\u0939\u0940\u0902 \u0939\u0948",
  Close: "\u092C\u0902\u0926 \u0915\u0930\u0947",
  "Close emoji picker": "\u0907\u092E\u094B\u091C\u0940 \u092A\u093F\u0915\u0930 \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
  "Commands matching": "\u092E\u0947\u0932 \u0916\u093E\u0924\u0940 \u0939\u0948",
  "Connection failure, reconnecting now...": "\u0915\u0928\u0947\u0915\u094D\u0936\u0928 \u0935\u093F\u092B\u0932 \u0930\u0939\u093E, \u0905\u092C \u092A\u0941\u0928\u0903 \u0915\u0928\u0947\u0915\u094D\u091F \u0939\u094B \u0930\u0939\u093E \u0939\u0948 ...",
  Create: "\u092C\u0928\u093E\u090F\u0901",
  "Create poll": "\u092E\u0924\u0926\u093E\u0928 \u092C\u0928\u093E\u090F\u0901",
  Delete: "\u0921\u093F\u0932\u0940\u091F",
  Delivered: "\u092A\u0939\u0941\u0902\u091A \u0917\u092F\u093E",
  "Download attachment {{ name }}": "\u0905\u0928\u0941\u0932\u0917\u094D\u0928\u0915 {{ name }} \u0921\u093E\u0909\u0928\u0932\u094B\u0921 \u0915\u0930\u0947\u0902",
  "Drag your files here": "\u0905\u092A\u0928\u0940 \u092B\u093C\u093E\u0907\u0932\u0947\u0902 \u092F\u0939\u093E\u0901 \u0916\u0940\u0902\u091A\u0947\u0902",
  "Drag your files here to add to your post": "\u0905\u092A\u0928\u0940 \u092B\u093C\u093E\u0907\u0932\u0947\u0902 \u092F\u0939\u093E\u0901 \u0916\u0940\u0902\u091A\u0947\u0902 \u0914\u0930 \u0905\u092A\u0928\u0947 \u092A\u094B\u0938\u094D\u091F \u092E\u0947\u0902 \u091C\u094B\u0921\u093C\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F",
  "Edit Message": "\u092E\u0948\u0938\u0947\u091C \u092E\u0947\u0902 \u092C\u0926\u0932\u093E\u0935 \u0915\u0930\u0947",
  "Edit message request failed": "\u0938\u0902\u0926\u0947\u0936 \u0938\u0902\u092A\u093E\u0926\u093F\u0924 \u0915\u0930\u0928\u0947 \u0915\u093E \u0905\u0928\u0941\u0930\u094B\u0927 \u0935\u093F\u092B\u0932 \u0930\u0939\u093E",
  Edited: "\u0938\u0902\u092A\u093E\u0926\u093F\u0924",
  "Emoji matching": "\u0907\u092E\u094B\u091C\u0940 \u092E\u093F\u0932\u093E\u0928",
  "Empty message...": "\u0916\u093E\u0932\u0940 \u0938\u0902\u0926\u0947\u0936 ...",
  End: "\u0938\u092E\u093E\u092A\u094D\u0924",
  "End vote": "\u092E\u0924 \u0938\u092E\u093E\u092A\u094D\u0924 \u0915\u0930\u0947\u0902",
  "Error adding flag": "\u0927\u094D\u0935\u091C \u091C\u094B\u0921\u093C\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error connecting to chat, refresh the page to try again.": "\u091A\u0948\u091F \u0938\u0947 \u0915\u0928\u0947\u0915\u094D\u091F \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F, \u092A\u0947\u091C \u0915\u094B \u0930\u093F\u092B\u094D\u0930\u0947\u0936 \u0915\u0930\u0947\u0902",
  "Error deleting message": "\u0938\u0902\u0926\u0947\u0936 \u0939\u091F\u093E\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error fetching reactions": "\u092A\u094D\u0930\u0924\u093F\u0915\u094D\u0930\u093F\u092F\u093E\u090F\u0901 \u0932\u094B\u0921 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error marking message unread": "\u0938\u0902\u0926\u0947\u0936 \u0915\u094B \u0905\u092A\u0920\u093F\u0924 \u091A\u093F\u0939\u094D\u0928\u093F\u0924 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "\u0938\u0902\u0926\u0947\u0936 \u0915\u094B \u0905\u092A\u0920\u093F\u0924 \u092E\u093E\u0930\u094D\u0915 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F\u0964 \u0938\u092C\u0938\u0947 \u0928\u090F 100 \u091A\u0948\u0928\u0932 \u0938\u0902\u0926\u0947\u0936 \u0938\u0947 \u092A\u0939\u0932\u0947 \u0915\u0947 \u0938\u092D\u0940 \u0905\u092A\u0920\u093F\u0924 \u0938\u0902\u0926\u0947\u0936\u094B\u0902 \u0915\u094B \u0905\u092A\u0920\u093F\u0924 \u092E\u093E\u0930\u094D\u0915 \u0928\u0939\u0940\u0902 \u0915\u093F\u092F\u093E \u091C\u093E \u0938\u0915\u0924\u093E \u0939\u0948\u0964",
  "Error muting a user ...": "\u092F\u0942\u091C\u0930 \u0915\u094B \u092E\u094D\u092F\u0942\u091F \u0915\u0930\u0928\u0947 \u0915\u093E \u092A\u094D\u0930\u092F\u093E\u0938 \u092B\u0947\u0932 \u0939\u0941\u0906",
  "Error pinning message": "\u0938\u0902\u0926\u0947\u0936 \u0915\u094B \u092A\u093F\u0928 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error removing message pin": "\u0938\u0902\u0926\u0947\u0936 \u092A\u093F\u0928 \u0928\u093F\u0915\u093E\u0932\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error reproducing the recording": "\u0930\u093F\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u092A\u0941\u0928: \u0909\u0924\u094D\u092A\u0928\u094D\u0928 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error starting recording": "\u0930\u0947\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u0936\u0941\u0930\u0942 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error unmuting a user ...": "\u092F\u0942\u091C\u0930 \u0915\u094B \u0905\u0928\u092E\u094D\u092F\u0942\u091F \u0915\u0930\u0928\u0947 \u0915\u093E \u092A\u094D\u0930\u092F\u093E\u0938 \u092B\u0947\u0932 \u0939\u0941\u0906",
  "Error uploading attachment": "\u0905\u091F\u0948\u091A\u092E\u0947\u0902\u091F \u0905\u092A\u0932\u094B\u0921 \u0915\u0930\u0924\u0947 \u0938\u092E\u092F \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error uploading file": "\u092B\u093C\u093E\u0907\u0932 \u0905\u092A\u0932\u094B\u0921 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error uploading image": "\u091B\u0935\u093F \u0905\u092A\u0932\u094B\u0921 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0924\u094D\u0930\u0941\u091F\u093F",
  "Error \xB7 Unsent": "\u092B\u0947\u0932",
  "Error: {{ errorMessage }}": "\u092B\u0947\u0932: {{ errorMessage }}",
  "Failed to jump to the first unread message": "\u092A\u0939\u0932\u0947 \u0905\u092A\u0920\u093F\u0924 \u0938\u0902\u0926\u0947\u0936 \u092A\u0930 \u091C\u093E\u0928\u0947 \u092E\u0947\u0902 \u0935\u093F\u092B\u0932",
  "Failed to mark channel as read": "\u091A\u0948\u0928\u0932 \u0915\u094B \u092A\u0922\u093C\u093E \u0939\u0941\u0906 \u091A\u093F\u0939\u094D\u0928\u093F\u0924 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0935\u093F\u092B\u0932\u0964",
  "Failed to play the recording": "\u0930\u0947\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u092A\u094D\u0932\u0947 \u0915\u0930\u0928\u0947 \u092E\u0947\u0902 \u0935\u093F\u092B\u0932",
  File: "\u092B\u093C\u093E\u0907\u0932",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "\u092B\u093C\u093E\u0907\u0932 \u092C\u0939\u0941\u0924 \u092C\u0921\u093C\u0940 \u0939\u0948: {{ size }}, \u0905\u0927\u093F\u0915\u0924\u092E \u0905\u092A\u0932\u094B\u0921 \u0938\u093E\u0907\u091C\u093C {{ limit }} \u0939\u0948",
  Flag: "\u092B\u094D\u0932\u0948\u0917 \u0915\u0930\u0947",
  "Generating...": "\u092C\u0928\u093E \u0930\u0939\u093E \u0939\u0948...",
  "Latest Messages": "\u0928\u0935\u0940\u0928\u0924\u092E \u0938\u0902\u0926\u0947\u0936",
  "Load more": "\u0914\u0930 \u0932\u094B\u0921 \u0915\u0930\u0947\u0902",
  "Mark as unread": "\u0905\u092A\u0920\u093F\u0924 \u091A\u093F\u0939\u094D\u0928\u093F\u0924 \u0915\u0930\u0947\u0902",
  "Maximum number of votes (from 2 to 10)": "\u0905\u0927\u093F\u0915\u0924\u092E \u0935\u094B\u091F\u094B\u0902 \u0915\u0940 \u0938\u0902\u0916\u094D\u092F\u093E (2 \u0938\u0947 10)",
  Menu: "\u092E\u0947\u0928\u094D\u092F\u0942",
  "Message Failed \xB7 Click to try again": "\u092E\u0948\u0938\u0947\u091C \u092B\u093C\u0948\u0932 - \u092A\u0941\u0928\u0903 \u0915\u094B\u0936\u093F\u0936 \u0915\u0930\u0947\u0902",
  "Message Failed \xB7 Unauthorized": "\u092E\u0948\u0938\u0947\u091C \u092B\u093C\u0948\u0932 - \u0905\u0928\u0927\u093F\u0915\u0943\u0924",
  "Message deleted": "\u092E\u0948\u0938\u0947\u091C \u0939\u091F\u093E \u0926\u093F\u092F\u093E \u0917\u092F\u093E",
  "Message has been successfully flagged": "\u092E\u0948\u0938\u0947\u091C \u0915\u094B \u092B\u094D\u0932\u0948\u0917 \u0915\u0930 \u0926\u093F\u092F\u093E \u0917\u092F\u093E \u0939\u0948",
  "Message pinned": "\u0938\u0902\u0926\u0947\u0936 \u092A\u093F\u0928 \u0915\u093F\u092F\u093E \u0917\u092F\u093E",
  "Message was blocked by moderation policies": "\u0938\u0902\u0926\u0947\u0936 \u0915\u094B \u092E\u0949\u0921\u0930\u0947\u0936\u0928 \u0928\u0940\u0924\u093F\u092F\u094B\u0902 \u0926\u094D\u0935\u093E\u0930\u093E \u092C\u094D\u0932\u0949\u0915 \u0915\u0930 \u0926\u093F\u092F\u093E \u0917\u092F\u093E \u0939\u0948",
  "Messages have been marked unread.": "\u0938\u0902\u0926\u0947\u0936\u094B\u0902 \u0915\u094B \u0905\u092A\u0920\u093F\u0924 \u091A\u093F\u0939\u094D\u0928\u093F\u0924 \u0915\u093F\u092F\u093E \u0917\u092F\u093E \u0939\u0948\u0964",
  "Missing permissions to upload the attachment": "\u0905\u091F\u0948\u091A\u092E\u0947\u0902\u091F \u0905\u092A\u0932\u094B\u0921 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F \u0905\u0928\u0941\u092E\u0924\u093F\u092F\u093E\u0902 \u0917\u093E\u092F\u092C",
  "Multiple answers": "\u0915\u0908 \u0909\u0924\u094D\u0924\u0930",
  Mute: "\u092E\u094D\u092F\u0942\u091F \u0915\u0930\u0947",
  New: "\u0928\u090F",
  "New Messages!": "\u0928\u090F \u092E\u0948\u0938\u0947\u091C!",
  "No chats here yet\u2026": "\u092F\u0939\u093E\u0902 \u0905\u092D\u0940 \u0924\u0915 \u0915\u094B\u0908 \u091A\u0948\u091F \u0928\u0939\u0940\u0902...",
  "No results found": "\u0915\u094B\u0908 \u092A\u0930\u093F\u0923\u093E\u092E \u0928\u0939\u0940\u0902 \u092E\u093F\u0932\u093E",
  "Nobody will be able to vote in this poll anymore.": "\u0905\u092C \u0915\u094B\u0908 \u092D\u0940 \u0907\u0938 \u092E\u0924\u0926\u093E\u0928 \u092E\u0947\u0902 \u092E\u0924\u0926\u093E\u0928 \u0928\u0939\u0940\u0902 \u0915\u0930 \u0938\u0915\u0947\u0917\u093E\u0964",
  "Nothing yet...": "\u0915\u094B\u0908 \u092E\u0948\u0938\u0947\u091C \u0928\u0939\u0940\u0902 \u0939\u0948",
  Ok: "\u0920\u0940\u0915 \u0939\u0948",
  "Open emoji picker": "\u0907\u092E\u094B\u091C\u0940 \u092A\u093F\u0915\u0930 \u0916\u094B\u0932\u093F\u092F\u0947",
  "Option already exists": "\u0935\u093F\u0915\u0932\u094D\u092A \u092A\u0939\u0932\u0947 \u0938\u0947 \u092E\u094C\u091C\u0942\u0926 \u0939\u0948",
  Options: "\u0935\u093F\u0915\u0932\u094D\u092A",
  "People matching": "\u092E\u0947\u0932 \u0916\u093E\u0924\u0947 \u0932\u094B\u0917",
  Pin: "\u092A\u093F\u0928",
  "Pinned by": "\u0926\u094D\u0935\u093E\u0930\u093E \u092A\u093F\u0928 \u0915\u093F\u092F\u093E \u0917\u092F\u093E",
  Poll: "\u092E\u0924\u0926\u093E\u0928",
  "Poll comments": "\u092E\u0924\u0926\u093E\u0928 \u091F\u093F\u092A\u094D\u092A\u0923\u093F\u092F\u093E\u0901",
  "Poll options": "\u092E\u0924\u0926\u093E\u0928 \u0935\u093F\u0915\u0932\u094D\u092A",
  "Poll results": "\u092E\u0924\u0926\u093E\u0928 \u092A\u0930\u093F\u0923\u093E\u092E",
  Question: "\u092A\u094D\u0930\u0936\u094D\u0928",
  Quote: "\u0909\u0926\u094D\u0927\u0930\u0923",
  "Recording format is not supported and cannot be reproduced": "\u0930\u0947\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u092B\u093C\u0949\u0930\u094D\u092E\u0947\u091F \u0938\u092E\u0930\u094D\u0925\u093F\u0924 \u0928\u0939\u0940\u0902 \u0939\u0948 \u0914\u0930 \u092A\u0941\u0928\u0903 \u0909\u0924\u094D\u092A\u0928\u094D\u0928 \u0928\u0939\u0940\u0902 \u0915\u093F\u092F\u093E \u091C\u093E \u0938\u0915\u0924\u093E",
  Reply: "\u091C\u0935\u093E\u092C \u0926\u0947 \u0926\u094B",
  "Reply to Message": "\u0938\u0902\u0926\u0947\u0936 \u0915\u093E \u091C\u0935\u093E\u092C \u0926\u0947\u0902",
  Search: "\u0916\u094B\u091C",
  "Searching...": "\u0916\u094B\u091C \u0915\u0930...",
  "See all options ({{count}})_one": "\u0938\u092D\u0940 \u0935\u093F\u0915\u0932\u094D\u092A \u0926\u0947\u0916\u0947\u0902 ({{count}})",
  "See all options ({{count}})_other": "\u0938\u092D\u0940 \u0935\u093F\u0915\u0932\u094D\u092A \u0926\u0947\u0916\u0947\u0902 ({{count}})",
  "Select one": "\u090F\u0915 \u091A\u0941\u0928\u0947\u0902",
  "Select one or more": "\u090F\u0915 \u092F\u093E \u0905\u0927\u093F\u0915 \u091A\u0941\u0928\u0947\u0902",
  "Select up to {{count}}_one": "\u0905\u0927\u093F\u0915\u0924\u092E {{count}} \u0924\u0915 \u091A\u0941\u0928\u0947\u0902",
  "Select up to {{count}}_other": "\u0905\u0927\u093F\u0915\u0924\u092E {{count}} \u0924\u0915 \u091A\u0941\u0928\u0947\u0902",
  Send: "\u092D\u0947\u091C\u0947",
  "Send Anyway": "\u0935\u0948\u0938\u0947 \u092D\u0940 \u092D\u0947\u091C\u0947\u0902",
  "Send message request failed": "\u0938\u0902\u0926\u0947\u0936 \u092D\u0947\u091C\u0928\u0947 \u0915\u093E \u0905\u0928\u0941\u0930\u094B\u0927 \u0935\u093F\u092B\u0932 \u0930\u0939\u093E",
  "Sending...": "\u092D\u0947\u091C\u093E \u091C\u093E \u0930\u0939\u093E \u0939\u0948",
  "Show all": "\u0938\u092D\u0940 \u0926\u093F\u0916\u093E\u090F\u0901",
  Shuffle: "\u092E\u093F\u0936\u094D\u0930\u093F\u0924 \u0915\u0930\u0947\u0902",
  "Slow Mode ON": "\u0938\u094D\u0932\u094B \u092E\u094B\u0921 \u0911\u0928",
  "Some of the files will not be accepted": "\u0915\u0941\u091B \u092B\u093C\u093E\u0907\u0932\u0947\u0902 \u0938\u094D\u0935\u0940\u0915\u093E\u0930 \u0928\u0939\u0940\u0902 \u0915\u0940 \u091C\u093E\u090F\u0902\u0917\u0940",
  "Start typing to search": "\u0916\u094B\u091C\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F \u091F\u093E\u0907\u092A \u0915\u0930\u0928\u093E \u0936\u0941\u0930\u0942 \u0915\u0930\u0947\u0902",
  Submit: "\u091C\u092E\u093E \u0915\u0930\u0947\u0902",
  "Suggest an option": "\u090F\u0915 \u0935\u093F\u0915\u0932\u094D\u092A \u0938\u0941\u091D\u093E\u0935 \u0926\u0947\u0902",
  "Thinking...": "\u0938\u094B\u091A \u0930\u0939\u093E \u0939\u0948...",
  "This message did not meet our content guidelines": "\u092F\u0939 \u0938\u0902\u0926\u0947\u0936 \u0939\u092E\u093E\u0930\u0947 \u0938\u093E\u092E\u0917\u094D\u0930\u0940 \u0926\u093F\u0936\u093E\u0928\u093F\u0930\u094D\u0926\u0947\u0936\u094B\u0902 \u0915\u0947 \u0905\u0928\u0941\u0930\u0942\u092A \u0928\u0939\u0940\u0902 \u0925\u093E",
  "This message was deleted...": "\u092E\u0948\u0938\u0947\u091C \u0939\u091F\u093E \u0926\u093F\u092F\u093E \u0917\u092F\u093E",
  Thread: "\u0930\u093F\u092A\u094D\u0932\u093E\u0908 \u0925\u094D\u0930\u0947\u0921",
  "To start recording, allow the camera access in your browser": "\u0930\u093F\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u0936\u0941\u0930\u0942 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F, \u0905\u092A\u0928\u0947 \u092C\u094D\u0930\u093E\u0909\u091C\u093C\u0930 \u092E\u0947\u0902 \u0915\u0948\u092E\u0930\u093E \u0924\u0915 \u092A\u0939\u0941\u0901\u091A \u0926\u0947\u0902",
  "To start recording, allow the microphone access in your browser": "\u0930\u093F\u0915\u0949\u0930\u094D\u0921\u093F\u0902\u0917 \u0936\u0941\u0930\u0942 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093F\u090F, \u0905\u092A\u0928\u0947 \u092C\u094D\u0930\u093E\u0909\u091C\u093C\u0930 \u092E\u0947\u0902 \u092E\u093E\u0907\u0915\u094D\u0930\u094B\u092B\u093C\u094B\u0928 \u0924\u0915 \u092A\u0939\u0941\u0901\u091A \u0926\u0947\u0902",
  "Type a number from 2 to 10": "2 \u0938\u0947 10 \u0924\u0915 \u0915\u093E \u090F\u0915 \u0928\u0902\u092C\u0930 \u091F\u093E\u0907\u092A \u0915\u0930\u0947\u0902",
  "Type your message": "\u0905\u092A\u0928\u093E \u092E\u0948\u0938\u0947\u091C \u0932\u093F\u0916\u0947",
  Unarchive: "\u0905\u0928\u0906\u0930\u094D\u0915\u093E\u0907\u0935",
  Unmute: "\u0905\u0928\u092E\u094D\u092F\u0942\u091F",
  Unpin: "\u0905\u0928\u092A\u093F\u0928",
  "Unread messages": "\u0905\u092A\u0920\u093F\u0924 \u0938\u0902\u0926\u0947\u0936",
  "Unsupported attachment": "\u0905\u0938\u092E\u0930\u094D\u0925\u093F\u0924 \u0905\u091F\u0948\u091A\u092E\u0947\u0902\u091F",
  "Update your comment": "\u0905\u092A\u0928\u0947 \u091F\u093F\u092A\u094D\u092A\u0923\u0940 \u0915\u094B \u0905\u092A\u0921\u0947\u091F \u0915\u0930\u0947\u0902",
  'Upload type: "{{ type }}" is not allowed': '\u0905\u092A\u0932\u094B\u0921 \u092A\u094D\u0930\u0915\u093E\u0930: "{{ type }}" \u0915\u0940 \u0905\u0928\u0941\u092E\u0924\u093F \u0928\u0939\u0940\u0902 \u0939\u0948',
  "User uploaded content": "\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E \u0905\u092A\u0932\u094B\u0921 \u0915\u0940 \u0917\u0908 \u0938\u093E\u092E\u0917\u094D\u0930\u0940",
  "View results": "\u092A\u0930\u093F\u0923\u093E\u092E \u0926\u0947\u0916\u0947\u0902",
  "View {{count}} comments_one": "\u0926\u0947\u0916\u0947\u0902 {{count}} \u091F\u093F\u092A\u094D\u092A\u0923\u0940",
  "View {{count}} comments_other": "\u0926\u0947\u0916\u0947\u0902 {{count}} \u091F\u093F\u092A\u094D\u092A\u0923\u093F\u092F\u093E\u0901",
  "Voice message": "\u0906\u0935\u093E\u091C \u0938\u0902\u0926\u0947\u0936",
  "Vote ended": "\u092E\u0924\u0926\u093E\u0928 \u0938\u092E\u093E\u092A\u094D\u0924",
  "Wait until all attachments have uploaded": "\u0938\u092D\u0940 \u0905\u091F\u0948\u091A\u092E\u0947\u0902\u091F \u0905\u092A\u0932\u094B\u0921 \u0939\u094B\u0928\u0947 \u0924\u0915 \u092A\u094D\u0930\u0924\u0940\u0915\u094D\u0937\u093E \u0915\u0930\u0947\u0902",
  You: "\u0906\u092A",
  "You have no channels currently": "\u0906\u092A\u0915\u0947 \u092A\u093E\u0938 \u0915\u094B\u0908 \u091A\u0948\u0928\u0932 \u0928\u0939\u0940\u0902 \u0939\u0948",
  "You've reached the maximum number of files": "\u0906\u092A \u0905\u0927\u093F\u0915\u0924\u092E \u092B\u093C\u093E\u0907\u0932\u094B\u0902 \u0924\u0915 \u092A\u0939\u0941\u0901\u091A \u0917\u090F \u0939\u0948\u0902",
  "aria/Attachment": "\u0905\u0928\u0941\u0932\u0917\u094D\u0928\u0915",
  "aria/Cancel Reply": "\u0909\u0924\u094D\u0924\u0930 \u0930\u0926\u094D\u0926 \u0915\u0930\u0947\u0902",
  "aria/Cancel upload": "\u0905\u092A\u0932\u094B\u0921 \u0930\u0926\u094D\u0926 \u0915\u0930\u0947\u0902",
  "aria/Channel list": "\u091A\u0948\u0928\u0932 \u0938\u0942\u091A\u0940",
  "aria/Channel search results": "\u091A\u0948\u0928\u0932 \u0916\u094B\u091C \u092A\u0930\u093F\u0923\u093E\u092E",
  "aria/Close thread": "\u0925\u094D\u0930\u0947\u0921 \u092C\u0902\u0926 \u0915\u0930\u0947\u0902",
  "aria/Download attachment": "\u0905\u0928\u0941\u0932\u0917\u094D\u0928\u0915 \u0921\u093E\u0909\u0928\u0932\u094B\u0921 \u0915\u0930\u0947\u0902",
  "aria/Emoji picker": "\u0907\u092E\u094B\u091C\u0940 \u091A\u0941\u0928\u0928\u0947 \u0935\u093E\u0932\u093E",
  "aria/File input": "\u092B\u093C\u093E\u0907\u0932 \u0907\u0928\u092A\u0941\u091F",
  "aria/File upload": "\u092B\u093C\u093E\u0907\u0932 \u0905\u092A\u0932\u094B\u0921",
  "aria/Image input": "\u091B\u0935\u093F \u0907\u0928\u092A\u0941\u091F",
  "aria/Load More Channels": "\u0914\u0930 \u091A\u0948\u0928\u0932 \u0932\u094B\u0921 \u0915\u0930\u0947\u0902",
  "aria/Menu": "\u092E\u0947\u0928\u094D\u092F\u0942",
  "aria/Message Options": "\u0938\u0902\u0926\u0947\u0936 \u0935\u093F\u0915\u0932\u094D\u092A",
  "aria/Open Attachment Selector": "\u0905\u091F\u0948\u091A\u092E\u0947\u0902\u091F \u091A\u092F\u0928\u0915\u0930\u094D\u0924\u093E \u0916\u094B\u0932\u0947\u0902",
  "aria/Open Message Actions Menu": "\u0938\u0902\u0926\u0947\u0936 \u0915\u094D\u0930\u093F\u092F\u093E \u092E\u0947\u0928\u094D\u092F\u0942 \u0916\u094B\u0932\u0947\u0902",
  "aria/Open Reaction Selector": "\u092A\u094D\u0930\u0924\u093F\u0915\u094D\u0930\u093F\u092F\u093E \u091A\u092F\u0928\u0915\u0930\u094D\u0924\u093E \u0916\u094B\u0932\u0947\u0902",
  "aria/Open Thread": "\u0925\u094D\u0930\u0947\u0921 \u0916\u094B\u0932\u0947\u0902",
  "aria/Reaction list": "\u092A\u094D\u0930\u0924\u093F\u0915\u094D\u0930\u093F\u092F\u093E \u0938\u0942\u091A\u0940",
  "aria/Remove attachment": "\u0938\u0902\u0932\u0917\u094D\u0928\u0915 \u0939\u091F\u093E\u090F\u0902",
  "aria/Retry upload": "\u0905\u092A\u0932\u094B\u0921 \u092A\u0941\u0928\u0903 \u092A\u094D\u0930\u092F\u093E\u0938 \u0915\u0930\u0947\u0902",
  "aria/Search results": "\u0916\u094B\u091C \u092A\u0930\u093F\u0923\u093E\u092E",
  "aria/Search results header filter button": "\u0916\u094B\u091C \u092A\u0930\u093F\u0923\u093E\u092E \u0939\u0947\u0921\u0930 \u092B\u093C\u093F\u0932\u094D\u091F\u0930 \u092C\u091F\u0928",
  "aria/Send": "\u092D\u0947\u091C\u0947\u0902",
  "aria/Stop AI Generation": "\u090F\u0906\u0908 \u091C\u0928\u0930\u0947\u0936\u0928 \u0930\u094B\u0915\u0947\u0902",
  "ban-command-args": "[@\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u0928\u093E\u092E] [\u092A\u093E\u0920]",
  "ban-command-description": "\u090F\u0915 \u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E \u0915\u094B \u092A\u094D\u0930\u0924\u093F\u0937\u0947\u0927\u093F\u0924 \u0915\u0930\u0947\u0902",
  "giphy-command-args": "[\u092A\u093E\u0920]",
  "giphy-command-description": "\u091A\u0948\u0928\u0932 \u092A\u0930 \u090F\u0915 \u0915\u094D\u0930\u0949\u092B\u093F\u0932 \u091C\u0940\u0906\u0907\u090F\u092B \u092A\u094B\u0938\u094D\u091F \u0915\u0930\u0947\u0902",
  live: "\u0932\u093E\u0907\u0935",
  "mute-command-args": "[@\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u0928\u093E\u092E]",
  "mute-command-description": "\u090F\u0915 \u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E \u0915\u094B \u092E\u094D\u092F\u0942\u091F \u0915\u0930\u0947\u0902",
  replyCount_one: "1 \u0930\u093F\u092A\u094D\u0932\u093E\u0908",
  replyCount_other: "{{ count }} \u0930\u093F\u092A\u094D\u0932\u093E\u0908",
  "search-results-header-filter-source-button-label--channels": "\u091A\u0948\u0928\u0932\u094D\u0938",
  "search-results-header-filter-source-button-label--messages": "\u0938\u0902\u0926\u0947\u0936",
  "search-results-header-filter-source-button-label--users": "\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E",
  searchResultsCount_one: "1 \u092A\u0930\u093F\u0923\u093E\u092E",
  searchResultsCount_other: "{{ count }} \u092A\u0930\u093F\u0923\u093E\u092E",
  "this content could not be displayed": "\u092F\u0939 \u0915\u0949\u0928\u094D\u091F\u0947\u0902\u091F \u0932\u094B\u0921 \u0928\u0939\u0940\u0902 \u0939\u094B \u092A\u093E\u092F\u093E",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u0928\u093E\u092E]",
  "unban-command-description": "\u090F\u0915 \u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E \u0915\u094B \u092A\u094D\u0930\u0924\u093F\u0937\u0947\u0927 \u0938\u0947 \u092E\u0941\u0915\u094D\u0924 \u0915\u0930\u0947\u0902",
  "unmute-command-args": "[@\u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u0928\u093E\u092E]",
  "unmute-command-description": "\u090F\u0915 \u0909\u092A\u092F\u094B\u0917\u0915\u0930\u094D\u0924\u093E \u0915\u094B \u0905\u0928\u092E\u094D\u092F\u0942\u091F \u0915\u0930\u0947\u0902",
  unreadMessagesSeparatorText_one: "1 \u0905\u092A\u0920\u093F\u0924 \u0938\u0902\u0926\u0947\u0936",
  unreadMessagesSeparatorText_other: "{{count}} \u0905\u092A\u0920\u093F\u0924 \u0938\u0902\u0926\u0947\u0936",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} \u0914\u0930 {{ moreCount }} \u0914\u0930",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} \u0914\u0930 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} \u0914\u0930 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} \u0914\u0930",
  "{{ memberCount }} members": "{{ memberCount }} \u092E\u0947\u0902\u092C\u0930\u094D\u0938",
  "{{ user }} has been muted": "{{ user }} \u0915\u094B \u092E\u094D\u092F\u0942\u091F \u0915\u0930 \u0926\u093F\u092F\u093E \u0917\u092F\u093E \u0939\u0948",
  "{{ user }} has been unmuted": "{{ user }} \u0915\u094B \u0905\u0928\u092E\u094D\u092F\u0942\u091F \u0915\u0930 \u0926\u093F\u092F\u093E \u0917\u092F\u093E \u0939\u0948",
  "{{ user }} is typing...": "{{ user }} \u091F\u093E\u0907\u092A \u0915\u0930 \u0930\u0939\u093E \u0939\u0948...",
  "{{ users }} and more are typing...": "{{ users }} \u0914\u0930 \u0905\u0927\u093F\u0915 \u091F\u093E\u0907\u092A \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} \u0914\u0930 {{ user }} \u091F\u093E\u0907\u092A \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902...",
  "{{ watcherCount }} online": "{{ watcherCount }} \u0911\u0928\u0932\u093E\u0907\u0928",
  "{{count}} unread_one": "{{count}} \u0905\u092A\u0920\u093F\u0924",
  "{{count}} unread_other": "{{count}} \u0905\u092A\u0920\u093F\u0924",
  "{{count}} votes_one": "{{count}} \u0935\u094B\u091F",
  "{{count}} votes_other": "{{count}} \u0935\u094B\u091F",
  "\u{1F3D9} Attachment...": "\u{1F3D9} \u0905\u091F\u0948\u091A\u092E\u0947\u0902\u091F",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} \u0928\u0947 \u092C\u0928\u093E\u092F\u093E: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} \u0928\u0947 \u0935\u094B\u091F \u0926\u093F\u092F\u093E: {{pollOptionText}}"
};

// src/i18n/it.json
var it_default = {
  "Add a comment": "Aggiungi un commento",
  "Add an option": "Aggiungi un'opzione",
  "All results loaded": "Tutti i risultati caricati",
  "Allow access to camera": "Consenti l'accesso alla fotocamera",
  "Allow access to microphone": "Consenti l'accesso al microfono",
  "Allow comments": "Consenti i commenti",
  "Allow option suggestion": "Consenti il suggerimento di opzioni",
  "An error has occurred during recording": "Si \xE8 verificato un errore durante la registrazione",
  "An error has occurred during the recording processing": "Si \xE8 verificato un errore durante l'elaborazione della registrazione",
  Anonymous: "Anonimo",
  "Anonymous poll": "Sondaggio anonimo",
  Archive: "Archivia",
  "Ask a question": "Fai una domanda",
  "Attach files": "Allega file",
  Cancel: "Annulla",
  "Cannot seek in the recording": "Impossibile cercare nella registrazione",
  "Channel Missing": "Il canale non esiste",
  Close: "Chiudi",
  "Close emoji picker": "Chiudi il selettore di emoji",
  "Commands matching": "Comandi corrispondenti",
  "Connection failure, reconnecting now...": "Errore di connessione, riconnessione in corso...",
  Create: "Crea",
  "Create poll": "Crea sondaggio",
  Delete: "Elimina",
  Delivered: "Consegnato",
  "Download attachment {{ name }}": "Scarica l'allegato {{ name }}",
  "Drag your files here": "Trascina i tuoi file qui",
  "Drag your files here to add to your post": "Trascina i tuoi file qui per aggiungerli al tuo post",
  "Edit Message": "Modifica messaggio",
  "Edit message request failed": "Richiesta di modifica del messaggio non riuscita",
  Edited: "Modificato",
  "Emoji matching": "Abbinamento emoji",
  "Empty message...": "Messaggio vuoto...",
  End: "Fine",
  "End vote": "Termina il voto",
  "Error adding flag": "Errore durante l'aggiunta del flag",
  "Error connecting to chat, refresh the page to try again.": "Errore di connessione alla chat, aggiorna la pagina per riprovare.",
  "Error deleting message": "Errore durante l'eliminazione del messaggio",
  "Error fetching reactions": "Errore nel caricamento delle reazioni",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Errore durante la marcatura del messaggio come non letto. Impossibile marcare messaggi non letti pi\xF9 vecchi dei pi\xF9 recenti 100 messaggi del canale.",
  "Error muting a user ...": "Errore nel silenziare un utente ...",
  "Error pinning message": "Errore durante il blocco del messaggio",
  "Error removing message pin": "Errore durante la rimozione del PIN del messaggio",
  "Error reproducing the recording": "Errore durante la riproduzione della registrazione",
  "Error starting recording": "Errore durante l'avvio della registrazione",
  "Error unmuting a user ...": "Errore nel riattivare un utente ...",
  "Error uploading attachment": "Errore durante il caricamento dell'allegato",
  "Error uploading file": "Errore durante il caricamento del file",
  "Error uploading image": "Errore durante il caricamento dell'immagine",
  "Error \xB7 Unsent": "Errore \xB7 Non inviato",
  "Error: {{ errorMessage }}": "Errore: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Impossibile passare al primo messaggio non letto",
  "Failed to mark channel as read": "Impossibile contrassegnare il canale come letto",
  "Failed to play the recording": "Impossibile riprodurre la registrazione",
  File: "File",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Il file \xE8 troppo grande: {{ size }}, la dimensione massima di caricamento \xE8 {{ limit }}",
  Flag: "Segnala",
  "Generating...": "Generando...",
  "Latest Messages": "Ultimi messaggi",
  "Load more": "Carica di pi\xF9",
  "Mark as unread": "Contrassegna come non letto",
  "Maximum number of votes (from 2 to 10)": "Numero massimo di voti (da 2 a 10)",
  Menu: "Men\xF9",
  "Message Failed \xB7 Click to try again": "Invio messaggio fallito \xB7 Clicca per riprovare",
  "Message Failed \xB7 Unauthorized": "Invio messaggio fallito \xB7 Non autorizzato",
  "Message deleted": "Messaggio cancellato",
  "Message has been successfully flagged": "Il messaggio \xE8 stato segnalato con successo",
  "Message pinned": "Messaggio bloccato",
  "Message was blocked by moderation policies": "Il messaggio \xE8 stato bloccato dalle politiche di moderazione",
  "Messages have been marked unread.": "I messaggi sono stati contrassegnati come non letti.",
  "Missing permissions to upload the attachment": "Autorizzazioni mancanti per caricare l'allegato",
  "Multiple answers": "Risposte multiple",
  Mute: "Silenzia",
  New: "Nuovo",
  "New Messages!": "Nuovi messaggi!",
  "No chats here yet\u2026": "Non ci sono ancora messaggi qui...",
  "No results found": "Nessun risultato trovato",
  "Nobody will be able to vote in this poll anymore.": "Nessuno potr\xE0 pi\xF9 votare in questo sondaggio.",
  "Nothing yet...": "Ancora niente...",
  Ok: "Ok",
  "Open emoji picker": "Apri il selettore di emoji",
  "Option already exists": "L'opzione esiste gi\xE0",
  Options: "Opzioni",
  "People matching": "Persone che corrispondono",
  Pin: "Pin",
  "Pinned by": "Appuntato da",
  Poll: "Sondaggio",
  "Poll comments": "Commenti del sondaggio",
  "Poll options": "Opzioni del sondaggio",
  "Poll results": "Risultati del sondaggio",
  Question: "Domanda",
  Quote: "Citazione",
  "Recording format is not supported and cannot be reproduced": "Il formato di registrazione non \xE8 supportato e non pu\xF2 essere riprodotto",
  Reply: "Rispondi",
  "Reply to Message": "Rispondi al messaggio",
  Search: "Cerca",
  "Searching...": "Ricerca in corso...",
  "See all options ({{count}})_many": "Vedi tutte le opzioni ({{count}})",
  "See all options ({{count}})_one": "Vedi tutte le opzioni ({{count}})",
  "See all options ({{count}})_other": "Vedi tutte le opzioni ({{count}})",
  "Select one": "Seleziona uno",
  "Select one or more": "Seleziona uno o pi\xF9",
  "Select up to {{count}}_many": "Seleziona fino a {{count}}",
  "Select up to {{count}}_one": "Seleziona fino a {{count}}",
  "Select up to {{count}}_other": "Seleziona fino a {{count}}",
  Send: "Invia",
  "Send Anyway": "Invia comunque",
  "Send message request failed": "Richiesta di invio messaggio non riuscita",
  "Sending...": "Invio in corso...",
  "Show all": "Mostra tutto",
  Shuffle: "Mescolare",
  "Slow Mode ON": "Modalit\xE0 lenta attivata",
  "Some of the files will not be accepted": "Alcuni dei file non saranno accettati",
  "Start typing to search": "Inizia a digitare per cercare",
  Submit: "Invia",
  "Suggest an option": "Suggerisci un'opzione",
  "Thinking...": "Pensando...",
  "This message did not meet our content guidelines": "Questo messaggio non soddisfa le nostre linee guida sui contenuti",
  "This message was deleted...": "Questo messaggio \xE8 stato cancellato...",
  Thread: "Discussione",
  "To start recording, allow the camera access in your browser": "Per iniziare a registrare, consenti l'accesso alla fotocamera nel tuo browser",
  "To start recording, allow the microphone access in your browser": "Per iniziare a registrare, consenti l'accesso al microfono nel tuo browser",
  "Type a number from 2 to 10": "Digita un numero da 2 a 10",
  "Type your message": "Scrivi il tuo messaggio",
  Unarchive: "Ripristina",
  Unmute: "Riattiva il notifiche",
  Unpin: "Sblocca",
  "Unread messages": "Messaggi non letti",
  "Unsupported attachment": "Allegato non supportato",
  "Update your comment": "Aggiorna il tuo commento",
  'Upload type: "{{ type }}" is not allowed': 'Tipo di caricamento: "{{ type }}" non \xE8 consentito',
  "User uploaded content": "Contenuto caricato dall'utente",
  "View results": "Vedi risultati",
  "View {{count}} comments_many": "Visualizza {{count}} commenti",
  "View {{count}} comments_one": "Visualizza {{count}} commento",
  "View {{count}} comments_other": "Visualizza {{count}} commenti",
  "Voice message": "Messaggio vocale",
  "Vote ended": "Voto terminato",
  "Wait until all attachments have uploaded": "Attendi il caricamento di tutti gli allegati",
  You: "Tu",
  "You have no channels currently": "Al momento non sono presenti canali",
  "You've reached the maximum number of files": "Hai raggiunto il numero massimo di file",
  "aria/Attachment": "Allegato",
  "aria/Cancel Reply": "Annulla risposta",
  "aria/Cancel upload": "Annulla caricamento",
  "aria/Channel list": "Elenco dei canali",
  "aria/Channel search results": "Risultati della ricerca dei canali",
  "aria/Close thread": "Chiudi discussione",
  "aria/Download attachment": "Scarica l'allegato",
  "aria/Emoji picker": "Selettore di emoji",
  "aria/File input": "Input di file",
  "aria/File upload": "Caricamento di file",
  "aria/Image input": "Input di immagine",
  "aria/Load More Channels": "Carica altri canali",
  "aria/Menu": "Menu",
  "aria/Message Options": "Opzioni di messaggio",
  "aria/Open Attachment Selector": "Apri selettore allegati",
  "aria/Open Message Actions Menu": "Apri il menu delle azioni di messaggio",
  "aria/Open Reaction Selector": "Apri il selettore di reazione",
  "aria/Open Thread": "Apri discussione",
  "aria/Reaction list": "Elenco delle reazioni",
  "aria/Remove attachment": "Rimuovi allegato",
  "aria/Retry upload": "Riprova caricamento",
  "aria/Search results": "Risultati della ricerca",
  "aria/Search results header filter button": "Pulsante filtro intestazione risultati ricerca",
  "aria/Send": "Invia",
  "aria/Stop AI Generation": "Interrompi generazione IA",
  "ban-command-args": "[@nomeutente] [testo]",
  "ban-command-description": "Vietare un utente",
  "giphy-command-args": "[testo]",
  "giphy-command-description": "Pubblica un gif casuale sul canale",
  live: "live",
  "mute-command-args": "[@nomeutente]",
  "mute-command-description": "Silenzia un utente",
  replyCount_many: "{{ count }} risposte",
  replyCount_one: "Una risposta",
  replyCount_other: "{{ count }} risposte",
  "search-results-header-filter-source-button-label--channels": "canali",
  "search-results-header-filter-source-button-label--messages": "messaggi",
  "search-results-header-filter-source-button-label--users": "utenti",
  searchResultsCount_many: "{{ count }} risultati",
  searchResultsCount_one: "1 risultato",
  searchResultsCount_other: "{{ count }} risultati",
  "this content could not be displayed": "questo contenuto non pu\xF2 essere mostrato",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomeutente]",
  "unban-command-description": "Togliere il divieto a un utente",
  "unmute-command-args": "[@nomeutente]",
  "unmute-command-description": "Togliere il silenzio a un utente",
  unreadMessagesSeparatorText_many: "{{count}} messaggi non letti",
  unreadMessagesSeparatorText_one: "1 messaggio non letto",
  unreadMessagesSeparatorText_other: "{{count}} messaggi non letti",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e altri {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "+ {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} membri",
  "{{ user }} has been muted": "{{ user }} \xE8 stato silenziato",
  "{{ user }} has been unmuted": "Notifiche riattivate per {{ user }}",
  "{{ user }} is typing...": "{{ user }} sta digitando...",
  "{{ users }} and more are typing...": "{{ users }} e altri stanno digitando...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} e {{ user }} stanno digitando...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} non letti",
  "{{count}} unread_one": "{{count}} non letto",
  "{{count}} unread_other": "{{count}} non letti",
  "{{count}} votes_many": "{{count}} voti",
  "{{count}} votes_one": "{{count}} voto",
  "{{count}} votes_other": "{{count}} voti",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Allegato...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} ha creato: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} ha votato: {{pollOptionText}}"
};

// src/i18n/ja.json
var ja_default = {
  "Add a comment": "\u30B3\u30E1\u30F3\u30C8\u3092\u8FFD\u52A0",
  "Add an option": "\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u8FFD\u52A0",
  "All results loaded": "\u3059\u3079\u3066\u306E\u7D50\u679C\u304C\u8AAD\u307F\u8FBC\u307E\u308C\u307E\u3057\u305F",
  "Allow access to camera": "\u30AB\u30E1\u30E9\u3078\u306E\u30A2\u30AF\u30BB\u30B9\u3092\u8A31\u53EF\u3059\u308B",
  "Allow access to microphone": "\u30DE\u30A4\u30AF\u30ED\u30D5\u30A9\u30F3\u3078\u306E\u30A2\u30AF\u30BB\u30B9\u3092\u8A31\u53EF\u3059\u308B",
  "Allow comments": "\u30B3\u30E1\u30F3\u30C8\u3092\u8A31\u53EF",
  "Allow option suggestion": "\u30AA\u30D7\u30B7\u30E7\u30F3\u306E\u63D0\u6848\u3092\u8A31\u53EF",
  "An error has occurred during recording": "\u9332\u97F3\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "An error has occurred during the recording processing": "\u9332\u97F3\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  Anonymous: "\u533F\u540D",
  "Anonymous poll": "\u533F\u540D\u6295\u7968",
  Archive: "\u30A2\u30FC\u30AB\u30A4\u30D6",
  "Ask a question": "\u8CEA\u554F\u3059\u308B",
  "Attach files": "\u30D5\u30A1\u30A4\u30EB\u3092\u6DFB\u4ED8\u3059\u308B",
  Cancel: "\u30AD\u30E3\u30F3\u30BB\u30EB",
  "Cannot seek in the recording": "\u9332\u97F3\u4E2D\u306B\u30B7\u30FC\u30AF\u3067\u304D\u307E\u305B\u3093",
  "Channel Missing": "\u30C1\u30E3\u30CD\u30EB\u304C\u3042\u308A\u307E\u305B\u3093",
  Close: "\u9589\u3081\u308B",
  "Close emoji picker": "\u7D75\u6587\u5B57\u30D4\u30C3\u30AB\u30FC\u3092\u9589\u3081\u308B",
  "Commands matching": "\u4E00\u81F4\u3059\u308B\u30B3\u30DE\u30F3\u30C9",
  "Connection failure, reconnecting now...": "\u63A5\u7D9A\u304C\u5931\u6557\u3057\u307E\u3057\u305F\u3002\u518D\u63A5\u7D9A\u4E2D...",
  Create: "\u4F5C\u6210",
  "Create poll": "\u6295\u7968\u3092\u4F5C\u6210",
  Delete: "\u6D88\u53BB",
  Delivered: "\u914D\u4FE1\u3057\u307E\u3057\u305F",
  "Download attachment {{ name }}": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB {{ name }} \u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
  "Drag your files here": "\u3053\u3053\u306B\u30D5\u30A1\u30A4\u30EB\u3092\u30C9\u30E9\u30C3\u30B0",
  "Drag your files here to add to your post": "\u6295\u7A3F\u306B\u8FFD\u52A0\u3059\u308B\u305F\u3081\u306B\u3053\u3053\u306B\u30D5\u30A1\u30A4\u30EB\u3092\u30C9\u30E9\u30C3\u30B0",
  "Edit Message": "\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u7DE8\u96C6",
  "Edit message request failed": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306E\u7DE8\u96C6\u8981\u6C42\u304C\u5931\u6557\u3057\u307E\u3057\u305F",
  Edited: "\u7DE8\u96C6\u6E08\u307F",
  "Emoji matching": "\u7D75\u6587\u5B57\u30DE\u30C3\u30C1\u30F3\u30B0",
  "Empty message...": "\u7A7A\u306E\u30E1\u30C3\u30BB\u30FC\u30B8...",
  End: "\u7D42\u4E86",
  "End vote": "\u6295\u7968\u3092\u7D42\u4E86",
  "Error adding flag": "\u30D5\u30E9\u30B0\u3092\u8FFD\u52A0\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error connecting to chat, refresh the page to try again.": "\u30C1\u30E3\u30C3\u30C8\u3078\u306E\u63A5\u7D9A\u304C\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002\u30DA\u30FC\u30B8\u3092\u66F4\u65B0\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
  "Error deleting message": "\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u524A\u9664\u3059\u308B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error fetching reactions": "\u53CD\u5FDC\u306E\u8AAD\u307F\u8FBC\u307F\u30A8\u30E9\u30FC",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u672A\u8AAD\u306B\u3059\u308B\u969B\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F\u3002\u6700\u65B0\u306E100\u4EF6\u306E\u30C1\u30E3\u30F3\u30CD\u30EB\u30E1\u30C3\u30BB\u30FC\u30B8\u3088\u308A\u53E4\u3044\u672A\u8AAD\u30E1\u30C3\u30BB\u30FC\u30B8\u306F\u30DE\u30FC\u30AF\u3067\u304D\u307E\u305B\u3093\u3002",
  "Error muting a user ...": "\u30E6\u30FC\u30B6\u30FC\u3092\u7121\u97F3\u3059\u308B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F...",
  "Error pinning message": "\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u30D4\u30F3\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error removing message pin": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306E\u30D4\u30F3\u3092\u524A\u9664\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error reproducing the recording": "\u9332\u97F3\u306E\u518D\u751F\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error starting recording": "\u9332\u97F3\u306E\u958B\u59CB\u6642\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error unmuting a user ...": "\u30E6\u30FC\u30B6\u30FC\u306E\u7121\u97F3\u89E3\u9664\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F...",
  "Error uploading attachment": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB\u306E\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error uploading file": "\u30D5\u30A1\u30A4\u30EB\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error uploading image": "\u753B\u50CF\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u306E\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
  "Error \xB7 Unsent": "\u30A8\u30E9\u30FC\u30FB\u672A\u9001\u4FE1",
  "Error: {{ errorMessage }}": "\u30A8\u30E9\u30FC: {{ errorMessage }}",
  "Failed to jump to the first unread message": "\u6700\u521D\u306E\u672A\u8AAD\u30E1\u30C3\u30BB\u30FC\u30B8\u306B\u30B8\u30E3\u30F3\u30D7\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F",
  "Failed to mark channel as read": "\u30C1\u30E3\u30F3\u30CD\u30EB\u3092\u65E2\u8AAD\u306B\u3059\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F",
  "Failed to play the recording": "\u9332\u97F3\u306E\u518D\u751F\u306B\u5931\u6557\u3057\u307E\u3057\u305F",
  File: "\u30D5\u30A1\u30A4\u30EB",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "\u30D5\u30A1\u30A4\u30EB\u304C\u5927\u304D\u3059\u304E\u307E\u3059\uFF1A{{ size }}\u3001\u6700\u5927\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u30B5\u30A4\u30BA\u306F{{ limit }}\u3067\u3059",
  Flag: "\u30D5\u30E9\u30B0",
  "Generating...": "\u751F\u6210\u4E2D...",
  "Latest Messages": "\u6700\u65B0\u306E\u30E1\u30C3\u30BB\u30FC\u30B8",
  "Load more": "\u3082\u3063\u3068\u8AAD\u307F\u8FBC\u3080",
  "Mark as unread": "\u672A\u8AAD\u3068\u3057\u3066\u30DE\u30FC\u30AF",
  "Maximum number of votes (from 2 to 10)": "\u6700\u5927\u6295\u7968\u6570\uFF082\u304B\u308910\u307E\u3067\uFF09",
  Menu: "\u30E1\u30CB\u30E5\u30FC",
  "Message Failed \xB7 Click to try again": "\u30E1\u30C3\u30BB\u30FC\u30B8\u304C\u5931\u6557\u3057\u307E\u3057\u305F \xB7 \u30AF\u30EA\u30C3\u30AF\u3057\u3066\u518D\u8A66\u884C\u3057\u3066\u304F\u3060\u3055\u3044",
  "Message Failed \xB7 Unauthorized": "\u30E1\u30C3\u30BB\u30FC\u30B8\u304C\u5931\u6557\u3057\u307E\u3057\u305F \xB7 \u8A31\u53EF\u3055\u308C\u3066\u3044\u307E\u305B\u3093",
  "Message deleted": "\u30E1\u30C3\u30BB\u30FC\u30B8\u304C\u524A\u9664\u3055\u308C\u307E\u3057\u305F",
  "Message has been successfully flagged": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306B\u6B63\u5E38\u306B\u30D5\u30E9\u30B0\u304C\u4ED8\u3051\u3089\u308C\u307E\u3057\u305F",
  "Message pinned": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306B\u30D4\u30F3\u304C\u4ED8\u3051\u3089\u308C\u307E\u3057\u305F",
  "Message was blocked by moderation policies": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306F\u30E2\u30C7\u30EC\u30FC\u30B7\u30E7\u30F3\u30DD\u30EA\u30B7\u30FC\u306B\u3088\u3063\u3066\u30D6\u30ED\u30C3\u30AF\u3055\u308C\u307E\u3057\u305F",
  "Messages have been marked unread.": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306F\u672A\u8AAD\u3068\u3057\u3066\u30DE\u30FC\u30AF\u3055\u308C\u307E\u3057\u305F\u3002",
  "Missing permissions to upload the attachment": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB\u3092\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u3059\u308B\u305F\u3081\u306E\u8A31\u53EF\u304C\u3042\u308A\u307E\u305B\u3093",
  "Multiple answers": "\u8907\u6570\u56DE\u7B54",
  Mute: "\u7121\u97F3",
  New: "\u65B0\u3057\u3044",
  "New Messages!": "\u65B0\u3057\u3044\u30E1\u30C3\u30BB\u30FC\u30B8!",
  "No chats here yet\u2026": "\u3053\u3053\u306B\u306F\u307E\u3060\u30C1\u30E3\u30C3\u30C8\u306F\u3042\u308A\u307E\u305B\u3093\u2026",
  "No results found": "\u7D50\u679C\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093",
  "Nobody will be able to vote in this poll anymore.": "\u3053\u306E\u6295\u7968\u3067\u306F\u3001\u8AB0\u3082\u6295\u7968\u3067\u304D\u306A\u304F\u306A\u308A\u307E\u3059\u3002",
  "Nothing yet...": "\u307E\u3060\u4F55\u3082\u3042\u308A\u307E\u305B\u3093...",
  Ok: "OK",
  "Open emoji picker": "\u7D75\u6587\u5B57\u30D4\u30C3\u30AB\u30FC\u3092\u958B\u304F",
  "Option already exists": "\u30AA\u30D7\u30B7\u30E7\u30F3\u306F\u65E2\u306B\u5B58\u5728\u3057\u307E\u3059",
  Options: "\u30AA\u30D7\u30B7\u30E7\u30F3",
  "People matching": "\u4E00\u81F4\u3059\u308B\u4EBA",
  Pin: "\u30D4\u30F3",
  "Pinned by": "\u30D4\u30F3\u3057\u305F\u65B9",
  Poll: "\u6295\u7968",
  "Poll comments": "\u6295\u7968\u30B3\u30E1\u30F3\u30C8",
  "Poll options": "\u6295\u7968\u30AA\u30D7\u30B7\u30E7\u30F3",
  "Poll results": "\u6295\u7968\u7D50\u679C",
  Question: "\u8CEA\u554F",
  Quote: "\u5F15\u7528",
  "Recording format is not supported and cannot be reproduced": "\u9332\u97F3\u5F62\u5F0F\u306F\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u304A\u3089\u305A\u3001\u518D\u751F\u3067\u304D\u307E\u305B\u3093",
  Reply: "\u8FD4\u4E8B",
  "Reply to Message": "\u30E1\u30C3\u30BB\u30FC\u30B8\u306B\u8FD4\u4FE1",
  Search: "\u63A2\u3059",
  "Searching...": "\u691C\u7D22\u4E2D...",
  "See all options ({{count}})_other": "\u3059\u3079\u3066\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u898B\u308B ({{count}})",
  "Select one": "1\u3064\u9078\u629E",
  "Select one or more": "1\u3064\u4EE5\u4E0A\u9078\u629E",
  "Select up to {{count}}_other": "\u6700\u5927{{count}}\u307E\u3067\u9078\u629E",
  Send: "\u9001\u4FE1",
  "Send Anyway": "\u3068\u306B\u304B\u304F\u9001\u4FE1\u3059\u308B",
  "Send message request failed": "\u30E1\u30C3\u30BB\u30FC\u30B8\u9001\u4FE1\u30EA\u30AF\u30A8\u30B9\u30C8\u304C\u5931\u6557\u3057\u307E\u3057\u305F",
  "Sending...": "\u9001\u4FE1\u4E2D...",
  "Show all": "\u3059\u3079\u3066\u8868\u793A",
  Shuffle: "\u30B7\u30E3\u30C3\u30D5\u30EB",
  "Slow Mode ON": "\u30B9\u30ED\u30FC\u30E2\u30FC\u30C9\u30AA\u30F3",
  "Some of the files will not be accepted": "\u4E00\u90E8\u306E\u30D5\u30A1\u30A4\u30EB\u306F\u53D7\u3051\u4ED8\u3051\u3089\u308C\u307E\u305B\u3093",
  "Start typing to search": "\u691C\u7D22\u3059\u308B\u306B\u306F\u5165\u529B\u3092\u958B\u59CB\u3057\u3066\u304F\u3060\u3055\u3044",
  Submit: "\u9001\u4FE1",
  "Suggest an option": "\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u63D0\u6848",
  "Thinking...": "\u8003\u3048\u4E2D...",
  "This message did not meet our content guidelines": "\u3053\u306E\u30E1\u30C3\u30BB\u30FC\u30B8\u306F\u30B3\u30F3\u30C6\u30F3\u30C4\u30AC\u30A4\u30C9\u30E9\u30A4\u30F3\u306B\u9069\u5408\u3057\u3066\u3044\u307E\u305B\u3093",
  "This message was deleted...": "\u3053\u306E\u30E1\u30C3\u30BB\u30FC\u30B8\u306F\u524A\u9664\u3055\u308C\u307E\u3057\u305F...",
  Thread: "\u30B9\u30EC\u30C3\u30C9",
  "To start recording, allow the camera access in your browser": "\u9332\u97F3\u3092\u958B\u59CB\u3059\u308B\u306B\u306F\u3001\u30D6\u30E9\u30A6\u30B6\u30FC\u3067\u30AB\u30E1\u30E9\u3078\u306E\u30A2\u30AF\u30BB\u30B9\u3092\u8A31\u53EF\u3057\u3066\u304F\u3060\u3055\u3044",
  "To start recording, allow the microphone access in your browser": "\u9332\u97F3\u3092\u958B\u59CB\u3059\u308B\u306B\u306F\u3001\u30D6\u30E9\u30A6\u30B6\u30FC\u3067\u30DE\u30A4\u30AF\u30ED\u30D5\u30A9\u30F3\u3078\u306E\u30A2\u30AF\u30BB\u30B9\u3092\u8A31\u53EF\u3057\u3066\u304F\u3060\u3055\u3044",
  "Type a number from 2 to 10": "2\u304B\u308910\u307E\u3067\u306E\u6570\u5B57\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044",
  "Type your message": "\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044",
  Unarchive: "\u30A2\u30FC\u30AB\u30A4\u30D6\u89E3\u9664",
  Unmute: "\u7121\u97F3\u3092\u89E3\u9664\u3059\u308B",
  Unpin: "\u30D4\u30F3\u3092\u89E3\u9664\u3059\u308B",
  "Unread messages": "\u672A\u8AAD\u30E1\u30C3\u30BB\u30FC\u30B8",
  "Unsupported attachment": "\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u306A\u3044\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB",
  "Update your comment": "\u30B3\u30E1\u30F3\u30C8\u3092\u66F4\u65B0",
  'Upload type: "{{ type }}" is not allowed': '\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u30BF\u30A4\u30D7\uFF1A"{{ type }}"\u306F\u8A31\u53EF\u3055\u308C\u3066\u3044\u307E\u305B\u3093',
  "User uploaded content": "\u30E6\u30FC\u30B6\u30FC\u304C\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u3057\u305F\u30B3\u30F3\u30C6\u30F3\u30C4",
  "View results": "\u7D50\u679C\u3092\u8868\u793A",
  "View {{count}} comments_other": "{{count}} \u30B3\u30E1\u30F3\u30C8\u3092\u8868\u793A",
  "Voice message": "\u30DC\u30A4\u30B9\u30E1\u30C3\u30BB\u30FC\u30B8",
  "Vote ended": "\u6295\u7968\u304C\u7D42\u4E86\u3057\u307E\u3057\u305F",
  "Wait until all attachments have uploaded": "\u3059\u3079\u3066\u306E\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB\u304C\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u3055\u308C\u308B\u307E\u3067\u304A\u5F85\u3061\u304F\u3060\u3055\u3044",
  You: "\u3042\u306A\u305F",
  "You have no channels currently": "\u73FE\u5728\u30C1\u30E3\u30F3\u30CD\u30EB\u306F\u3042\u308A\u307E\u305B\u3093",
  "You've reached the maximum number of files": "\u30D5\u30A1\u30A4\u30EB\u306E\u6700\u5927\u6570\u306B\u9054\u3057\u307E\u3057\u305F",
  "aria/Attachment": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB",
  "aria/Cancel Reply": "\u8FD4\u4FE1\u3092\u30AD\u30E3\u30F3\u30BB\u30EB",
  "aria/Cancel upload": "\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u3092\u30AD\u30E3\u30F3\u30BB\u30EB",
  "aria/Channel list": "\u30C1\u30E3\u30F3\u30CD\u30EB\u4E00\u89A7",
  "aria/Channel search results": "\u30C1\u30E3\u30F3\u30CD\u30EB\u691C\u7D22\u7D50\u679C",
  "aria/Close thread": "\u30B9\u30EC\u30C3\u30C9\u3092\u9589\u3058\u308B",
  "aria/Download attachment": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
  "aria/Emoji picker": "\u7D75\u6587\u5B57\u30D4\u30C3\u30AB\u30FC",
  "aria/File input": "\u30D5\u30A1\u30A4\u30EB\u5165\u529B",
  "aria/File upload": "\u30D5\u30A1\u30A4\u30EB\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9",
  "aria/Image input": "\u753B\u50CF\u5165\u529B",
  "aria/Load More Channels": "\u3055\u3089\u306B\u30C1\u30E3\u30F3\u30CD\u30EB\u3092\u8AAD\u307F\u8FBC\u3080",
  "aria/Menu": "\u30E1\u30CB\u30E5\u30FC",
  "aria/Message Options": "\u30E1\u30C3\u30BB\u30FC\u30B8\u30AA\u30D7\u30B7\u30E7\u30F3",
  "aria/Open Attachment Selector": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB\u9078\u629E\u3092\u958B\u304F",
  "aria/Open Message Actions Menu": "\u30E1\u30C3\u30BB\u30FC\u30B8\u30A2\u30AF\u30B7\u30E7\u30F3\u30E1\u30CB\u30E5\u30FC\u3092\u958B\u304F",
  "aria/Open Reaction Selector": "\u30EA\u30A2\u30AF\u30B7\u30E7\u30F3\u30BB\u30EC\u30AF\u30BF\u30FC\u3092\u958B\u304F",
  "aria/Open Thread": "\u30B9\u30EC\u30C3\u30C9\u3092\u958B\u304F",
  "aria/Reaction list": "\u30EA\u30A2\u30AF\u30B7\u30E7\u30F3\u4E00\u89A7",
  "aria/Remove attachment": "\u6DFB\u4ED8\u30D5\u30A1\u30A4\u30EB\u3092\u524A\u9664",
  "aria/Retry upload": "\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u3092\u518D\u8A66\u884C",
  "aria/Search results": "\u691C\u7D22\u7D50\u679C",
  "aria/Search results header filter button": "\u691C\u7D22\u7D50\u679C\u30D8\u30C3\u30C0\u30FC\u30D5\u30A3\u30EB\u30BF\u30FC\u30DC\u30BF\u30F3",
  "aria/Send": "\u9001\u4FE1",
  "aria/Stop AI Generation": "AI\u751F\u6210\u3092\u505C\u6B62",
  "ban-command-args": "[@\u30E6\u30FC\u30B6\u540D] [\u30C6\u30AD\u30B9\u30C8]",
  "ban-command-description": "\u30E6\u30FC\u30B6\u30FC\u3092\u7981\u6B62\u3059\u308B",
  "giphy-command-args": "[\u30C6\u30AD\u30B9\u30C8]",
  "giphy-command-description": "\u30C1\u30E3\u30F3\u30CD\u30EB\u306B\u30E9\u30F3\u30C0\u30E0\u306AGIF\u3092\u6295\u7A3F\u3059\u308B",
  live: "\u30E9\u30A4\u30D6",
  "mute-command-args": "[@\u30E6\u30FC\u30B6\u540D]",
  "mute-command-description": "\u30E6\u30FC\u30B6\u30FC\u3092\u30DF\u30E5\u30FC\u30C8\u3059\u308B",
  replyCount_one: "1\u4EF6\u306E\u8FD4\u4FE1",
  replyCount_other: "{{ count }} \u8FD4\u4FE1",
  "search-results-header-filter-source-button-label--channels": "\u30C1\u30E3\u30F3\u30CD\u30EB",
  "search-results-header-filter-source-button-label--messages": "\u30E1\u30C3\u30BB\u30FC\u30B8",
  "search-results-header-filter-source-button-label--users": "\u30E6\u30FC\u30B6\u30FC",
  searchResultsCount_one: "1\u4EF6\u306E\u7D50\u679C",
  searchResultsCount_other: "{{ count }}\u4EF6\u306E\u7D50\u679C",
  "this content could not be displayed": "\u3053\u306E\u30B3\u30F3\u30C6\u30F3\u30C4\u306F\u8868\u793A\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@\u30E6\u30FC\u30B6\u540D]",
  "unban-command-description": "\u30E6\u30FC\u30B6\u30FC\u306E\u7981\u6B62\u3092\u89E3\u9664\u3059\u308B",
  "unmute-command-args": "[@\u30E6\u30FC\u30B6\u540D]",
  "unmute-command-description": "\u30E6\u30FC\u30B6\u30FC\u306E\u30DF\u30E5\u30FC\u30C8\u3092\u89E3\u9664\u3059\u308B",
  unreadMessagesSeparatorText_other: "\u672A\u8AAD\u30E1\u30C3\u30BB\u30FC\u30B8 {{count}} \u4EF6",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} \u3068 {{ moreCount }} \u4ED6\u4EBA",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} \u3068 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} \u3068 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} \u30A4\u30E1\u30FC\u30B8",
  "{{ memberCount }} members": "{{ memberCount }} \u30E1\u30F3\u30D0\u30FC",
  "{{ user }} has been muted": "{{ user }} \u7121\u97F3\u3055\u308C\u3066\u3044\u307E\u3059",
  "{{ user }} has been unmuted": "{{ user }} \u7121\u97F3\u3055\u308C\u3066\u3044\u307E\u305B\u3093",
  "{{ user }} is typing...": "{{ user }} \u304C\u5165\u529B\u4E2D...",
  "{{ users }} and more are typing...": "{{ users }} \u3068\u305D\u306E\u4ED6\u304C\u5165\u529B\u4E2D...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} \u3068 {{ user }} \u304C\u5165\u529B\u4E2D...",
  "{{ watcherCount }} online": "{{ watcherCount }} \u30AA\u30F3\u30E9\u30A4\u30F3",
  "{{count}} unread_other": "{{count}} \u672A\u8AAD",
  "{{count}} votes_other": "{{count}} \u7968",
  "\u{1F3D9} Attachment...": "\u{1F3D9} \u30A2\u30BF\u30C3\u30C1\u30E1\u30F3\u30C8...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} \u304C\u4F5C\u6210: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} \u304C\u6295\u7968: {{pollOptionText}}"
};

// src/i18n/ko.json
var ko_default = {
  "Add a comment": "\uB313\uAE00 \uCD94\uAC00",
  "Add an option": "\uC635\uC158 \uCD94\uAC00",
  "All results loaded": "\uBAA8\uB4E0 \uACB0\uACFC\uAC00 \uB85C\uB4DC\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
  "Allow access to camera": "\uCE74\uBA54\uB77C\uC5D0 \uB300\uD55C \uC561\uC138\uC2A4 \uD5C8\uC6A9",
  "Allow access to microphone": "\uB9C8\uC774\uD06C\uB85C\uD3F0\uC5D0 \uB300\uD55C \uC561\uC138\uC2A4 \uD5C8\uC6A9",
  "Allow comments": "\uB313\uAE00 \uD5C8\uC6A9",
  "Allow option suggestion": "\uC635\uC158 \uC81C\uC548 \uD5C8\uC6A9",
  "An error has occurred during recording": "\uB179\uC74C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4",
  "An error has occurred during the recording processing": "\uB179\uC74C \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4",
  Anonymous: "\uC775\uBA85",
  "Anonymous poll": "\uC775\uBA85 \uD22C\uD45C",
  Archive: "\uC544\uCE74\uC774\uBE0C",
  "Ask a question": "\uC9C8\uBB38\uD558\uAE30",
  "Attach files": "\uD30C\uC77C \uCCA8\uBD80",
  Cancel: "\uCDE8\uC18C",
  "Cannot seek in the recording": "\uB179\uC74C\uC5D0\uC11C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
  "Channel Missing": "\uCC44\uB110 \uB204\uB77D",
  Close: "\uB2EB\uAE30",
  "Close emoji picker": "\uC774\uBAA8\uD2F0\uCF58 \uC120\uD0DD\uAE30 \uB2EB\uAE30",
  "Commands matching": "\uC77C\uCE58\uD558\uB294 \uBA85\uB839",
  "Connection failure, reconnecting now...": "\uC5F0\uACB0 \uC2E4\uD328, \uC9C0\uAE08 \uB2E4\uC2DC \uC5F0\uACB0 \uC911...",
  Create: "\uC0DD\uC131",
  "Create poll": "\uD22C\uD45C \uC0DD\uC131",
  Delete: "\uC0AD\uC81C",
  Delivered: "\uBC30\uB2EC\uB428",
  "Download attachment {{ name }}": "\uCCA8\uBD80 \uD30C\uC77C {{ name }} \uB2E4\uC6B4\uB85C\uB4DC",
  "Drag your files here": "\uC5EC\uAE30\uB85C \uD30C\uC77C\uC744 \uB04C\uC5B4\uB2E4 \uB193\uC73C\uC138\uC694",
  "Drag your files here to add to your post": "\uAC8C\uC2DC\uBB3C\uC5D0 \uCD94\uAC00\uD558\uB824\uBA74 \uD30C\uC77C\uC744 \uC5EC\uAE30\uB85C \uB04C\uC5B4\uB2E4 \uB193\uC73C\uC138\uC694",
  "Edit Message": "\uBA54\uC2DC\uC9C0 \uC218\uC815",
  "Edit message request failed": "\uBA54\uC2DC\uC9C0 \uC218\uC815 \uC694\uCCAD \uC2E4\uD328",
  Edited: "\uD3B8\uC9D1\uB428",
  "Emoji matching": "\uC774\uBAA8\uD2F0\uCF58 \uB9E4\uCE6D",
  "Empty message...": "\uBE48 \uBA54\uC2DC\uC9C0...",
  End: "\uC885\uB8CC",
  "End vote": "\uD22C\uD45C \uC885\uB8CC",
  "Error adding flag": "\uD50C\uB798\uADF8\uB97C \uCD94\uAC00\uD558\uB294 \uB3D9\uC548 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
  "Error connecting to chat, refresh the page to try again.": "\uCC44\uD305\uC5D0 \uC5F0\uACB0\uD558\uB294 \uB3D9\uC548 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uD398\uC774\uC9C0\uB97C \uC0C8\uB85C\uACE0\uCE68\uD558\uC5EC \uB2E4\uC2DC \uC2DC\uB3C4\uD558\uC138\uC694.",
  "Error deleting message": "\uBA54\uC2DC\uC9C0\uB97C \uC0AD\uC81C\uD558\uB294 \uC911\uC5D0 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
  "Error fetching reactions": "\uBC18\uC751 \uB85C\uB529 \uC624\uB958.",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "\uBA54\uC2DC\uC9C0\uB97C \uC77D\uC9C0 \uC54A\uC74C\uC73C\uB85C \uD45C\uC2DC\uD558\uB294 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uAC00\uC7A5 \uCD5C\uADFC 100\uAC1C\uC758 \uCC44\uB110 \uBA54\uC2DC\uC9C0\uBCF4\uB2E4 \uC624\uB798\uB41C \uC77D\uC9C0 \uC54A\uC740 \uBA54\uC2DC\uC9C0\uB294 \uD45C\uC2DC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
  "Error muting a user ...": "\uC0AC\uC6A9\uC790\uB97C \uC74C\uC18C\uAC70\uD558\uB294 \uC911\uC5D0 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4...",
  "Error pinning message": "\uBA54\uC2DC\uC9C0\uB97C \uD540\uD558\uB294 \uC911\uC5D0 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
  "Error removing message pin": "\uBA54\uC2DC\uC9C0 \uD540\uC744 \uC81C\uAC70\uD558\uB294 \uC911\uC5D0 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
  "Error reproducing the recording": "\uB179\uC74C \uC7AC\uC0DD \uC911 \uC624\uB958 \uBC1C\uC0DD",
  "Error starting recording": "\uB179\uC74C \uC2DC\uC791 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4",
  "Error unmuting a user ...": "\uC0AC\uC6A9\uC790 \uC74C\uC18C\uAC70 \uD574\uC81C \uC911 \uC624\uB958 \uBC1C\uC0DD...",
  "Error uploading attachment": "\uCCA8\uBD80 \uD30C\uC77C \uC5C5\uB85C\uB4DC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4",
  "Error uploading file": "\uD30C\uC77C \uC5C5\uB85C\uB4DC \uC624\uB958",
  "Error uploading image": "\uC774\uBBF8\uC9C0\uB97C \uC5C5\uB85C\uB4DC\uD558\uB294 \uB3D9\uC548 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.",
  "Error \xB7 Unsent": "\uC624\uB958 \xB7 \uC804\uC1A1\uB418\uC9C0 \uC54A\uC74C",
  "Error: {{ errorMessage }}": "\uC624\uB958: {{ errorMessage }}",
  "Failed to jump to the first unread message": "\uCCAB \uBC88\uC9F8 \uC77D\uC9C0 \uC54A\uC740 \uBA54\uC2DC\uC9C0\uB85C \uC774\uB3D9\uD558\uC9C0 \uBABB\uD588\uC2B5\uB2C8\uB2E4",
  "Failed to mark channel as read": "\uCC44\uB110\uC744 \uC77D\uC74C\uC73C\uB85C \uD45C\uC2DC\uD558\uB294 \uB370 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4",
  "Failed to play the recording": "\uB179\uC74C\uC744 \uC7AC\uC0DD\uD558\uC9C0 \uBABB\uD588\uC2B5\uB2C8\uB2E4",
  File: "\uD30C\uC77C",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "\uD30C\uC77C\uC774 \uB108\uBB34 \uD07D\uB2C8\uB2E4: {{ size }}, \uCD5C\uB300 \uC5C5\uB85C\uB4DC \uD06C\uAE30\uB294 {{ limit }}\uC785\uB2C8\uB2E4",
  Flag: "\uD50C\uB798\uADF8",
  "Generating...": "\uC0DD\uC131 \uC911...",
  "Latest Messages": "\uCD5C\uC2E0 \uBA54\uC2DC\uC9C0",
  "Load more": "\uB354 \uBD88\uB7EC\uC624\uAE30",
  "Mark as unread": "\uC77D\uC9C0 \uC54A\uC74C\uC73C\uB85C \uD45C\uC2DC",
  "Maximum number of votes (from 2 to 10)": "\uCD5C\uB300 \uD22C\uD45C \uC218 (2\uC5D0\uC11C 10\uAE4C\uC9C0)",
  Menu: "\uBA54\uB274",
  "Message Failed \xB7 Click to try again": "\uBA54\uC2DC\uC9C0 \uC2E4\uD328 \xB7 \uB2E4\uC2DC \uC2DC\uB3C4\uD558\uB824\uBA74 \uD074\uB9AD\uD558\uC138\uC694.",
  "Message Failed \xB7 Unauthorized": "\uBA54\uC2DC\uC9C0 \uC2E4\uD328 \xB7 \uC2B9\uC778\uB418\uC9C0 \uC54A\uC74C",
  "Message deleted": "\uBA54\uC2DC\uC9C0\uAC00 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
  "Message has been successfully flagged": "\uBA54\uC2DC\uC9C0\uC5D0 \uD50C\uB798\uADF8\uAC00 \uC9C0\uC815\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
  "Message pinned": "\uBA54\uC2DC\uC9C0 \uD540\uD588\uC2B5\uB2C8\uB2E4",
  "Message was blocked by moderation policies": "\uBA54\uC2DC\uC9C0\uAC00 \uAD00\uB9AC \uC815\uCC45\uC5D0 \uC758\uD574 \uCC28\uB2E8\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
  "Messages have been marked unread.": "\uBA54\uC2DC\uC9C0\uAC00 \uC77D\uC9C0 \uC54A\uC74C\uC73C\uB85C \uD45C\uC2DC\uB418\uC5C8\uC2B5\uB2C8\uB2E4.",
  "Missing permissions to upload the attachment": "\uCCA8\uBD80 \uD30C\uC77C\uC744 \uC5C5\uB85C\uB4DC\uD558\uB824\uBA74 \uAD8C\uD55C\uC774 \uD544\uC694\uD569\uB2C8\uB2E4",
  "Multiple answers": "\uBCF5\uC218 \uC751\uB2F5",
  Mute: "\uBB34\uC74C",
  New: "\uC0C8\uB85C\uC6B4",
  "New Messages!": "\uC0C8 \uBA54\uC2DC\uC9C0!",
  "No chats here yet\u2026": "\uC544\uC9C1 \uCC44\uD305\uC774 \uC5C6\uC2B5\uB2C8\uB2E4...",
  "No results found": "\uAC80\uC0C9 \uACB0\uACFC\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4",
  "Nobody will be able to vote in this poll anymore.": "\uC774 \uD22C\uD45C\uC5D0 \uB354 \uC774\uC0C1 \uC544\uBB34\uB3C4 \uD22C\uD45C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
  "Nothing yet...": "\uC544\uC9C1 \uC544\uBB34\uAC83\uB3C4...",
  Ok: "\uD655\uC778",
  "Open emoji picker": "\uC774\uBAA8\uD2F0\uCF58 \uC120\uD0DD\uAE30 \uC5F4\uAE30",
  "Option already exists": "\uC635\uC158\uC774 \uC774\uBBF8 \uC874\uC7AC\uD569\uB2C8\uB2E4",
  Options: "\uC635\uC158",
  "People matching": "\uC77C\uCE58\uD558\uB294 \uC0AC\uB78C",
  Pin: "\uD540",
  "Pinned by": "\uD540\uD588\uB358 \uBD84:",
  Poll: "\uD22C\uD45C",
  "Poll comments": "\uD22C\uD45C \uB313\uAE00",
  "Poll options": "\uD22C\uD45C \uC635\uC158",
  "Poll results": "\uD22C\uD45C \uACB0\uACFC",
  Question: "\uC9C8\uBB38",
  Quote: "\uC778\uC6A9",
  "Recording format is not supported and cannot be reproduced": "\uB179\uC74C \uD615\uC2DD\uC774 \uC9C0\uC6D0\uB418\uC9C0 \uC54A\uC73C\uBBC0\uB85C \uC7AC\uC0DD\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
  Reply: "\uB2F5\uC7A5",
  "Reply to Message": "\uBA54\uC2DC\uC9C0\uC5D0 \uB2F5\uC7A5",
  Search: "\uCC3E\uB2E4",
  "Searching...": "\uC218\uC0C9...",
  "See all options ({{count}})_other": "\uBAA8\uB4E0 \uC635\uC158 \uBCF4\uAE30 ({{count}})",
  "Select one": "\uD558\uB098 \uC120\uD0DD",
  "Select one or more": "\uD558\uB098 \uC774\uC0C1 \uC120\uD0DD",
  "Select up to {{count}}_other": "{{count}}\uAC1C\uAE4C\uC9C0 \uC120\uD0DD",
  Send: "\uBCF4\uB0B4\uB2E4",
  "Send Anyway": "\uC5B4\uCA0C\uB4E0 \uBCF4\uB0B4\uAE30",
  "Send message request failed": "\uBA54\uC2DC\uC9C0 \uBCF4\uB0B4\uAE30 \uC694\uCCAD \uC2E4\uD328",
  "Sending...": "\uBC30\uC0C1\uC911...",
  "Show all": "\uBAA8\uB450 \uBCF4\uAE30",
  Shuffle: "\uC154\uD50C",
  "Slow Mode ON": "\uC2AC\uB85C\uC6B0 \uBAA8\uB4DC \uCF1C\uC9D0",
  "Some of the files will not be accepted": "\uC77C\uBD80 \uD30C\uC77C\uC740 \uD5C8\uC6A9\uB418\uC9C0 \uC54A\uC744 \uC218 \uC788\uC2B5\uB2C8\uB2E4",
  "Start typing to search": "\uAC80\uC0C9\uD558\uB824\uBA74 \uC785\uB825\uC744 \uC2DC\uC791\uD558\uC138\uC694",
  Submit: "\uC81C\uCD9C",
  "Suggest an option": "\uC635\uC158 \uC81C\uC548",
  "Thinking...": "\uC0DD\uAC01 \uC911...",
  "This message did not meet our content guidelines": "\uC774 \uBA54\uC2DC\uC9C0\uB294 \uCF58\uD150\uCE20 \uAC00\uC774\uB4DC\uB77C\uC778\uC744 \uCDA9\uC871\uD558\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.",
  "This message was deleted...": "\uC774 \uBA54\uC2DC\uC9C0\uB294 \uC0AD\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4...",
  Thread: "\uC2A4\uB808\uB4DC",
  "To start recording, allow the camera access in your browser": "\uBE0C\uB77C\uC6B0\uC800\uC5D0\uC11C \uCE74\uBA54\uB77C \uC561\uC138\uC2A4\uB97C \uD5C8\uC6A9\uD558\uC5EC \uB179\uC74C\uC744 \uC2DC\uC791\uD569\uB2C8\uB2E4",
  "To start recording, allow the microphone access in your browser": "\uBE0C\uB77C\uC6B0\uC800\uC5D0\uC11C \uB9C8\uC774\uD06C\uB85C\uD3F0 \uC561\uC138\uC2A4\uB97C \uD5C8\uC6A9\uD558\uC5EC \uB179\uC74C\uC744 \uC2DC\uC791\uD569\uB2C8\uB2E4",
  "Type a number from 2 to 10": "2\uC5D0\uC11C 10 \uC0AC\uC774\uC758 \uC22B\uC790\uB97C \uC785\uB825\uD558\uC138\uC694",
  "Type your message": "\uBA54\uC2DC\uC9C0 \uC785\uB825",
  Unarchive: "\uC544\uCE74\uC774\uBE0C \uD574\uC81C",
  Unmute: "\uC74C\uC18C\uAC70 \uD574\uC81C",
  Unpin: "\uD540 \uD574\uC81C",
  "Unread messages": "\uC77D\uC9C0 \uC54A\uC740 \uBA54\uC2DC\uC9C0",
  "Unsupported attachment": "\uC9C0\uC6D0\uB418\uC9C0 \uC54A\uB294 \uCCA8\uBD80 \uD30C\uC77C",
  "Update your comment": "\uB313\uAE00 \uC5C5\uB370\uC774\uD2B8",
  'Upload type: "{{ type }}" is not allowed': '\uC5C5\uB85C\uB4DC \uC720\uD615: "{{ type }}"\uC740(\uB294) \uD5C8\uC6A9\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4.',
  "User uploaded content": "\uC0AC\uC6A9\uC790 \uC5C5\uB85C\uB4DC \uCF58\uD150\uCE20",
  "View results": "\uACB0\uACFC \uBCF4\uAE30",
  "View {{count}} comments_other": "{{count}}\uAC1C\uC758 \uB313\uAE00 \uBCF4\uAE30",
  "Voice message": "\uC74C\uC131 \uBA54\uC2DC\uC9C0",
  "Vote ended": "\uD22C\uD45C \uC885\uB8CC",
  "Wait until all attachments have uploaded": "\uBAA8\uB4E0 \uCCA8\uBD80 \uD30C\uC77C\uC774 \uC5C5\uB85C\uB4DC\uB420 \uB54C\uAE4C\uC9C0 \uAE30\uB2E4\uB9BD\uB2C8\uB2E4.",
  You: "\uB2F9\uC2E0",
  "You have no channels currently": "\uD604\uC7AC \uCC44\uB110\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.",
  "You've reached the maximum number of files": "\uCD5C\uB300 \uD30C\uC77C \uC218\uC5D0 \uB3C4\uB2EC\uD588\uC2B5\uB2C8\uB2E4.",
  "aria/Attachment": "\uCCA8\uBD80 \uD30C\uC77C",
  "aria/Cancel Reply": "\uB2F5\uC7A5 \uCDE8\uC18C",
  "aria/Cancel upload": "\uC5C5\uB85C\uB4DC \uCDE8\uC18C",
  "aria/Channel list": "\uCC44\uB110 \uBAA9\uB85D",
  "aria/Channel search results": "\uCC44\uB110 \uAC80\uC0C9 \uACB0\uACFC",
  "aria/Close thread": "\uC2A4\uB808\uB4DC \uB2EB\uAE30",
  "aria/Download attachment": "\uCCA8\uBD80 \uD30C\uC77C \uB2E4\uC6B4\uB85C\uB4DC",
  "aria/Emoji picker": "\uC774\uBAA8\uC9C0 \uC120\uD0DD\uAE30",
  "aria/File input": "\uD30C\uC77C \uC785\uB825",
  "aria/File upload": "\uD30C\uC77C \uC5C5\uB85C\uB4DC",
  "aria/Image input": "\uC774\uBBF8\uC9C0 \uC785\uB825",
  "aria/Load More Channels": "\uB354 \uB9CE\uC740 \uCC44\uB110 \uBD88\uB7EC\uC624\uAE30",
  "aria/Menu": "\uBA54\uB274",
  "aria/Message Options": "\uBA54\uC2DC\uC9C0 \uC635\uC158",
  "aria/Open Attachment Selector": "\uCCA8\uBD80 \uD30C\uC77C \uC120\uD0DD\uAE30 \uC5F4\uAE30",
  "aria/Open Message Actions Menu": "\uBA54\uC2DC\uC9C0 \uC561\uC158 \uBA54\uB274 \uC5F4\uAE30",
  "aria/Open Reaction Selector": "\uBC18\uC751 \uC120\uD0DD\uAE30 \uC5F4\uAE30",
  "aria/Open Thread": "\uC2A4\uB808\uB4DC \uC5F4\uAE30",
  "aria/Reaction list": "\uBC18\uC751 \uBAA9\uB85D",
  "aria/Remove attachment": "\uCCA8\uBD80 \uD30C\uC77C \uC81C\uAC70",
  "aria/Retry upload": "\uC5C5\uB85C\uB4DC \uB2E4\uC2DC \uC2DC\uB3C4",
  "aria/Search results": "\uAC80\uC0C9 \uACB0\uACFC",
  "aria/Search results header filter button": "\uAC80\uC0C9 \uACB0\uACFC \uD5E4\uB354 \uD544\uD130 \uBC84\uD2BC",
  "aria/Send": "\uBCF4\uB0B4\uAE30",
  "aria/Stop AI Generation": "AI \uC0DD\uC131 \uC911\uC9C0",
  "ban-command-args": "[@\uC0AC\uC6A9\uC790\uC774\uB984] [\uD14D\uC2A4\uD2B8]",
  "ban-command-description": "\uC0AC\uC6A9\uC790\uB97C \uCC28\uB2E8",
  "giphy-command-args": "[\uD14D\uC2A4\uD2B8]",
  "giphy-command-description": "\uCC44\uB110\uC5D0 \uBB34\uC791\uC704 GIF \uAC8C\uC2DC",
  live: "\uB77C\uC774\uBE0C",
  "mute-command-args": "[@\uC0AC\uC6A9\uC790\uC774\uB984]",
  "mute-command-description": "\uC0AC\uC6A9\uC790 \uC74C\uC18C\uAC70",
  replyCount_one: "\uB2F5\uC7A5 1\uAC1C",
  replyCount_other: "{{ count }} \uB2F5\uC7A5",
  "search-results-header-filter-source-button-label--channels": "\uCC44\uB110",
  "search-results-header-filter-source-button-label--messages": "\uBA54\uC2DC\uC9C0",
  "search-results-header-filter-source-button-label--users": "\uC0AC\uC6A9\uC790",
  searchResultsCount_one: "1\uAC1C\uC758 \uACB0\uACFC",
  searchResultsCount_other: "{{ count }}\uAC1C \uACB0\uACFC",
  "this content could not be displayed": "\uC774 \uCF58\uD150\uCE20\uB97C \uD45C\uC2DC\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@\uC0AC\uC6A9\uC790\uC774\uB984]",
  "unban-command-description": "\uC0AC\uC6A9\uC790 \uCC28\uB2E8 \uD574\uC81C",
  "unmute-command-args": "[@\uC0AC\uC6A9\uC790\uC774\uB984]",
  "unmute-command-description": "\uC0AC\uC6A9\uC790 \uC74C\uC18C\uAC70 \uD574\uC81C",
  unreadMessagesSeparatorText_other: "\uC77D\uC9C0 \uC54A\uC740 \uBA54\uC2DC\uC9C0 {{count}}\uAC1C",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} \uADF8\uB9AC\uACE0 {{ moreCount }}\uBA85 \uB354",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} \uADF8\uB9AC\uACE0 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} \uADF8\uB9AC\uACE0 {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }}\uAC1C \uB354",
  "{{ memberCount }} members": "{{ memberCount }}\uBA85",
  "{{ user }} has been muted": "{{ user }} \uC74C\uC18C\uAC70\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
  "{{ user }} has been unmuted": "{{ user }} \uC74C\uC18C\uAC70\uAC00 \uD574\uC81C\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
  "{{ user }} is typing...": "{{ user }}\uC774(\uAC00) \uC785\uB825 \uC911\uC785\uB2C8\uB2E4...",
  "{{ users }} and more are typing...": "{{ users }}\uC640(\uACFC) \uB354 \uB9CE\uC740 \uC0AC\uB78C\uB4E4\uC774 \uC785\uB825 \uC911\uC785\uB2C8\uB2E4...",
  "{{ users }} and {{ user }} are typing...": "{{ users }}\uC640(\uACFC) {{ user }}\uC774(\uAC00) \uC785\uB825 \uC911\uC785\uB2C8\uB2E4...",
  "{{ watcherCount }} online": "{{ watcherCount }} \uC628\uB77C\uC778",
  "{{count}} unread_other": "{{count}} \uC77D\uC9C0 \uC54A\uC74C",
  "{{count}} votes_other": "{{count}} \uD22C\uD45C",
  "\u{1F3D9} Attachment...": "\u{1F3D9} \uBD80\uCC29...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}}\uC774(\uAC00) \uC0DD\uC131\uD568: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}}\uC774(\uAC00) \uD22C\uD45C\uD568: {{pollOptionText}}"
};

// src/i18n/nl.json
var nl_default = {
  "Add a comment": "Voeg een opmerking toe",
  "Add an option": "Voeg een optie toe",
  "All results loaded": "Alle resultaten geladen",
  "Allow access to camera": "Toegang tot camera toestaan",
  "Allow access to microphone": "Toegang tot microfoon toestaan",
  "Allow comments": "Sta opmerkingen toe",
  "Allow option suggestion": "Sta optie-suggesties toe",
  "An error has occurred during recording": "Er is een fout opgetreden tijdens het opnemen",
  "An error has occurred during the recording processing": "Er is een fout opgetreden tijdens de verwerking van de opname",
  Anonymous: "Anoniem",
  "Anonymous poll": "Anonieme peiling",
  Archive: "Archief",
  "Ask a question": "Stel een vraag",
  "Attach files": "Bijlage toevoegen",
  Cancel: "Annuleer",
  "Cannot seek in the recording": "Kan niet zoeken in de opname",
  "Channel Missing": "Kanaal niet gevonden",
  Close: "Sluit",
  "Close emoji picker": "Sluit de emoji-kiezer",
  "Commands matching": "Bijpassende opdrachten",
  "Connection failure, reconnecting now...": "Verbindingsfout, opnieuw verbinden...",
  Create: "Maak",
  "Create poll": "Maak peiling",
  Delete: "Verwijder",
  Delivered: "Afgeleverd",
  "Download attachment {{ name }}": "Bijlage {{ name }} downloaden",
  "Drag your files here": "Sleep je bestanden hier naartoe",
  "Drag your files here to add to your post": "Sleep je bestanden hier naartoe om aan je bericht toe te voegen",
  "Edit Message": "Bericht bewerken",
  "Edit message request failed": "Verzoek om bericht bewerken mislukt",
  Edited: "Bewerkt",
  "Emoji matching": "Emoji-overeenkomsten",
  "Empty message...": "Leeg bericht...",
  End: "Einde",
  "End vote": "Einde stem",
  "Error adding flag": "Fout bij toevoegen van vlag",
  "Error connecting to chat, refresh the page to try again.": "Fout bij het verbinden, ververs de pagina om nogmaals te proberen",
  "Error deleting message": "Fout bij verwijderen van bericht",
  "Error fetching reactions": "Fout bij het laden van reacties",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Fout bij markeren van bericht als ongelezen. Kan geen oudere ongelezen berichten markeren dan de nieuwste 100 kanaalberichten.",
  "Error muting a user ...": "Fout bij het muten van de gebruiker",
  "Error pinning message": "Fout bij vastzetten van bericht",
  "Error removing message pin": "Fout bij verwijderen van berichtpin",
  "Error reproducing the recording": "Fout bij het afspelen van de opname",
  "Error starting recording": "Fout bij het starten van de opname",
  "Error unmuting a user ...": "Fout bij het unmuten van de gebruiker",
  "Error uploading attachment": "Fout bij het uploaden van de bijlage",
  "Error uploading file": "Fout bij uploaden bestand",
  "Error uploading image": "Fout bij uploaden afbeelding",
  "Error \xB7 Unsent": "Fout \xB7 niet verzonden",
  "Error: {{ errorMessage }}": "Fout: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Niet gelukt om naar het eerste ongelezen bericht te springen",
  "Failed to mark channel as read": "Kanaal kon niet als gelezen worden gemarkeerd",
  "Failed to play the recording": "Kan de opname niet afspelen",
  File: "Bestand",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Bestand is te groot: {{ size }}, maximale uploadgrootte is {{ limit }}",
  Flag: "Markeer",
  "Generating...": "Genereren...",
  "Latest Messages": "Laatste berichten",
  "Load more": "Meer laden",
  "Mark as unread": "Markeren als ongelezen",
  "Maximum number of votes (from 2 to 10)": "Maximaal aantal stemmen (van 2 tot 10)",
  Menu: "Menu",
  "Message Failed \xB7 Click to try again": "Bericht mislukt, klik om het nogmaals te proberen",
  "Message Failed \xB7 Unauthorized": "Bericht mislukt, ongeautoriseerd",
  "Message deleted": "Bericht verwijderd",
  "Message has been successfully flagged": "Bericht is succesvol gemarkeerd",
  "Message pinned": "Bericht vastgezet",
  "Message was blocked by moderation policies": "Bericht is geblokkeerd door moderatiebeleid",
  "Messages have been marked unread.": "Berichten zijn gemarkeerd als ongelezen.",
  "Missing permissions to upload the attachment": "Missende toestemmingen om de bijlage te uploaden",
  "Multiple answers": "Meerdere antwoorden",
  Mute: "Dempen",
  New: "Nieuwe",
  "New Messages!": "Nieuwe Berichten!",
  "No chats here yet\u2026": "Nog geen chats hier...",
  "No results found": "Geen resultaten gevonden",
  "Nobody will be able to vote in this poll anymore.": "Niemand kan meer stemmen in deze peiling.",
  "Nothing yet...": "Nog niets ...",
  Ok: "Ok\xE9",
  "Open emoji picker": "Open emojipicker",
  "Option already exists": "Optie bestaat al",
  Options: "Opties",
  "People matching": "Mensen die matchen",
  Pin: "Pin",
  "Pinned by": "Vastgemaakt door",
  Poll: "Peiling",
  "Poll comments": "Peiling opmerkingen",
  "Poll options": "Peiling opties",
  "Poll results": "Peiling resultaten",
  Question: "Vraag",
  Quote: "Citeer",
  "Recording format is not supported and cannot be reproduced": "Opnameformaat wordt niet ondersteund en kan niet worden gereproduceerd",
  Reply: "Antwoord",
  "Reply to Message": "Antwoord op bericht",
  Search: "Zoeken",
  "Searching...": "Zoeken...",
  "See all options ({{count}})_one": "Bekijk alle opties ({{count}})",
  "See all options ({{count}})_other": "Bekijk alle opties ({{count}})",
  "Select one": "Selecteer er een",
  "Select one or more": "Selecteer een of meer",
  "Select up to {{count}}_one": "Selecteer tot {{count}}",
  "Select up to {{count}}_other": "Selecteer tot {{count}}",
  Send: "Verstuur",
  "Send Anyway": "Toch versturen",
  "Send message request failed": "Verzoek om bericht te verzenden mislukt",
  "Sending...": "Aan het verzenden...",
  "Show all": "Toon alles",
  Shuffle: "Schudden",
  "Slow Mode ON": "Langzame modus aan",
  "Some of the files will not be accepted": "Sommige bestanden zullen niet worden geaccepteerd",
  "Start typing to search": "Begin met typen om te zoeken",
  Submit: "Versturen",
  "Suggest an option": "Stel een optie voor",
  "Thinking...": "Denken...",
  "This message did not meet our content guidelines": "Dit bericht voldeed niet aan onze inhoudsrichtlijnen",
  "This message was deleted...": "Dit bericht was verwijderd",
  Thread: "Draadje",
  "To start recording, allow the camera access in your browser": "Om te beginnen met opnemen, sta toegang tot de camera toe in uw browser",
  "To start recording, allow the microphone access in your browser": "Om te beginnen met opnemen, sta toegang tot de microfoon toe in uw browser",
  "Type a number from 2 to 10": "Typ een getal van 2 tot 10",
  "Type your message": "Type je bericht",
  Unarchive: "Uit archief halen",
  Unmute: "Dempen opheffen",
  Unpin: "Losmaken",
  "Unread messages": "Ongelezen berichten",
  "Unsupported attachment": "Niet-ondersteunde bijlage",
  "Update your comment": "Werk je opmerking bij",
  'Upload type: "{{ type }}" is not allowed': 'Uploadtype: "{{ type }}" is niet toegestaan',
  "User uploaded content": "Gebruikersge\xFCploade inhoud",
  "View results": "Bekijk resultaten",
  "View {{count}} comments_one": "Bekijk {{count}} opmerkingen",
  "View {{count}} comments_other": "Bekijk {{count}} opmerkingen",
  "Voice message": "Spraakbericht",
  "Vote ended": "Stemmen be\xEBindigd",
  "Wait until all attachments have uploaded": "Wacht tot alle bijlagen zijn ge\xFCpload",
  You: "Jij",
  "You have no channels currently": "Er zijn geen chats beschikbaar",
  "You've reached the maximum number of files": "Je hebt het maximale aantal bestanden bereikt",
  "aria/Attachment": "Bijlage",
  "aria/Cancel Reply": "Antwoord annuleren",
  "aria/Cancel upload": "Upload annuleren",
  "aria/Channel list": "Kanaallijst",
  "aria/Channel search results": "Zoekresultaten voor kanalen",
  "aria/Close thread": "Draad sluiten",
  "aria/Download attachment": "Bijlage downloaden",
  "aria/Emoji picker": "Emoji kiezer",
  "aria/File input": "Bestandsinvoer",
  "aria/File upload": "Bestand uploaden",
  "aria/Image input": "Afbeelding invoeren",
  "aria/Load More Channels": "Meer kanalen laden",
  "aria/Menu": "Menu",
  "aria/Message Options": "Berichtopties",
  "aria/Open Attachment Selector": "Open bijlage selector",
  "aria/Open Message Actions Menu": "Menu voor berichtacties openen",
  "aria/Open Reaction Selector": "Reactiekiezer openen",
  "aria/Open Thread": "Draad openen",
  "aria/Reaction list": "Reactielijst",
  "aria/Remove attachment": "Bijlage verwijderen",
  "aria/Retry upload": "Upload opnieuw proberen",
  "aria/Search results": "Zoekresultaten",
  "aria/Search results header filter button": "Zoekresultaten header filter knop",
  "aria/Send": "Verzenden",
  "aria/Stop AI Generation": "AI-generatie stoppen",
  "ban-command-args": "[@gebruikersnaam] [tekst]",
  "ban-command-description": "Een gebruiker verbannen",
  "giphy-command-args": "[tekst]",
  "giphy-command-description": "Plaats een willekeurige gif in het kanaal",
  live: "live",
  "mute-command-args": "[@gebruikersnaam]",
  "mute-command-description": "Een gebruiker dempen",
  replyCount_one: "1 antwoord",
  replyCount_other: "{{ count }} antwoorden",
  "search-results-header-filter-source-button-label--channels": "kanalen",
  "search-results-header-filter-source-button-label--messages": "berichten",
  "search-results-header-filter-source-button-label--users": "gebruikers",
  searchResultsCount_one: "1 resultaat",
  searchResultsCount_other: "{{ count }} resultaten",
  "this content could not be displayed": "Deze inhoud kan niet weergegeven worden",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@gebruikersnaam]",
  "unban-command-description": "Een gebruiker debannen",
  "unmute-command-args": "[@gebruikersnaam]",
  "unmute-command-description": "Een gebruiker niet meer dempen",
  unreadMessagesSeparatorText_one: "1 ongelezen bericht",
  unreadMessagesSeparatorText_other: "{{count}} ongelezen berichten",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} en {{ moreCount }} meer",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} en {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} en {{ secondUser }}",
  "{{ imageCount }} more": "+{{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} deelnemers",
  "{{ user }} has been muted": "{{ user }} is gedempt",
  "{{ user }} has been unmuted": "{{ user }} is niet meer gedempt",
  "{{ user }} is typing...": "{{ user }} is aan het typen...",
  "{{ users }} and more are typing...": "{{ users }} en meer zijn aan het typen...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} en {{ user }} zijn aan het typen...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_one": "{{count}} ongelezen",
  "{{count}} unread_other": "{{count}} ongelezen",
  "{{count}} votes_one": "{{count}} stem",
  "{{count}} votes_other": "{{count}} stemmen",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Bijlage...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} heeft gemaakt: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} heeft gestemd: {{pollOptionText}}"
};

// src/i18n/pt.json
var pt_default = {
  "Add a comment": "Adicionar um coment\xE1rio",
  "Add an option": "Adicionar uma op\xE7\xE3o",
  "All results loaded": "Todos os resultados carregados",
  "Allow access to camera": "Permitir acesso \xE0 c\xE2mera",
  "Allow access to microphone": "Permitir acesso ao microfone",
  "Allow comments": "Permitir coment\xE1rios",
  "Allow option suggestion": "Permitir sugest\xE3o de op\xE7\xE3o",
  "An error has occurred during recording": "Ocorreu um erro durante a grava\xE7\xE3o",
  "An error has occurred during the recording processing": "Ocorreu um erro durante o processamento da grava\xE7\xE3o",
  Anonymous: "An\xF4nimo",
  "Anonymous poll": "Enquete an\xF4nima",
  Archive: "Arquivar",
  "Ask a question": "Fa\xE7a uma pergunta",
  "Attach files": "Anexar arquivos",
  Cancel: "Cancelar",
  "Cannot seek in the recording": "N\xE3o \xE9 poss\xEDvel buscar na grava\xE7\xE3o",
  "Channel Missing": "Canal ausente",
  Close: "Fechar",
  "Close emoji picker": "Fechar seletor de emoji",
  "Commands matching": "Comandos correspondentes",
  "Connection failure, reconnecting now...": "Falha de conex\xE3o, reconectando agora...",
  Create: "Criar",
  "Create poll": "Criar enquete",
  Delete: "Excluir",
  Delivered: "Entregue",
  "Download attachment {{ name }}": "Baixar anexo {{ name }}",
  "Drag your files here": "Arraste seus arquivos aqui",
  "Drag your files here to add to your post": "Arraste seus arquivos aqui para adicionar ao seu post",
  "Edit Message": "Editar Mensagem",
  "Edit message request failed": "O pedido de edi\xE7\xE3o da mensagem falhou",
  Edited: "Editada",
  "Emoji matching": "Emoji correspondente",
  "Empty message...": "Mensagem vazia...",
  End: "Fim",
  "End vote": "Encerrar vota\xE7\xE3o",
  "Error adding flag": "Erro ao reportar",
  "Error connecting to chat, refresh the page to try again.": "Erro ao conectar ao bate-papo, atualize a p\xE1gina para tentar novamente.",
  "Error deleting message": "Erro ao deletar mensagem",
  "Error fetching reactions": "Erro ao carregar rea\xE7\xF5es",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Erro ao marcar a mensagem como n\xE3o lida. N\xE3o \xE9 poss\xEDvel marcar mensagens n\xE3o lidas mais antigas do que as 100 mensagens mais recentes do canal.",
  "Error muting a user ...": "Erro ao silenciar um usu\xE1rio...",
  "Error pinning message": "Erro ao fixar mensagem",
  "Error removing message pin": "Erro ao remover o PIN da mensagem",
  "Error reproducing the recording": "Erro ao reproduzir a grava\xE7\xE3o",
  "Error starting recording": "Erro ao iniciar a grava\xE7\xE3o",
  "Error unmuting a user ...": "Erro ao ativar o som de um usu\xE1rio...",
  "Error uploading attachment": "Erro ao carregar o anexo",
  "Error uploading file": "Erro ao enviar arquivo",
  "Error uploading image": "Erro ao carregar a imagem",
  "Error \xB7 Unsent": "Erro \xB7 N\xE3o enviado",
  "Error: {{ errorMessage }}": "Erro: {{ errorMessage }}",
  "Failed to jump to the first unread message": "Falha ao pular para a primeira mensagem n\xE3o lida",
  "Failed to mark channel as read": "Falha ao marcar o canal como lido",
  "Failed to play the recording": "Falha ao reproduzir a grava\xE7\xE3o",
  File: "Arquivo",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "O arquivo \xE9 muito grande: {{ size }}, o tamanho m\xE1ximo de upload \xE9 {{ limit }}",
  Flag: "Reportar",
  "Generating...": "Gerando...",
  "Latest Messages": "Mensagens mais recentes",
  "Load more": "Carregar mais",
  "Mark as unread": "Marcar como n\xE3o lida",
  "Maximum number of votes (from 2 to 10)": "N\xFAmero m\xE1ximo de votos (de 2 a 10)",
  Menu: "Menu",
  "Message Failed \xB7 Click to try again": "A mensagem falhou \xB7 Clique para tentar novamente",
  "Message Failed \xB7 Unauthorized": "A mensagem falhou \xB7 n\xE3o autorizado",
  "Message deleted": "Mensagem apagada",
  "Message has been successfully flagged": "A mensagem foi reportada com sucesso",
  "Message pinned": "Mensagem fixada",
  "Message was blocked by moderation policies": "A mensagem foi bloqueada pelas pol\xEDticas de modera\xE7\xE3o",
  "Messages have been marked unread.": "Mensagens foram marcadas como n\xE3o lidas.",
  "Missing permissions to upload the attachment": "Faltando permiss\xF5es para enviar o anexo",
  "Multiple answers": "M\xFAltiplas respostas",
  Mute: "Silenciar",
  New: "Novo",
  "New Messages!": "Novas Mensagens!",
  "No chats here yet\u2026": "Ainda n\xE3o h\xE1 conversas aqui...",
  "No results found": "Nenhum resultado encontrado",
  "Nobody will be able to vote in this poll anymore.": "Ningu\xE9m mais poder\xE1 votar nesta pesquisa.",
  "Nothing yet...": "Nada ainda...",
  Ok: "Ok",
  "Open emoji picker": "Abrir seletor de emoji",
  "Option already exists": "Op\xE7\xE3o j\xE1 existe",
  Options: "Op\xE7\xF5es",
  "People matching": "Pessoas correspondentes",
  Pin: "Fixar",
  "Pinned by": "Fixado por",
  Poll: "Enquete",
  "Poll comments": "Coment\xE1rios da pesquisa",
  "Poll options": "Op\xE7\xF5es da pesquisa",
  "Poll results": "Resultados da pesquisa",
  Question: "Pergunta",
  Quote: "Citar",
  "Recording format is not supported and cannot be reproduced": "Formato de grava\xE7\xE3o n\xE3o \xE9 suportado e n\xE3o pode ser reproduzido",
  Reply: "Responder",
  "Reply to Message": "Responder \xE0 mensagem",
  Search: "Buscar",
  "Searching...": "Buscando...",
  "See all options ({{count}})_many": "Ver todas as op\xE7\xF5es ({{count}})",
  "See all options ({{count}})_one": "Ver todas as op\xE7\xF5es ({{count}})",
  "See all options ({{count}})_other": "Ver todas as op\xE7\xF5es ({{count}})",
  "Select one": "Selecionar um",
  "Select one or more": "Selecionar um ou mais",
  "Select up to {{count}}_many": "Selecionar at\xE9 {{count}}",
  "Select up to {{count}}_one": "Selecionar at\xE9 {{count}}",
  "Select up to {{count}}_other": "Selecionar at\xE9 {{count}}",
  Send: "Enviar",
  "Send Anyway": "Enviar de qualquer forma",
  "Send message request failed": "O pedido de envio da mensagem falhou",
  "Sending...": "Enviando...",
  "Show all": "Mostrar tudo",
  Shuffle: "Embaralhar",
  "Slow Mode ON": "Modo lento LIGADO",
  "Some of the files will not be accepted": "Alguns arquivos n\xE3o ser\xE3o aceitos",
  "Start typing to search": "Comece a digitar para pesquisar",
  Submit: "Enviar",
  "Suggest an option": "Sugerir uma op\xE7\xE3o",
  "Thinking...": "Pensando...",
  "This message did not meet our content guidelines": "Esta mensagem n\xE3o corresponde \xE0s nossas diretrizes de conte\xFAdo",
  "This message was deleted...": "Esta mensagem foi exclu\xEDda...",
  Thread: "Fio",
  "To start recording, allow the camera access in your browser": "Para come\xE7ar a gravar, permita o acesso \xE0 c\xE2mera no seu navegador",
  "To start recording, allow the microphone access in your browser": "Para come\xE7ar a gravar, permita o acesso ao microfone no seu navegador",
  "Type a number from 2 to 10": "Digite um n\xFAmero de 2 a 10",
  "Type your message": "Digite sua mensagem",
  Unarchive: "Desarquivar",
  Unmute: "Ativar som",
  Unpin: "Desfixar",
  "Unread messages": "Mensagens n\xE3o lidas",
  "Unsupported attachment": "Anexo n\xE3o suportado",
  "Update your comment": "Atualizar seu coment\xE1rio",
  'Upload type: "{{ type }}" is not allowed': 'Tipo de upload: "{{ type }}" n\xE3o \xE9 permitido',
  "User uploaded content": "Conte\xFAdo enviado pelo usu\xE1rio",
  "View results": "Ver resultados",
  "View {{count}} comments_many": "Ver {{count}} coment\xE1rios",
  "View {{count}} comments_one": "Ver {{count}} coment\xE1rio",
  "View {{count}} comments_other": "Ver {{count}} coment\xE1rios",
  "Voice message": "Mensagem de voz",
  "Vote ended": "Vota\xE7\xE3o encerrada",
  "Wait until all attachments have uploaded": "Espere at\xE9 que todos os anexos tenham sido carregados",
  You: "Voc\xEA",
  "You have no channels currently": "Voc\xEA n\xE3o tem canais atualmente",
  "You've reached the maximum number of files": "Voc\xEA atingiu o n\xFAmero m\xE1ximo de arquivos",
  "aria/Attachment": "Anexo",
  "aria/Cancel Reply": "Cancelar resposta",
  "aria/Cancel upload": "Cancelar upload",
  "aria/Channel list": "Lista de canais",
  "aria/Channel search results": "Resultados de pesquisa de canais",
  "aria/Close thread": "Fechar t\xF3pico",
  "aria/Download attachment": "Baixar anexo",
  "aria/Emoji picker": "Seletor de emojis",
  "aria/File input": "Entrada de arquivo",
  "aria/File upload": "Carregar arquivo",
  "aria/Image input": "Entrada de imagem",
  "aria/Load More Channels": "Carregar mais canais",
  "aria/Menu": "Menu",
  "aria/Message Options": "Op\xE7\xF5es de mensagem",
  "aria/Open Attachment Selector": "Abrir seletor de anexos",
  "aria/Open Message Actions Menu": "Abrir menu de a\xE7\xF5es de mensagem",
  "aria/Open Reaction Selector": "Abrir seletor de rea\xE7\xF5es",
  "aria/Open Thread": "Abrir t\xF3pico",
  "aria/Reaction list": "Lista de rea\xE7\xF5es",
  "aria/Remove attachment": "Remover anexo",
  "aria/Retry upload": "Tentar upload novamente",
  "aria/Search results": "Resultados da pesquisa",
  "aria/Search results header filter button": "Bot\xE3o de filtro do cabe\xE7alho dos resultados da pesquisa",
  "aria/Send": "Enviar",
  "aria/Stop AI Generation": "Parar gera\xE7\xE3o de IA",
  "ban-command-args": "[@nomedeusu\xE1rio] [texto]",
  "ban-command-description": "Banir um usu\xE1rio",
  "giphy-command-args": "[texto]",
  "giphy-command-description": "Postar um gif aleat\xF3rio no canal",
  live: "ao vivo",
  "mute-command-args": "[@nomedeusu\xE1rio]",
  "mute-command-description": "Silenciar um usu\xE1rio",
  replyCount_many: "{{ count }} respostas",
  replyCount_one: "1 resposta",
  replyCount_other: "{{ count }} respostas",
  "search-results-header-filter-source-button-label--channels": "canais",
  "search-results-header-filter-source-button-label--messages": "mensagens",
  "search-results-header-filter-source-button-label--users": "usu\xE1rios",
  searchResultsCount_many: "{{ count }} resultados",
  searchResultsCount_one: "1 resultado",
  searchResultsCount_other: "{{ count }} resultados",
  "this content could not be displayed": "este conte\xFAdo n\xE3o p\xF4de ser exibido",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@nomedeusu\xE1rio]",
  "unban-command-description": "Desbanir um usu\xE1rio",
  "unmute-command-args": "[@nomedeusu\xE1rio]",
  "unmute-command-description": "Retirar o silenciamento de um usu\xE1rio",
  unreadMessagesSeparatorText_many: "{{count}} mensagens n\xE3o lidas",
  unreadMessagesSeparatorText_one: "1 mensagem n\xE3o lida",
  unreadMessagesSeparatorText_other: "{{count}} mensagens n\xE3o lidas",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} e mais {{ moreCount }}",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} e {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} e {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} mais",
  "{{ memberCount }} members": "{{ memberCount }} membros",
  "{{ user }} has been muted": "{{ user }} foi silenciado",
  "{{ user }} has been unmuted": "{{ user }} foi reativado",
  "{{ user }} is typing...": "{{ user }} est\xE1 digitando...",
  "{{ users }} and more are typing...": "{{ users }} e mais est\xE3o digitando...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} e {{ user }} est\xE3o digitando...",
  "{{ watcherCount }} online": "{{ watcherCount }} online",
  "{{count}} unread_many": "{{count}} n\xE3o lidos",
  "{{count}} unread_one": "{{count}} n\xE3o lido",
  "{{count}} unread_other": "{{count}} n\xE3o lidos",
  "{{count}} votes_many": "{{count}} votos",
  "{{count}} votes_one": "{{count}} voto",
  "{{count}} votes_other": "{{count}} votos",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Anexo...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} criou: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} votou: {{pollOptionText}}"
};

// src/i18n/ru.json
var ru_default = {
  "Add a comment": "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439",
  "Add an option": "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0432\u0430\u0440\u0438\u0430\u043D\u0442",
  "All results loaded": "\u0412\u0441\u0435 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D\u044B",
  "Allow access to camera": "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043A \u043A\u0430\u043C\u0435\u0440\u0435",
  "Allow access to microphone": "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043A \u043C\u0438\u043A\u0440\u043E\u0444\u043E\u043D\u0443",
  "Allow comments": "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044C \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0438",
  "Allow option suggestion": "\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044C \u043F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432",
  "An error has occurred during recording": "\u041F\u0440\u043E\u0438\u0437\u043E\u0448\u043B\u0430 \u043E\u0448\u0438\u0431\u043A\u0430 \u0432\u043E \u0432\u0440\u0435\u043C\u044F \u0437\u0430\u043F\u0438\u0441\u0438",
  "An error has occurred during the recording processing": "\u041F\u0440\u043E\u0438\u0437\u043E\u0448\u043B\u0430 \u043E\u0448\u0438\u0431\u043A\u0430 \u0432\u043E \u0432\u0440\u0435\u043C\u044F \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0437\u0430\u043F\u0438\u0441\u0438",
  Anonymous: "\u0410\u043D\u043E\u043D\u0438\u043C",
  "Anonymous poll": "\u0410\u043D\u043E\u043D\u0438\u043C\u043D\u044B\u0439 \u043E\u043F\u0440\u043E\u0441",
  Archive: "A\u0440\u0445\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
  "Ask a question": "\u0417\u0430\u0434\u0430\u0442\u044C \u0432\u043E\u043F\u0440\u043E\u0441",
  "Attach files": "\u041F\u0440\u0438\u043A\u0440\u0435\u043F\u0438\u0442\u044C \u0444\u0430\u0439\u043B\u044B",
  Cancel: "\u041E\u0442\u043C\u0435\u043D\u0430",
  "Cannot seek in the recording": "\u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u043E\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u044C \u043F\u043E\u0438\u0441\u043A \u0432 \u0437\u0430\u043F\u0438\u0441\u0438",
  "Channel Missing": "\u041A\u0430\u043D\u0430\u043B \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D",
  Close: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
  "Close emoji picker": "\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u043E\u043A\u043D\u043E \u0432\u044B\u0431\u043E\u0440\u0430 \u0441\u043C\u0430\u0439\u043B\u043E\u0432",
  "Commands matching": "\u0421\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043A\u043E\u043C\u0430\u043D\u0434",
  "Connection failure, reconnecting now...": "\u041E\u0448\u0438\u0431\u043A\u0430 \u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F, \u043F\u0435\u0440\u0435\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435...",
  Create: "\u0421\u043E\u0437\u0434\u0430\u0442\u044C",
  "Create poll": "\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043E\u043F\u0440\u043E\u0441",
  Delete: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
  Delivered: "\u041E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043E",
  "Download attachment {{ name }}": "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u0435 {{ name }}",
  "Drag your files here": "\u041F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0432\u0430\u0448\u0438 \u0444\u0430\u0439\u043B\u044B \u0441\u044E\u0434\u0430",
  "Drag your files here to add to your post": "\u041F\u0435\u0440\u0435\u0442\u0430\u0449\u0438\u0442\u0435 \u0432\u0430\u0448\u0438 \u0444\u0430\u0439\u043B\u044B \u0441\u044E\u0434\u0430, \u0447\u0442\u043E\u0431\u044B \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0438\u0445 \u0432 \u0432\u0430\u0448 \u043F\u043E\u0441\u0442",
  "Edit Message": "\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435",
  "Edit message request failed": "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0438\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u0437\u0430\u043F\u0440\u043E\u0441 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  Edited: "\u041E\u0442\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043E",
  "Emoji matching": "\u0421\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u044D\u043C\u043E\u0434\u0437\u0438",
  "Empty message...": "\u041F\u0443\u0441\u0442\u043E\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435...",
  End: "\u041A\u043E\u043D\u0435\u0446",
  "End vote": "\u0417\u0430\u043A\u043E\u043D\u0447\u0438\u0442\u044C \u0433\u043E\u043B\u043E\u0441\u043E\u0432\u0430\u043D\u0438\u0435",
  "Error adding flag": "\u041E\u0448\u0438\u0431\u043A\u0430 \u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u0444\u043B\u0430\u0433\u0430",
  "Error connecting to chat, refresh the page to try again.": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F \u043A \u0447\u0430\u0442\u0443, \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443 \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u043F\u0440\u043E\u0431\u043E\u0432\u0430\u0442\u044C \u0441\u043D\u043E\u0432\u0430.",
  "Error deleting message": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0438 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "Error fetching reactions": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0435 \u0440\u0435\u0430\u043A\u0446\u0438\u0439",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u043E\u0442\u043C\u0435\u0442\u043A\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043A\u0430\u043A \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0433\u043E. \u041D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u043E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0441\u0442\u0430\u0440\u0448\u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0445 100 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439 \u0432 \u043A\u0430\u043D\u0430\u043B\u0435.",
  "Error muting a user ...": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439 \u043E\u0442 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F...",
  "Error pinning message": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u043E\u0431 \u043E\u0448\u0438\u0431\u043A\u0435 \u043F\u0440\u0438 \u0437\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u0438\u0438",
  "Error removing message pin": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0438 \u0431\u0443\u043B\u0430\u0432\u043A\u0438 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "Error reproducing the recording": "\u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u0437\u0430\u043F\u0438\u0441\u0438",
  "Error starting recording": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0437\u0430\u043F\u0443\u0441\u043A\u0435 \u0437\u0430\u043F\u0438\u0441\u0438",
  "Error unmuting a user ...": "\u041E\u0448\u0438\u0431\u043A\u0430 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439...",
  "Error uploading attachment": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0435 \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u044F",
  "Error uploading file": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043F\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0435 \u0444\u0430\u0439\u043B\u0430",
  "Error uploading image": "\u041E\u0448\u0438\u0431\u043A\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
  "Error \xB7 Unsent": "\u041E\u0448\u0438\u0431\u043A\u0430 \xB7 \u041D\u0435 \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043E",
  "Error: {{ errorMessage }}": "\u041E\u0448\u0438\u0431\u043A\u0430: {{ errorMessage }}",
  "Failed to jump to the first unread message": "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u043A \u043F\u0435\u0440\u0432\u043E\u043C\u0443 \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u043C\u0443 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044E",
  "Failed to mark channel as read": "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043F\u043E\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043D\u0430\u043B \u043A\u0430\u043A \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0439",
  "Failed to play the recording": "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u0432\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0441\u0442\u0438 \u0437\u0430\u043F\u0438\u0441\u044C",
  File: "\u0424\u0430\u0439\u043B",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "\u0424\u0430\u0439\u043B \u0441\u043B\u0438\u0448\u043A\u043E\u043C \u0431\u043E\u043B\u044C\u0448\u043E\u0439: {{ size }}, \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0440\u0430\u0437\u043C\u0435\u0440 \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0441\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u0442 {{ limit }}",
  Flag: "\u041F\u043E\u0436\u0430\u043B\u043E\u0432\u0430\u0442\u044C\u0441\u044F",
  "Generating...": "\u0413\u0435\u043D\u0435\u0440\u0438\u0440\u0443\u044E...",
  "Latest Messages": "\u041F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "Load more": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435",
  "Mark as unread": "\u041E\u0442\u043C\u0435\u0442\u0438\u0442\u044C \u043A\u0430\u043A \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0435",
  "Maximum number of votes (from 2 to 10)": "\u041C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u0433\u043E\u043B\u043E\u0441\u043E\u0432 (\u043E\u0442 2 \u0434\u043E 10)",
  Menu: "\u041C\u0435\u043D\u044E",
  "Message Failed \xB7 Click to try again": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0438 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \xB7 \u041D\u0430\u0436\u043C\u0438\u0442\u0435 \u0447\u0442\u043E\u0431\u044B \u043F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C",
  "Message Failed \xB7 Unauthorized": "\u041E\u0448\u0438\u0431\u043A\u0430 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0438 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \xB7 \u041D\u0435\u0430\u0432\u0442\u043E\u0440\u0438\u0437\u043E\u0432\u0430\u043D\u043D\u044B\u0439",
  "Message deleted": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0443\u0434\u0430\u043B\u0435\u043D\u043E",
  "Message has been successfully flagged": "\u0416\u0430\u043B\u043E\u0431\u0430 \u043D\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0431\u044B\u043B\u0430 \u043F\u0440\u0438\u043D\u044F\u0442\u0430",
  "Message pinned": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0437\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043E",
  "Message was blocked by moderation policies": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u043D\u043E \u043C\u043E\u0434\u0435\u0440\u0430\u0446\u0438\u0435\u0439",
  "Messages have been marked unread.": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0431\u044B\u043B\u0438 \u043E\u0442\u043C\u0435\u0447\u0435\u043D\u044B \u043A\u0430\u043A \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0435.",
  "Missing permissions to upload the attachment": "\u041E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044E\u0442 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u044F \u0434\u043B\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438 \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u044F",
  "Multiple answers": "\u041D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u043E\u0442\u0432\u0435\u0442\u043E\u0432",
  Mute: "\u041E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F",
  New: "\u041D\u043E\u0432\u044B\u0435",
  "New Messages!": "\u041D\u043E\u0432\u044B\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F!",
  "No chats here yet\u2026": "\u0417\u0434\u0435\u0441\u044C \u0435\u0449\u0435 \u043D\u0435\u0442 \u0447\u0430\u0442\u043E\u0432...",
  "No results found": "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B",
  "Nobody will be able to vote in this poll anymore.": "\u041D\u0438\u043A\u0442\u043E \u0431\u043E\u043B\u044C\u0448\u0435 \u043D\u0435 \u0441\u043C\u043E\u0436\u0435\u0442 \u0433\u043E\u043B\u043E\u0441\u043E\u0432\u0430\u0442\u044C \u0432 \u044D\u0442\u043E\u043C \u043E\u043F\u0440\u043E\u0441\u0435.",
  "Nothing yet...": "\u041F\u043E\u043A\u0430 \u043D\u0438\u0447\u0435\u0433\u043E \u043D\u0435\u0442...",
  Ok: "\u041E\u043A",
  "Open emoji picker": "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0432\u044B\u0431\u043E\u0440 \u0441\u043C\u0430\u0439\u043B\u043E\u0432",
  "Option already exists": "\u0412\u0430\u0440\u0438\u0430\u043D\u0442 \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442",
  Options: "\u0412\u0430\u0440\u0438\u0430\u043D\u0442\u044B",
  "People matching": "\u0421\u043E\u0432\u043F\u0430\u0434\u0430\u044E\u0449\u0438\u0435 \u043B\u044E\u0434\u0438",
  Pin: "\u0417\u0430\u043A\u0440\u0435\u043F\u0438\u0442\u044C",
  "Pinned by": "\u0417\u0430\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u043E",
  Poll: "\u041E\u043F\u0440\u043E\u0441",
  "Poll comments": "\u041A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0438 \u043A \u043E\u043F\u0440\u043E\u0441\u0443",
  "Poll options": "\u041E\u043F\u0446\u0438\u0438 \u043E\u043F\u0440\u043E\u0441\u0430",
  "Poll results": "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u043E\u043F\u0440\u043E\u0441\u0430",
  Question: "\u0412\u043E\u043F\u0440\u043E\u0441",
  Quote: "\u0426\u0438\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
  "Recording format is not supported and cannot be reproduced": "\u0424\u043E\u0440\u043C\u0430\u0442 \u0437\u0430\u043F\u0438\u0441\u0438 \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F \u0438 \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u0432\u043E\u0441\u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D",
  Reply: "\u041E\u0442\u0432\u0435\u0442\u0438\u0442\u044C",
  "Reply to Message": "\u041E\u0442\u0432\u0435\u0442\u0438\u0442\u044C \u043D\u0430 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435",
  Search: "\u041F\u043E\u0438\u0441\u043A",
  "Searching...": "\u0418\u0449\u0435\u043C...",
  "See all options ({{count}})_few": "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u044B ({{count}})",
  "See all options ({{count}})_many": "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u044B ({{count}})",
  "See all options ({{count}})_one": "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u044B ({{count}})",
  "See all options ({{count}})_other": "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u044B ({{count}})",
  "Select one": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0434\u0438\u043D",
  "Select one or more": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u0434\u0438\u043D \u0438\u043B\u0438 \u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E",
  "Select up to {{count}}_few": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u043E {{count}}",
  "Select up to {{count}}_many": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u043E {{count}}",
  "Select up to {{count}}_one": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u043E {{count}}",
  "Select up to {{count}}_other": "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u043E {{count}}",
  Send: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C",
  "Send Anyway": "\u041C\u043D\u0435 \u0432\u0441\u0451 \u0440\u0430\u0432\u043D\u043E, \u043E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C",
  "Send message request failed": "\u041D\u0435 \u0443\u0434\u0430\u043B\u043E\u0441\u044C \u043E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C \u0437\u0430\u043F\u0440\u043E\u0441 \u043D\u0430 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0443 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "Sending...": "\u041E\u0442\u043F\u0440\u0430\u0432\u043A\u0430...",
  "Show all": "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0432\u0441\u0435",
  Shuffle: "\u041F\u0435\u0440\u0435\u043C\u0435\u0448\u0430\u0442\u044C",
  "Slow Mode ON": "\u041C\u0435\u0434\u043B\u0435\u043D\u043D\u044B\u0439 \u0440\u0435\u0436\u0438\u043C \u0432\u043A\u043B\u044E\u0447\u0435\u043D",
  "Some of the files will not be accepted": "\u041D\u0435\u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u0444\u0430\u0439\u043B\u044B \u043D\u0435 \u0431\u0443\u0434\u0443\u0442 \u043F\u0440\u0438\u043D\u044F\u0442\u044B",
  "Start typing to search": "\u041D\u0430\u0447\u043D\u0438\u0442\u0435 \u0432\u0432\u043E\u0434\u0438\u0442\u044C \u0434\u043B\u044F \u043F\u043E\u0438\u0441\u043A\u0430",
  Submit: "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C",
  "Suggest an option": "\u041F\u0440\u0435\u0434\u043B\u043E\u0436\u0438\u0442\u044C \u0432\u0430\u0440\u0438\u0430\u043D\u0442",
  "Thinking...": "\u0414\u0443\u043C\u0430\u044E...",
  "This message did not meet our content guidelines": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u043D\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043F\u0440\u0430\u0432\u0438\u043B\u0430\u043C",
  "This message was deleted...": "\u0421\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0431\u044B\u043B\u043E \u0443\u0434\u0430\u043B\u0435\u043D\u043E...",
  Thread: "\u0412\u0435\u0442\u043A\u0430",
  "To start recording, allow the camera access in your browser": "\u0414\u043B\u044F \u043D\u0430\u0447\u0430\u043B\u0430 \u0437\u0430\u043F\u0438\u0441\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u0435 \u0434\u043E\u0441\u0442\u0443\u043F \u043A \u043A\u0430\u043C\u0435\u0440\u0435 \u0432 \u0432\u0430\u0448\u0435\u043C \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435",
  "To start recording, allow the microphone access in your browser": "\u0414\u043B\u044F \u043D\u0430\u0447\u0430\u043B\u0430 \u0437\u0430\u043F\u0438\u0441\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u0435 \u0434\u043E\u0441\u0442\u0443\u043F \u043A \u043C\u0438\u043A\u0440\u043E\u0444\u043E\u043D\u0443 \u0432 \u0432\u0430\u0448\u0435\u043C \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435",
  "Type a number from 2 to 10": "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043B\u043E \u043E\u0442 2 \u0434\u043E 10",
  "Type your message": "\u0412\u0430\u0448\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435",
  Unarchive: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0438\u0437 \u0430\u0440\u0445\u0438\u0432\u0430",
  Unmute: "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F",
  Unpin: "\u041E\u0442\u043A\u0440\u0435\u043F\u0438\u0442\u044C",
  "Unread messages": "\u041D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "Unsupported attachment": "\u041D\u0435\u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043C\u043E\u0435 \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u0435",
  "Update your comment": "\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u0435 \u0432\u0430\u0448 \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439",
  'Upload type: "{{ type }}" is not allowed': '\u0422\u0438\u043F \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0438: "{{ type }}" \u043D\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D',
  "User uploaded content": "\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043B \u043A\u043E\u043D\u0442\u0435\u043D\u0442",
  "View results": "\u041F\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B",
  "View {{count}} comments_few": "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C {{count}} \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0435\u0432",
  "View {{count}} comments_many": "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C {{count}} \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0435\u0432",
  "View {{count}} comments_one": "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C {{count}} \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0439",
  "View {{count}} comments_other": "\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C {{count}} \u043A\u043E\u043C\u043C\u0435\u043D\u0442\u0430\u0440\u0438\u0435\u0432",
  "Voice message": "\u0413\u043E\u043B\u043E\u0441\u043E\u0432\u043E\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435",
  "Vote ended": "\u0413\u043E\u043B\u043E\u0441\u043E\u0432\u0430\u043D\u0438\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043E",
  "Wait until all attachments have uploaded": "\u041F\u043E\u0434\u043E\u0436\u0434\u0438\u0442\u0435, \u043F\u043E\u043A\u0430 \u0432\u0441\u0435 \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u044F\u0442\u0441\u044F",
  You: "\u0412\u044B",
  "You have no channels currently": "\u0423 \u0432\u0430\u0441 \u043D\u0435\u0442 \u043A\u0430\u043D\u0430\u043B\u043E\u0432 \u0432 \u0434\u0430\u043D\u043D\u044B\u0439 \u043C\u043E\u043C\u0435\u043D\u0442",
  "You've reached the maximum number of files": "\u0412\u044B \u0434\u043E\u0441\u0442\u0438\u0433\u043B\u0438 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0444\u0430\u0439\u043B\u043E\u0432",
  "aria/Attachment": "\u0412\u043B\u043E\u0436\u0435\u043D\u0438\u0435",
  "aria/Cancel Reply": "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u043E\u0442\u0432\u0435\u0442",
  "aria/Cancel upload": "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443",
  "aria/Channel list": "\u0421\u043F\u0438\u0441\u043E\u043A \u043A\u0430\u043D\u0430\u043B\u043E\u0432",
  "aria/Channel search results": "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u043F\u043E\u0438\u0441\u043A\u0430 \u043F\u043E \u043A\u0430\u043D\u0430\u043B\u0430\u043C",
  "aria/Close thread": "\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u0442\u0435\u043C\u0443",
  "aria/Download attachment": "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u0435",
  "aria/Emoji picker": "\u0412\u044B\u0431\u043E\u0440 \u044D\u043C\u043E\u0434\u0437\u0438",
  "aria/File input": "\u0412\u0432\u043E\u0434 \u0444\u0430\u0439\u043B\u0430",
  "aria/File upload": "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0444\u0430\u0439\u043B\u0430",
  "aria/Image input": "\u0412\u0432\u043E\u0434 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F",
  "aria/Load More Channels": "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0431\u043E\u043B\u044C\u0448\u0435 \u043A\u0430\u043D\u0430\u043B\u043E\u0432",
  "aria/Menu": "\u041C\u0435\u043D\u044E",
  "aria/Message Options": "\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "aria/Open Attachment Selector": "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0432\u044B\u0431\u043E\u0440 \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u0439",
  "aria/Open Message Actions Menu": "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u043C\u0435\u043D\u044E \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u0441 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F\u043C\u0438",
  "aria/Open Reaction Selector": "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u0435\u043B\u0435\u043A\u0442\u043E\u0440 \u0440\u0435\u0430\u043A\u0446\u0438\u0439",
  "aria/Open Thread": "\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0442\u0435\u043C\u0443",
  "aria/Reaction list": "\u0421\u043F\u0438\u0441\u043E\u043A \u0440\u0435\u0430\u043A\u0446\u0438\u0439",
  "aria/Remove attachment": "\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0432\u043B\u043E\u0436\u0435\u043D\u0438\u0435",
  "aria/Retry upload": "\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u044C \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0443",
  "aria/Search results": "\u0420\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u044B \u043F\u043E\u0438\u0441\u043A\u0430",
  "aria/Search results header filter button": "\u041A\u043D\u043E\u043F\u043A\u0430 \u0444\u0438\u043B\u044C\u0442\u0440\u0430 \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432 \u043F\u043E\u0438\u0441\u043A\u0430",
  "aria/Send": "\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C",
  "aria/Stop AI Generation": "\u041E\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0433\u0435\u043D\u0435\u0440\u0430\u0446\u0438\u044E \u0418\u0418",
  "ban-command-args": "[@\u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F] [\u0442\u0435\u043A\u0441\u0442]",
  "ban-command-description": "\u0417\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F",
  "giphy-command-args": "[\u0442\u0435\u043A\u0441\u0442]",
  "giphy-command-description": "\u041E\u043F\u0443\u0431\u043B\u0438\u043A\u043E\u0432\u0430\u0442\u044C \u0441\u043B\u0443\u0447\u0430\u0439\u043D\u0443\u044E GIF-\u0430\u043D\u0438\u043C\u0430\u0446\u0438\u044E \u0432 \u043A\u0430\u043D\u0430\u043B\u0435",
  live: "\u0412 \u043F\u0440\u044F\u043C\u043E\u043C \u044D\u0444\u0438\u0440\u0435",
  "mute-command-args": "[@\u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F]",
  "mute-command-description": "\u0412\u044B\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043C\u0438\u043A\u0440\u043E\u0444\u043E\u043D \u0443 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F",
  replyCount_few: "{{ count }} \u043E\u0442\u0432\u0435\u0442\u043E\u0432",
  replyCount_many: "{{ count }} \u043E\u0442\u0432\u0435\u0442\u043E\u0432",
  replyCount_one: "1 \u043E\u0442\u0432\u0435\u0442",
  replyCount_other: "{{ count }} \u043E\u0442\u0432\u0435\u0442\u043E\u0432",
  "search-results-header-filter-source-button-label--channels": "\u043A\u0430\u043D\u0430\u043B\u044B",
  "search-results-header-filter-source-button-label--messages": "\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  "search-results-header-filter-source-button-label--users": "\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438",
  searchResultsCount_few: "{{ count }} \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430",
  searchResultsCount_many: "{{ count }} \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432",
  searchResultsCount_one: "1 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442",
  searchResultsCount_other: "{{ count }} \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u043E\u0432",
  "this content could not be displayed": "\u042D\u0442\u043E\u0442 \u043A\u043E\u043D\u0442\u0435\u043D\u0442 \u043D\u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D \u0432 \u0434\u0430\u043D\u043D\u044B\u0439 \u043C\u043E\u043C\u0435\u043D\u0442",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@\u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F]",
  "unban-command-description": "\u0420\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F",
  "unmute-command-args": "[@\u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F]",
  "unmute-command-description": "\u0412\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043C\u0438\u043A\u0440\u043E\u0444\u043E\u043D \u0443 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F",
  unreadMessagesSeparatorText_few: "1 \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F",
  unreadMessagesSeparatorText_many: "{{count}} \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439",
  unreadMessagesSeparatorText_one: "1 \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0435 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435",
  unreadMessagesSeparatorText_other: "{{count}} \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} \u0438 {{ moreCount }} \u0435\u0449\u0435",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} \u0438 {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} \u0438 {{ secondUser }}",
  "{{ imageCount }} more": "\u0415\u0449\u0451 {{ imageCount }}",
  "{{ memberCount }} members": "{{ memberCount }} \u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u043E\u0432",
  "{{ user }} has been muted": "\u0412\u044B \u043E\u0442\u043F\u0438\u0441\u0430\u043B\u0438\u0441\u044C \u043E\u0442 \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439 \u043E\u0442 {{ user }}",
  "{{ user }} has been unmuted": "\u0423\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F \u043E\u0442 {{ user }} \u0431\u044B\u043B\u0438 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u044B",
  "{{ user }} is typing...": "{{ user }} \u043F\u0435\u0447\u0430\u0442\u0430\u0435\u0442...",
  "{{ users }} and more are typing...": "{{ users }} \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043F\u0435\u0447\u0430\u0442\u0430\u044E\u0442...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} \u0438 {{ user }} \u043F\u0435\u0447\u0430\u0442\u0430\u044E\u0442...",
  "{{ watcherCount }} online": "{{ watcherCount }} \u0432 \u0441\u0435\u0442\u0438",
  "{{count}} unread_few": "{{count}} \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0445",
  "{{count}} unread_many": "{{count}} \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0445",
  "{{count}} unread_one": "{{count}} \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0435",
  "{{count}} unread_other": "{{count}} \u043D\u0435\u043F\u0440\u043E\u0447\u0438\u0442\u0430\u043D\u043D\u044B\u0445",
  "{{count}} votes_few": "{{count}} \u0433\u043E\u043B\u043E\u0441\u0430",
  "{{count}} votes_many": "{{count}} \u0433\u043E\u043B\u043E\u0441\u043E\u0432",
  "{{count}} votes_one": "{{count}} \u0433\u043E\u043B\u043E\u0441",
  "{{count}} votes_other": "{{count}} \u0433\u043E\u043B\u043E\u0441\u043E\u0432",
  "\u{1F3D9} Attachment...": "\u{1F3D9} \u0412\u043B\u043E\u0436\u0435\u043D\u0438\u0435...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} \u0441\u043E\u0437\u0434\u0430\u043B(\u0430): {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} \u043F\u0440\u043E\u0433\u043E\u043B\u043E\u0441\u043E\u0432\u0430\u043B(\u0430): {{pollOptionText}}"
};

// src/i18n/tr.json
var tr_default = {
  "Add a comment": "Yorum ekle",
  "Add an option": "Bir se\xE7enek ekle",
  "All results loaded": "T\xFCm sonu\xE7lar y\xFCklendi",
  "Allow access to camera": "Kameraya eri\u015Fime izin ver",
  "Allow access to microphone": "Mikrofona eri\u015Fime izin ver",
  "Allow comments": "Yorumlara izin ver",
  "Allow option suggestion": "Se\xE7enek \xF6nerisine izin ver",
  "An error has occurred during recording": "Kay\u0131t s\u0131ras\u0131nda bir hata olu\u015Ftu",
  "An error has occurred during the recording processing": "Kay\u0131t i\u015Flemi s\u0131ras\u0131nda bir hata olu\u015Ftu",
  Anonymous: "Anonim",
  "Anonymous poll": "Anonim anket",
  Archive: "Ar\u015Fivle",
  "Ask a question": "Bir soru sor",
  "Attach files": "Dosya ekle",
  Cancel: "\u0130ptal",
  "Cannot seek in the recording": "Kay\u0131tta arama yap\u0131lam\u0131yor",
  "Channel Missing": "Kanal bulunam\u0131yor",
  Close: "Kapat",
  "Close emoji picker": "Emoji se\xE7iciyi kapat",
  "Commands matching": "E\u015Fle\u015Fen komutlar",
  "Connection failure, reconnecting now...": "Ba\u011Flant\u0131 hatas\u0131, tekrar ba\u011Flan\u0131l\u0131yor...",
  Create: "Olu\u015Ftur",
  "Create poll": "Anket olu\u015Ftur",
  Delete: "Sil",
  Delivered: "\u0130letildi",
  "Download attachment {{ name }}": "Ek {{ name }}'i indir",
  "Drag your files here": "Dosyalar\u0131n\u0131z\u0131 buraya s\xFCr\xFCkleyin",
  "Drag your files here to add to your post": "G\xF6nderinize eklemek i\xE7in dosyalar\u0131n\u0131z\u0131 buraya s\xFCr\xFCkleyin",
  "Edit Message": "Mesaj\u0131 D\xFCzenle",
  "Edit message request failed": "Mesaj d\xFCzenleme iste\u011Fi ba\u015Far\u0131s\u0131z oldu",
  Edited: "D\xFCzenlendi",
  "Emoji matching": "Emoji e\u015Fle\u015Ftirme",
  "Empty message...": "Bo\u015F mesaj...",
  End: "Son",
  "End vote": "Oyu bitir",
  "Error adding flag": "Bayrak eklenirken hata olu\u015Ftu",
  "Error connecting to chat, refresh the page to try again.": "Ba\u011Flant\u0131 hatas\u0131, sayfay\u0131 yenileyip tekrar deneyin.",
  "Error deleting message": "Mesaj silinirken hata olu\u015Ftu",
  "Error fetching reactions": "Reaksiyonlar al\u0131n\u0131rken hata olu\u015Ftu",
  "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages.": "Mesaj\u0131 okunmam\u0131\u015F olarak i\u015Faretleme hatas\u0131. En yeni 100 kanal mesaj\u0131ndan daha eski okunmam\u0131\u015F mesajlar\u0131 i\u015Faretleme yap\u0131lamaz.",
  "Error muting a user ...": "Kullan\u0131c\u0131y\u0131 sessize al\u0131rken hata olu\u015Ftu ...",
  "Error pinning message": "Mesaj sabitlenirken hata olu\u015Ftu",
  "Error removing message pin": "Mesaj PIN'i kald\u0131r\u0131l\u0131rken hata olu\u015Ftu",
  "Error reproducing the recording": "Kayd\u0131 yeniden \xFCretme hatas\u0131",
  "Error starting recording": "Kay\u0131t ba\u015Flat\u0131l\u0131rken hata olu\u015Ftu",
  "Error unmuting a user ...": "Kullan\u0131c\u0131n\u0131n sesini a\xE7arken hata olu\u015Ftu ...",
  "Error uploading attachment": "Ek y\xFCklenirken hata olu\u015Ftu",
  "Error uploading file": "Dosya y\xFCklenirken hata olu\u015Ftu",
  "Error uploading image": "Resmi y\xFCklerken hata",
  "Error \xB7 Unsent": "Hata \xB7 G\xF6nderilemedi",
  "Error: {{ errorMessage }}": "Hata: {{ errorMessage }}",
  "Failed to jump to the first unread message": "\u0130lk okunmam\u0131\u015F mesaja atlamada hata olu\u015Ftu",
  "Failed to mark channel as read": "Kanal\u0131 okundu olarak i\u015Faretleme ba\u015Far\u0131s\u0131z oldu",
  "Failed to play the recording": "Kay\u0131t oynat\u0131lamad\u0131",
  File: "Dosya",
  "File is too large: {{ size }}, maximum upload size is {{ limit }}": "Dosya \xE7ok b\xFCy\xFCk: {{ size }}, maksimum y\xFCkleme boyutu {{ limit }}",
  Flag: "Bayrak",
  "Generating...": "Olu\u015Fturuluyor...",
  "Latest Messages": "Son Mesajlar",
  "Load more": "Daha fazla y\xFCkle",
  "Mark as unread": "Okunmam\u0131\u015F olarak i\u015Faretle",
  "Maximum number of votes (from 2 to 10)": "Maksimum oy say\u0131s\u0131 (2 ile 10 aras\u0131)",
  Menu: "Men\xFC",
  "Message Failed \xB7 Click to try again": "Mesaj Ba\u015Far\u0131s\u0131z \xB7 Tekrar denemek i\xE7in t\u0131klay\u0131n",
  "Message Failed \xB7 Unauthorized": "Mesaj Ba\u015Far\u0131s\u0131z \xB7 Yetkisiz",
  "Message deleted": "Mesaj silindi",
  "Message has been successfully flagged": "Mesaj ba\u015Far\u0131yla bayrakland\u0131",
  "Message pinned": "Mesaj sabitlendi",
  "Message was blocked by moderation policies": "Mesaj moderasyon politikalar\u0131 taraf\u0131ndan engellendi",
  "Messages have been marked unread.": "Mesajlar okunmam\u0131\u015F olarak i\u015Faretlendi.",
  "Missing permissions to upload the attachment": "Ek y\xFCklemek i\xE7in izinler eksik",
  "Multiple answers": "\xC7oklu cevaplar",
  Mute: "Sessiz",
  New: "Yeni",
  "New Messages!": "Yeni Mesajlar!",
  "No chats here yet\u2026": "Hen\xFCz burada sohbet yok...",
  "No results found": "Sonu\xE7 bulunamad\u0131",
  "Nobody will be able to vote in this poll anymore.": "Art\u0131k bu ankette kimse oy kullanamayacak.",
  "Nothing yet...": "\u015Eimdilik hi\xE7bir \u015Fey...",
  Ok: "Tamam",
  "Open emoji picker": "Emoji klavyesini a\xE7",
  "Option already exists": "Se\xE7enek zaten mevcut",
  Options: "Se\xE7enekler",
  "People matching": "E\u015Fle\u015Fen ki\u015Filer",
  Pin: "Sabitle",
  "Pinned by": "Sabitleyen",
  Poll: "Anket",
  "Poll comments": "Anket yorumlar\u0131",
  "Poll options": "Anket se\xE7enekleri",
  "Poll results": "Anket sonu\xE7lar\u0131",
  Question: "Soru",
  Quote: "Al\u0131nt\u0131",
  "Recording format is not supported and cannot be reproduced": "Kay\u0131t format\u0131 desteklenmiyor ve \xE7o\u011Falt\u0131lam\u0131yor",
  Reply: "Cevapla",
  "Reply to Message": "Mesaja Cevapla",
  Search: "Arama",
  "Searching...": "Aran\u0131yor...",
  "See all options ({{count}})_one": "T\xFCm se\xE7enekleri g\xF6ster ({{count}})",
  "See all options ({{count}})_other": "T\xFCm se\xE7enekleri g\xF6ster ({{count}})",
  "Select one": "Birini se\xE7in",
  "Select one or more": "Bir veya daha fazlas\u0131n\u0131 se\xE7in",
  "Select up to {{count}}_one": "En fazla {{count}}'yi se\xE7in",
  "Select up to {{count}}_other": "En fazla {{count}}'yi se\xE7in",
  Send: "G\xF6nder",
  "Send Anyway": "Yine de g\xF6nder",
  "Send message request failed": "Mesaj g\xF6nderme iste\u011Fi ba\u015Far\u0131s\u0131z oldu",
  "Sending...": "G\xF6nderiliyor...",
  "Show all": "T\xFCm\xFCn\xFC g\xF6ster",
  Shuffle: "Kar\u0131\u015Ft\u0131r",
  "Slow Mode ON": "Yava\u015F Mod A\xE7\u0131k",
  "Some of the files will not be accepted": "Baz\u0131 dosyalar kabul edilmeyecek",
  "Start typing to search": "Aramak i\xE7in yazmaya ba\u015Flay\u0131n",
  Submit: "G\xF6nder",
  "Suggest an option": "Bir se\xE7enek \xF6nerin",
  "Thinking...": "D\xFC\u015F\xFCn\xFCyor...",
  "This message did not meet our content guidelines": "Bu mesaj i\xE7erik y\xF6nergelerimize uygun de\u011Fil",
  "This message was deleted...": "Bu mesaj silindi...",
  Thread: "Konu",
  "To start recording, allow the camera access in your browser": "Kay\u0131t yapmaya ba\u015Flamak i\xE7in taray\u0131c\u0131n\u0131zda kameraya eri\u015Fime izin verin",
  "To start recording, allow the microphone access in your browser": "Kay\u0131t yapmaya ba\u015Flamak i\xE7in taray\u0131c\u0131n\u0131zda mikrofona eri\u015Fime izin verin",
  "Type a number from 2 to 10": "2 ile 10 aras\u0131nda bir say\u0131 yaz\u0131n",
  "Type your message": "Mesaj\u0131n\u0131z\u0131 yaz\u0131n",
  Unarchive: "Ar\u015Fivden \xE7\u0131kar",
  Unmute: "Sesini a\xE7",
  Unpin: "Sabitlemeyi kald\u0131r",
  "Unread messages": "Okunmam\u0131\u015F mesajlar",
  "Unsupported attachment": "Desteklenmeyen ek",
  "Update your comment": "Yorumunuzu g\xFCncelleyin",
  'Upload type: "{{ type }}" is not allowed': 'Y\xFCkleme t\xFCr\xFC: "{{ type }}" izin verilmez',
  "User uploaded content": "Kullan\u0131c\u0131 taraf\u0131ndan y\xFCklenen i\xE7erik",
  "View results": "Sonu\xE7lar\u0131 g\xF6r\xFCnt\xFCle",
  "View {{count}} comments_one": "{{count}} yorumu g\xF6r\xFCnt\xFCle",
  "View {{count}} comments_other": "{{count}} yorumu g\xF6r\xFCnt\xFCle",
  "Voice message": "Sesli mesaj",
  "Vote ended": "Oylama sona erdi",
  "Wait until all attachments have uploaded": "T\xFCm ekler y\xFCklenene kadar bekleyin",
  You: "Sen",
  "You have no channels currently": "Hen\xFCz kanal\u0131n\u0131z yok",
  "You've reached the maximum number of files": "Maksimum dosya say\u0131s\u0131na ula\u015Ft\u0131n\u0131z",
  "aria/Attachment": "Ek",
  "aria/Cancel Reply": "Cevab\u0131 \u0130ptal Et",
  "aria/Cancel upload": "Y\xFCklemeyi \u0130ptal Et",
  "aria/Channel list": "Kanal listesi",
  "aria/Channel search results": "Kanal arama sonu\xE7lar\u0131",
  "aria/Close thread": "Konuyu kapat",
  "aria/Download attachment": "Ek indir",
  "aria/Emoji picker": "Emoji se\xE7ici",
  "aria/File input": "Dosya giri\u015Fi",
  "aria/File upload": "Dosya y\xFCkleme",
  "aria/Image input": "Resim giri\u015Fi",
  "aria/Load More Channels": "Daha Fazla Kanal Y\xFCkle",
  "aria/Menu": "Men\xFC",
  "aria/Message Options": "Mesaj Se\xE7enekleri",
  "aria/Open Attachment Selector": "Ek Se\xE7iciyi A\xE7",
  "aria/Open Message Actions Menu": "Mesaj \u0130\u015Flemleri Men\xFCs\xFCn\xFC A\xE7",
  "aria/Open Reaction Selector": "Tepki Se\xE7iciyi A\xE7",
  "aria/Open Thread": "Konuyu A\xE7",
  "aria/Reaction list": "Tepki listesi",
  "aria/Remove attachment": "Eki kald\u0131r",
  "aria/Retry upload": "Y\xFCklemeyi Tekrar Dene",
  "aria/Search results": "Arama sonu\xE7lar\u0131",
  "aria/Search results header filter button": "Arama sonu\xE7lar\u0131 ba\u015Fl\u0131k filtre d\xFC\u011Fmesi",
  "aria/Send": "G\xF6nder",
  "aria/Stop AI Generation": "Yapay Zeka \xDCretimini Durdur",
  "ban-command-args": "[@kullan\u0131c\u0131ad\u0131] [metin]",
  "ban-command-description": "Bir kullan\u0131c\u0131y\u0131 yasakla",
  "giphy-command-args": "[metin]",
  "giphy-command-description": "Rastgele bir gif'i kanala g\xF6nder",
  live: "canl\u0131",
  "mute-command-args": "[@kullan\u0131c\u0131ad\u0131]",
  "mute-command-description": "Bir kullan\u0131c\u0131n\u0131n sesini kapat",
  replyCount_one: "1 cevap",
  replyCount_other: "{{ count }} cevap",
  "search-results-header-filter-source-button-label--channels": "kanallar",
  "search-results-header-filter-source-button-label--messages": "mesajlar",
  "search-results-header-filter-source-button-label--users": "kullan\u0131c\u0131lar",
  searchResultsCount_one: "1 sonu\xE7",
  searchResultsCount_other: "{{ count }} sonu\xE7",
  "this content could not be displayed": "bu i\xE7erik g\xF6sterilemiyor",
  "timestamp/DateSeparator": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/MessageTimestamp": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/PollVote": "{{ timestamp | timestampFormatter(format: MMM D [at] HH:mm) }}",
  "timestamp/PollVoteTooltip": "{{ timestamp | timestampFormatter(calendar: true) }}",
  "timestamp/SystemMessage": "{{ timestamp | timestampFormatter(format: dddd L) }}",
  "unban-command-args": "[@kullan\u0131c\u0131ad\u0131]",
  "unban-command-description": "Bir kullan\u0131c\u0131n\u0131n yasa\u011F\u0131n\u0131 kald\u0131r",
  "unmute-command-args": "[@kullan\u0131c\u0131ad\u0131]",
  "unmute-command-description": "Bir kullan\u0131c\u0131n\u0131n sesini a\xE7",
  unreadMessagesSeparatorText_one: "1 okunmam\u0131\u015F mesaj",
  unreadMessagesSeparatorText_other: "{{count}} okunmam\u0131\u015F mesaj",
  "{{ commaSeparatedUsers }} and {{ moreCount }} more": "{{ commaSeparatedUsers }} ve {{ moreCount }} daha",
  "{{ commaSeparatedUsers }}, and {{ lastUser }}": "{{ commaSeparatedUsers }} ve {{ lastUser }}",
  "{{ firstUser }} and {{ secondUser }}": "{{ firstUser }} ve {{ secondUser }}",
  "{{ imageCount }} more": "{{ imageCount }} adet daha",
  "{{ memberCount }} members": "{{ memberCount }} \xFCye",
  "{{ user }} has been muted": "{{ user }} sessize al\u0131nd\u0131",
  "{{ user }} has been unmuted": "{{ user }} sesi a\xE7\u0131ld\u0131",
  "{{ user }} is typing...": "{{ user }} yaz\u0131yor...",
  "{{ users }} and more are typing...": "{{ users }} ve di\u011Ferleri yaz\u0131yor...",
  "{{ users }} and {{ user }} are typing...": "{{ users }} ve {{ user }} yaz\u0131yor...",
  "{{ watcherCount }} online": "{{ watcherCount }} \xE7evrimi\xE7i",
  "{{count}} unread_one": "{{count}} okunmam\u0131\u015F",
  "{{count}} unread_other": "{{count}} okunmam\u0131\u015F",
  "{{count}} votes_one": "{{count}} oy",
  "{{count}} votes_other": "{{count}} oy",
  "\u{1F3D9} Attachment...": "\u{1F3D9} Ek...",
  "\u{1F4CA} {{createdBy}} created: {{ pollName}}": "\u{1F4CA} {{createdBy}} olu\u015Fturdu: {{ pollName}}",
  "\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}": "\u{1F4CA} {{votedBy}} oy verdi: {{pollOptionText}}"
};

// src/i18n/Streami18n.ts
var import_i18next = __toESM(require("i18next"));
var import_dayjs3 = __toESM(require("dayjs"));
var import_calendar2 = __toESM(require("dayjs/plugin/calendar"));
var import_updateLocale = __toESM(require("dayjs/plugin/updateLocale"));
var import_localizedFormat2 = __toESM(require("dayjs/plugin/localizedFormat"));
var import_localeData = __toESM(require("dayjs/plugin/localeData"));
var import_relativeTime = __toESM(require("dayjs/plugin/relativeTime"));
var import_utc = __toESM(require("dayjs/plugin/utc"));
var import_timezone = __toESM(require("dayjs/plugin/timezone"));
var import_de2 = require("dayjs/locale/de");
var import_es2 = require("dayjs/locale/es");
var import_fr2 = require("dayjs/locale/fr");
var import_hi2 = require("dayjs/locale/hi");
var import_it2 = require("dayjs/locale/it");
var import_ja2 = require("dayjs/locale/ja");
var import_ko2 = require("dayjs/locale/ko");
var import_nl2 = require("dayjs/locale/nl");
var import_pt2 = require("dayjs/locale/pt");
var import_ru2 = require("dayjs/locale/ru");
var import_tr2 = require("dayjs/locale/tr");
var import_en2 = require("dayjs/locale/en");
var defaultNS = "translation";
var defaultLng = "en";
import_dayjs3.default.extend(import_updateLocale.default);
import_dayjs3.default.extend(import_utc.default);
import_dayjs3.default.extend(import_timezone.default);
import_dayjs3.default.updateLocale("de", {
  calendar: {
    lastDay: "[gestern um] LT",
    lastWeek: "[letzten] dddd [um] LT",
    nextDay: "[morgen um] LT",
    nextWeek: "dddd [um] LT",
    sameDay: "[heute um] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("es", {
  calendar: {
    lastDay: "[ayer a las] LT",
    lastWeek: "[pasado] dddd [a] LT",
    nextDay: "[ma\xF1ana a] LT",
    nextWeek: "dddd [a] LT",
    sameDay: "[hoy a las] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("fr", {
  calendar: {
    lastDay: "[Hier \xE0] LT",
    lastWeek: "dddd [dernier \xE0] LT",
    nextDay: "[Demain \xE0] LT",
    nextWeek: "dddd [\xE0] LT",
    sameDay: "[Aujourd\u2019hui \xE0] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("hi", {
  calendar: {
    lastDay: "[\u0915\u0932] LT",
    lastWeek: "[\u092A\u093F\u091B\u0932\u0947] dddd, LT",
    nextDay: "[\u0915\u0932] LT",
    nextWeek: "dddd, LT",
    sameDay: "[\u0906\u091C] LT",
    sameElse: "L"
  },
  // Hindi notation for meridiems are quite fuzzy in practice. While there exists
  // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
  meridiem(hour) {
    if (hour < 4) {
      return "\u0930\u093E\u0924";
    } else if (hour < 10) {
      return "\u0938\u0941\u092C\u0939";
    } else if (hour < 17) {
      return "\u0926\u094B\u092A\u0939\u0930";
    } else if (hour < 20) {
      return "\u0936\u093E\u092E";
    } else {
      return "\u0930\u093E\u0924";
    }
  },
  meridiemHour(hour, meridiem) {
    if (hour === 12) {
      hour = 0;
    }
    if (meridiem === "\u0930\u093E\u0924") {
      return hour < 4 ? hour : hour + 12;
    } else if (meridiem === "\u0938\u0941\u092C\u0939") {
      return hour;
    } else if (meridiem === "\u0926\u094B\u092A\u0939\u0930") {
      return hour >= 10 ? hour : hour + 12;
    } else if (meridiem === "\u0936\u093E\u092E") {
      return hour + 12;
    }
    return hour;
  },
  meridiemParse: /रात|सुबह|दोपहर|शाम/
});
import_dayjs3.default.updateLocale("it", {
  calendar: {
    lastDay: "[Ieri alle] LT",
    lastWeek: "[lo scorso] dddd [alle] LT",
    nextDay: "[Domani alle] LT",
    nextWeek: "dddd [alle] LT",
    sameDay: "[Oggi alle] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ja", {
  calendar: {
    lastDay: "[\u6628\u65E5] LT",
    lastWeek: "dddd LT",
    nextDay: "[\u660E\u65E5] LT",
    nextWeek: "[\u6B21\u306E] dddd LT",
    sameDay: "[\u4ECA\u65E5] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ko", {
  calendar: {
    lastDay: "[\uC5B4\uC81C] LT",
    lastWeek: "[\uC9C0\uB09C] dddd LT",
    nextDay: "[\uB0B4\uC77C] LT",
    nextWeek: "dddd LT",
    sameDay: "[\uC624\uB298] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("nl", {
  calendar: {
    lastDay: "[gisteren om] LT",
    lastWeek: "[afgelopen] dddd [om] LT",
    nextDay: "[morgen om] LT",
    nextWeek: "dddd [om] LT",
    sameDay: "[vandaag om] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("pt", {
  calendar: {
    lastDay: "[ontem \xE0s] LT",
    lastWeek: "dddd [passada \xE0s] LT",
    nextDay: "[amanh\xE3 \xE0s] LT",
    nextWeek: "dddd [\xE0s] LT",
    sameDay: "[hoje \xE0s] LT",
    sameElse: "L"
  }
});
import_dayjs3.default.updateLocale("ru", {
  calendar: {
    lastDay: "[\u0412\u0447\u0435\u0440\u0430, \u0432] LT",
    nextDay: "[\u0417\u0430\u0432\u0442\u0440\u0430, \u0432] LT",
    sameDay: "[\u0421\u0435\u0433\u043E\u0434\u043D\u044F, \u0432] LT"
  }
});
import_dayjs3.default.updateLocale("tr", {
  calendar: {
    lastDay: "[d\xFCn] LT",
    lastWeek: "[ge\xE7en] dddd [saat] LT",
    nextDay: "[yar\u0131n saat] LT",
    nextWeek: "[gelecek] dddd [saat] LT",
    sameDay: "[bug\xFCn saat] LT",
    sameElse: "L"
  }
});
var en_locale = {
  formats: {},
  months: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ],
  relativeTime: {},
  weekdays: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
var isDayJs = (dateTimeParser) => dateTimeParser.extend !== void 0;
var supportsTz = (dateTimeParser) => dateTimeParser.tz !== void 0;
var defaultStreami18nOptions = {
  DateTimeParser: import_dayjs3.default,
  dayjsLocaleConfigForLanguage: null,
  debug: false,
  disableDateTimeTranslations: false,
  language: "en",
  logger: (message) => console.warn(message)
};
var Streami18n = class {
  /**
   * Constructor accepts following options:
   *  - language (String) default: 'en'
   *    Language code e.g., en, tr
   *
   *  - translationsForLanguage (object)
   *    Translations object. Please check src/i18n/en.json for example.
   *
   *  - disableDateTimeTranslations (boolean) default: false
   *    Disable translations for date-times
   *
   *  - debug (boolean) default: false
   *    Enable debug mode in internal i18n class
   *
   *  - logger (function) default: () => {}
   *    Logger function to log warnings/errors from this class
   *
   *  - dayjsLocaleConfigForLanguage (object) default: 'enConfig'
   *    [Config object](https://momentjs.com/docs/#/i18n/changing-locale/) for internal moment object,
   *    corresponding to language (param)
   *
   *  - DateTimeParser (function) Moment or Dayjs instance/function.
   *    Make sure to load all the required locales in this Moment or Dayjs instance that you will be provide to Streami18n
   *
   * @param {*} options
   */
  constructor(options = {}) {
    this.i18nInstance = import_i18next.default.createInstance();
    this.Dayjs = null;
    this.setLanguageCallback = () => null;
    this.initialized = false;
    this.t = defaultTranslatorFunction;
    this.translations = {
      de: { [defaultNS]: de_default },
      en: { [defaultNS]: en_default },
      es: { [defaultNS]: es_default },
      fr: { [defaultNS]: fr_default },
      hi: { [defaultNS]: hi_default },
      it: { [defaultNS]: it_default },
      ja: { [defaultNS]: ja_default },
      ko: { [defaultNS]: ko_default },
      nl: { [defaultNS]: nl_default },
      pt: { [defaultNS]: pt_default },
      ru: { [defaultNS]: ru_default },
      tr: { [defaultNS]: tr_default }
    };
    /**
     * dayjs.defineLanguage('nl') also changes the global locale. We don't want to do that
     * when user calls registerTranslation() function. So instead we will store the locale configs
     * given to registerTranslation() function in `dayjsLocales` object, and register the required locale
     * with moment, when setLanguage is called.
     * */
    this.dayjsLocales = {};
    this.formatters = predefinedFormatters;
    this.localeExists = (language) => {
      if (this.isCustomDateTimeParser) return true;
      return Object.keys(import_dayjs3.default.Ls).indexOf(language) > -1;
    };
    this.validateCurrentLanguage = () => {
      const availableLanguages = Object.keys(this.translations);
      if (availableLanguages.indexOf(this.currentLanguage) === -1) {
        this.logger(
          `Streami18n: '${this.currentLanguage}' language is not registered. Please make sure to call streami18n.registerTranslation('${this.currentLanguage}', {...}) or use one the built-in supported languages - ${this.getAvailableLanguages()}`
        );
        this.currentLanguage = defaultLng;
      }
    };
    /** Returns an instance of i18next used within this class instance */
    this.geti18Instance = () => this.i18nInstance;
    /** Returns list of available languages. */
    this.getAvailableLanguages = () => Object.keys(this.translations);
    /** Returns all the translation dictionary for all inbuilt-languages */
    this.getTranslations = () => this.translations;
    const finalOptions = {
      ...defaultStreami18nOptions,
      ...options
    };
    this.logger = finalOptions.logger;
    this.currentLanguage = finalOptions.language;
    this.DateTimeParser = finalOptions.DateTimeParser;
    this.timezone = finalOptions.timezone;
    this.formatters = { ...predefinedFormatters, ...options?.formatters };
    try {
      if (this.DateTimeParser && isDayJs(this.DateTimeParser)) {
        this.DateTimeParser.extend(import_localizedFormat2.default);
        this.DateTimeParser.extend(import_calendar2.default);
        this.DateTimeParser.extend(import_localeData.default);
        this.DateTimeParser.extend(import_relativeTime.default);
      }
    } catch (error) {
      throw Error(
        `Streami18n: Looks like you wanted to provide Dayjs instance, but something went wrong while adding plugins ${error}`
      );
    }
    this.isCustomDateTimeParser = !!options.DateTimeParser;
    const translationsForLanguage = finalOptions.translationsForLanguage;
    if (translationsForLanguage) {
      this.translations[this.currentLanguage] = {
        [defaultNS]: this.translations[this.currentLanguage] && this.translations[this.currentLanguage][defaultNS] ? {
          ...this.translations[this.currentLanguage][defaultNS],
          ...translationsForLanguage
        } : translationsForLanguage
      };
    }
    if (!this.translations[this.currentLanguage]) {
      this.translations[this.currentLanguage] = {
        [defaultNS]: {}
      };
    }
    this.i18nextConfig = {
      debug: finalOptions.debug,
      fallbackLng: false,
      interpolation: { escapeValue: false, formatSeparator: "|" },
      keySeparator: false,
      lng: this.currentLanguage,
      nsSeparator: false
    };
    if (finalOptions.parseMissingKeyHandler) {
      this.i18nextConfig.parseMissingKeyHandler = finalOptions.parseMissingKeyHandler;
    }
    this.validateCurrentLanguage();
    const dayjsLocaleConfigForLanguage = finalOptions.dayjsLocaleConfigForLanguage;
    if (dayjsLocaleConfigForLanguage) {
      this.addOrUpdateLocale(this.currentLanguage, {
        ...dayjsLocaleConfigForLanguage
      });
    } else if (!this.localeExists(this.currentLanguage)) {
      this.logger(
        `Streami18n: Streami18n(...) - Locale config for ${this.currentLanguage} does not exist in momentjs.Please import the locale file using "import 'moment/locale/${this.currentLanguage}';" in your app or register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`
      );
    }
    this.tDateTimeParser = (timestamp) => {
      const language = finalOptions.disableDateTimeTranslations || !this.localeExists(this.currentLanguage) ? defaultLng : this.currentLanguage;
      if (isDayJs(this.DateTimeParser)) {
        return supportsTz(this.DateTimeParser) ? this.DateTimeParser(timestamp).tz(this.timezone).locale(language) : this.DateTimeParser(timestamp).locale(language);
      }
      if (supportsTz(this.DateTimeParser) && this.timezone) {
        return this.DateTimeParser(timestamp).tz(this.timezone).locale(language);
      }
      return this.DateTimeParser(timestamp).locale(language);
    };
  }
  /**
   * Initializes the i18next instance with configuration (which enables natural language as default keys)
   */
  async init() {
    this.validateCurrentLanguage();
    try {
      this.t = await this.i18nInstance.init({
        ...this.i18nextConfig,
        lng: this.currentLanguage,
        resources: this.translations
      });
      this.initialized = true;
      if (this.formatters) {
        Object.entries(this.formatters).forEach(([name2, formatterFactory]) => {
          if (!formatterFactory) return;
          this.i18nInstance.services.formatter?.add(name2, formatterFactory(this));
        });
      }
    } catch (error) {
      this.logger(`Something went wrong with init: ${JSON.stringify(error)}`);
    }
    return {
      t: this.t,
      tDateTimeParser: this.tDateTimeParser
    };
  }
  /**
   * Returns current version translator function.
   */
  async getTranslators() {
    if (!this.initialized) {
      if (this.dayjsLocales[this.currentLanguage]) {
        this.addOrUpdateLocale(
          this.currentLanguage,
          this.dayjsLocales[this.currentLanguage]
        );
      }
      return await this.init();
    } else {
      return {
        t: this.t,
        tDateTimeParser: this.tDateTimeParser
      };
    }
  }
  registerTranslation(language, translation, customDayjsLocale) {
    if (!translation) {
      this.logger(
        `Streami18n: registerTranslation(language, translation, customDayjsLocale) called without translation`
      );
      return;
    }
    if (!this.translations[language]) {
      this.translations[language] = { [defaultNS]: translation };
    } else {
      this.translations[language][defaultNS] = translation;
    }
    if (customDayjsLocale) {
      this.dayjsLocales[language] = { ...customDayjsLocale };
    } else if (!this.localeExists(language)) {
      this.logger(
        `Streami18n: registerTranslation(language, translation, customDayjsLocale) - Locale config for ${language} does not exist in Dayjs.Please import the locale file using "import 'dayjs/locale/${language}';" in your app or register the locale config with Streami18n using registerTranslation(language, translation, customDayjsLocale)`
      );
    }
    if (this.initialized) {
      this.i18nInstance.addResources(language, defaultNS, translation);
    }
  }
  addOrUpdateLocale(key, config) {
    if (this.localeExists(key)) {
      import_dayjs3.default.updateLocale(key, { ...config });
    } else {
      import_dayjs3.default.locale({ name: key, ...en_locale, ...config }, void 0, true);
    }
  }
  async setLanguage(language) {
    this.currentLanguage = language;
    if (!this.initialized) return;
    try {
      const t2 = await this.i18nInstance.changeLanguage(language);
      if (this.dayjsLocales[language]) {
        this.addOrUpdateLocale(
          this.currentLanguage,
          this.dayjsLocales[this.currentLanguage]
        );
      }
      this.setLanguageCallback(t2);
      return t2;
    } catch (error) {
      this.logger(`Failed to set language: ${JSON.stringify(error)}`);
      return this.t;
    }
  }
  registerSetLanguageCallback(callback) {
    this.setLanguageCallback = callback;
  }
};

// src/components/Channel/hooks/useCreateChannelStateContext.ts
var useCreateChannelStateContext = (value) => {
  const {
    acceptedFiles,
    channel,
    channelCapabilitiesArray = [],
    channelConfig,
    channelUnreadUiState,
    debounceURLEnrichmentMs,
    dragAndDropWindow,
    enrichURLForPreview,
    error,
    findURLFn,
    giphyVersion,
    hasMore,
    hasMoreNewer,
    highlightedMessageId,
    imageAttachmentSizeHandler,
    loading,
    loadingMore,
    maxNumberOfFiles,
    members,
    messages = [],
    multipleUploads,
    mutes,
    notifications,
    onLinkPreviewDismissed,
    pinnedMessages,
    quotedMessage,
    read = {},
    shouldGenerateVideoThumbnail,
    skipMessageDataMemoization,
    suppressAutoscroll,
    thread,
    threadHasMore,
    threadLoadingMore,
    threadMessages = [],
    videoAttachmentSizeHandler,
    watcher_count,
    watcherCount,
    watchers
  } = value;
  const channelId = channel.cid;
  const lastRead = channel.initialized && channel.lastRead()?.getTime();
  const membersLength = Object.keys(members || []).length;
  const notificationsLength = notifications.length;
  const readUsers = Object.values(read);
  const readUsersLength = readUsers.length;
  const readUsersLastReads = readUsers.map(({ last_read }) => last_read.toISOString()).join();
  const threadMessagesLength = threadMessages?.length;
  const channelCapabilities = {};
  channelCapabilitiesArray.forEach((capability) => {
    channelCapabilities[capability] = true;
  });
  const memoizedMessageData = skipMessageDataMemoization ? messages : messages.map(
    ({
      deleted_at,
      latest_reactions,
      pinned,
      reply_count,
      status,
      updated_at,
      user
    }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ""}${pinned}${reply_count}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ""}${user?.updated_at}`
  ).join();
  const memoizedThreadMessageData = threadMessages.map(
    ({ deleted_at, latest_reactions, pinned, status, updated_at, user }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ""}${pinned}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ""}${user?.updated_at}`
  ).join();
  const channelStateContext = (0, import_react61.useMemo)(
    () => ({
      acceptedFiles,
      channel,
      channelCapabilities,
      channelConfig,
      channelUnreadUiState,
      debounceURLEnrichmentMs,
      dragAndDropWindow,
      enrichURLForPreview,
      error,
      findURLFn,
      giphyVersion,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      imageAttachmentSizeHandler,
      loading,
      loadingMore,
      maxNumberOfFiles,
      members,
      messages,
      multipleUploads,
      mutes,
      notifications,
      onLinkPreviewDismissed,
      pinnedMessages,
      quotedMessage,
      read,
      shouldGenerateVideoThumbnail,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessages,
      videoAttachmentSizeHandler,
      watcher_count,
      watcherCount,
      watchers
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channel.data?.name,
      // otherwise ChannelHeader will not be updated
      channelId,
      channelUnreadUiState,
      debounceURLEnrichmentMs,
      enrichURLForPreview,
      error,
      findURLFn,
      hasMore,
      hasMoreNewer,
      highlightedMessageId,
      lastRead,
      loading,
      loadingMore,
      membersLength,
      memoizedMessageData,
      memoizedThreadMessageData,
      notificationsLength,
      onLinkPreviewDismissed,
      quotedMessage,
      readUsersLength,
      readUsersLastReads,
      shouldGenerateVideoThumbnail,
      skipMessageDataMemoization,
      suppressAutoscroll,
      thread,
      threadHasMore,
      threadLoadingMore,
      threadMessagesLength,
      watcherCount
    ]
  );
  return channelStateContext;
};

// src/components/Channel/hooks/useCreateTypingContext.ts
var import_react62 = require("react");
var useCreateTypingContext = (value) => {
  const { typing } = value;
  const typingValue = Object.keys(typing || {}).join();
  const typingContext = (0, import_react62.useMemo)(
    () => ({
      typing
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [typingValue]
  );
  return typingContext;
};

// src/components/Channel/hooks/useEditMessageHandler.ts
var useEditMessageHandler = (doUpdateMessageRequest) => {
  const { channel, client } = useChatContext("useEditMessageHandler");
  return (updatedMessage, options) => {
    if (doUpdateMessageRequest && channel) {
      return Promise.resolve(
        doUpdateMessageRequest(channel.cid, updatedMessage, options)
      );
    }
    return client.updateMessage(updatedMessage, void 0, options);
  };
};

// src/components/Channel/hooks/useIsMounted.ts
var import_react63 = require("react");
var useIsMounted = () => {
  const isMounted = (0, import_react63.useRef)(false);
  (0, import_react63.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};

// src/components/Channel/hooks/useMentionsHandlers.ts
var import_react64 = require("react");
var useMentionsHandlers = (onMentionsHover, onMentionsClick) => (0, import_react64.useCallback)(
  (event, mentioned_users) => {
    if (!onMentionsHover && !onMentionsClick || !(event.target instanceof HTMLElement)) {
      return;
    }
    const target = event.target;
    const textContent = target.innerHTML.replace("*", "");
    if (textContent[0] === "@") {
      const userName = textContent.replace("@", "");
      const user = mentioned_users?.find(
        ({ id, name: name2 }) => name2 === userName || id === userName
      );
      if (onMentionsHover && typeof onMentionsHover === "function" && event.type === "mouseover") {
        onMentionsHover(event, user);
      }
      if (onMentionsClick && event.type === "click" && typeof onMentionsClick === "function") {
        onMentionsClick(event, user);
      }
    }
  },
  [onMentionsClick, onMentionsHover]
);

// src/components/Loading/LoadingChannels.tsx
var import_react65 = __toESM(require("react"));
var LoadingItems = () => /* @__PURE__ */ import_react65.default.createElement("div", { className: "str-chat__loading-channels-item str-chat__channel-preview-loading" }, /* @__PURE__ */ import_react65.default.createElement("div", { className: "str-chat__loading-channels-avatar" }), /* @__PURE__ */ import_react65.default.createElement("div", { className: "str-chat__loading-channels-meta str-chat__channel-preview-end-loading" }, /* @__PURE__ */ import_react65.default.createElement("div", { className: "str-chat__loading-channels-username" }), /* @__PURE__ */ import_react65.default.createElement("div", { className: "str-chat__loading-channels-status" })));
var UnMemoizedLoadingChannels = () => /* @__PURE__ */ import_react65.default.createElement("div", { className: "str-chat__loading-channels" }, /* @__PURE__ */ import_react65.default.createElement(LoadingItems, null), /* @__PURE__ */ import_react65.default.createElement(LoadingItems, null), /* @__PURE__ */ import_react65.default.createElement(LoadingItems, null));
var LoadingChannels = import_react65.default.memo(UnMemoizedLoadingChannels);

// src/components/Loading/LoadingErrorIndicator.tsx
var import_react66 = __toESM(require("react"));
var UnMemoizedLoadingErrorIndicator = ({ error }) => {
  const { t: t2 } = useTranslationContext("LoadingErrorIndicator");
  if (!error) return null;
  return /* @__PURE__ */ import_react66.default.createElement("div", null, t2("Error: {{ errorMessage }}", { errorMessage: error.message }));
};
var LoadingErrorIndicator = import_react66.default.memo(
  UnMemoizedLoadingErrorIndicator,
  (prevProps, nextProps) => prevProps.error?.message === nextProps.error?.message
);

// src/components/Loading/LoadingIndicator.tsx
var import_react67 = __toESM(require("react"));
var UnMemoizedLoadingIndicator = (props) => {
  const { color: color2 = "#006CFF", size = 15 } = props;
  return /* @__PURE__ */ import_react67.default.createElement(
    "div",
    {
      className: `str-chat__loading-indicator`,
      "data-testid": "loading-indicator-wrapper",
      style: { height: size, width: size }
    },
    /* @__PURE__ */ import_react67.default.createElement(
      "svg",
      {
        height: size,
        viewBox: `0 0 30 30`,
        width: size,
        xmlns: "http://www.w3.org/2000/svg"
      },
      /* @__PURE__ */ import_react67.default.createElement("defs", null, /* @__PURE__ */ import_react67.default.createElement("linearGradient", { id: "a", x1: "50%", x2: "50%", y1: "0%", y2: "100%" }, /* @__PURE__ */ import_react67.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }), /* @__PURE__ */ import_react67.default.createElement(
        "stop",
        {
          "data-testid": "loading-indicator-circle",
          offset: "100%",
          stopColor: color2,
          stopOpacity: "1",
          style: { stopColor: color2 }
        }
      ))),
      /* @__PURE__ */ import_react67.default.createElement(
        "path",
        {
          d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z",
          fill: "url(#a)",
          fillRule: "evenodd"
        }
      )
    )
  );
};
var LoadingIndicator = import_react67.default.memo(
  UnMemoizedLoadingIndicator,
  (prevProps, nextProps) => prevProps.color === nextProps.color && prevProps.size === nextProps.size
);

// src/components/Channel/LoadingChannel.tsx
var import_react68 = __toESM(require("react"));
var LoadingMessage = () => /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message" }, /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-avatar" }), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-end" }, /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-sender" }), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-last-row" }, /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-text" }), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-date" }))));
var LoadingMessageInput = () => /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-input-row" }, /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-input" }), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-send" }));
var LoadingChannelHeader = () => /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-header" }, /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-header-avatar" }), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-header-end" }, /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-header-name" }), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-header-info" })));
var LoadingChannel = () => /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel" }, /* @__PURE__ */ import_react68.default.createElement(LoadingChannelHeader, null), /* @__PURE__ */ import_react68.default.createElement("div", { className: "str-chat__loading-channel-message-list" }, Array.from(Array(3)).map((_, i) => /* @__PURE__ */ import_react68.default.createElement(LoadingMessage, { key: `loading-message-${i}` }))), /* @__PURE__ */ import_react68.default.createElement(LoadingMessageInput, null));

// src/components/MessageInput/DropzoneProvider.tsx
var import_react78 = __toESM(require("react"));

// src/components/MessageInput/hooks/useCooldownTimer.tsx
var import_react69 = require("react");
var useCooldownTimer = () => {
  const { client, latestMessageDatesByChannels } = useChatContext("useCooldownTimer");
  const { channel, messages = [] } = useChannelStateContext("useCooldownTimer");
  const [cooldownRemaining, setCooldownRemaining] = (0, import_react69.useState)();
  const { cooldown: cooldownInterval = 0, own_capabilities } = channel.data || {};
  const skipCooldown = own_capabilities?.includes("skip-slow-mode");
  const ownLatestMessageDate = (0, import_react69.useMemo)(
    () => latestMessageDatesByChannels[channel.cid] ?? [...messages].sort(
      (a2, b) => b.created_at?.getTime() - a2.created_at?.getTime()
    ).find((v) => v.user?.id === client.user?.id)?.created_at,
    [messages, client.user?.id, latestMessageDatesByChannels, channel.cid]
  );
  (0, import_react69.useEffect)(() => {
    const timeSinceOwnLastMessage = ownLatestMessageDate ? (
      // prevent negative values
      Math.max(0, ((/* @__PURE__ */ new Date()).getTime() - ownLatestMessageDate.getTime()) / 1e3)
    ) : void 0;
    const remaining = !skipCooldown && typeof timeSinceOwnLastMessage !== "undefined" && cooldownInterval > timeSinceOwnLastMessage ? Math.round(cooldownInterval - timeSinceOwnLastMessage) : 0;
    setCooldownRemaining(remaining);
    if (!remaining) return;
    const timeout = setTimeout(() => {
      setCooldownRemaining(0);
    }, remaining * 1e3);
    return () => {
      clearTimeout(timeout);
    };
  }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);
  return {
    cooldownInterval,
    cooldownRemaining,
    setCooldownRemaining
  };
};

// src/components/MessageInput/hooks/useCreateMessageInputContext.ts
var import_react70 = require("react");
var useCreateMessageInputContext = (value) => {
  const {
    additionalTextareaProps,
    asyncMessagesMultiSendEnabled,
    attachments,
    audioRecordingEnabled,
    autocompleteTriggers,
    cancelURLEnrichment,
    clearEditingState,
    closeCommandsList,
    closeMentionsList,
    cooldownInterval,
    cooldownRemaining,
    disabled,
    disableMentions,
    dismissLinkPreview,
    doFileUploadRequest,
    doImageUploadRequest,
    emojiSearchIndex,
    errorHandler,
    findAndEnqueueURLsToEnrich,
    focus,
    grow,
    handleChange,
    handleSubmit,
    hideSendButton,
    insertText,
    isThreadInput,
    isUploadEnabled,
    linkPreviews,
    maxFilesLeft,
    maxRows,
    mentionAllAppUsers,
    mentioned_users,
    mentionQueryParams,
    message,
    minRows,
    noFiles,
    numberOfUploads,
    onPaste,
    onSelectUser,
    openCommandsList,
    openMentionsList,
    overrideSubmitHandler,
    parent,
    publishTypingEvent,
    recordingController,
    removeAttachments,
    setCooldownRemaining,
    setText,
    shouldSubmit,
    showCommandsList,
    showMentionsList,
    text: text8,
    textareaRef,
    uploadAttachment,
    uploadNewFiles,
    upsertAttachments,
    useMentionsTransliteration
  } = value;
  const editing = message?.editing;
  const linkPreviewsValue = Array.from(linkPreviews.values()).join();
  const mentionedUsersLength = mentioned_users.length;
  const parentId = parent?.id;
  const messageInputContext = (0, import_react70.useMemo)(
    () => ({
      additionalTextareaProps,
      asyncMessagesMultiSendEnabled,
      attachments,
      audioRecordingEnabled,
      autocompleteTriggers,
      cancelURLEnrichment,
      clearEditingState,
      closeCommandsList,
      closeMentionsList,
      cooldownInterval,
      cooldownRemaining,
      disabled,
      disableMentions,
      dismissLinkPreview,
      doFileUploadRequest,
      doImageUploadRequest,
      emojiSearchIndex,
      errorHandler,
      findAndEnqueueURLsToEnrich,
      focus,
      grow,
      handleChange,
      handleSubmit,
      hideSendButton,
      insertText,
      isThreadInput,
      isUploadEnabled,
      linkPreviews,
      maxFilesLeft,
      maxRows,
      mentionAllAppUsers,
      mentioned_users,
      mentionQueryParams,
      message,
      minRows,
      noFiles,
      numberOfUploads,
      onPaste,
      onSelectUser,
      openCommandsList,
      openMentionsList,
      overrideSubmitHandler,
      parent,
      publishTypingEvent,
      recordingController,
      removeAttachments,
      setCooldownRemaining,
      setText,
      shouldSubmit,
      showCommandsList,
      showMentionsList,
      text: text8,
      textareaRef,
      uploadAttachment,
      uploadNewFiles,
      upsertAttachments,
      useMentionsTransliteration
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      asyncMessagesMultiSendEnabled,
      attachments,
      audioRecordingEnabled,
      cancelURLEnrichment,
      cooldownInterval,
      cooldownRemaining,
      dismissLinkPreview,
      editing,
      emojiSearchIndex,
      findAndEnqueueURLsToEnrich,
      handleSubmit,
      hideSendButton,
      isUploadEnabled,
      isThreadInput,
      linkPreviewsValue,
      mentionedUsersLength,
      minRows,
      parentId,
      publishTypingEvent,
      recordingController,
      removeAttachments,
      showCommandsList,
      showMentionsList,
      text8,
      uploadAttachment,
      upsertAttachments
    ]
  );
  return messageInputContext;
};

// src/components/MessageInput/hooks/useMessageInputState.ts
var import_react77 = require("react");
var import_nanoid4 = require("nanoid");

// src/components/MessageInput/hooks/useAttachments.ts
var import_react71 = require("react");
var import_nanoid2 = require("nanoid");
var apiMaxNumberOfFiles = 10;
var isImageFile = (file) => file.type.startsWith("image/") && !file.type.endsWith(".photoshop");
var getAttachmentTypeFromMime = (mimeType) => {
  if (mimeType.startsWith("image/") && !mimeType.endsWith(".photoshop")) return "image";
  if (mimeType.includes("video/")) return "video";
  if (mimeType.includes("audio/")) return "audio";
  return "file";
};
var ensureIsLocalAttachment = (attachment) => {
  if (isLocalAttachment(attachment)) {
    return attachment;
  }
  const { localMetadata, ...rest } = attachment;
  return {
    localMetadata: {
      ...localMetadata ?? {},
      id: localMetadata?.id || (0, import_nanoid2.nanoid)()
    },
    ...rest
  };
};
var useAttachments = (props, state, dispatch, textareaRef) => {
  const { doFileUploadRequest, doImageUploadRequest, errorHandler, noFiles } = props;
  const { getAppSettings } = useChatContext("useAttachments");
  const { t: t2 } = useTranslationContext("useAttachments");
  const { addNotification } = useChannelActionContext("useAttachments");
  const { channel, maxNumberOfFiles, multipleUploads } = useChannelStateContext("useAttachments");
  const maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;
  const numberOfUploads = Object.values(state.attachments).filter(
    ({ localMetadata }) => localMetadata.uploadState && localMetadata.uploadState !== "failed"
  ).length;
  const maxFilesLeft = maxFilesAllowed - numberOfUploads;
  const removeAttachments = (0, import_react71.useCallback)(
    (ids) => {
      if (!ids.length) return;
      dispatch({ ids, type: "removeAttachments" });
    },
    [dispatch]
  );
  const upsertAttachments = (0, import_react71.useCallback)(
    (attachments) => {
      if (!attachments.length) return;
      dispatch({
        attachments: attachments.map(ensureIsLocalAttachment),
        type: "upsertAttachments"
      });
    },
    [dispatch]
  );
  const uploadAttachment = (0, import_react71.useCallback)(
    async (att) => {
      const { localMetadata, ...providedAttachmentData } = att;
      if (!localMetadata?.file) return att;
      const { file } = localMetadata;
      const isImage = isImageFile(file);
      if (noFiles && !isImage) return att;
      const canUpload = await checkUploadPermissions({
        addNotification,
        file,
        getAppSettings,
        t: t2,
        uploadType: isImage ? "image" : "file"
      });
      if (!canUpload) return att;
      localMetadata.id = localMetadata?.id ?? (0, import_nanoid2.nanoid)();
      const finalAttachment = {
        type: getAttachmentTypeFromMime(file.type)
      };
      if (isImage) {
        localMetadata.previewUri = URL.createObjectURL?.(file);
        if (file instanceof File) {
          finalAttachment.fallback = file.name;
        }
      } else {
        finalAttachment.file_size = file.size;
        finalAttachment.mime_type = file.type;
        if (file instanceof File) {
          finalAttachment.title = file.name;
        }
      }
      Object.assign(finalAttachment, providedAttachmentData);
      upsertAttachments([
        {
          ...finalAttachment,
          localMetadata: {
            ...localMetadata,
            uploadState: "uploading"
          }
        }
      ]);
      let response;
      try {
        const doUploadRequest = isImage ? doImageUploadRequest : doFileUploadRequest;
        if (doUploadRequest) {
          response = await doUploadRequest(file, channel);
        } else {
          response = await channel[isImage ? "sendImage" : "sendFile"](file);
        }
      } catch (error) {
        let finalError = {
          message: t2("Error uploading attachment"),
          name: "Error"
        };
        if (typeof error.message === "string") {
          finalError = error;
        } else if (typeof error === "object") {
          finalError = Object.assign(finalError, error);
        }
        console.error(finalError);
        addNotification(finalError.message, "error");
        const failedAttachment = {
          ...finalAttachment,
          localMetadata: {
            ...localMetadata,
            uploadState: "failed"
          }
        };
        upsertAttachments([failedAttachment]);
        if (errorHandler) {
          errorHandler(finalError, "upload-attachment", {
            ...file,
            id: localMetadata.id
          });
        }
        return failedAttachment;
      }
      if (!response) {
        removeAttachments([localMetadata.id]);
        return;
      }
      const uploadedAttachment = {
        ...finalAttachment,
        localMetadata: {
          ...localMetadata,
          uploadState: "finished"
        }
      };
      if (isLocalImageAttachment(uploadedAttachment)) {
        if (uploadedAttachment.localMetadata.previewUri) {
          URL.revokeObjectURL(uploadedAttachment.localMetadata.previewUri);
          delete uploadedAttachment.localMetadata.previewUri;
        }
        uploadedAttachment.image_url = response.file;
      } else {
        uploadedAttachment.asset_url = response.file;
      }
      if (response.thumb_url) {
        uploadedAttachment.thumb_url = response.thumb_url;
      }
      upsertAttachments([uploadedAttachment]);
      return uploadedAttachment;
    },
    [
      addNotification,
      channel,
      doFileUploadRequest,
      doImageUploadRequest,
      errorHandler,
      getAppSettings,
      noFiles,
      removeAttachments,
      t2,
      upsertAttachments
    ]
  );
  const uploadNewFiles = (0, import_react71.useCallback)(
    (files) => {
      const filesToBeUploaded = noFiles ? Array.from(files).filter(isImageFile) : Array.from(files);
      filesToBeUploaded.slice(0, maxFilesLeft).forEach((fileLike) => {
        uploadAttachment({
          localMetadata: {
            file: isBlobButNotFile(fileLike) ? createFileFromBlobs({
              blobsArray: [fileLike],
              fileName: generateFileName(fileLike.type),
              mimeType: fileLike.type
            }) : fileLike,
            id: (0, import_nanoid2.nanoid)()
          }
        });
      });
      textareaRef.current?.focus();
    },
    [maxFilesLeft, noFiles, textareaRef, uploadAttachment]
  );
  return {
    maxFilesLeft,
    numberOfUploads,
    removeAttachments,
    uploadAttachment,
    uploadNewFiles,
    upsertAttachments
  };
};

// src/components/MessageInput/hooks/useLinkPreviews.ts
var import_linkifyjs2 = require("linkifyjs");
var import_react72 = require("react");
var import_lodash5 = __toESM(require("lodash.debounce"));

// src/components/MessageInput/types.ts
var LinkPreviewState = /* @__PURE__ */ ((LinkPreviewState2) => {
  LinkPreviewState2["DISMISSED"] = "dismissed";
  LinkPreviewState2["FAILED"] = "failed";
  LinkPreviewState2["LOADED"] = "loaded";
  LinkPreviewState2["LOADING"] = "loading";
  LinkPreviewState2["QUEUED"] = "queued";
  return LinkPreviewState2;
})(LinkPreviewState || {});
var SetLinkPreviewMode = /* @__PURE__ */ ((SetLinkPreviewMode2) => {
  SetLinkPreviewMode2[SetLinkPreviewMode2["UPSERT"] = 0] = "UPSERT";
  SetLinkPreviewMode2[SetLinkPreviewMode2["SET"] = 1] = "SET";
  SetLinkPreviewMode2[SetLinkPreviewMode2["REMOVE"] = 2] = "REMOVE";
  return SetLinkPreviewMode2;
})(SetLinkPreviewMode || {});

// src/components/MessageInput/hooks/useLinkPreviews.ts
var useLinkPreviews = ({
  debounceURLEnrichmentMs: debounceURLEnrichmentMsInputContext,
  dispatch,
  enrichURLForPreview = false,
  findURLFn: findURLFnInputContext,
  linkPreviews,
  onLinkPreviewDismissed: onLinkPreviewDismissedInputContext
}) => {
  const { client } = useChatContext();
  const {
    channelConfig,
    debounceURLEnrichmentMs: debounceURLEnrichmentMsChannelContext,
    findURLFn: findURLFnChannelContext,
    onLinkPreviewDismissed: onLinkPreviewDismissedChannelContext
  } = useChannelStateContext();
  const shouldDiscardEnrichQueries = (0, import_react72.useRef)(false);
  const findURLFn = findURLFnInputContext ?? findURLFnChannelContext;
  const onLinkPreviewDismissed = onLinkPreviewDismissedInputContext ?? onLinkPreviewDismissedChannelContext;
  const debounceURLEnrichmentMs = debounceURLEnrichmentMsInputContext ?? debounceURLEnrichmentMsChannelContext ?? 1500;
  const dismissLinkPreview = (0, import_react72.useCallback)(
    (linkPreview) => {
      onLinkPreviewDismissed?.(linkPreview);
      const previewToRemoveMap = /* @__PURE__ */ new Map();
      linkPreview.state = "dismissed" /* DISMISSED */;
      previewToRemoveMap.set(linkPreview.og_scrape_url, linkPreview);
      dispatch({
        linkPreviews: previewToRemoveMap,
        mode: 0 /* UPSERT */,
        type: "setLinkPreviews"
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [onLinkPreviewDismissed]
  );
  const findAndEnqueueURLsToEnrich = (0, import_react72.useCallback)(
    (0, import_lodash5.default)(
      (text8, mode = 1 /* SET */) => {
        const urls = findURLFn ? findURLFn(text8) : (0, import_linkifyjs2.find)(text8, "url").reduce((acc, link3) => {
          if (link3.isLink) acc.push(link3.href);
          return acc;
        }, []);
        shouldDiscardEnrichQueries.current = urls.length === 0;
        dispatch({
          linkPreviews: urls.reduce((acc, url) => {
            acc.set(url, { og_scrape_url: url, state: "queued" /* QUEUED */ });
            return acc;
          }, /* @__PURE__ */ new Map()),
          mode,
          type: "setLinkPreviews"
        });
      },
      debounceURLEnrichmentMs,
      { leading: false, trailing: true }
    ),
    [debounceURLEnrichmentMs, shouldDiscardEnrichQueries, findURLFn]
  );
  const cancelURLEnrichment = (0, import_react72.useCallback)(() => {
    findAndEnqueueURLsToEnrich.cancel();
    findAndEnqueueURLsToEnrich("");
    findAndEnqueueURLsToEnrich.flush();
  }, [findAndEnqueueURLsToEnrich]);
  (0, import_react72.useEffect)(() => {
    const enqueuedLinks = Array.from(linkPreviews.values()).reduce(
      (acc, linkPreview) => {
        if (linkPreview.state === "queued") {
          const loadingLinkPreview = {
            ...linkPreview,
            state: "loading" /* LOADING */
          };
          acc.set(linkPreview.og_scrape_url, loadingLinkPreview);
        }
        return acc;
      },
      /* @__PURE__ */ new Map()
    );
    if (!enqueuedLinks.size) return;
    dispatch({
      linkPreviews: enqueuedLinks,
      mode: 0 /* UPSERT */,
      type: "setLinkPreviews"
    });
    enqueuedLinks.forEach((linkPreview) => {
      client.enrichURL(linkPreview.og_scrape_url).then(({ duration, ...ogAttachment }) => {
        if (shouldDiscardEnrichQueries.current) return;
        const linkPreviewsMap = /* @__PURE__ */ new Map();
        linkPreviewsMap.set(linkPreview.og_scrape_url, {
          ...ogAttachment,
          state: "loaded" /* LOADED */
        });
        dispatch({
          linkPreviews: linkPreviewsMap,
          mode: 0 /* UPSERT */,
          type: "setLinkPreviews"
        });
      }).catch(() => {
        const linkPreviewsMap = /* @__PURE__ */ new Map();
        linkPreviewsMap.set(linkPreview.og_scrape_url, {
          ...linkPreview,
          state: "failed" /* FAILED */
        });
        dispatch({
          linkPreviews: linkPreviewsMap,
          mode: 0 /* UPSERT */,
          type: "setLinkPreviews"
        });
      });
    });
  }, [shouldDiscardEnrichQueries, linkPreviews]);
  return {
    cancelURLEnrichment,
    dismissLinkPreview,
    findAndEnqueueURLsToEnrich: channelConfig?.url_enrichment && enrichURLForPreview ? findAndEnqueueURLsToEnrich : void 0
  };
};

// src/components/MessageInput/hooks/useMessageInputText.ts
var import_react73 = require("react");
var import_stream_chat2 = require("stream-chat");
var useMessageInputText = (props, state, dispatch, findAndEnqueueURLsToEnrich) => {
  const { channel } = useChannelStateContext("useMessageInputText");
  const { additionalTextareaProps, focus, parent, publishTypingEvent = true } = props;
  const { text: text8 } = state;
  const textareaRef = (0, import_react73.useRef)(void 0);
  (0, import_react73.useEffect)(() => {
    if (focus && textareaRef.current) {
      textareaRef.current.focus();
    }
  }, [focus]);
  const newCursorPosition = (0, import_react73.useRef)(void 0);
  const insertText = (0, import_react73.useCallback)(
    (textToInsert) => {
      const { maxLength } = additionalTextareaProps || {};
      if (!textareaRef.current) {
        return dispatch({
          getNewText: (text9) => {
            const updatedText = text9 + textToInsert;
            if (maxLength && updatedText.length > maxLength) {
              return updatedText.slice(0, maxLength);
            }
            return updatedText;
          },
          type: "setText"
        });
      }
      const { selectionEnd, selectionStart } = textareaRef.current;
      newCursorPosition.current = selectionStart + textToInsert.length;
      dispatch({
        getNewText: (prevText) => {
          const updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);
          if (maxLength && updatedText.length > maxLength) {
            return updatedText.slice(0, maxLength);
          }
          return updatedText;
        },
        type: "setText"
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [additionalTextareaProps, newCursorPosition, textareaRef]
  );
  (0, import_react73.useEffect)(() => {
    const textareaElement = textareaRef.current;
    if (textareaElement && newCursorPosition.current !== void 0) {
      textareaElement.selectionStart = newCursorPosition.current;
      textareaElement.selectionEnd = newCursorPosition.current;
      newCursorPosition.current = void 0;
    }
  }, [text8, newCursorPosition]);
  const handleChange = (0, import_react73.useCallback)(
    (event) => {
      event.preventDefault();
      if (!event || !event.target) {
        return;
      }
      const newText = event.target.value;
      dispatch({
        getNewText: () => newText,
        type: "setText"
      });
      findAndEnqueueURLsToEnrich?.(newText);
      if (publishTypingEvent && newText && channel) {
        (0, import_stream_chat2.logChatPromiseExecution)(channel.keystroke(parent?.id), "start typing event");
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [channel, findAndEnqueueURLsToEnrich, parent, publishTypingEvent]
  );
  return {
    handleChange,
    insertText,
    textareaRef
  };
};

// src/components/MessageInput/hooks/useSubmitHandler.ts
var import_react74 = require("react");
var useSubmitHandler = (props, state, dispatch, numberOfUploads, enrichURLsController) => {
  const {
    clearEditingState,
    message,
    overrideSubmitHandler,
    parent,
    publishTypingEvent
  } = props;
  const { attachments, linkPreviews, mentioned_users, text: text8 } = state;
  const { cancelURLEnrichment, findAndEnqueueURLsToEnrich } = enrichURLsController;
  const { channel } = useChannelStateContext("useSubmitHandler");
  const { addNotification, editMessage, sendMessage } = useChannelActionContext("useSubmitHandler");
  const { t: t2 } = useTranslationContext("useSubmitHandler");
  const textReference = (0, import_react74.useRef)({ hasChanged: false, initialText: text8 });
  (0, import_react74.useEffect)(() => {
    if (!textReference.current.initialText.length) {
      textReference.current.initialText = text8;
      return;
    }
    textReference.current.hasChanged = text8 !== textReference.current.initialText;
  }, [text8]);
  const handleSubmit = async (event, customMessageData, options) => {
    event?.preventDefault();
    const trimmedMessage = text8.trim();
    const isEmptyMessage = trimmedMessage === "" || trimmedMessage === ">" || trimmedMessage === "``````" || trimmedMessage === "``" || trimmedMessage === "**" || trimmedMessage === "____" || trimmedMessage === "__" || trimmedMessage === "****";
    if (isEmptyMessage && numberOfUploads === 0 && attachments.length === 0 && !customMessageData?.poll_id)
      return;
    const someAttachmentsUploading = attachments.some(
      (att) => att.localMetadata?.uploadState === "uploading"
    );
    if (someAttachmentsUploading) {
      return addNotification(t2("Wait until all attachments have uploaded"), "error");
    }
    const attachmentsFromUploads = attachments.filter(
      (att) => att.localMetadata?.uploadState !== "failed" || findAndEnqueueURLsToEnrich && !att.og_scrape_url
      // filter out all the attachments scraped before the message was edited
    ).map((localAttachment) => {
      const { localMetadata: _, ...attachment } = localAttachment;
      return attachment;
    });
    const sendOptions = { ...options };
    let attachmentsFromLinkPreviews = [];
    if (findAndEnqueueURLsToEnrich) {
      cancelURLEnrichment();
      const someLinkPreviewsLoading = Array.from(linkPreviews.values()).some(
        (linkPreview) => ["queued" /* QUEUED */, "loading" /* LOADING */].includes(linkPreview.state)
      );
      const someLinkPreviewsDismissed = Array.from(linkPreviews.values()).some(
        (linkPreview) => linkPreview.state === "dismissed" /* DISMISSED */
      );
      attachmentsFromLinkPreviews = someLinkPreviewsLoading ? [] : Array.from(linkPreviews.values()).filter(
        (linkPreview) => linkPreview.state === "loaded" /* LOADED */ && !attachmentsFromUploads.find(
          (attFromUpload) => attFromUpload.og_scrape_url === linkPreview.og_scrape_url
        )
      ).map(
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        ({ state: linkPreviewState, ...ogAttachment }) => ogAttachment
      );
      sendOptions.skip_enrich_url = !someLinkPreviewsLoading && attachmentsFromLinkPreviews.length > 0 || someLinkPreviewsDismissed;
    }
    const newAttachments = [...attachmentsFromUploads, ...attachmentsFromLinkPreviews];
    const actualMentionedUsers = Array.from(
      new Set(
        mentioned_users.filter(
          ({ id, name: name2 }) => text8.includes(`@${id}`) || text8.includes(`@${name2}`)
        )
      )
    );
    const updatedMessage = {
      attachments: newAttachments,
      mentioned_users: actualMentionedUsers,
      text: text8
    };
    if (message && message.type !== "error") {
      delete message.i18n;
      try {
        await editMessage(
          {
            ...message,
            ...updatedMessage,
            ...customMessageData
          },
          sendOptions
        );
        clearEditingState?.();
        dispatch({ type: "clear" });
      } catch (err) {
        addNotification(t2("Edit message request failed"), "error");
      }
    } else {
      try {
        dispatch({ type: "clear" });
        if (overrideSubmitHandler) {
          await overrideSubmitHandler(
            {
              ...updatedMessage,
              parent
            },
            channel.cid,
            customMessageData,
            sendOptions
          );
        } else {
          await sendMessage(
            {
              ...updatedMessage,
              parent
            },
            customMessageData,
            sendOptions
          );
        }
        if (publishTypingEvent) await channel.stopTyping();
      } catch (err) {
        dispatch({
          getNewText: () => text8,
          type: "setText"
        });
        actualMentionedUsers?.forEach((user) => {
          dispatch({ type: "addMentionedUser", user });
        });
        addNotification(t2("Send message request failed"), "error");
      }
    }
  };
  return { handleSubmit };
};

// src/components/MessageInput/hooks/usePasteHandler.ts
var import_react75 = require("react");
var usePasteHandler = (uploadNewFiles, insertText, isUploadEnabled, findAndEnqueueURLsToEnrich) => {
  const onPaste = (0, import_react75.useCallback)(
    (clipboardEvent) => {
      (async (event) => {
        const { items } = event.clipboardData;
        event.preventDefault();
        let plainTextPromise = void 0;
        for (let i = 0; i < items.length; i++) {
          const item2 = items[i];
          if (item2.kind === "string" && item2.type === "text/plain") {
            plainTextPromise = new Promise((resolve) => {
              item2.getAsString((string3) => {
                resolve(string3);
              });
            });
            break;
          }
        }
        const fileLikes = await dataTransferItemsToFiles(Array.from(items));
        if (plainTextPromise) {
          const pastedText = await plainTextPromise;
          insertText(pastedText);
          findAndEnqueueURLsToEnrich?.(pastedText, 0 /* UPSERT */);
          findAndEnqueueURLsToEnrich?.flush();
        } else if (fileLikes.length && isUploadEnabled) {
          uploadNewFiles(fileLikes);
          return;
        }
      })(clipboardEvent);
    },
    [findAndEnqueueURLsToEnrich, insertText, isUploadEnabled, uploadNewFiles]
  );
  return { onPaste };
};

// src/components/MediaRecorder/hooks/useMediaRecorder.ts
var import_react76 = require("react");

// src/components/MediaRecorder/observable/Subscription.ts
var Subscription = class {
  constructor(unsubscribe) {
    this.closed = false;
    this._unsubscribe = unsubscribe;
  }
  unsubscribe() {
    this.closed = true;
    this._unsubscribe?.();
  }
};

// src/components/MediaRecorder/observable/Observer.ts
function createObserver(observerOrNext) {
  return typeof observerOrNext === "function" ? { next: observerOrNext } : observerOrNext;
}

// src/components/MediaRecorder/observable/Observable.ts
var Observable = class {
  constructor(producer) {
    this._closed = false;
    if (producer) this._producer = producer;
  }
  get closed() {
    return this._closed;
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    if (!this.closed) {
      this._producer?.(observer);
    }
    return new Subscription(() => {
      this._closed = true;
    });
  }
};

// src/components/MediaRecorder/observable/Subject.ts
var Subject = class extends Observable {
  constructor() {
    super();
    this._observers = /* @__PURE__ */ new Map();
    this._observerCounter = 0;
  }
  get observers() {
    return Array.from(this._observers.values());
  }
  next(value) {
    if (this.closed) return;
    const observers = this.observers;
    for (let i = 0; i < observers.length; i++) {
      observers[i].next(value);
    }
  }
  error(err) {
    if (this.closed) return;
    this.thrownError = err;
    const { observers } = this;
    for (let i = 0; i < observers.length; i++) {
      observers[i].error?.(err);
    }
    this._observers.clear();
  }
  complete() {
    if (this.closed) return;
    this._closed = true;
    const { observers } = this;
    for (let i = 0; i < observers.length; i++) {
      observers[i].complete?.();
    }
    this._observers.clear();
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    if (this.thrownError || this.closed) {
      const subscription = new Subscription();
      subscription.closed = true;
      return subscription;
    }
    const observerId = this._observerCounter++;
    this._observers.set(observerId, observer);
    return new Subscription(() => {
      this._observers.delete(observerId);
    });
  }
  unsubscribe() {
    this._closed = true;
    this._observers.clear();
  }
};

// src/components/MediaRecorder/observable/BehaviorSubject.ts
var BehaviorSubject = class extends Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }
  get value() {
    const { _value, thrownError } = this;
    if (thrownError) {
      throw thrownError;
    }
    return _value;
  }
  subscribe(observerOrNext) {
    const observer = createObserver(observerOrNext);
    const subscription = super.subscribe(observerOrNext);
    if (!subscription.closed) observer.next(this._value);
    return subscription;
  }
  next(value) {
    super.next(this._value = value);
  }
};

// src/components/MediaRecorder/classes/BrowserPermission.ts
var RecordingPermission = /* @__PURE__ */ ((RecordingPermission2) => {
  RecordingPermission2["CAM"] = "camera";
  RecordingPermission2["MIC"] = "microphone";
  return RecordingPermission2;
})(RecordingPermission || {});
var MEDIA_TO_PERMISSION = {
  audio: "microphone" /* MIC */,
  video: "camera" /* CAM */
};
var BrowserPermission = class {
  constructor({ mediaType }) {
    this.state = new BehaviorSubject(void 0);
    this.status = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.changeSubscriptions = [];
    this.name = MEDIA_TO_PERMISSION[mediaType];
  }
  get isWatching() {
    return this.changeSubscriptions.some((subscription) => !subscription.closed);
  }
  async watch() {
    if (!this.status.value) {
      await this.check();
      if (!this.status.value) return;
    }
    const status = this.status.value;
    const handlePermissionChange = (e2) => {
      const { state } = e2.target;
      this.state.next(state);
    };
    status.addEventListener("change", handlePermissionChange);
    this.changeSubscriptions.push(
      new Subscription(() => {
        status.removeEventListener("change", handlePermissionChange);
      })
    );
  }
  unwatch() {
    this.changeSubscriptions.forEach((subscription) => subscription.unsubscribe());
  }
  async check() {
    if (!this.name) {
      this.error.next(new Error("Unknown media recording permission"));
      return;
    }
    let permissionState;
    try {
      const permissionStatus = await navigator.permissions.query({
        name: this.name
      });
      permissionState = permissionStatus.state;
      this.status.next(permissionStatus);
    } catch (e2) {
      permissionState = "granted";
    }
    this.state.next(permissionState);
  }
};

// src/components/MediaRecorder/classes/MediaRecorderController.ts
var import_fix_webm_duration = __toESM(require("fix-webm-duration"));
var import_nanoid3 = require("nanoid");

// src/utils/mergeDeep.ts
var import_lodash6 = __toESM(require("lodash.mergewith"));
var overrideEverything = (_, source) => source;
var mergeDeep = (target, source) => (0, import_lodash6.default)(target, source, overrideEverything);
var overrideUndefinedOnly = (object, source) => object ?? source;
var mergeDeepUndefined = (target, source) => (0, import_lodash6.default)(target, source, overrideUndefinedOnly);

// src/components/MediaRecorder/classes/AmplitudeRecorder.ts
var MAX_FREQUENCY_AMPLITUDE = 255;
var logError2 = (e2) => e2 && console.error("[AMPLITUDE RECORDER ERROR]", e2);
var rootMeanSquare = (values) => Math.sqrt(values.reduce((acc, val) => acc + Math.pow(val, 2), 0) / values.length);
var DEFAULT_AMPLITUDE_RECORDER_CONFIG = {
  analyserConfig: {
    fftSize: 32,
    maxDecibels: 0,
    minDecibels: -100
  },
  sampleCount: 100,
  samplingFrequencyMs: 60
};
var AmplitudeRecorder = class {
  constructor({ config, stream }) {
    this.amplitudes = new BehaviorSubject([]);
    this.state = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.start = () => {
      if (this.state.value === "closed" /* CLOSED */) return;
      if (!this.stream) {
        throw new Error(
          "Missing MediaStream instance. Cannot to start amplitude recording"
        );
      }
      if (this.state.value === "recording" /* RECORDING */) this.stop();
      if (!this.analyserNode) {
        if (!this.stream) return;
        this.init();
      }
      this.state.next("recording" /* RECORDING */);
      this.amplitudeSamplingInterval = setInterval(() => {
        if (!(this.analyserNode && this.state.value === "recording" /* RECORDING */))
          return;
        const frequencyBins = new Uint8Array(this.analyserNode.frequencyBinCount);
        try {
          this.analyserNode.getByteFrequencyData(frequencyBins);
        } catch (e2) {
          logError2(e2);
          this.error.next(e2);
          return;
        }
        const normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;
        this.amplitudes.next([...this.amplitudes.value, normalizedSignalStrength]);
      }, this.config.samplingFrequencyMs);
    };
    this.config = mergeDeepUndefined({ ...config }, DEFAULT_AMPLITUDE_RECORDER_CONFIG);
    this.stream = stream;
  }
  init() {
    this.audioContext = new AudioContext();
    this.analyserNode = this.audioContext.createAnalyser();
    const { analyserConfig } = this.config;
    this.analyserNode.fftSize = analyserConfig.fftSize;
    this.analyserNode.maxDecibels = analyserConfig.maxDecibels;
    this.analyserNode.minDecibels = analyserConfig.minDecibels;
    this.microphone = this.audioContext.createMediaStreamSource(this.stream);
    this.microphone.connect(this.analyserNode);
  }
  stop() {
    clearInterval(this.amplitudeSamplingInterval);
    this.amplitudeSamplingInterval = void 0;
    this.state.next("stopped" /* STOPPED */);
  }
  close() {
    if (this.state.value !== "stopped" /* STOPPED */) this.stop();
    this.state.next("closed" /* CLOSED */);
    this.amplitudes.next([]);
    this.microphone?.disconnect();
    this.analyserNode?.disconnect();
    if (this.audioContext?.state !== "closed") this.audioContext?.close();
  }
};

// src/components/MediaRecorder/transcode/audioProcessing.ts
var toAudioBuffer = async (file) => {
  const audioCtx = new AudioContext();
  const arrayBuffer = await readFileAsArrayBuffer(file);
  const decodedData = await audioCtx.decodeAudioData(arrayBuffer);
  if (audioCtx.state !== "closed") await audioCtx.close();
  return decodedData;
};
var renderAudio = async (audioBuffer, sampleRate) => {
  const offlineAudioCtx = new OfflineAudioContext(
    audioBuffer.numberOfChannels,
    audioBuffer.duration * sampleRate,
    sampleRate
  );
  const source = offlineAudioCtx.createBufferSource();
  source.buffer = audioBuffer;
  source.connect(offlineAudioCtx.destination);
  source.start();
  return await offlineAudioCtx.startRendering();
};

// src/components/MediaRecorder/transcode/wav.ts
var WAV_HEADER_LENGTH_BYTES = 44;
var BYTES_PER_SAMPLE = 2;
var RIFF_FILE_MAX_BYTES = 4294967295;
var HEADER = {
  AUDIO_FORMAT: { offset: 20, value: 1 },
  // PCM = 1
  BITS_PER_SAMPLE: { offset: 34, value: BYTES_PER_SAMPLE * 8 },
  // 16 bits encoding
  BLOCK_ALIGN: { offset: 32 },
  BYTE_RATE: { offset: 28 },
  CHANNEL_COUNT: { offset: 22 },
  // 1 - mono, 2 - stereo
  CHUNK_ID: { offset: 0, value: 1380533830 },
  // hex representation of string "RIFF" (Resource Interchange File Format) - identifies the file structure that defines a class of more specific file formats, e.g. WAVE
  CHUNK_SIZE: { offset: 4 },
  FILE_FORMAT: { offset: 8, value: 1463899717 },
  // hex representation of string "WAVE"
  SAMPLE_RATE: { offset: 24 },
  SUBCHUNK1_ID: { offset: 12, value: 1718449184 },
  // hex representation of string "fmt " - identifies the start of "format" section of the header
  SUBCHUNK1_SIZE: { offset: 16, value: 16 },
  // Subchunk1 Size without SUBCHUNK1_ID and SUBCHUNK1_SIZE fields
  SUBCHUNK2_ID: { offset: 36, value: 1684108385 },
  // hex representation of string "data" - identifies the start of actual audio data section
  SUBCHUNK2_SIZE: { offset: 40 }
  // actual audio data size
};
var fourCharsToInt = (chars) => chars.charCodeAt(0) << 24 | chars.charCodeAt(1) << 16 | chars.charCodeAt(2) << 8 | chars.charCodeAt(3);
var WAV_HEADER_FLAGS = {
  data: fourCharsToInt("data"),
  fmt: fourCharsToInt("fmt "),
  RIFF: fourCharsToInt("RIFF"),
  WAVE: fourCharsToInt("WAVE")
};
var writeWavHeader = ({
  arrayBuffer,
  channelCount,
  sampleRate
}) => {
  const byteRate = sampleRate * channelCount * BYTES_PER_SAMPLE;
  const blockAlign = channelCount * BYTES_PER_SAMPLE;
  const dataView = new DataView(arrayBuffer);
  const dataChunkSize = Math.min(
    dataView.byteLength - WAV_HEADER_LENGTH_BYTES,
    RIFF_FILE_MAX_BYTES - WAV_HEADER_LENGTH_BYTES
  );
  dataView.setUint32(HEADER.CHUNK_ID.offset, HEADER.CHUNK_ID.value);
  dataView.setUint32(HEADER.CHUNK_SIZE.offset, arrayBuffer.byteLength - 8, true);
  dataView.setUint32(HEADER.FILE_FORMAT.offset, HEADER.FILE_FORMAT.value);
  dataView.setUint32(HEADER.SUBCHUNK1_ID.offset, HEADER.SUBCHUNK1_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK1_SIZE.offset, HEADER.SUBCHUNK1_SIZE.value, true);
  dataView.setUint16(HEADER.AUDIO_FORMAT.offset, HEADER.AUDIO_FORMAT.value, true);
  dataView.setUint16(HEADER.CHANNEL_COUNT.offset, channelCount, true);
  dataView.setUint32(HEADER.SAMPLE_RATE.offset, sampleRate, true);
  dataView.setUint32(HEADER.BYTE_RATE.offset, byteRate, true);
  dataView.setUint16(HEADER.BLOCK_ALIGN.offset, blockAlign, true);
  dataView.setUint16(HEADER.BITS_PER_SAMPLE.offset, HEADER.BITS_PER_SAMPLE.value, true);
  dataView.setUint32(HEADER.SUBCHUNK2_ID.offset, HEADER.SUBCHUNK2_ID.value);
  dataView.setUint32(HEADER.SUBCHUNK2_SIZE.offset, dataChunkSize, true);
};
var splitDataByChannel = (audioBuffer) => Array.from(
  { length: audioBuffer.numberOfChannels },
  (_, i) => audioBuffer.getChannelData(i)
);
var writeWavAudioData = ({ arrayBuffer, dataByChannel }) => {
  const dataView = new DataView(arrayBuffer);
  const channelCount = dataByChannel.length;
  dataByChannel.forEach((channelData, channelIndex) => {
    let writeOffset = WAV_HEADER_LENGTH_BYTES + channelCount * channelIndex;
    channelData.forEach((float32Value) => {
      dataView.setInt16(
        writeOffset,
        float32Value < 0 ? Math.max(-1, float32Value) * 32768 : Math.min(1, float32Value) * 32767,
        true
      );
      writeOffset += channelCount * BYTES_PER_SAMPLE;
    });
  });
};
var encodeToWaw = async (file, sampleRate) => {
  const audioBuffer = await renderAudio(await toAudioBuffer(file), sampleRate);
  const numberOfSamples = audioBuffer.duration * sampleRate;
  const fileSizeBytes = numberOfSamples * audioBuffer.numberOfChannels * BYTES_PER_SAMPLE + WAV_HEADER_LENGTH_BYTES;
  const arrayBuffer = new ArrayBuffer(fileSizeBytes);
  writeWavHeader({ arrayBuffer, channelCount: audioBuffer.numberOfChannels, sampleRate });
  writeWavAudioData({ arrayBuffer, dataByChannel: splitDataByChannel(audioBuffer) });
  return new Blob([arrayBuffer], { type: "audio/wav" });
};

// src/components/MediaRecorder/transcode/index.ts
var transcode = ({
  blob,
  encoder = encodeToWaw,
  sampleRate
}) => encoder(
  createFileFromBlobs({
    blobsArray: [blob],
    fileName: `audio_recording_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(
      blob.type
    )}`,
    mimeType: blob.type
  }),
  sampleRate
);

// src/components/MediaRecorder/classes/MediaRecorderController.ts
var RECORDED_MIME_TYPE_BY_BROWSER = {
  audio: {
    others: "audio/webm",
    safari: "audio/mp4;codecs=mp4a.40.2"
  }
};
var DEFAULT_AUDIO_TRANSCODER_CONFIG = {
  sampleRate: 16e3
};
var disposeOfMediaStream = (stream) => {
  if (!stream?.active) return;
  stream.getTracks().forEach((track) => {
    track.stop();
    stream.removeTrack(track);
  });
};
var logError3 = (e2) => e2 && console.error("[MEDIA RECORDER ERROR]", e2);
var MediaRecordingState = /* @__PURE__ */ ((MediaRecordingState3) => {
  MediaRecordingState3["PAUSED"] = "paused";
  MediaRecordingState3["RECORDING"] = "recording";
  MediaRecordingState3["STOPPED"] = "stopped";
  return MediaRecordingState3;
})(MediaRecordingState || {});
var MediaRecorderController = class {
  constructor({ config, generateRecordingTitle, t: t2 } = {}) {
    this.recordedChunkDurations = [];
    this.recordedData = [];
    this.recordingState = new BehaviorSubject(void 0);
    this.recording = new BehaviorSubject(void 0);
    this.error = new Subject();
    this.notification = new Subject();
    this.generateRecordingTitle = (mimeType) => {
      if (this.customGenerateRecordingTitle) {
        return this.customGenerateRecordingTitle(mimeType);
      }
      return `${this.mediaType}_recording_${(/* @__PURE__ */ new Date()).toISOString()}.${getExtensionFromMimeType(
        mimeType
      )}`;
    };
    this.makeVoiceRecording = async () => {
      if (this.recordingUri) URL.revokeObjectURL(this.recordingUri);
      if (!this.recordedData.length) return;
      const { mimeType } = this.mediaRecorderConfig;
      let blob = new Blob(this.recordedData, { type: mimeType });
      if (mimeType.match("audio/webm")) {
        blob = await (0, import_fix_webm_duration.default)(blob, this.durationMs, {
          logger: () => null
          // prevents polluting the browser console
        });
      }
      if (!mimeType.match("audio/mp4")) {
        blob = await transcode({
          blob,
          ...this.transcoderConfig
        });
      }
      if (!blob) return;
      this.recordingUri = URL.createObjectURL(blob);
      const file = createFileFromBlobs({
        blobsArray: [blob],
        fileName: this.generateRecordingTitle(blob.type),
        mimeType: blob.type
      });
      return {
        asset_url: this.recordingUri,
        duration: this.durationMs / 1e3,
        file_size: blob.size,
        localMetadata: {
          file,
          id: (0, import_nanoid3.nanoid)()
        },
        mime_type: blob.type,
        title: file.name,
        type: "voiceRecording" /* VOICE_RECORDING */,
        waveform_data: resampleWaveformData(
          this.amplitudeRecorder?.amplitudes.value ?? [],
          this.amplitudeRecorderConfig.sampleCount
        )
      };
    };
    this.handleErrorEvent = (e2) => {
      const { error } = e2;
      logError3(error);
      this.error.next(error);
      this.notification.next({
        text: this.t("An error has occurred during recording"),
        type: "error"
      });
    };
    this.handleDataavailableEvent = async (e2) => {
      if (!e2.data.size) return;
      if (this.mediaType !== "audio") return;
      try {
        this.recordedData.push(e2.data);
        const recording = await this.makeVoiceRecording();
        if (!recording) return;
        this.signalRecordingReady?.(recording);
        this.recording.next(recording);
      } catch (e3) {
        logError3(e3);
        this.error.next(e3);
        this.notification.next({
          text: this.t("An error has occurred during the recording processing"),
          type: "error"
        });
      }
    };
    this.resetRecordingState = () => {
      this.recordedData = [];
      this.recording.next(void 0);
      this.recordingState.next(void 0);
      this.recordedChunkDurations = [];
      this.startTime = void 0;
    };
    this.cleanUp = () => {
      this.resetRecordingState();
      if (this.recordingUri) URL.revokeObjectURL(this.recordingUri);
      this.amplitudeRecorder?.close();
      if (this.mediaRecorder) {
        disposeOfMediaStream(this.mediaRecorder.stream);
        this.mediaRecorder.removeEventListener(
          "dataavailable",
          this.handleDataavailableEvent
        );
        this.mediaRecorder.removeEventListener("error", this.handleErrorEvent);
      }
    };
    this.start = async () => {
      if (["recording" /* RECORDING */, "paused" /* PAUSED */].includes(
        this.recordingState.value
      )) {
        const error = new Error("Cannot start recording. Recording already in progress");
        logError3(error);
        this.error.next(error);
        return;
      }
      if (!navigator.mediaDevices) {
        const error = new Error("Media recording is not supported");
        logError3(error);
        this.error.next(error);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
        return;
      }
      if (this.mediaType === "video") {
        const error = new Error(
          `Video recording is not supported. Provided MIME type: ${this.mediaRecorderConfig.mimeType}`
        );
        logError3(error);
        this.error.next(error);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
        return;
      }
      if (!this.permission.state.value) {
        await this.permission.check();
      }
      if (this.permission.state.value === "denied") {
        logError3(new Error("Permission denied"));
        return;
      }
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        this.mediaRecorder = new MediaRecorder(stream, this.mediaRecorderConfig);
        this.mediaRecorder.addEventListener("dataavailable", this.handleDataavailableEvent);
        this.mediaRecorder.addEventListener("error", this.handleErrorEvent);
        this.startTime = (/* @__PURE__ */ new Date()).getTime();
        this.mediaRecorder.start();
        if (this.mediaType === "audio" && stream) {
          this.amplitudeRecorder = new AmplitudeRecorder({
            config: this.amplitudeRecorderConfig,
            stream
          });
          this.amplitudeRecorder.start();
        }
        this.recordingState.next("recording" /* RECORDING */);
      } catch (error) {
        logError3(error);
        this.cancel();
        this.error.next(error);
        this.notification.next({ text: this.t("Error starting recording"), type: "error" });
      }
    };
    this.pause = () => {
      if (this.recordingState.value !== "recording" /* RECORDING */) return;
      if (this.startTime) {
        this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - this.startTime);
        this.startTime = void 0;
      }
      this.mediaRecorder?.pause();
      this.amplitudeRecorder?.stop();
      this.recordingState.next("paused" /* PAUSED */);
    };
    this.resume = () => {
      if (this.recordingState.value !== "paused" /* PAUSED */) return;
      this.startTime = (/* @__PURE__ */ new Date()).getTime();
      this.mediaRecorder?.resume();
      this.amplitudeRecorder?.start();
      this.recordingState.next("recording" /* RECORDING */);
    };
    this.stop = () => {
      const recording = this.recording.value;
      if (recording) return Promise.resolve(recording);
      if (!["paused" /* PAUSED */, "recording" /* RECORDING */].includes(
        this.mediaRecorder?.state || ""
      ))
        return Promise.resolve(void 0);
      if (this.startTime) {
        this.recordedChunkDurations.push((/* @__PURE__ */ new Date()).getTime() - this.startTime);
        this.startTime = void 0;
      }
      const result = new Promise(
        (res) => {
          this.signalRecordingReady = res;
        }
      );
      this.mediaRecorder?.stop();
      this.amplitudeRecorder?.stop();
      this.recordingState.next("stopped" /* STOPPED */);
      return result;
    };
    this.cancel = () => {
      this.stop();
      this.cleanUp();
    };
    this.t = t2 || defaultTranslatorFunction;
    this.amplitudeRecorderConfig = mergeDeepUndefined(
      { ...config?.amplitudeRecorderConfig },
      DEFAULT_AMPLITUDE_RECORDER_CONFIG
    );
    this.mediaRecorderConfig = mergeDeepUndefined(
      { ...config?.mediaRecorderConfig },
      {
        mimeType: MediaRecorder.isTypeSupported("audio/webm") ? RECORDED_MIME_TYPE_BY_BROWSER.audio.others : RECORDED_MIME_TYPE_BY_BROWSER.audio.safari
      }
    );
    this.transcoderConfig = mergeDeepUndefined(
      { ...config?.transcoderConfig },
      DEFAULT_AUDIO_TRANSCODER_CONFIG
    );
    const mediaType = getRecordedMediaTypeFromMimeType(this.mediaRecorderConfig.mimeType);
    if (!mediaType) {
      throw new Error(
        `Unsupported media type (supported audio or video only). Provided mimeType: ${this.mediaRecorderConfig.mimeType}`
      );
    }
    this.mediaType = mediaType;
    this.permission = new BrowserPermission({ mediaType });
    this.customGenerateRecordingTitle = generateRecordingTitle;
  }
  get durationMs() {
    return this.recordedChunkDurations.reduce((acc, val) => acc + val, 0);
  }
};

// src/components/MediaRecorder/hooks/useMediaRecorder.ts
var useMediaRecorder = ({
  asyncMessagesMultiSendEnabled,
  enabled,
  generateRecordingTitle,
  handleSubmit,
  recordingConfig,
  uploadAttachment
}) => {
  const { t: t2 } = useTranslationContext("useMediaRecorder");
  const [recording, setRecording] = (0, import_react76.useState)();
  const [recordingState, setRecordingState] = (0, import_react76.useState)();
  const [permissionState, setPermissionState] = (0, import_react76.useState)();
  const [isScheduledForSubmit, scheduleForSubmit] = (0, import_react76.useState)(false);
  const recorder = (0, import_react76.useMemo)(
    () => enabled ? new MediaRecorderController({
      config: recordingConfig ?? {},
      generateRecordingTitle,
      t: t2
    }) : void 0,
    [recordingConfig, enabled, generateRecordingTitle, t2]
  );
  const completeRecording = (0, import_react76.useCallback)(async () => {
    if (!recorder) return;
    const recording2 = await recorder.stop();
    if (!recording2) return;
    await uploadAttachment(recording2);
    if (!asyncMessagesMultiSendEnabled) {
      scheduleForSubmit(true);
    }
    recorder.cleanUp();
  }, [asyncMessagesMultiSendEnabled, recorder, uploadAttachment]);
  (0, import_react76.useEffect)(() => {
    if (!isScheduledForSubmit) return;
    handleSubmit();
    scheduleForSubmit(false);
  }, [handleSubmit, isScheduledForSubmit]);
  (0, import_react76.useEffect)(() => {
    if (!recorder) return;
    recorder.permission.watch();
    const recordingSubscription = recorder.recording.subscribe(setRecording);
    const recordingStateSubscription = recorder.recordingState.subscribe(setRecordingState);
    const permissionStateSubscription = recorder.permission.state.subscribe(setPermissionState);
    return () => {
      recorder.cancel();
      recorder.permission.unwatch();
      recordingSubscription.unsubscribe();
      recordingStateSubscription.unsubscribe();
      permissionStateSubscription.unsubscribe();
    };
  }, [recorder]);
  return {
    completeRecording,
    permissionState,
    recorder,
    recording,
    recordingState
  };
};

// src/components/MessageInput/hooks/useMessageInputState.ts
var makeEmptyMessageInputState = () => ({
  attachments: [],
  linkPreviews: /* @__PURE__ */ new Map(),
  mentioned_users: [],
  setText: () => null,
  text: ""
});
var initState = (message) => {
  if (!message) {
    return makeEmptyMessageInputState();
  }
  const linkPreviews = message.attachments?.reduce((acc, attachment) => {
    if (!attachment.og_scrape_url) return acc;
    acc.set(attachment.og_scrape_url, {
      ...attachment,
      state: "loaded" /* LOADED */
    });
    return acc;
  }, /* @__PURE__ */ new Map()) ?? /* @__PURE__ */ new Map();
  const attachments = message.attachments?.filter(({ og_scrape_url }) => !og_scrape_url).map(
    (att) => ({
      ...att,
      localMetadata: { id: (0, import_nanoid4.nanoid)() }
    })
  ) || [];
  const mentioned_users = message.mentioned_users || [];
  return {
    attachments,
    linkPreviews,
    mentioned_users,
    setText: () => null,
    text: message.text || ""
  };
};
var messageInputReducer = (state, action) => {
  switch (action.type) {
    case "setText":
      return { ...state, text: action.getNewText(state.text) };
    case "clear":
      return makeEmptyMessageInputState();
    case "upsertAttachments": {
      const attachments = [...state.attachments];
      action.attachments.forEach((actionAttachment) => {
        const attachmentIndex = state.attachments.findIndex(
          (att) => att.localMetadata?.id && att.localMetadata?.id === actionAttachment.localMetadata?.id
        );
        if (attachmentIndex === -1) {
          attachments.push(actionAttachment);
        } else {
          const upsertedAttachment = mergeDeep(
            state.attachments[attachmentIndex] ?? {},
            actionAttachment
          );
          attachments.splice(attachmentIndex, 1, upsertedAttachment);
        }
      });
      return {
        ...state,
        attachments
      };
    }
    case "removeAttachments": {
      return {
        ...state,
        attachments: state.attachments.filter(
          (att) => !action.ids.includes(att.localMetadata?.id)
        )
      };
    }
    case "setLinkPreviews": {
      const linkPreviews = new Map(state.linkPreviews);
      if (action.mode === 2 /* REMOVE */) {
        Array.from(action.linkPreviews.keys()).forEach((key) => {
          linkPreviews.delete(key);
        });
      } else {
        Array.from(action.linkPreviews.values()).reduce(
          (acc, linkPreview) => {
            const existingPreview = acc.get(linkPreview.og_scrape_url);
            const alreadyEnqueued = linkPreview.state === "queued" /* QUEUED */ && existingPreview?.state !== "failed" /* FAILED */;
            if (existingPreview && alreadyEnqueued) return acc;
            acc.set(linkPreview.og_scrape_url, linkPreview);
            return acc;
          },
          linkPreviews
        );
        if (action.mode === 1 /* SET */) {
          Array.from(state.linkPreviews.keys()).forEach((key) => {
            if (!action.linkPreviews.get(key)) linkPreviews.delete(key);
          });
        }
      }
      return {
        ...state,
        linkPreviews
      };
    }
    case "addMentionedUser":
      return {
        ...state,
        mentioned_users: state.mentioned_users.concat(action.user)
      };
    default:
      return state;
  }
};
var useMessageInputState = (props) => {
  const {
    additionalTextareaProps,
    asyncMessagesMultiSendEnabled,
    audioRecordingConfig,
    audioRecordingEnabled,
    getDefaultValue,
    message,
    urlEnrichmentConfig
  } = props;
  const {
    channelCapabilities = {},
    enrichURLForPreview: enrichURLForPreviewChannelContext
  } = useChannelStateContext("useMessageInputState");
  const defaultValue = getDefaultValue?.() || additionalTextareaProps?.defaultValue;
  const initialStateValue = message || (Array.isArray(defaultValue) ? { text: defaultValue.join("") } : { text: defaultValue?.toString() });
  const [state, dispatch] = (0, import_react77.useReducer)(
    messageInputReducer,
    initialStateValue,
    initState
  );
  const enrichURLsController = useLinkPreviews({
    dispatch,
    linkPreviews: state.linkPreviews,
    ...urlEnrichmentConfig,
    enrichURLForPreview: urlEnrichmentConfig?.enrichURLForPreview ?? enrichURLForPreviewChannelContext
  });
  const { handleChange, insertText, textareaRef } = useMessageInputText(props, state, dispatch, enrichURLsController.findAndEnqueueURLsToEnrich);
  const [showCommandsList, setShowCommandsList] = (0, import_react77.useState)(false);
  const [showMentionsList, setShowMentionsList] = (0, import_react77.useState)(false);
  const openCommandsList = () => {
    dispatch({
      getNewText: () => "/",
      type: "setText"
    });
    setShowCommandsList(true);
  };
  const closeCommandsList = () => setShowCommandsList(false);
  const openMentionsList = () => {
    dispatch({
      getNewText: (currentText) => currentText + "@",
      type: "setText"
    });
    setShowMentionsList(true);
  };
  const closeMentionsList = () => setShowMentionsList(false);
  const {
    maxFilesLeft,
    numberOfUploads,
    removeAttachments,
    uploadAttachment,
    uploadNewFiles,
    upsertAttachments
  } = useAttachments(props, state, dispatch, textareaRef);
  const { handleSubmit } = useSubmitHandler(
    props,
    state,
    dispatch,
    numberOfUploads,
    enrichURLsController
  );
  const recordingController = useMediaRecorder({
    asyncMessagesMultiSendEnabled,
    enabled: !!audioRecordingEnabled,
    handleSubmit,
    recordingConfig: audioRecordingConfig,
    uploadAttachment
  });
  const isUploadEnabled = !!channelCapabilities["upload-file"];
  const { onPaste } = usePasteHandler(
    uploadNewFiles,
    insertText,
    isUploadEnabled,
    enrichURLsController.findAndEnqueueURLsToEnrich
  );
  const onSelectUser = (0, import_react77.useCallback)((item2) => {
    dispatch({ type: "addMentionedUser", user: item2 });
  }, []);
  const setText = (0, import_react77.useCallback)((text8) => {
    dispatch({ getNewText: () => text8, type: "setText" });
  }, []);
  return {
    ...state,
    ...enrichURLsController,
    closeCommandsList,
    closeMentionsList,
    handleChange,
    handleSubmit,
    insertText,
    isUploadEnabled,
    maxFilesLeft,
    numberOfUploads,
    onPaste,
    onSelectUser,
    openCommandsList,
    openMentionsList,
    recordingController,
    removeAttachments,
    setText,
    showCommandsList,
    showMentionsList,
    textareaRef,
    uploadAttachment,
    uploadNewFiles,
    upsertAttachments
  };
};

// src/components/MessageInput/DropzoneProvider.tsx
var DropzoneInner = ({
  children
}) => {
  const { acceptedFiles, multipleUploads } = useChannelStateContext("DropzoneProvider");
  const { cooldownRemaining, isUploadEnabled, maxFilesLeft, uploadNewFiles } = useMessageInputContext("DropzoneProvider");
  return /* @__PURE__ */ import_react78.default.createElement(
    ImageDropzone,
    {
      accept: acceptedFiles,
      disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining,
      handleFiles: uploadNewFiles,
      maxNumberOfFiles: maxFilesLeft,
      multiple: multipleUploads
    },
    children
  );
};
var DropzoneProvider = (props) => {
  const cooldownTimerState = useCooldownTimer();
  const messageInputState = useMessageInputState(props);
  const messageInputContextValue = useCreateMessageInputContext({
    ...cooldownTimerState,
    ...messageInputState,
    ...props
  });
  return /* @__PURE__ */ import_react78.default.createElement(MessageInputContextProvider, { value: messageInputContextValue }, /* @__PURE__ */ import_react78.default.createElement(DropzoneInner, null, props.children));
};

// src/components/Channel/constants.ts
var CHANNEL_CONTAINER_ID = "str-chat__channel";

// src/components/MessageList/ConnectionStatus.tsx
var import_react80 = __toESM(require("react"));

// src/components/MessageList/CustomNotification.tsx
var import_react79 = __toESM(require("react"));
var import_clsx18 = __toESM(require("clsx"));
var UnMemoizedCustomNotification = (props) => {
  const { active, children, className, type } = props;
  if (!active) return null;
  return /* @__PURE__ */ import_react79.default.createElement(
    "div",
    {
      "aria-live": "polite",
      className: (0, import_clsx18.default)(
        `str-chat__custom-notification notification-${type}`,
        `str-chat__notification`,
        `str-chat-react__notification`,
        className
      ),
      "data-testid": "custom-notification"
    },
    children
  );
};
var CustomNotification = import_react79.default.memo(
  UnMemoizedCustomNotification
);

// src/components/MessageList/ConnectionStatus.tsx
var UnMemoizedConnectionStatus = () => {
  const { client } = useChatContext("ConnectionStatus");
  const { t: t2 } = useTranslationContext("ConnectionStatus");
  const [online, setOnline] = (0, import_react80.useState)(true);
  (0, import_react80.useEffect)(() => {
    const connectionChanged = ({
      online: onlineStatus = false
    }) => {
      if (online !== onlineStatus) {
        setOnline(onlineStatus);
      }
    };
    client.on("connection.changed", connectionChanged);
    return () => client.off("connection.changed", connectionChanged);
  }, [client, online]);
  return /* @__PURE__ */ import_react80.default.createElement(
    CustomNotification,
    {
      active: !online,
      className: "str-chat__connection-status-notification",
      type: "error"
    },
    t2("Connection failure, reconnecting now...")
  );
};
var ConnectionStatus = import_react80.default.memo(UnMemoizedConnectionStatus);

// src/components/MessageList/GiphyPreviewMessage.tsx
var import_react227 = __toESM(require("react"));

// src/components/Message/Message.tsx
var import_react226 = __toESM(require("react"));

// src/components/Message/hooks/useActionHandler.ts
var handleActionWarning = `Action handler was called, but it is missing one of its required arguments. 
Make sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;
function useActionHandler(message) {
  const { removeMessage, updateMessage } = useChannelActionContext("useActionHandler");
  const { channel } = useChannelStateContext("useActionHandler");
  return async (dataOrName, value, event) => {
    if (event) event.preventDefault();
    if (!message || !updateMessage || !removeMessage || !channel) {
      console.warn(handleActionWarning);
      return;
    }
    const messageID = message.id;
    let formData = {};
    if (typeof dataOrName === "string") {
      formData[dataOrName] = value;
    } else {
      formData = { ...dataOrName };
    }
    if (messageID) {
      const data = await channel.sendAction(messageID, formData);
      if (data?.message) {
        updateMessage(data.message);
      } else {
        removeMessage(message);
      }
    }
  };
}

// src/components/Message/utils.tsx
var import_react_fast_compare = __toESM(require("react-fast-compare"));
var import_emoji_regex2 = __toESM(require("emoji-regex"));
var validateAndGetMessage = (func, args) => {
  if (!func || typeof func !== "function") return null;
  if (!Array.isArray(args)) {
    args = [args];
  }
  const returnValue = func(...args);
  if (typeof returnValue !== "string") return null;
  return returnValue;
};
var isUserMuted = (message, mutes) => {
  if (!mutes || !message) return false;
  const userMuted = mutes.filter((el) => el.target.id === message.user?.id);
  return !!userMuted.length;
};
var MESSAGE_ACTIONS = {
  delete: "delete",
  edit: "edit",
  flag: "flag",
  markUnread: "markUnread",
  mute: "mute",
  pin: "pin",
  quote: "quote",
  react: "react",
  reply: "reply"
};
var defaultPinPermissions = {
  commerce: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  gaming: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: false,
    user: false
  },
  livestream: {
    admin: true,
    anonymous: false,
    channel_member: false,
    channel_moderator: true,
    guest: false,
    member: false,
    moderator: true,
    owner: true,
    user: false
  },
  messaging: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  },
  team: {
    admin: true,
    anonymous: false,
    channel_member: true,
    channel_moderator: true,
    guest: false,
    member: true,
    moderator: true,
    owner: true,
    user: false
  }
};
var getMessageActions = (actions, {
  canDelete,
  canEdit,
  canFlag,
  canMarkUnread,
  canMute,
  canPin,
  canQuote,
  canReact,
  canReply
}) => {
  const messageActionsAfterPermission = [];
  let messageActions = [];
  if (actions && typeof actions === "boolean") {
    messageActions = Object.keys(MESSAGE_ACTIONS);
  } else if (actions && actions.length > 0) {
    messageActions = [...actions];
  } else {
    return [];
  }
  if (canDelete && messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.delete);
  }
  if (canEdit && messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.edit);
  }
  if (canFlag && messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.flag);
  }
  if (canMarkUnread && messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.markUnread);
  }
  if (canMute && messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.mute);
  }
  if (canPin && messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.pin);
  }
  if (canQuote && messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.quote);
  }
  if (canReact && messageActions.indexOf(MESSAGE_ACTIONS.react) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.react);
  }
  if (canReply && messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1) {
    messageActionsAfterPermission.push(MESSAGE_ACTIONS.reply);
  }
  return messageActionsAfterPermission;
};
var ACTIONS_NOT_WORKING_IN_THREAD = [
  MESSAGE_ACTIONS.pin,
  MESSAGE_ACTIONS.reply,
  MESSAGE_ACTIONS.markUnread
];
var showMessageActionsBox = (actions, inThread) => shouldRenderMessageActions({ inThread, messageActions: actions });
var shouldRenderMessageActions = ({
  customMessageActions,
  CustomMessageActionsList: CustomMessageActionsList2,
  inThread,
  messageActions
}) => {
  if (typeof CustomMessageActionsList2 !== "undefined" || typeof customMessageActions !== "undefined")
    return true;
  if (!messageActions.length) return false;
  if (inThread && messageActions.filter((action) => !ACTIONS_NOT_WORKING_IN_THREAD.includes(action)).length === 0) {
    return false;
  }
  if (messageActions.length === 1 && (messageActions.includes(MESSAGE_ACTIONS.react) || messageActions.includes(MESSAGE_ACTIONS.reply))) {
    return false;
  }
  if (messageActions.length === 2 && messageActions.includes(MESSAGE_ACTIONS.react) && messageActions.includes(MESSAGE_ACTIONS.reply)) {
    return false;
  }
  return true;
};
function areMessagesEqual(prevMessage, nextMessage) {
  return prevMessage.deleted_at === nextMessage.deleted_at && prevMessage.latest_reactions?.length === nextMessage.latest_reactions?.length && prevMessage.own_reactions?.length === nextMessage.own_reactions?.length && prevMessage.pinned === nextMessage.pinned && prevMessage.reply_count === nextMessage.reply_count && prevMessage.status === nextMessage.status && prevMessage.text === nextMessage.text && prevMessage.type === nextMessage.type && prevMessage.updated_at === nextMessage.updated_at && prevMessage.user?.updated_at === nextMessage.user?.updated_at && Boolean(prevMessage.quoted_message) === Boolean(nextMessage.quoted_message) && (!prevMessage.quoted_message || areMessagesEqual(
    prevMessage.quoted_message,
    nextMessage.quoted_message
  ));
}
var areMessagePropsEqual = (prevProps, nextProps) => {
  const { message: prevMessage, Message: prevMessageUI } = prevProps;
  const { message: nextMessage, Message: nextMessageUI } = nextProps;
  if (prevMessageUI !== nextMessageUI) return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup) return false;
  if (nextProps.showDetailedReactions !== prevProps.showDetailedReactions) {
    return false;
  }
  if (nextProps.closeReactionSelectorOnClick !== prevProps.closeReactionSelectorOnClick) {
    return false;
  }
  const messagesAreEqual = areMessagesEqual(prevMessage, nextMessage);
  if (!messagesAreEqual) return false;
  const deepEqualProps = (0, import_react_fast_compare.default)(nextProps.messageActions, prevProps.messageActions) && (0, import_react_fast_compare.default)(nextProps.readBy, prevProps.readBy) && (0, import_react_fast_compare.default)(nextProps.highlighted, prevProps.highlighted) && (0, import_react_fast_compare.default)(nextProps.groupStyles, prevProps.groupStyles) && // last 3 messages can have different group styles
  (0, import_react_fast_compare.default)(nextProps.mutes, prevProps.mutes) && (0, import_react_fast_compare.default)(nextProps.lastReceivedId, prevProps.lastReceivedId);
  if (!deepEqualProps) return false;
  return prevProps.messageListRect === nextProps.messageListRect;
};
var areMessageUIPropsEqual = (prevProps, nextProps) => {
  const { lastReceivedId: prevLastReceivedId, message: prevMessage } = prevProps;
  const { lastReceivedId: nextLastReceivedId, message: nextMessage } = nextProps;
  if (prevProps.editing !== nextProps.editing) return false;
  if (prevProps.highlighted !== nextProps.highlighted) return false;
  if (prevProps.endOfGroup !== nextProps.endOfGroup) return false;
  if (prevProps.mutes?.length !== nextProps.mutes?.length) return false;
  if (prevProps.readBy?.length !== nextProps.readBy?.length) return false;
  if (prevProps.groupStyles !== nextProps.groupStyles) return false;
  if (prevProps.showDetailedReactions !== nextProps.showDetailedReactions) {
    return false;
  }
  if ((prevMessage.id === prevLastReceivedId || prevMessage.id === nextLastReceivedId) && prevLastReceivedId !== nextLastReceivedId) {
    return false;
  }
  return areMessagesEqual(prevMessage, nextMessage);
};
var messageHasReactions = (message) => Object.values(message?.reaction_groups ?? {}).some(({ count }) => count > 0);
var messageHasAttachments = (message) => !!message?.attachments && !!message.attachments.length;
var getImages = (message) => {
  if (!message?.attachments) {
    return [];
  }
  return message.attachments.filter((item2) => item2.type === "image");
};
var getNonImageAttachments = (message) => {
  if (!message?.attachments) {
    return [];
  }
  return message.attachments.filter((item2) => item2.type !== "image");
};
var mapToUserNameOrId = (user) => user.name || user.id;
var getReadByTooltipText = (users, t2, client, tooltipUserNameMapper) => {
  let outStr = "";
  if (!t2) {
    throw new Error(
      "getReadByTooltipText was called, but translation function is not available"
    );
  }
  if (!tooltipUserNameMapper) {
    throw new Error(
      "getReadByTooltipText was called, but tooltipUserNameMapper function is not available"
    );
  }
  const otherUsers = users.filter((item2) => item2 && client?.user && item2.id !== client.user.id).map(tooltipUserNameMapper);
  const slicedArr = otherUsers.slice(0, 5);
  const restLength = otherUsers.length - slicedArr.length;
  if (slicedArr.length === 1) {
    outStr = `${slicedArr[0]} `;
  } else if (slicedArr.length === 2) {
    outStr = t2("{{ firstUser }} and {{ secondUser }}", {
      firstUser: slicedArr[0],
      secondUser: slicedArr[1]
    });
  } else if (slicedArr.length > 2) {
    if (restLength === 0) {
      const lastUser = slicedArr.splice(slicedArr.length - 1, 1);
      outStr = t2("{{ commaSeparatedUsers }}, and {{ lastUser }}", {
        commaSeparatedUsers: slicedArr.join(", "),
        lastUser
      });
    } else {
      outStr = t2("{{ commaSeparatedUsers }} and {{ moreCount }} more", {
        commaSeparatedUsers: slicedArr.join(", "),
        moreCount: restLength
      });
    }
  }
  return outStr;
};
var isOnlyEmojis = (text8) => {
  if (!text8) return false;
  const noEmojis = text8.replace((0, import_emoji_regex2.default)(), "");
  const noSpace = noEmojis.replace(/[\s\n]/gm, "");
  return !noSpace;
};
var isMessageBounced = (message) => message.type === "error" && (message.moderation_details?.action === "MESSAGE_RESPONSE_ACTION_BOUNCE" || message.moderation?.action === "bounce");
var isMessageBlocked = (message) => message.type === "error" && (message.moderation_details?.action === "MESSAGE_RESPONSE_ACTION_REMOVE" || message.moderation?.action === "remove");
var isMessageEdited = (message) => !!message.message_text_updated_at;

// src/components/Message/hooks/useDeleteHandler.ts
var useDeleteHandler = (message, notifications = {}) => {
  const { getErrorNotification, notify } = notifications;
  const { deleteMessage, updateMessage } = useChannelActionContext("useDeleteHandler");
  const { client } = useChatContext("useDeleteHandler");
  const { t: t2 } = useTranslationContext("useDeleteHandler");
  return async (event) => {
    event.preventDefault();
    if (!message?.id || !client || !updateMessage) {
      return;
    }
    try {
      const deletedMessage = await deleteMessage(message);
      updateMessage(deletedMessage);
    } catch (e2) {
      const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      if (notify) notify(errorMessage2 || t2("Error deleting message"), "error");
    }
  };
};

// src/components/Message/hooks/useEditHandler.ts
var import_react81 = require("react");
var useEditHandler = (customInitialState = false, customSetEditing, customClearEditingHandler) => {
  const [editing, setEditing] = (0, import_react81.useState)(customInitialState);
  const setEdit = customSetEditing || ((event) => {
    if (event?.preventDefault) {
      event.preventDefault();
    }
    setEditing(true);
  });
  const clearEdit = customClearEditingHandler || ((event) => {
    if (event?.preventDefault) {
      event.preventDefault();
    }
    setEditing(false);
  });
  return { clearEdit, editing, setEdit };
};

// src/components/Message/hooks/useFlagHandler.ts
var missingUseFlagHandlerParameterWarning = "useFlagHandler was called but it is missing one or more necessary parameters.";
var useFlagHandler = (message, notifications = {}) => {
  const { client } = useChatContext("useFlagHandler");
  const { t: t2 } = useTranslationContext("useFlagHandler");
  return async (event) => {
    event.preventDefault();
    const { getErrorNotification, getSuccessNotification, notify } = notifications;
    if (!client || !t2 || !notify || !message?.id) {
      console.warn(missingUseFlagHandlerParameterWarning);
      return;
    }
    if (client.user?.banned) {
      return notify(t2("Error adding flag"), "error");
    }
    try {
      await client.flagMessage(message.id);
      const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
      notify(successMessage || t2("Message has been successfully flagged"), "success");
    } catch (e2) {
      const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      notify(errorMessage2 || t2("Error adding flag"), "error");
    }
  };
};

// src/components/Message/hooks/useMentionsHandler.ts
function createEventHandler(fn, message) {
  return (event) => {
    if (typeof fn !== "function" || !message?.mentioned_users?.length) {
      return;
    }
    fn(event, message.mentioned_users);
  };
}
var useMentionsHandler = (message, customMentionHandler) => {
  const {
    onMentionsClick: contextOnMentionsClick,
    onMentionsHover: contextOnMentionsHover
  } = useChannelActionContext("useMentionsHandler");
  const onMentionsClick = customMentionHandler?.onMentionsClick || contextOnMentionsClick || (() => null);
  const onMentionsHover = customMentionHandler?.onMentionsHover || contextOnMentionsHover || (() => null);
  return {
    onMentionsClick: createEventHandler(onMentionsClick, message),
    onMentionsHover: createEventHandler(onMentionsHover, message)
  };
};

// src/components/Message/hooks/useMarkUnreadHandler.ts
var useMarkUnreadHandler = (message, notifications = {}) => {
  const { getErrorNotification, getSuccessNotification, notify } = notifications;
  const { channel } = useChannelStateContext("useMarkUnreadHandler");
  const { t: t2 } = useTranslationContext("useMarkUnreadHandler");
  return async (event) => {
    event.preventDefault();
    if (!message?.id) {
      console.warn("Mark unread handler does not have access to message id");
      return;
    }
    try {
      await channel.markUnread({ message_id: message.id });
      if (!notify) return;
      const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message]);
      if (successMessage) notify(successMessage, "success");
    } catch (e2) {
      if (!notify) return;
      const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
      if (getErrorNotification && !errorMessage2) return;
      notify(
        errorMessage2 || t2(
          "Error marking message unread. Cannot mark unread messages older than the newest 100 channel messages."
        ),
        "error"
      );
    }
  };
};

// src/components/Message/hooks/useMuteHandler.ts
var missingUseMuteHandlerParamsWarning = "useMuteHandler was called but it is missing one or more necessary parameter.";
var useMuteHandler = (message, notifications = {}) => {
  const { mutes } = useChannelStateContext("useMuteHandler");
  const { client } = useChatContext("useMuteHandler");
  const { t: t2 } = useTranslationContext("useMuteHandler");
  return async (event) => {
    event.preventDefault();
    const { getErrorNotification, getSuccessNotification, notify } = notifications;
    if (!t2 || !message?.user || !notify || !client) {
      console.warn(missingUseMuteHandlerParamsWarning);
      return;
    }
    if (!isUserMuted(message, mutes)) {
      try {
        await client.muteUser(message.user.id);
        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);
        notify(
          successMessage || t2(`{{ user }} has been muted`, {
            user: message.user.name || message.user.id
          }),
          "success"
        );
      } catch (e2) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);
        notify(errorMessage2 || t2("Error muting a user ..."), "error");
      }
    } else {
      try {
        await client.unmuteUser(message.user.id);
        const fallbackMessage = t2(`{{ user }} has been unmuted`, {
          user: message.user.name || message.user.id
        });
        const successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]) || fallbackMessage;
        if (typeof successMessage === "string") {
          notify(successMessage, "success");
        }
      } catch (e2) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]) || t2("Error unmuting a user ...");
        if (typeof errorMessage2 === "string") {
          notify(errorMessage2, "error");
        }
      }
    }
  };
};

// src/components/Message/hooks/useOpenThreadHandler.ts
var useOpenThreadHandler = (message, customOpenThread) => {
  const { openThread: channelOpenThread } = useChannelActionContext("useOpenThreadHandler");
  const openThread = customOpenThread || channelOpenThread;
  return (event) => {
    if (!openThread || !message) {
      console.warn(
        "Open thread handler was called but it is missing one of its parameters"
      );
      return;
    }
    openThread(message, event);
  };
};

// src/components/Message/hooks/usePinHandler.ts
var usePinHandler = (message, _permissions = defaultPinPermissions, notifications = {}) => {
  const { getErrorNotification, notify } = notifications;
  const { updateMessage } = useChannelActionContext("usePinHandler");
  const { channelCapabilities = {} } = useChannelStateContext("usePinHandler");
  const { client } = useChatContext("usePinHandler");
  const { t: t2 } = useTranslationContext("usePinHandler");
  const canPin = !!channelCapabilities["pin-message"];
  const handlePin = async (event) => {
    event.preventDefault();
    if (!message) return;
    if (!message.pinned) {
      try {
        const optimisticMessage = {
          ...message,
          pinned: true,
          pinned_at: /* @__PURE__ */ new Date(),
          pinned_by: client.user
        };
        updateMessage(optimisticMessage);
        await client.pinMessage(message);
      } catch (e2) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
        if (notify) notify(errorMessage2 || t2("Error pinning message"), "error");
        updateMessage(message);
      }
    } else {
      try {
        const optimisticMessage = {
          ...message,
          pin_expires: null,
          pinned: false,
          pinned_at: null,
          pinned_by: null
        };
        updateMessage(optimisticMessage);
        await client.unpinMessage(message);
      } catch (e2) {
        const errorMessage2 = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);
        if (notify) notify(errorMessage2 || t2("Error removing message pin"), "error");
        updateMessage(message);
      }
    }
  };
  return { canPin, handlePin };
};

// src/components/Message/hooks/useReactionHandler.ts
var import_react127 = require("react");
var import_lodash16 = __toESM(require("lodash.throttle"));

// src/components/Threads/ThreadContext.tsx
var import_react82 = __toESM(require("react"));
var ThreadContext = (0, import_react82.createContext)(void 0);
var useThreadContext = () => {
  const thread = (0, import_react82.useContext)(ThreadContext);
  return thread ?? void 0;
};
var ThreadProvider = ({
  children,
  thread
}) => /* @__PURE__ */ import_react82.default.createElement(ThreadContext.Provider, { value: thread }, /* @__PURE__ */ import_react82.default.createElement(Channel, { channel: thread?.channel }, children));

// src/components/Threads/ThreadList/ThreadList.tsx
var import_react126 = __toESM(require("react"));
var import_react_virtuoso = require("react-virtuoso");

// src/components/Threads/ThreadList/ThreadListItem.tsx
var import_react122 = __toESM(require("react"));

// src/components/Threads/ThreadList/ThreadListItemUI.tsx
var import_react121 = __toESM(require("react"));
var import_clsx27 = __toESM(require("clsx"));

// src/components/Message/Timestamp.tsx
var import_react83 = __toESM(require("react"));
function Timestamp(props) {
  const { calendar: calendar3, calendarFormats, customClass, format, timestamp } = props;
  const { formatDate } = useMessageContext("MessageTimestamp");
  const { t: t2, tDateTimeParser } = useTranslationContext("MessageTimestamp");
  const normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;
  const when = (0, import_react83.useMemo)(
    () => getDateString({
      calendar: calendar3,
      calendarFormats,
      format,
      formatDate,
      messageCreatedAt: normalizedTimestamp,
      t: t2,
      tDateTimeParser,
      timestampTranslationKey: "timestamp/MessageTimestamp"
    }),
    [
      calendar3,
      calendarFormats,
      format,
      formatDate,
      normalizedTimestamp,
      t2,
      tDateTimeParser
    ]
  );
  if (!when) {
    return null;
  }
  return /* @__PURE__ */ import_react83.default.createElement(
    "time",
    {
      className: customClass,
      dateTime: normalizedTimestamp,
      title: normalizedTimestamp
    },
    when
  );
}

// src/components/Threads/UnreadCountBadge.tsx
var import_clsx19 = __toESM(require("clsx"));
var import_react84 = __toESM(require("react"));
var UnreadCountBadge = ({
  children,
  count,
  position: position4
}) => /* @__PURE__ */ import_react84.default.createElement("div", { className: "str-chat__unread-count-badge-container" }, children, count > 0 && /* @__PURE__ */ import_react84.default.createElement(
  "div",
  {
    className: (0, import_clsx19.default)(
      "str-chat__unread-count-badge",
      position4 && `str-chat__unread-count-badge--${position4}`
    )
  },
  count
));

// src/components/ChannelPreview/ChannelPreview.tsx
var import_lodash15 = __toESM(require("lodash.throttle"));
var import_react119 = __toESM(require("react"));

// src/components/ChannelPreview/ChannelPreviewMessenger.tsx
var import_react114 = __toESM(require("react"));
var import_clsx25 = __toESM(require("clsx"));

// src/components/ChannelPreview/ChannelPreviewActionButtons.tsx
var import_react113 = __toESM(require("react"));
var import_clsx24 = __toESM(require("clsx"));

// src/components/ChannelList/ChannelList.tsx
var import_react100 = __toESM(require("react"));
var import_clsx23 = __toESM(require("clsx"));

// src/components/ChannelList/ChannelListMessenger.tsx
var import_react85 = __toESM(require("react"));
var ChannelListMessenger = (props) => {
  const {
    children,
    error = null,
    loading,
    LoadingErrorIndicator: LoadingErrorIndicator2 = NullComponent,
    LoadingIndicator: LoadingIndicator2 = LoadingChannels
  } = props;
  const { t: t2 } = useTranslationContext("ChannelListMessenger");
  if (error) {
    return /* @__PURE__ */ import_react85.default.createElement(LoadingErrorIndicator2, null);
  }
  if (loading) {
    return /* @__PURE__ */ import_react85.default.createElement(LoadingIndicator2, null);
  }
  return /* @__PURE__ */ import_react85.default.createElement("div", { className: "str-chat__channel-list-messenger str-chat__channel-list-messenger-react" }, /* @__PURE__ */ import_react85.default.createElement(
    "div",
    {
      "aria-label": t2("aria/Channel list"),
      className: "str-chat__channel-list-messenger__main str-chat__channel-list-messenger-react__main",
      role: "listbox"
    },
    children
  ));
};

// src/components/ChannelList/hooks/useConnectionRecoveredListener.ts
var import_react86 = require("react");
var useConnectionRecoveredListener = (forceUpdate) => {
  const { client } = useChatContext("useConnectionRecoveredListener");
  (0, import_react86.useEffect)(() => {
    const handleEvent = () => {
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("connection.recovered", handleEvent);
    return () => {
      client.off("connection.recovered", handleEvent);
    };
  }, [client, forceUpdate]);
};

// src/components/ChannelList/hooks/useMobileNavigation.ts
var import_react87 = require("react");
var useMobileNavigation = (channelListRef, navOpen, closeMobileNav) => {
  (0, import_react87.useEffect)(() => {
    const handleClickOutside = (event) => {
      if (closeMobileNav && channelListRef.current && !channelListRef.current.contains(event.target) && navOpen) {
        closeMobileNav();
      }
    };
    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  }, [channelListRef, closeMobileNav, navOpen]);
};

// src/components/ChannelList/hooks/usePaginatedChannels.ts
var import_react88 = require("react");
var import_lodash8 = __toESM(require("lodash.uniqby"));

// src/components/ChannelList/utils.ts
var import_lodash7 = __toESM(require("lodash.uniqby"));
var MAX_QUERY_CHANNELS_LIMIT = 30;
var moveChannelUp = ({
  activeChannel,
  channels,
  cid
}) => {
  const channelIndex = channels.findIndex((channel2) => channel2.cid === cid);
  if (!activeChannel && channelIndex <= 0) return channels;
  const channel = activeChannel || channels[channelIndex];
  return (0, import_lodash7.default)([channel, ...channels], "cid");
};
function findLastPinnedChannelIndex({
  channels
}) {
  let lastPinnedChannelIndex = null;
  for (const channel of channels) {
    if (!isChannelPinned(channel)) break;
    if (typeof lastPinnedChannelIndex === "number") {
      lastPinnedChannelIndex++;
    } else {
      lastPinnedChannelIndex = 0;
    }
  }
  return lastPinnedChannelIndex;
}
var moveChannelUpwards = ({
  channels,
  channelToMove,
  channelToMoveIndexWithinChannels,
  sort
}) => {
  const targetChannelIndex = channelToMoveIndexWithinChannels ?? channels.findIndex((channel) => channel.cid === channelToMove.cid);
  const targetChannelExistsWithinList = targetChannelIndex >= 0;
  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;
  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
  const isTargetChannelPinned = isChannelPinned(channelToMove);
  if (targetChannelAlreadyAtTheTop || considerPinnedChannels && isTargetChannelPinned) {
    return channels;
  }
  const newChannels = [...channels];
  if (targetChannelExistsWithinList) {
    newChannels.splice(targetChannelIndex, 1);
  }
  let lastPinnedChannelIndex = null;
  if (considerPinnedChannels) {
    lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });
  }
  newChannels.splice(
    typeof lastPinnedChannelIndex === "number" ? lastPinnedChannelIndex + 1 : 0,
    0,
    channelToMove
  );
  return newChannels;
};
var shouldConsiderPinnedChannels = (sort) => {
  const value = extractSortValue({ atIndex: 0, sort, targetKey: "pinned_at" });
  if (typeof value !== "number") return false;
  return Math.abs(value) === 1;
};
var extractSortValue = ({
  atIndex,
  sort,
  targetKey
}) => {
  if (!sort) return null;
  let option = null;
  if (Array.isArray(sort)) {
    option = sort[atIndex] ?? null;
  } else {
    let index3 = 0;
    for (const key in sort) {
      if (index3 !== atIndex) {
        index3++;
        continue;
      }
      if (key !== targetKey) {
        return null;
      }
      option = sort;
      break;
    }
  }
  return option?.[targetKey] ?? null;
};
var shouldConsiderArchivedChannels = (filters) => {
  if (!filters) return false;
  return typeof filters.archived === "boolean";
};
var isChannelPinned = (channel) => {
  if (!channel) return false;
  const membership = channel.state.membership;
  return typeof membership.pinned_at === "string";
};
var isChannelArchived = (channel) => {
  if (!channel) return false;
  const membership = channel.state.membership;
  return typeof membership.archived_at === "string";
};

// src/components/ChannelList/hooks/usePaginatedChannels.ts
var RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 5e3;
var MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS = 2e3;
var usePaginatedChannels = (client, filters, sort, options, activeChannelHandler, recoveryThrottleIntervalMs = RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS, customQueryChannels) => {
  const {
    channelsQueryState: { error, setError, setQueryInProgress }
  } = useChatContext("usePaginatedChannels");
  const [channels, setChannels] = (0, import_react88.useState)([]);
  const [hasNextPage, setHasNextPage] = (0, import_react88.useState)(true);
  const lastRecoveryTimestamp = (0, import_react88.useRef)(void 0);
  const recoveryThrottleInterval = recoveryThrottleIntervalMs < MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS ? MIN_RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS : recoveryThrottleIntervalMs ?? RECOVER_LOADED_CHANNELS_THROTTLE_INTERVAL_IN_MS;
  const filterString = (0, import_react88.useMemo)(() => JSON.stringify(filters), [filters]);
  const sortString = (0, import_react88.useMemo)(() => JSON.stringify(sort), [sort]);
  const queryChannels = async (queryType = "load-more") => {
    setError(null);
    if (queryType === "reload") {
      setChannels([]);
    }
    setQueryInProgress(queryType);
    try {
      if (customQueryChannels) {
        await customQueryChannels({
          currentChannels: channels,
          queryType,
          setChannels,
          setHasNextPage
        });
      } else {
        const offset = queryType === "reload" ? 0 : channels.length;
        const newOptions = {
          limit: options?.limit ?? MAX_QUERY_CHANNELS_LIMIT,
          message_limit: options?.message_limit ?? DEFAULT_INITIAL_CHANNEL_PAGE_SIZE,
          offset,
          ...options
        };
        const channelQueryResponse = await client.queryChannels(
          filters,
          sort || {},
          newOptions
        );
        const newChannels = queryType === "reload" ? channelQueryResponse : (0, import_lodash8.default)([...channels, ...channelQueryResponse], "cid");
        setChannels(newChannels);
        setHasNextPage(channelQueryResponse.length >= newOptions.limit);
        if (!offset && activeChannelHandler) {
          activeChannelHandler(newChannels, setChannels);
        }
      }
    } catch (err) {
      console.warn(err);
      setError(err);
    }
    setQueryInProgress(null);
  };
  const throttleRecover = (0, import_react88.useCallback)(() => {
    const now = Date.now();
    const isFirstRecovery = !lastRecoveryTimestamp.current;
    const timeElapsedSinceLastRecoveryMs = lastRecoveryTimestamp.current ? now - lastRecoveryTimestamp.current : 0;
    if (!isFirstRecovery && timeElapsedSinceLastRecoveryMs < recoveryThrottleInterval && !error) {
      return;
    }
    lastRecoveryTimestamp.current = now;
    queryChannels("reload");
  }, [error, queryChannels, recoveryThrottleInterval]);
  const loadNextPage = () => {
    queryChannels();
  };
  (0, import_react88.useEffect)(() => {
    if (client.recoverStateOnReconnect) return;
    const { unsubscribe } = client.on("connection.recovered", throttleRecover);
    return () => {
      unsubscribe();
    };
  }, [client, throttleRecover]);
  (0, import_react88.useEffect)(() => {
    queryChannels("reload");
  }, [filterString, sortString]);
  return {
    channels,
    hasNextPage,
    loadNextPage,
    setChannels
  };
};

// src/components/ChannelList/hooks/useChannelListShape.ts
var import_react89 = require("react");
var shared = ({
  customHandler,
  event,
  setChannels
}) => {
  if (typeof customHandler === "function") {
    return customHandler(setChannels, event);
  }
  setChannels((channels) => {
    const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
    if (channelIndex < 0) return channels;
    channels.splice(channelIndex, 1);
    return [...channels];
  });
};
var useChannelListShapeDefaults = () => {
  const { client } = useChatContext();
  const handleMessageNew = (0, import_react89.useCallback)(
    ({
      allowNewMessagesFromUnfilteredChannels,
      customHandler,
      event,
      filters,
      lockChannelOrder,
      setChannels,
      sort
    }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      const channelType = event.channel_type;
      const channelId = event.channel_id;
      if (!channelType || !channelId) return;
      setChannels((currentChannels) => {
        const targetChannel = client.channel(channelType, channelId);
        const targetChannelIndex = currentChannels.indexOf(targetChannel);
        const targetChannelExistsWithinList = targetChannelIndex >= 0;
        const isTargetChannelPinned = isChannelPinned(targetChannel);
        const isTargetChannelArchived = isChannelArchived(targetChannel);
        const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
        const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
        if (
          // filter is defined, target channel is archived and filter option is set to false
          considerArchivedChannels && isTargetChannelArchived && !filters.archived || // filter is defined, target channel isn't archived and filter option is set to true
          considerArchivedChannels && !isTargetChannelArchived && filters.archived || // sort option is defined, target channel is pinned
          considerPinnedChannels && isTargetChannelPinned || // list order is locked
          lockChannelOrder || // target channel is not within the loaded list and loading from cache is disallowed
          !targetChannelExistsWithinList && !allowNewMessagesFromUnfilteredChannels
        ) {
          return currentChannels;
        }
        return moveChannelUpwards({
          channels: currentChannels,
          channelToMove: targetChannel,
          channelToMoveIndexWithinChannels: targetChannelIndex,
          sort
        });
      });
    },
    [client]
  );
  const handleNotificationMessageNew = (0, import_react89.useCallback)(
    async ({
      allowNewMessagesFromUnfilteredChannels,
      customHandler,
      event,
      filters,
      setChannels,
      sort
    }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      if (!event.channel) {
        return;
      }
      const channel = await getChannel({
        client,
        id: event.channel.id,
        type: event.channel.type
      });
      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
      if (isChannelArchived(channel) && considerArchivedChannels && !filters.archived) {
        return;
      }
      if (!allowNewMessagesFromUnfilteredChannels) {
        return;
      }
      setChannels(
        (channels) => moveChannelUpwards({
          channels,
          channelToMove: channel,
          sort
        })
      );
    },
    [client]
  );
  const handleNotificationAddedToChannel = (0, import_react89.useCallback)(
    async ({
      allowNewMessagesFromUnfilteredChannels,
      customHandler,
      event,
      setChannels,
      sort
    }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      if (!event.channel || !allowNewMessagesFromUnfilteredChannels) {
        return;
      }
      const channel = await getChannel({
        client,
        id: event.channel.id,
        members: event.channel.members?.reduce(
          (newMembers, { user, user_id }) => {
            const userId = user_id || user?.id;
            if (userId) newMembers.push(userId);
            return newMembers;
          },
          []
        ),
        type: event.channel.type
      });
      setChannels(
        (channels) => moveChannelUpwards({
          channels,
          channelToMove: channel,
          sort
        })
      );
    },
    [client]
  );
  const handleNotificationRemovedFromChannel = (0, import_react89.useCallback)(
    ({
      customHandler,
      event,
      setChannels
    }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      setChannels(
        (channels) => channels.filter((channel) => channel.cid !== event.channel?.cid)
      );
    },
    []
  );
  const handleMemberUpdated = (0, import_react89.useCallback)(
    ({
      event,
      filters,
      lockChannelOrder,
      setChannels,
      sort
    }) => {
      if (!event.member?.user || event.member.user.id !== client.userID || !event.channel_type) {
        return;
      }
      const channelType = event.channel_type;
      const channelId = event.channel_id;
      const considerPinnedChannels = shouldConsiderPinnedChannels(sort);
      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
      if (!considerPinnedChannels && !considerArchivedChannels || lockChannelOrder) {
        return;
      }
      const pinnedAtSort = extractSortValue({ atIndex: 0, sort, targetKey: "pinned_at" });
      setChannels((currentChannels) => {
        const targetChannel = client.channel(channelType, channelId);
        const targetChannelIndex = currentChannels.indexOf(targetChannel);
        const targetChannelExistsWithinList = targetChannelIndex >= 0;
        const isTargetChannelArchived = isChannelArchived(targetChannel);
        const isTargetChannelPinned = isChannelPinned(targetChannel);
        const newChannels = [...currentChannels];
        if (targetChannelExistsWithinList) {
          newChannels.splice(targetChannelIndex, 1);
        }
        if (considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived) {
          return newChannels;
        }
        let lastPinnedChannelIndex = null;
        if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {
          lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });
        }
        const newTargetChannelIndex = typeof lastPinnedChannelIndex === "number" ? lastPinnedChannelIndex + 1 : 0;
        if (currentChannels[newTargetChannelIndex] === targetChannel) {
          return currentChannels;
        }
        newChannels.splice(newTargetChannelIndex, 0, targetChannel);
        return newChannels;
      });
    },
    [client]
  );
  const handleChannelDeleted = (0, import_react89.useCallback)(
    (p) => shared(p),
    []
  );
  const handleChannelHidden = (0, import_react89.useCallback)(
    (p) => shared(p),
    []
  );
  const handleChannelVisible = (0, import_react89.useCallback)(
    async ({
      customHandler,
      event,
      filters,
      setChannels,
      sort
    }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      if (!event.channel) {
        return;
      }
      const channel = await getChannel({
        client,
        id: event.channel.id,
        type: event.channel.type
      });
      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);
      if (isChannelArchived(channel) && considerArchivedChannels && !filters.archived) {
        return;
      }
      setChannels(
        (channels) => moveChannelUpwards({
          channels,
          channelToMove: channel,
          sort
        })
      );
    },
    [client]
  );
  const handleChannelTruncated = (0, import_react89.useCallback)(
    ({ customHandler, event, setChannels }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      setChannels((channels) => [...channels]);
    },
    []
  );
  const handleChannelUpdated = (0, import_react89.useCallback)(
    ({ customHandler, event, setChannels }) => {
      if (typeof customHandler === "function") {
        return customHandler(setChannels, event);
      }
      setChannels((channels) => {
        const channelIndex = channels.findIndex(
          (channel) => channel.cid === event.channel?.cid
        );
        if (channelIndex > -1 && event.channel) {
          const newChannels = channels;
          newChannels[channelIndex].data = {
            ...event.channel,
            hidden: event.channel?.hidden ?? newChannels[channelIndex].data?.hidden,
            own_capabilities: event.channel?.own_capabilities ?? newChannels[channelIndex].data?.own_capabilities
          };
          return [...newChannels];
        }
        return channels;
      });
    },
    []
  );
  const handleUserPresenceChanged = (0, import_react89.useCallback)(
    ({ event, setChannels }) => {
      setChannels((channels) => {
        const newChannels = channels.map((channel) => {
          if (!event.user?.id || !channel.state.members[event.user.id]) {
            return channel;
          }
          const newChannel = channel;
          newChannel.state.members[event.user.id].user = event.user;
          return newChannel;
        });
        return newChannels;
      });
    },
    []
  );
  return (0, import_react89.useMemo)(
    () => ({
      handleChannelDeleted,
      handleChannelHidden,
      handleChannelTruncated,
      handleChannelUpdated,
      handleChannelVisible,
      handleMemberUpdated,
      handleMessageNew,
      handleNotificationAddedToChannel,
      handleNotificationMessageNew,
      handleNotificationRemovedFromChannel,
      handleUserPresenceChanged
    }),
    [
      handleChannelDeleted,
      handleChannelHidden,
      handleChannelTruncated,
      handleChannelUpdated,
      handleChannelVisible,
      handleMemberUpdated,
      handleMessageNew,
      handleNotificationAddedToChannel,
      handleNotificationMessageNew,
      handleNotificationRemovedFromChannel,
      handleUserPresenceChanged
    ]
  );
};
var usePrepareShapeHandlers = ({
  allowNewMessagesFromUnfilteredChannels,
  customHandleChannelListShape,
  filters,
  lockChannelOrder,
  onAddedToChannel,
  onChannelDeleted,
  onChannelHidden,
  onChannelTruncated,
  onChannelUpdated,
  onChannelVisible,
  onMessageNew,
  onMessageNewHandler,
  onRemovedFromChannel,
  setChannels,
  sort
}) => {
  const defaults = useChannelListShapeDefaults();
  const defaultHandleChannelListShapeRef = (0, import_react89.useRef)(void 0);
  const customHandleChannelListShapeRef = (0, import_react89.useRef)(void 0);
  customHandleChannelListShapeRef.current = (event) => {
    customHandleChannelListShape?.({ defaults, event, setChannels });
  };
  defaultHandleChannelListShapeRef.current = (event) => {
    switch (event.type) {
      case "message.new":
        defaults.handleMessageNew({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onMessageNewHandler,
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.message_new":
        defaults.handleNotificationMessageNew({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onMessageNew,
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.added_to_channel":
        defaults.handleNotificationAddedToChannel({
          allowNewMessagesFromUnfilteredChannels,
          customHandler: onAddedToChannel,
          event,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      case "notification.removed_from_channel":
        defaults.handleNotificationRemovedFromChannel({
          customHandler: onRemovedFromChannel,
          event,
          setChannels
        });
        break;
      case "channel.deleted":
        defaults.handleChannelDeleted({
          customHandler: onChannelDeleted,
          event,
          setChannels
        });
        break;
      case "channel.hidden":
        defaults.handleChannelHidden({
          customHandler: onChannelHidden,
          event,
          setChannels
        });
        break;
      case "channel.visible":
        defaults.handleChannelVisible({
          customHandler: onChannelVisible,
          event,
          filters,
          setChannels,
          sort
        });
        break;
      case "channel.truncated":
        defaults.handleChannelTruncated({
          customHandler: onChannelTruncated,
          event,
          setChannels
        });
        break;
      case "channel.updated":
        defaults.handleChannelUpdated({
          customHandler: onChannelUpdated,
          event,
          setChannels
        });
        break;
      case "user.presence.changed":
        defaults.handleUserPresenceChanged({ event, setChannels });
        break;
      case "member.updated":
        defaults.handleMemberUpdated({
          event,
          filters,
          lockChannelOrder,
          setChannels,
          sort
        });
        break;
      default:
        break;
    }
  };
  const defaultFn = (0, import_react89.useCallback)((e2) => {
    defaultHandleChannelListShapeRef.current?.(e2);
  }, []);
  const customFn = (0, import_react89.useMemo)(() => {
    if (!customHandleChannelListShape) return null;
    return (e2) => {
      customHandleChannelListShapeRef.current?.(e2);
    };
  }, [customHandleChannelListShape]);
  return {
    customHandler: customFn,
    defaultHandler: defaultFn
  };
};
var useChannelListShape = (handler) => {
  const { client } = useChatContext();
  (0, import_react89.useEffect)(() => {
    const subscription = client.on("all", handler);
    return subscription.unsubscribe;
  }, [client, handler]);
};

// src/components/ChannelSearch/ChannelSearch.tsx
var import_clsx22 = __toESM(require("clsx"));
var import_react95 = __toESM(require("react"));

// src/components/ChannelSearch/hooks/useChannelSearch.ts
var import_react90 = require("react");
var import_lodash9 = __toESM(require("lodash.debounce"));
var import_lodash10 = __toESM(require("lodash.uniqby"));

// src/components/ChannelSearch/utils.ts
var isChannel = (output) => output.cid != null;

// src/components/ChannelSearch/hooks/useChannelSearch.ts
var useChannelSearch = ({
  channelType = "messaging",
  clearSearchOnClickOutside = true,
  disabled = false,
  onSearch: onSearchCallback,
  onSearchExit,
  onSelectResult,
  searchDebounceIntervalMs = 300,
  searchForChannels = false,
  searchForUsers = true,
  searchFunction,
  searchQueryParams,
  setChannels
}) => {
  const { client, setActiveChannel } = useChatContext("useChannelSearch");
  const [inputIsFocused, setInputIsFocused] = (0, import_react90.useState)(false);
  const [query, setQuery] = (0, import_react90.useState)("");
  const [results, setResults] = (0, import_react90.useState)([]);
  const [searching, setSearching] = (0, import_react90.useState)(false);
  const searchQueryPromiseInProgress = (0, import_react90.useRef)(false);
  const shouldIgnoreQueryResults = (0, import_react90.useRef)(false);
  const inputRef = (0, import_react90.useRef)(null);
  const searchBarRef = (0, import_react90.useRef)(null);
  const clearState = (0, import_react90.useCallback)(() => {
    setQuery("");
    setResults([]);
    setSearching(false);
    shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;
  }, []);
  const activateSearch = (0, import_react90.useCallback)(() => {
    setInputIsFocused(true);
  }, []);
  const exitSearch = (0, import_react90.useCallback)(() => {
    setInputIsFocused(false);
    inputRef.current?.blur();
    clearState();
    onSearchExit?.();
  }, [clearState, onSearchExit]);
  (0, import_react90.useEffect)(() => {
    if (disabled) return;
    const clickListener = (event) => {
      if (!(event.target instanceof HTMLElement)) return;
      const isInputClick = searchBarRef.current?.contains(event.target);
      if (isInputClick) return;
      if (inputIsFocused && !query || clearSearchOnClickOutside) {
        exitSearch();
      }
    };
    document.addEventListener("click", clickListener);
    return () => document.removeEventListener("click", clickListener);
  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);
  (0, import_react90.useEffect)(() => {
    if (!inputRef.current || disabled) return;
    const handleKeyDown = (event) => {
      if (event.key === "Escape") return exitSearch();
    };
    inputRef.current.addEventListener("keydown", handleKeyDown);
    return () => {
      inputRef.current?.removeEventListener("keydown", handleKeyDown);
    };
  }, [disabled]);
  const selectResult = (0, import_react90.useCallback)(
    async (result) => {
      if (!client.userID) return;
      if (onSelectResult) {
        await onSelectResult(
          {
            setQuery,
            setResults,
            setSearching
          },
          result
        );
        return;
      }
      let selectedChannel;
      if (isChannel(result)) {
        setActiveChannel(result);
        selectedChannel = result;
      } else {
        const newChannel = client.channel(channelType, {
          members: [client.userID, result.id]
        });
        await newChannel.watch();
        setActiveChannel(newChannel);
        selectedChannel = newChannel;
      }
      setChannels?.((channels) => (0, import_lodash10.default)([selectedChannel, ...channels], "cid"));
      if (clearSearchOnClickOutside) {
        exitSearch();
      }
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      clearSearchOnClickOutside,
      client,
      exitSearch,
      onSelectResult,
      setActiveChannel,
      setChannels
    ]
  );
  const getChannels = (0, import_react90.useCallback)(
    async (text8) => {
      if (!searchForChannels && !searchForUsers) return;
      let results2 = [];
      const promises = [];
      try {
        if (searchForChannels) {
          promises.push(
            client.queryChannels(
              // @ts-expect-error valid query
              {
                members: { $in: [client.userID] },
                name: { $autocomplete: text8 },
                ...searchQueryParams?.channelFilters?.filters
              },
              searchQueryParams?.channelFilters?.sort || {},
              { limit: 5, ...searchQueryParams?.channelFilters?.options }
            )
          );
        }
        if (searchForUsers) {
          promises.push(
            client.queryUsers(
              // @ts-expect-error valid query
              {
                $or: [{ id: { $autocomplete: text8 } }, { name: { $autocomplete: text8 } }],
                ...searchQueryParams?.userFilters?.filters
              },
              { id: 1, ...searchQueryParams?.userFilters?.sort },
              { limit: 8, ...searchQueryParams?.userFilters?.options }
            )
          );
        }
        if (promises.length) {
          searchQueryPromiseInProgress.current = true;
          const resolved = await Promise.all(promises);
          if (searchForChannels && searchForUsers) {
            const [channels, { users }] = resolved;
            results2 = [...channels, ...users.filter((u2) => u2.id !== client.user?.id)];
          } else if (searchForChannels) {
            const [channels] = resolved;
            results2 = [...channels];
          } else if (searchForUsers) {
            const [{ users }] = resolved;
            results2 = [...users.filter((u2) => u2.id !== client.user?.id)];
          }
        }
      } catch (error) {
        console.error(error);
      }
      setSearching(false);
      if (!shouldIgnoreQueryResults.current) {
        setResults(results2);
      } else {
        shouldIgnoreQueryResults.current = false;
      }
      searchQueryPromiseInProgress.current = false;
    },
    [client, searchForChannels, searchForUsers, searchQueryParams]
  );
  const scheduleGetChannels = (0, import_react90.useCallback)(
    (0, import_lodash9.default)(getChannels, searchDebounceIntervalMs),
    [getChannels, searchDebounceIntervalMs]
  );
  const onSearch = (0, import_react90.useCallback)(
    (event) => {
      event.preventDefault();
      if (disabled) return;
      if (searchFunction) {
        searchFunction(
          {
            setQuery,
            setResults,
            setSearching
          },
          event
        );
      } else if (!searchForChannels && !searchForUsers) {
        return;
      } else if (event.target.value) {
        setSearching(true);
        setQuery(event.target.value);
        scheduleGetChannels(event.target.value);
      } else if (!event.target.value) {
        clearState();
        scheduleGetChannels.cancel();
      }
      onSearchCallback?.(event);
    },
    [
      clearState,
      disabled,
      scheduleGetChannels,
      onSearchCallback,
      searchForChannels,
      searchForUsers,
      searchFunction
    ]
  );
  return {
    activateSearch,
    clearState,
    exitSearch,
    inputIsFocused,
    inputRef,
    onSearch,
    query,
    results,
    searchBarRef,
    searching,
    selectResult
  };
};

// src/components/ChannelSearch/SearchBar.tsx
var import_react93 = __toESM(require("react"));
var import_clsx20 = __toESM(require("clsx"));

// src/components/ChannelSearch/icons.tsx
var import_react91 = __toESM(require("react"));
var MenuIcon = () => /* @__PURE__ */ import_react91.default.createElement(
  "svg",
  {
    "data-testid": "menu-icon",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react91.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M3 8V6H21V8H3ZM3 13H21V11H3V13ZM3 18H21V16H3V18Z",
      fill: "black",
      fillRule: "evenodd"
    }
  )
);
var ReturnIcon = () => /* @__PURE__ */ import_react91.default.createElement(
  "svg",
  {
    "data-testid": "return-icon",
    fill: "none",
    height: "20",
    viewBox: "0 0 22 22",
    width: "20",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react91.default.createElement(
    "path",
    {
      d: "M21.6668 9.66666V12.3333H5.6529L12.9932 19.6736L11.1076 21.5592L0.54834 11L11.1076 0.440765L12.9932 2.32638L5.6529 9.66666H21.6668Z",
      fill: "#080707"
    }
  )
);
var XIcon = () => /* @__PURE__ */ import_react91.default.createElement(
  "svg",
  {
    fill: "none",
    height: "14",
    viewBox: "0 0 14 14",
    width: "14",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react91.default.createElement(
    "path",
    {
      d: "M14 1.41L12.59 0L7 5.59L1.41 0L0 1.41L5.59 7L0 12.59L1.41 14L7 8.41L12.59 14L14 12.59L8.41 7L14 1.41Z",
      fill: "#747881"
    }
  )
);
var SearchIcon = ({ className }) => /* @__PURE__ */ import_react91.default.createElement(
  "svg",
  {
    className,
    fill: "none",
    height: "18",
    viewBox: "0 0 18 18",
    width: "18",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react91.default.createElement(
    "path",
    {
      d: "M12.7549 11.255H11.9649L11.6849 10.985C12.6649 9.845 13.2549 8.365 13.2549 6.755C13.2549 3.165 10.3449 0.255005 6.75488 0.255005C3.16488 0.255005 0.254883 3.165 0.254883 6.755C0.254883 10.345 3.16488 13.255 6.75488 13.255C8.36488 13.255 9.84488 12.665 10.9849 11.685L11.2549 11.965V12.755L16.2549 17.745L17.7449 16.255L12.7549 11.255ZM6.75488 11.255C4.26488 11.255 2.25488 9.245 2.25488 6.755C2.25488 4.26501 4.26488 2.255 6.75488 2.255C9.24488 2.255 11.2549 4.26501 11.2549 6.755C11.2549 9.245 9.24488 11.255 6.75488 11.255Z",
      fill: "#747881"
    }
  )
);

// src/components/ChannelSearch/SearchInput.tsx
var import_react92 = __toESM(require("react"));
var SearchInput = (props) => {
  const { disabled, inputRef, onSearch, placeholder, query } = props;
  const { t: t2 } = useTranslationContext("SearchInput");
  return /* @__PURE__ */ import_react92.default.createElement(
    "input",
    {
      className: "str-chat__channel-search-input",
      "data-testid": "search-input",
      disabled,
      onChange: onSearch,
      placeholder: placeholder ?? t2("Search"),
      ref: inputRef,
      type: "text",
      value: query
    }
  );
};

// src/components/ChannelSearch/SearchBar.tsx
var SearchBarButton = ({
  children,
  className,
  onClick
}) => /* @__PURE__ */ import_react93.default.createElement(
  "button",
  {
    className: (0, import_clsx20.default)("str-chat__channel-search-bar-button", className),
    "data-testid": "search-bar-button",
    onClick
  },
  children
);
var SearchBar = (props) => {
  const {
    activateSearch,
    AppMenu,
    ClearInputIcon = XIcon,
    exitSearch,
    ExitSearchIcon = ReturnIcon,
    inputIsFocused,
    MenuIcon: MenuIcon3 = MenuIcon,
    searchBarRef,
    SearchInput: SearchInput2 = SearchInput,
    SearchInputIcon = SearchIcon,
    ...inputProps
  } = props;
  const [menuIsOpen, setMenuIsOpen] = (0, import_react93.useState)(false);
  const appMenuRef = (0, import_react93.useRef)(null);
  (0, import_react93.useEffect)(() => {
    if (!appMenuRef.current) return;
    const handleKeyDown = (event) => {
      if (menuIsOpen && event.key === "Escape") {
        setMenuIsOpen(false);
      }
    };
    const clickListener = (e2) => {
      if (!(e2.target instanceof HTMLElement) || !menuIsOpen || appMenuRef.current?.contains(e2.target))
        return;
      setMenuIsOpen(false);
    };
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("click", clickListener);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("click", clickListener);
    };
  }, [menuIsOpen]);
  (0, import_react93.useEffect)(() => {
    if (!props.inputRef.current) return;
    const input2 = props.inputRef.current;
    const handleFocus = () => {
      activateSearch();
    };
    const handleBlur = (e2) => {
      e2.stopPropagation();
    };
    input2.addEventListener("focus", handleFocus);
    input2.addEventListener("blur", handleBlur);
    return () => {
      input2.removeEventListener("focus", handleFocus);
      input2.removeEventListener("blur", handleBlur);
    };
  }, [activateSearch, props.inputRef]);
  const handleClearClick = (0, import_react93.useCallback)(() => {
    exitSearch();
    inputProps.inputRef.current?.focus();
  }, [exitSearch, inputProps.inputRef]);
  const closeAppMenu = (0, import_react93.useCallback)(() => setMenuIsOpen(false), []);
  return /* @__PURE__ */ import_react93.default.createElement(
    "div",
    {
      className: "str-chat__channel-search-bar",
      "data-testid": "search-bar",
      ref: searchBarRef
    },
    inputIsFocused ? /* @__PURE__ */ import_react93.default.createElement(
      SearchBarButton,
      {
        className: "str-chat__channel-search-bar-button--exit-search",
        onClick: exitSearch
      },
      /* @__PURE__ */ import_react93.default.createElement(ExitSearchIcon, null)
    ) : AppMenu ? /* @__PURE__ */ import_react93.default.createElement(
      SearchBarButton,
      {
        className: "str-chat__channel-search-bar-button--menu",
        onClick: () => setMenuIsOpen((prev) => !prev)
      },
      /* @__PURE__ */ import_react93.default.createElement(MenuIcon3, null)
    ) : null,
    /* @__PURE__ */ import_react93.default.createElement(
      "div",
      {
        className: (0, import_clsx20.default)(
          "str-chat__channel-search-input--wrapper",
          inputProps.query && "str-chat__channel-search-input--wrapper-active"
        )
      },
      /* @__PURE__ */ import_react93.default.createElement("div", { className: "str-chat__channel-search-input--icon" }, /* @__PURE__ */ import_react93.default.createElement(SearchInputIcon, null)),
      /* @__PURE__ */ import_react93.default.createElement(SearchInput2, { ...inputProps }),
      /* @__PURE__ */ import_react93.default.createElement(
        "button",
        {
          className: "str-chat__channel-search-input--clear-button",
          "data-testid": "clear-input-button",
          disabled: !inputProps.query,
          onClick: handleClearClick
        },
        /* @__PURE__ */ import_react93.default.createElement(ClearInputIcon, null)
      )
    ),
    menuIsOpen && AppMenu && /* @__PURE__ */ import_react93.default.createElement("div", { ref: appMenuRef }, /* @__PURE__ */ import_react93.default.createElement(AppMenu, { close: closeAppMenu }))
  );
};

// src/components/ChannelSearch/SearchResults.tsx
var import_react94 = __toESM(require("react"));
var import_clsx21 = __toESM(require("clsx"));
var DefaultSearchEmpty = () => {
  const { t: t2 } = useTranslationContext("SearchResults");
  return /* @__PURE__ */ import_react94.default.createElement("div", { "aria-live": "polite", className: "str-chat__channel-search-container-empty" }, /* @__PURE__ */ import_react94.default.createElement(SearchIcon, null), t2("No results found"));
};
var DefaultSearchResultsHeader = ({
  results
}) => {
  const { t: t2 } = useTranslationContext("SearchResultsHeader");
  return /* @__PURE__ */ import_react94.default.createElement(
    "div",
    {
      className: "str-chat__channel-search-results-header",
      "data-testid": "channel-search-results-header"
    },
    t2("searchResultsCount", {
      count: results.length
    })
  );
};
var DefaultSearchResultsList = (props) => {
  const { focusedUser, results, SearchResultItem, selectResult } = props;
  return /* @__PURE__ */ import_react94.default.createElement(import_react94.default.Fragment, null, results.map((result, index3) => /* @__PURE__ */ import_react94.default.createElement(
    SearchResultItem,
    {
      focusedUser,
      index: index3,
      key: index3,
      result,
      selectResult
    }
  )));
};
var DefaultSearchResultItem = (props) => {
  const { focusedUser, index: index3, result, selectResult } = props;
  const focused = focusedUser === index3;
  const className = (0, import_clsx21.default)(
    "str-chat__channel-search-result",
    focused && "str-chat__channel-search-result--focused"
  );
  if (isChannel(result)) {
    const channel = result;
    return /* @__PURE__ */ import_react94.default.createElement(
      ChannelPreview,
      {
        channel,
        className,
        onSelect: () => selectResult(channel)
      }
    );
  } else {
    return /* @__PURE__ */ import_react94.default.createElement(
      "button",
      {
        "aria-label": `Select User Channel: ${result.name || ""}`,
        className,
        "data-testid": "channel-search-result-user",
        onClick: () => selectResult(result),
        role: "option"
      },
      /* @__PURE__ */ import_react94.default.createElement(
        Avatar,
        {
          className: "str-chat__avatar--channel-preview",
          image: result.image,
          name: result.name || result.id,
          user: result
        }
      ),
      /* @__PURE__ */ import_react94.default.createElement("div", { className: "str-chat__channel-search-result--display-name" }, result.name || result.id)
    );
  }
};
var ResultsContainer = ({
  children,
  popupResults
}) => {
  const { t: t2 } = useTranslationContext("ResultsContainer");
  return /* @__PURE__ */ import_react94.default.createElement(
    "div",
    {
      "aria-label": t2("aria/Channel search results"),
      className: (0, import_clsx21.default)(
        `str-chat__channel-search-result-list`,
        popupResults ? "popup" : "inline"
      )
    },
    children
  );
};
var SearchResults = (props) => {
  const {
    popupResults,
    results,
    SearchEmpty = DefaultSearchEmpty,
    searching,
    SearchLoading,
    SearchResultItem = DefaultSearchResultItem,
    SearchResultsHeader = DefaultSearchResultsHeader,
    SearchResultsList = DefaultSearchResultsList,
    selectResult
  } = props;
  const { t: t2 } = useTranslationContext("SearchResults");
  const [focusedResult, setFocusedResult] = (0, import_react94.useState)();
  const handleKeyDown = (0, import_react94.useCallback)(
    (event) => {
      if (event.key === "ArrowUp") {
        setFocusedResult((prevFocused) => {
          if (prevFocused === void 0) return 0;
          return prevFocused === 0 ? results.length - 1 : prevFocused - 1;
        });
      }
      if (event.key === "ArrowDown") {
        setFocusedResult((prevFocused) => {
          if (prevFocused === void 0) return 0;
          return prevFocused === results.length - 1 ? 0 : prevFocused + 1;
        });
      }
      if (event.key === "Enter") {
        event.preventDefault();
        setFocusedResult((prevFocused) => {
          if (typeof prevFocused !== "undefined") {
            selectResult(results[prevFocused]);
            return void 0;
          }
          return prevFocused;
        });
      }
    },
    [results, selectResult]
  );
  (0, import_react94.useEffect)(() => {
    document.addEventListener("keydown", handleKeyDown, false);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [handleKeyDown]);
  if (searching) {
    return /* @__PURE__ */ import_react94.default.createElement(ResultsContainer, { popupResults }, SearchLoading ? /* @__PURE__ */ import_react94.default.createElement(SearchLoading, null) : /* @__PURE__ */ import_react94.default.createElement(
      "div",
      {
        className: "str-chat__channel-search-container-searching",
        "data-testid": "search-in-progress-indicator"
      },
      t2("Searching...")
    ));
  }
  if (!results.length) {
    return /* @__PURE__ */ import_react94.default.createElement(ResultsContainer, { popupResults }, /* @__PURE__ */ import_react94.default.createElement(SearchEmpty, null));
  }
  return /* @__PURE__ */ import_react94.default.createElement(ResultsContainer, { popupResults }, /* @__PURE__ */ import_react94.default.createElement(SearchResultsHeader, { results }), /* @__PURE__ */ import_react94.default.createElement(
    SearchResultsList,
    {
      focusedUser: focusedResult,
      results,
      SearchResultItem,
      selectResult
    }
  ));
};

// src/components/ChannelSearch/ChannelSearch.tsx
var UnMemoizedChannelSearch = (props) => {
  const {
    AppMenu,
    ClearInputIcon,
    ExitSearchIcon,
    MenuIcon: MenuIcon3,
    placeholder,
    popupResults = false,
    SearchBar: SearchBar2 = SearchBar,
    SearchEmpty,
    SearchInput: SearchInput2 = SearchInput,
    SearchInputIcon,
    SearchLoading,
    SearchResultItem,
    SearchResultsHeader,
    SearchResultsList,
    ...channelSearchParams
  } = props;
  const {
    activateSearch,
    clearState,
    exitSearch,
    inputIsFocused,
    inputRef,
    onSearch,
    query,
    results,
    searchBarRef,
    searching,
    selectResult
  } = useChannelSearch(channelSearchParams);
  return /* @__PURE__ */ import_react95.default.createElement(
    "div",
    {
      className: (0, import_clsx22.default)(
        "str-chat__channel-search",
        popupResults ? "str-chat__channel-search--popup" : "str-chat__channel-search--inline",
        {
          "str-chat__channel-search--with-results": results.length > 0
        }
      ),
      "data-testid": "channel-search"
    },
    /* @__PURE__ */ import_react95.default.createElement(
      SearchBar2,
      {
        activateSearch,
        AppMenu,
        ClearInputIcon,
        clearState,
        disabled: channelSearchParams.disabled,
        exitSearch,
        ExitSearchIcon,
        inputIsFocused,
        inputRef,
        MenuIcon: MenuIcon3,
        onSearch,
        placeholder,
        query,
        searchBarRef,
        SearchInput: SearchInput2,
        SearchInputIcon
      }
    ),
    query && /* @__PURE__ */ import_react95.default.createElement(
      SearchResults,
      {
        popupResults,
        results,
        SearchEmpty,
        searching,
        SearchLoading,
        SearchResultItem,
        SearchResultsHeader,
        SearchResultsList,
        selectResult
      }
    )
  );
};
var ChannelSearch = import_react95.default.memo(
  UnMemoizedChannelSearch
);

// src/components/EmptyStateIndicator/EmptyStateIndicator.tsx
var import_react97 = __toESM(require("react"));

// src/components/EmptyStateIndicator/icons.tsx
var import_react96 = __toESM(require("react"));
var ChatBubble = () => /* @__PURE__ */ import_react96.default.createElement(
  "svg",
  {
    "data-testid": "chat-bubble",
    fill: "none",
    height: "96",
    viewBox: "0 0 136 136",
    width: "96",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react96.default.createElement(
    "path",
    {
      d: "M106 24.5H30C24.775 24.5 20.5 28.775 20.5 34V119.5L39.5 100.5H106C111.225 100.5 115.5 96.225 115.5 91V34C115.5 28.775 111.225 24.5 106 24.5ZM106 91H39.5L30 100.5V34H106V91Z",
      fill: "#B4B7BB"
    }
  )
);

// src/components/EmptyStateIndicator/EmptyStateIndicator.tsx
var UnMemoizedEmptyStateIndicator = (props) => {
  const { listType } = props;
  const { t: t2 } = useTranslationContext("EmptyStateIndicator");
  if (listType === "thread") return null;
  if (listType === "channel") {
    const text8 = t2("You have no channels currently");
    return /* @__PURE__ */ import_react97.default.createElement(import_react97.default.Fragment, null, /* @__PURE__ */ import_react97.default.createElement("div", { className: "str-chat__channel-list-empty" }, /* @__PURE__ */ import_react97.default.createElement(ChatBubble, null), /* @__PURE__ */ import_react97.default.createElement("p", { role: "listitem" }, text8)));
  }
  if (listType === "message") {
    const text8 = t2("No chats here yet\u2026");
    return /* @__PURE__ */ import_react97.default.createElement("div", { className: "str-chat__empty-channel" }, /* @__PURE__ */ import_react97.default.createElement(ChatBubble, null), /* @__PURE__ */ import_react97.default.createElement("p", { className: "str-chat__empty-channel-text", role: "listitem" }, text8));
  }
  return /* @__PURE__ */ import_react97.default.createElement("p", null, "No items exist");
};
var EmptyStateIndicator = import_react97.default.memo(
  UnMemoizedEmptyStateIndicator
);

// src/components/LoadMore/LoadMorePaginator.tsx
var import_react99 = __toESM(require("react"));

// src/components/LoadMore/LoadMoreButton.tsx
var import_react98 = __toESM(require("react"));

// src/utils/deprecationWarning.ts
var deprecationAndReplacementWarning = (pairs, component) => {
  pairs.forEach((data) => {
    const [[oldName, oldValue], [newName, newValue]] = [
      Object.entries(data[0])[0],
      Object.entries(data[1])[0]
    ];
    if (typeof oldValue !== "undefined" && typeof newValue === "undefined" || typeof oldValue !== "undefined" && typeof newValue !== "undefined") {
      console.warn(
        `[Deprecation notice (${component})]: prefer using prop ${newName} instead of ${oldName}`
      );
    }
  });
};

// src/components/LoadMore/LoadMoreButton.tsx
var UnMemoizedLoadMoreButton = ({
  children,
  isLoading,
  onClick,
  refreshing
}) => {
  const { t: t2 } = useTranslationContext("UnMemoizedLoadMoreButton");
  const childrenOrDefaultString = children ?? t2("Load more");
  const loading = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react98.useEffect)(() => {
    deprecationAndReplacementWarning([[{ refreshing }, { isLoading }]], "LoadMoreButton");
  }, []);
  return /* @__PURE__ */ import_react98.default.createElement("div", { className: "str-chat__load-more-button" }, /* @__PURE__ */ import_react98.default.createElement(
    "button",
    {
      "aria-label": t2("aria/Load More Channels"),
      className: "str-chat__load-more-button__button str-chat__cta-button",
      "data-testid": "load-more-button",
      disabled: loading,
      onClick
    },
    loading ? /* @__PURE__ */ import_react98.default.createElement(LoadingIndicator, null) : childrenOrDefaultString
  ));
};
var LoadMoreButton = import_react98.default.memo(
  UnMemoizedLoadMoreButton
);

// src/components/LoadMore/LoadMorePaginator.tsx
var UnMemoizedLoadMorePaginator = (props) => {
  const {
    children,
    hasNextPage,
    isLoading,
    LoadMoreButton: LoadMoreButton2 = LoadMoreButton,
    loadNextPage,
    refreshing,
    reverse
  } = props;
  const loadingState = typeof isLoading !== "undefined" ? isLoading : refreshing;
  (0, import_react99.useEffect)(() => {
    deprecationAndReplacementWarning(
      [[{ refreshing }, { isLoading }]],
      "LoadMorePaginator"
    );
  }, []);
  return /* @__PURE__ */ import_react99.default.createElement(import_react99.default.Fragment, null, !reverse && children, hasNextPage && /* @__PURE__ */ import_react99.default.createElement(LoadMoreButton2, { isLoading: loadingState, onClick: loadNextPage }), reverse && children);
};
var LoadMorePaginator = import_react99.default.memo(
  UnMemoizedLoadMorePaginator
);

// src/components/ChannelList/ChannelList.tsx
var DEFAULT_FILTERS = {};
var DEFAULT_OPTIONS = {};
var DEFAULT_SORT = {};
var searchControllerStateSelector = (nextValue) => ({
  searchIsActive: nextValue.isActive
});
var UnMemoizedChannelList = (props) => {
  const {
    additionalChannelSearchProps,
    allowNewMessagesFromUnfilteredChannels = true,
    Avatar: Avatar2 = Avatar,
    channelRenderFilterFn,
    ChannelSearch: ChannelSearch2 = ChannelSearch,
    customActiveChannel,
    customQueryChannels,
    EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator,
    filters = {},
    getLatestMessagePreview: getLatestMessagePreview2,
    List: List2 = ChannelListMessenger,
    LoadingErrorIndicator: LoadingErrorIndicator2 = NullComponent,
    LoadingIndicator: LoadingIndicator2 = LoadingChannels,
    lockChannelOrder = false,
    onAddedToChannel,
    onChannelDeleted,
    onChannelHidden,
    onChannelTruncated,
    onChannelUpdated,
    onChannelVisible,
    onMessageNew,
    onMessageNewHandler,
    onRemovedFromChannel,
    options,
    Paginator = LoadMorePaginator,
    Preview,
    recoveryThrottleIntervalMs,
    renderChannels,
    sendChannelsToList = false,
    setActiveChannelOnMount = true,
    showChannelSearch = false,
    sort = DEFAULT_SORT,
    watchers = {}
  } = props;
  const {
    channel,
    channelsQueryState,
    client,
    closeMobileNav,
    customClasses,
    navOpen = false,
    searchController,
    setActiveChannel,
    theme,
    useImageFlagEmojisOnWindows
  } = useChatContext("ChannelList");
  const { Search } = useComponentContext();
  const channelListRef = (0, import_react100.useRef)(null);
  const [channelUpdateCount, setChannelUpdateCount] = (0, import_react100.useState)(0);
  const [searchActive, setSearchActive] = (0, import_react100.useState)(false);
  const { searchIsActive } = useStateStore(
    searchController.state,
    searchControllerStateSelector
  );
  const activeChannelHandler = async (channels2, setChannels2) => {
    if (!channels2.length || channels2.length > (options?.limit || MAX_QUERY_CHANNELS_LIMIT)) {
      return;
    }
    if (customActiveChannel) {
      let customActiveChannelObject = channels2.find(
        (chan) => chan.id === customActiveChannel
      );
      if (!customActiveChannelObject) {
        [customActiveChannelObject] = await client.queryChannels({
          id: customActiveChannel
        });
      }
      if (customActiveChannelObject) {
        setActiveChannel(customActiveChannelObject, watchers);
        const newChannels = moveChannelUpwards({
          channels: channels2,
          channelToMove: customActiveChannelObject,
          sort
        });
        setChannels2(newChannels);
      }
      return;
    }
    if (setActiveChannelOnMount) {
      setActiveChannel(channels2[0], watchers);
    }
  };
  const forceUpdate = (0, import_react100.useCallback)(() => setChannelUpdateCount((count) => count + 1), []);
  const onSearch = (0, import_react100.useCallback)(
    (event) => {
      setSearchActive(!!event.target.value);
      additionalChannelSearchProps?.onSearch?.(event);
    },
    [additionalChannelSearchProps]
  );
  const onSearchExit = (0, import_react100.useCallback)(() => {
    setSearchActive(false);
    additionalChannelSearchProps?.onSearchExit?.();
  }, [additionalChannelSearchProps]);
  const { channels, hasNextPage, loadNextPage, setChannels } = usePaginatedChannels(
    client,
    filters || DEFAULT_FILTERS,
    sort || DEFAULT_SORT,
    options || DEFAULT_OPTIONS,
    activeChannelHandler,
    recoveryThrottleIntervalMs,
    customQueryChannels
  );
  const loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;
  useMobileNavigation(channelListRef, navOpen, closeMobileNav);
  const { customHandler, defaultHandler } = usePrepareShapeHandlers({
    allowNewMessagesFromUnfilteredChannels,
    filters,
    lockChannelOrder,
    onAddedToChannel,
    onChannelDeleted,
    onChannelHidden,
    onChannelTruncated,
    onChannelUpdated,
    onChannelVisible,
    onMessageNew,
    onMessageNewHandler,
    onRemovedFromChannel,
    setChannels,
    sort
    // TODO: implement
    // customHandleChannelListShape
  });
  useChannelListShape(customHandler ?? defaultHandler);
  useConnectionRecoveredListener(forceUpdate);
  (0, import_react100.useEffect)(() => {
    const handleEvent = (event) => {
      if (event.cid === channel?.cid) {
        setActiveChannel();
      }
    };
    client.on("channel.deleted", handleEvent);
    client.on("channel.hidden", handleEvent);
    return () => {
      client.off("channel.deleted", handleEvent);
      client.off("channel.hidden", handleEvent);
    };
  }, [channel?.cid]);
  const renderChannel = (item2) => {
    const previewProps = {
      activeChannel: channel,
      Avatar: Avatar2,
      channel: item2,
      // forces the update of preview component on channel update
      channelUpdateCount,
      getLatestMessagePreview: getLatestMessagePreview2,
      key: item2.cid,
      Preview,
      setActiveChannel,
      watchers
    };
    return /* @__PURE__ */ import_react100.default.createElement(ChannelPreview, { ...previewProps });
  };
  const baseClass = "str-chat__channel-list";
  const className = (0, import_clsx23.default)(
    customClasses?.chat ?? "str-chat",
    theme,
    customClasses?.channelList ?? `${baseClass} ${baseClass}-react`,
    {
      "str-chat--windows-flags": useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),
      [`${baseClass}--open`]: navOpen
    }
  );
  const showChannelList = !searchActive && !searchIsActive || additionalChannelSearchProps?.popupResults;
  return /* @__PURE__ */ import_react100.default.createElement(ChannelListContextProvider, { value: { channels, setChannels } }, /* @__PURE__ */ import_react100.default.createElement("div", { className, ref: channelListRef }, showChannelSearch && (Search ? /* @__PURE__ */ import_react100.default.createElement(
    Search,
    {
      directMessagingChannelType: additionalChannelSearchProps?.channelType,
      disabled: additionalChannelSearchProps?.disabled,
      exitSearchOnInputBlur: additionalChannelSearchProps?.clearSearchOnClickOutside,
      placeholder: additionalChannelSearchProps?.placeholder
    }
  ) : /* @__PURE__ */ import_react100.default.createElement(
    ChannelSearch2,
    {
      onSearch,
      onSearchExit,
      setChannels,
      ...additionalChannelSearchProps
    }
  )), showChannelList && /* @__PURE__ */ import_react100.default.createElement(
    List2,
    {
      error: channelsQueryState.error,
      loadedChannels: sendChannelsToList ? loadedChannels : void 0,
      loading: !!channelsQueryState.queryInProgress && ["reload", "uninitialized"].includes(channelsQueryState.queryInProgress),
      LoadingErrorIndicator: LoadingErrorIndicator2,
      LoadingIndicator: LoadingIndicator2,
      setChannels
    },
    !loadedChannels?.length ? /* @__PURE__ */ import_react100.default.createElement(EmptyStateIndicator2, { listType: "channel" }) : /* @__PURE__ */ import_react100.default.createElement(
      Paginator,
      {
        hasNextPage,
        isLoading: channelsQueryState.queryInProgress === "load-more",
        loadNextPage
      },
      renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map((channel2) => renderChannel(channel2))
    )
  )));
};
var ChannelList = import_react100.default.memo(
  UnMemoizedChannelList
);

// src/components/ChannelList/hooks/useChannelDeletedListener.ts
var import_react101 = require("react");
var useChannelDeletedListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelDeletedListener");
  (0, import_react101.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
          if (channelIndex < 0) return [...channels];
          channels.splice(channelIndex, 1);
          return [...channels];
        });
      }
    };
    client.on("channel.deleted", handleEvent);
    return () => {
      client.off("channel.deleted", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// src/components/ChannelList/hooks/useChannelHiddenListener.ts
var import_react102 = require("react");
var useChannelHiddenListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelHiddenListener");
  (0, import_react102.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelIndex = channels.findIndex((channel) => channel.cid === event.cid);
          if (channelIndex < 0) return [...channels];
          channels.splice(channelIndex, 1);
          return [...channels];
        });
      }
    };
    client.on("channel.hidden", handleEvent);
    return () => {
      client.off("channel.hidden", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// src/components/ChannelList/hooks/useChannelTruncatedListener.ts
var import_react103 = require("react");
var useChannelTruncatedListener = (setChannels, customHandler, forceUpdate) => {
  const { client } = useChatContext("useChannelTruncatedListener");
  (0, import_react103.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => [...channels]);
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
      if (forceUpdate) {
        forceUpdate();
      }
    };
    client.on("channel.truncated", handleEvent);
    return () => {
      client.off("channel.truncated", handleEvent);
    };
  }, [client, customHandler, forceUpdate, setChannels]);
};

// src/components/ChannelList/hooks/useChannelUpdatedListener.ts
var import_react104 = require("react");
var useChannelUpdatedListener = (setChannels, customHandler, forceUpdate) => {
  const { client } = useChatContext("useChannelUpdatedListener");
  (0, import_react104.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => {
        const channelIndex = channels.findIndex(
          (channel) => channel.cid === event.channel?.cid
        );
        if (channelIndex > -1 && event.channel) {
          const newChannels = channels;
          newChannels[channelIndex].data = {
            ...event.channel,
            hidden: event.channel?.hidden ?? newChannels[channelIndex].data?.hidden,
            own_capabilities: event.channel?.own_capabilities ?? newChannels[channelIndex].data?.own_capabilities
          };
          return [...newChannels];
        }
        return channels;
      });
      if (forceUpdate) {
        forceUpdate();
      }
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      }
    };
    client.on("channel.updated", handleEvent);
    return () => {
      client.off("channel.updated", handleEvent);
    };
  }, [client, customHandler, forceUpdate, setChannels]);
};

// src/components/ChannelList/hooks/useChannelVisibleListener.ts
var import_react105 = require("react");
var import_lodash11 = __toESM(require("lodash.uniqby"));
var useChannelVisibleListener = (setChannels, customHandler) => {
  const { client } = useChatContext("useChannelVisibleListener");
  (0, import_react105.useEffect)(() => {
    const handleEvent = async (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (event.type && event.channel_type && event.channel_id) {
        const channel = await getChannel({
          client,
          id: event.channel_id,
          type: event.channel_type
        });
        setChannels((channels) => (0, import_lodash11.default)([channel, ...channels], "cid"));
      }
    };
    client.on("channel.visible", handleEvent);
    return () => {
      client.off("channel.visible", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// src/components/ChannelList/hooks/useMessageNewListener.ts
var import_react106 = require("react");
var import_lodash12 = __toESM(require("lodash.uniqby"));
var useMessageNewListener = (setChannels, customHandler, lockChannelOrder = false, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext("useMessageNewListener");
  (0, import_react106.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels((channels) => {
          const channelInList = channels.filter((channel) => channel.cid === event.cid).length > 0;
          if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {
            const channel = client.channel(event.channel_type, event.channel_id);
            return (0, import_lodash12.default)([channel, ...channels], "cid");
          }
          if (!lockChannelOrder) return moveChannelUp({ channels, cid: event.cid || "" });
          return channels;
        });
      }
    };
    client.on("message.new", handleEvent);
    return () => {
      client.off("message.new", handleEvent);
    };
  }, [
    allowNewMessagesFromUnfilteredChannels,
    client,
    customHandler,
    lockChannelOrder,
    setChannels
  ]);
};

// src/components/ChannelList/hooks/useNotificationAddedToChannelListener.ts
var import_react107 = require("react");
var import_lodash13 = __toESM(require("lodash.uniqby"));
var useNotificationAddedToChannelListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext(
    "useNotificationAddedToChannelListener"
  );
  (0, import_react107.useEffect)(() => {
    const handleEvent = async (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (allowNewMessagesFromUnfilteredChannels && event.channel?.type) {
        const channel = await getChannel({
          client,
          id: event.channel.id,
          members: event.channel.members?.reduce((acc, { user, user_id }) => {
            const userId = user_id || user?.id;
            if (userId) {
              acc.push(userId);
            }
            return acc;
          }, []),
          type: event.channel.type
        });
        setChannels((channels) => (0, import_lodash13.default)([channel, ...channels], "cid"));
      }
    };
    client.on("notification.added_to_channel", handleEvent);
    return () => {
      client.off("notification.added_to_channel", handleEvent);
    };
  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);
};

// src/components/ChannelList/hooks/useNotificationMessageNewListener.ts
var import_react108 = require("react");
var import_lodash14 = __toESM(require("lodash.uniqby"));
var useNotificationMessageNewListener = (setChannels, customHandler, allowNewMessagesFromUnfilteredChannels = true) => {
  const { client } = useChatContext(
    "useNotificationMessageNewListener"
  );
  (0, import_react108.useEffect)(() => {
    const handleEvent = async (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else if (allowNewMessagesFromUnfilteredChannels && event.channel?.type) {
        const channel = await getChannel({
          client,
          id: event.channel.id,
          type: event.channel.type
        });
        setChannels((channels) => (0, import_lodash14.default)([channel, ...channels], "cid"));
      }
    };
    client.on("notification.message_new", handleEvent);
    return () => {
      client.off("notification.message_new", handleEvent);
    };
  }, [allowNewMessagesFromUnfilteredChannels, client, customHandler, setChannels]);
};

// src/components/ChannelList/hooks/useNotificationRemovedFromChannelListener.ts
var import_react109 = require("react");
var useNotificationRemovedFromChannelListener = (setChannels, customHandler) => {
  const { client } = useChatContext(
    "useNotificationRemovedFromChannelListener"
  );
  (0, import_react109.useEffect)(() => {
    const handleEvent = (event) => {
      if (customHandler && typeof customHandler === "function") {
        customHandler(setChannels, event);
      } else {
        setChannels(
          (channels) => channels.filter((channel) => channel.cid !== event.channel?.cid)
        );
      }
    };
    client.on("notification.removed_from_channel", handleEvent);
    return () => {
      client.off("notification.removed_from_channel", handleEvent);
    };
  }, [client, customHandler, setChannels]);
};

// src/components/ChannelList/hooks/useUserPresenceChangedListener.ts
var import_react110 = require("react");
var useUserPresenceChangedListener = (setChannels) => {
  const { client } = useChatContext("useUserPresenceChangedListener");
  (0, import_react110.useEffect)(() => {
    const handleEvent = (event) => {
      setChannels((channels) => {
        const newChannels = channels.map((channel) => {
          if (!event.user?.id || !channel.state.members[event.user.id]) {
            return channel;
          }
          const newChannel = channel;
          newChannel.state.members[event.user.id].user = event.user;
          return newChannel;
        });
        return [...newChannels];
      });
    };
    client.on("user.presence.changed", handleEvent);
    return () => {
      client.off("user.presence.changed", handleEvent);
    };
  }, [client, setChannels]);
};

// src/components/ChannelList/hooks/useSelectedChannelState.ts
var import_react111 = require("react");
var import_shim2 = require("use-sync-external-store/shim");
var noop2 = () => {
};
function useSelectedChannelState({
  channel,
  selector: selector7,
  stateChangeEventKeys = ["all"]
}) {
  const subscribe = (0, import_react111.useCallback)(
    (onStoreChange) => {
      if (!channel) return noop2;
      const subscriptions = stateChangeEventKeys.map(
        (et) => channel.on(et, () => {
          onStoreChange(selector7(channel));
        })
      );
      return () => subscriptions.forEach((subscription) => subscription.unsubscribe());
    },
    [channel, selector7, stateChangeEventKeys]
  );
  const getSnapshot = (0, import_react111.useCallback)(() => {
    if (!channel) return void 0;
    return selector7(channel);
  }, [channel, selector7]);
  return (0, import_shim2.useSyncExternalStore)(subscribe, getSnapshot);
}

// src/components/ChannelList/hooks/useChannelMembershipState.ts
var selector = (c) => c.state.membership;
var keys2 = ["member.updated"];
function useChannelMembershipState(channel) {
  return useSelectedChannelState({ channel, selector, stateChangeEventKeys: keys2 });
}

// src/components/ChannelPreview/icons.tsx
var import_react112 = __toESM(require("react"));
var Icon2 = {
  ArchiveBox: (props) => /* @__PURE__ */ import_react112.default.createElement(
    "svg",
    {
      className: "str-chat__icon str-chat__icon--archive-box",
      fill: "currentColor",
      viewBox: "0 0 512 512",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ import_react112.default.createElement("path", { d: "M32 32l448 0c17.7 0 32 14.3 32 32l0 32c0 17.7-14.3 32-32 32L32 128C14.3 128 0 113.7 0 96L0 64C0 46.3 14.3 32 32 32zm0 128l448 0 0 256c0 35.3-28.7 64-64 64L96 480c-35.3 0-64-28.7-64-64l0-256zm128 80c0 8.8 7.2 16 16 16l160 0c8.8 0 16-7.2 16-16s-7.2-16-16-16l-160 0c-8.8 0-16 7.2-16 16z" })
  ),
  Pin: (props) => /* @__PURE__ */ import_react112.default.createElement(
    "svg",
    {
      className: "str-chat__icon str-chat__icon--pin",
      fill: "currentColor",
      viewBox: "0 0 384 512",
      xmlns: "http://www.w3.org/2000/svg",
      ...props
    },
    /* @__PURE__ */ import_react112.default.createElement("path", { d: "M32 32C32 14.3 46.3 0 64 0L320 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-29.5 0 11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3L32 352c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64 64 64C46.3 64 32 49.7 32 32zM160 384l64 0 0 96c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-96z" })
  )
};

// src/components/ChannelPreview/ChannelPreviewActionButtons.tsx
function ChannelPreviewActionButtons({
  channel
}) {
  const membership = useChannelMembershipState(channel);
  const { t: t2 } = useTranslationContext();
  return /* @__PURE__ */ import_react113.default.createElement("div", { className: "str-chat__channel-preview__action-buttons" }, /* @__PURE__ */ import_react113.default.createElement(
    "button",
    {
      "aria-label": membership.pinned_at ? t2("Unpin") : t2("Pin"),
      className: (0, import_clsx24.default)(
        "str-chat__channel-preview__action-button",
        "str-chat__channel-preview__action-button--pin",
        membership.pinned_at && "str-chat__channel-preview__action-button--active"
      ),
      onClick: (e2) => {
        e2.stopPropagation();
        if (membership.pinned_at) {
          channel.unpin();
        } else {
          channel.pin();
        }
      },
      title: membership.pinned_at ? t2("Unpin") : t2("Pin")
    },
    /* @__PURE__ */ import_react113.default.createElement(Icon2.Pin, null)
  ), /* @__PURE__ */ import_react113.default.createElement(
    "button",
    {
      "aria-label": membership.archived_at ? t2("Unarchive") : t2("Archive"),
      className: (0, import_clsx24.default)(
        "str-chat__channel-preview__action-button",
        "str-chat__channel-preview__action-button--archive",
        membership.archived_at && "str-chat__channel-preview__action-button--active"
      ),
      onClick: (e2) => {
        e2.stopPropagation();
        if (membership.archived_at) {
          channel.unarchive();
        } else {
          channel.archive();
        }
      },
      title: membership.archived_at ? t2("Unarchive") : t2("Archive")
    },
    /* @__PURE__ */ import_react113.default.createElement(Icon2.ArchiveBox, null)
  ));
}

// src/components/ChannelPreview/ChannelPreviewMessenger.tsx
var UnMemoizedChannelPreviewMessenger = (props) => {
  const {
    active,
    Avatar: Avatar2 = Avatar,
    channel,
    className: customClassName = "",
    displayImage,
    displayTitle,
    groupChannelDisplayInfo,
    latestMessagePreview,
    onSelect: customOnSelectChannel,
    setActiveChannel,
    unread,
    watchers
  } = props;
  const { ChannelPreviewActionButtons: ChannelPreviewActionButtons2 = ChannelPreviewActionButtons } = useComponentContext();
  const channelPreviewButton = (0, import_react114.useRef)(null);
  const avatarName = displayTitle || channel.state.messages[channel.state.messages.length - 1]?.user?.id;
  const onSelectChannel = (e2) => {
    if (customOnSelectChannel) {
      customOnSelectChannel(e2);
    } else if (setActiveChannel) {
      setActiveChannel(channel, watchers);
    }
    if (channelPreviewButton?.current) {
      channelPreviewButton.current.blur();
    }
  };
  return /* @__PURE__ */ import_react114.default.createElement("div", { className: "str-chat__channel-preview-container" }, /* @__PURE__ */ import_react114.default.createElement(ChannelPreviewActionButtons2, { channel }), /* @__PURE__ */ import_react114.default.createElement(
    "button",
    {
      "aria-label": `Select Channel: ${displayTitle || ""}`,
      "aria-selected": active,
      className: (0, import_clsx25.default)(
        `str-chat__channel-preview-messenger str-chat__channel-preview`,
        active && "str-chat__channel-preview-messenger--active",
        unread && unread >= 1 && "str-chat__channel-preview-messenger--unread",
        customClassName
      ),
      "data-testid": "channel-preview-button",
      onClick: onSelectChannel,
      ref: channelPreviewButton,
      role: "option"
    },
    /* @__PURE__ */ import_react114.default.createElement("div", { className: "str-chat__channel-preview-messenger--left" }, /* @__PURE__ */ import_react114.default.createElement(
      Avatar2,
      {
        className: "str-chat__avatar--channel-preview",
        groupChannelDisplayInfo,
        image: displayImage,
        name: avatarName
      }
    )),
    /* @__PURE__ */ import_react114.default.createElement("div", { className: "str-chat__channel-preview-end" }, /* @__PURE__ */ import_react114.default.createElement("div", { className: "str-chat__channel-preview-end-first-row" }, /* @__PURE__ */ import_react114.default.createElement("div", { className: "str-chat__channel-preview-messenger--name" }, /* @__PURE__ */ import_react114.default.createElement("span", null, displayTitle)), !!unread && /* @__PURE__ */ import_react114.default.createElement(
      "div",
      {
        className: "str-chat__channel-preview-unread-badge",
        "data-testid": "unread-badge"
      },
      unread
    )), /* @__PURE__ */ import_react114.default.createElement("div", { className: "str-chat__channel-preview-messenger--last-message" }, latestMessagePreview))
  ));
};
var ChannelPreviewMessenger = import_react114.default.memo(
  UnMemoizedChannelPreviewMessenger
);

// src/components/ChannelPreview/hooks/useIsChannelMuted.ts
var import_react115 = require("react");
var useIsChannelMuted = (channel) => {
  const { client } = useChatContext("useIsChannelMuted");
  const [muted, setMuted] = (0, import_react115.useState)(channel.muteStatus());
  (0, import_react115.useEffect)(() => {
    const handleEvent = () => setMuted(channel.muteStatus());
    client.on("notification.channel_mutes_updated", handleEvent);
    return () => client.off("notification.channel_mutes_updated", handleEvent);
  }, [muted]);
  return muted;
};

// src/components/ChannelPreview/hooks/useChannelPreviewInfo.ts
var import_react117 = require("react");

// src/components/ChannelPreview/utils.tsx
var import_react116 = __toESM(require("react"));
var renderPreviewText = (text8) => /* @__PURE__ */ import_react116.default.createElement(Markdown, { skipHtml: true }, text8);
var getLatestPollVote = (latestVotesByOption) => {
  let latestVote;
  for (const optionVotes of Object.values(latestVotesByOption)) {
    optionVotes.forEach((vote) => {
      if (latestVote && new Date(latestVote.updated_at) >= new Date(vote.created_at))
        return;
      latestVote = vote;
    });
  }
  return latestVote;
};
var getLatestMessagePreview = (channel, t2, userLanguage = "en", isMessageAIGenerated) => {
  const latestMessage = channel.state.latestMessages[channel.state.latestMessages.length - 1];
  const previewTextToRender = latestMessage?.i18n?.[`${userLanguage}_text`] || latestMessage?.text;
  const poll = latestMessage?.poll;
  if (!latestMessage) {
    return t2("Nothing yet...");
  }
  if (latestMessage.deleted_at) {
    return t2("Message deleted");
  }
  if (poll) {
    if (!poll.vote_count) {
      const createdBy = poll.created_by?.id === channel.getClient().userID ? t2("You") : poll.created_by?.name ?? t2("Poll");
      return t2("\u{1F4CA} {{createdBy}} created: {{ pollName}}", {
        createdBy,
        pollName: poll.name
      });
    } else {
      const latestVote = getLatestPollVote(
        poll.latest_votes_by_option
      );
      const option = latestVote && poll.options.find((opt) => opt.id === latestVote.option_id);
      if (option && latestVote) {
        return t2("\u{1F4CA} {{votedBy}} voted: {{pollOptionText}}", {
          pollOptionText: option.text,
          votedBy: latestVote?.user?.id === channel.getClient().userID ? t2("You") : latestVote.user?.name ?? t2("Poll")
        });
      }
    }
  }
  if (previewTextToRender) {
    return isMessageAIGenerated?.(latestMessage) ? previewTextToRender : renderPreviewText(previewTextToRender);
  }
  if (latestMessage.command) {
    return `/${latestMessage.command}`;
  }
  if (latestMessage.attachments?.length) {
    return t2("\u{1F3D9} Attachment...");
  }
  return t2("Empty message...");
};
var getGroupChannelDisplayInfo = (channel) => {
  const members = Object.values(channel.state.members);
  if (members.length <= 2) return;
  const info = [];
  for (let i = 0; i < members.length; i++) {
    const { user } = members[i];
    if (!user?.name && !user?.image) continue;
    info.push({ image: user.image, name: user.name });
    if (info.length === 4) break;
  }
  return info;
};
var getChannelDisplayInfo = (info, channel, currentUser) => {
  if (channel.data?.[info]) return channel.data[info];
  const members = Object.values(channel.state.members);
  if (members.length !== 2) return;
  const otherMember = members.find((member) => member.user?.id !== currentUser?.id);
  return otherMember?.user?.[info];
};
var getDisplayTitle = (channel, currentUser) => getChannelDisplayInfo("name", channel, currentUser);
var getDisplayImage = (channel, currentUser) => getChannelDisplayInfo("image", channel, currentUser);

// src/components/ChannelPreview/hooks/useChannelPreviewInfo.ts
var useChannelPreviewInfo = (props) => {
  const { channel, overrideImage, overrideTitle } = props;
  const { client } = useChatContext("useChannelPreviewInfo");
  const [displayTitle, setDisplayTitle] = (0, import_react117.useState)(
    () => overrideTitle || getDisplayTitle(channel, client.user)
  );
  const [displayImage, setDisplayImage] = (0, import_react117.useState)(
    () => overrideImage || getDisplayImage(channel, client.user)
  );
  const [groupChannelDisplayInfo, setGroupDisplayChannelInfo] = (0, import_react117.useState)(() => getGroupChannelDisplayInfo(channel));
  (0, import_react117.useEffect)(() => {
    if (overrideTitle && overrideImage) return;
    const updateInfo = () => {
      if (!overrideTitle) setDisplayTitle(getDisplayTitle(channel, client.user));
      if (!overrideImage) {
        setDisplayImage(getDisplayImage(channel, client.user));
        setGroupDisplayChannelInfo(getGroupChannelDisplayInfo(channel));
      }
    };
    updateInfo();
    client.on("user.updated", updateInfo);
    return () => {
      client.off("user.updated", updateInfo);
    };
  }, [channel, channel.data, client, overrideImage, overrideTitle]);
  return {
    displayImage: overrideImage || displayImage,
    displayTitle: overrideTitle || displayTitle,
    groupChannelDisplayInfo
  };
};

// src/components/ChannelPreview/hooks/useMessageDeliveryStatus.ts
var import_react118 = require("react");
var MessageDeliveryStatus = /* @__PURE__ */ ((MessageDeliveryStatus3) => {
  MessageDeliveryStatus3["DELIVERED"] = "delivered";
  MessageDeliveryStatus3["READ"] = "read";
  return MessageDeliveryStatus3;
})(MessageDeliveryStatus || {});
var useMessageDeliveryStatus = ({
  channel,
  lastMessage
}) => {
  const { client } = useChatContext();
  const [messageDeliveryStatus, setMessageDeliveryStatus] = (0, import_react118.useState)();
  const isOwnMessage = (0, import_react118.useCallback)(
    (message) => client.user && message?.user?.id === client.user.id,
    [client]
  );
  (0, import_react118.useEffect)(() => {
    const lastMessageIsOwn = isOwnMessage(lastMessage);
    if (!lastMessage?.created_at || !lastMessageIsOwn) return;
    const lastMessageCreatedAtDate = typeof lastMessage.created_at === "string" ? new Date(lastMessage.created_at) : lastMessage.created_at;
    const channelReadByOthersAfterLastMessageUpdate = Object.values(
      channel.state.read
    ).some(({ last_read: channelLastMarkedReadDate, user }) => {
      const ignoreOwnReadStatus = client.user && user.id !== client.user.id;
      return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;
    });
    setMessageDeliveryStatus(
      channelReadByOthersAfterLastMessageUpdate ? "read" /* READ */ : "delivered" /* DELIVERED */
    );
  }, [channel.state.read, client, isOwnMessage, lastMessage]);
  (0, import_react118.useEffect)(() => {
    const handleMessageNew = (event) => {
      if (!isOwnMessage(event.message)) {
        return setMessageDeliveryStatus(void 0);
      }
      return setMessageDeliveryStatus("delivered" /* DELIVERED */);
    };
    channel.on("message.new", handleMessageNew);
    return () => {
      channel.off("message.new", handleMessageNew);
    };
  }, [channel, client, isOwnMessage]);
  (0, import_react118.useEffect)(() => {
    if (!isOwnMessage(lastMessage)) return;
    const handleMarkRead = (event) => {
      if (event.user?.id !== client.user?.id)
        setMessageDeliveryStatus("read" /* READ */);
    };
    channel.on("message.read", handleMarkRead);
    return () => {
      channel.off("message.read", handleMarkRead);
    };
  }, [channel, client, lastMessage, isOwnMessage]);
  return {
    messageDeliveryStatus
  };
};

// src/components/ChannelPreview/ChannelPreview.tsx
var ChannelPreview = (props) => {
  const {
    active,
    channel,
    channelUpdateCount,
    getLatestMessagePreview: getLatestMessagePreview2 = getLatestMessagePreview,
    Preview = ChannelPreviewMessenger
  } = props;
  const {
    channel: activeChannel,
    client,
    isMessageAIGenerated,
    setActiveChannel
  } = useChatContext("ChannelPreview");
  const { t: t2, userLanguage } = useTranslationContext("ChannelPreview");
  const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({
    channel
  });
  const [lastMessage, setLastMessage] = (0, import_react119.useState)(
    channel.state.messages[channel.state.messages.length - 1]
  );
  const [unread, setUnread] = (0, import_react119.useState)(0);
  const { messageDeliveryStatus } = useMessageDeliveryStatus({
    channel,
    lastMessage
  });
  const isActive = typeof active === "undefined" ? activeChannel?.cid === channel.cid : active;
  const { muted } = useIsChannelMuted(channel);
  (0, import_react119.useEffect)(() => {
    const handleEvent = (event) => {
      if (!event.cid) return setUnread(0);
      if (channel.cid === event.cid) setUnread(0);
    };
    client.on("notification.mark_read", handleEvent);
    return () => client.off("notification.mark_read", handleEvent);
  }, [channel, client]);
  (0, import_react119.useEffect)(() => {
    const handleEvent = (event) => {
      if (channel.cid !== event.cid) return;
      if (event.user?.id !== client.user?.id) return;
      setUnread(channel.countUnread());
    };
    channel.on("notification.mark_unread", handleEvent);
    return () => {
      channel.off("notification.mark_unread", handleEvent);
    };
  }, [channel, client]);
  const refreshUnreadCount = (0, import_react119.useMemo)(
    () => (0, import_lodash15.default)(() => {
      if (muted) {
        setUnread(0);
      } else {
        setUnread(channel.countUnread());
      }
    }, 400),
    [channel, muted]
  );
  (0, import_react119.useEffect)(() => {
    refreshUnreadCount();
    const handleEvent = () => {
      setLastMessage(
        channel.state.latestMessages[channel.state.latestMessages.length - 1]
      );
      refreshUnreadCount();
    };
    channel.on("message.new", handleEvent);
    channel.on("message.updated", handleEvent);
    channel.on("message.deleted", handleEvent);
    channel.on("message.undeleted", handleEvent);
    channel.on("channel.truncated", handleEvent);
    return () => {
      channel.off("message.new", handleEvent);
      channel.off("message.updated", handleEvent);
      channel.off("message.deleted", handleEvent);
      channel.off("message.undeleted", handleEvent);
      channel.off("channel.truncated", handleEvent);
    };
  }, [channel, refreshUnreadCount, channelUpdateCount]);
  if (!Preview) return null;
  const latestMessagePreview = getLatestMessagePreview2(
    channel,
    t2,
    userLanguage,
    isMessageAIGenerated
  );
  return /* @__PURE__ */ import_react119.default.createElement(
    Preview,
    {
      ...props,
      active: isActive,
      displayImage,
      displayTitle,
      groupChannelDisplayInfo,
      lastMessage,
      latestMessage: latestMessagePreview,
      latestMessagePreview,
      messageDeliveryStatus,
      setActiveChannel,
      unread
    }
  );
};

// src/components/ChatView/ChatView.tsx
var import_react120 = __toESM(require("react"));
var import_clsx26 = __toESM(require("clsx"));
var ChatViewContext = (0, import_react120.createContext)({
  activeChatView: "channels",
  setActiveChatView: () => void 0
});
var ChatView = ({ children }) => {
  const [activeChatView, setActiveChatView] = (0, import_react120.useState)("channels");
  const { theme } = useChatContext();
  const value = (0, import_react120.useMemo)(() => ({ activeChatView, setActiveChatView }), [activeChatView]);
  return /* @__PURE__ */ import_react120.default.createElement(ChatViewContext.Provider, { value }, /* @__PURE__ */ import_react120.default.createElement("div", { className: (0, import_clsx26.default)("str-chat", theme, "str-chat__chat-view") }, children));
};
var ChannelsView = ({ children }) => {
  const { activeChatView } = (0, import_react120.useContext)(ChatViewContext);
  if (activeChatView !== "channels") return null;
  return /* @__PURE__ */ import_react120.default.createElement("div", { className: "str-chat__chat-view__channels" }, children);
};
var ThreadsViewContext = (0, import_react120.createContext)({
  activeThread: void 0,
  setActiveThread: () => void 0
});
var useThreadsViewContext = () => (0, import_react120.useContext)(ThreadsViewContext);
var ThreadsView = ({ children }) => {
  const { activeChatView } = (0, import_react120.useContext)(ChatViewContext);
  const [activeThread, setActiveThread] = (0, import_react120.useState)(void 0);
  const value = (0, import_react120.useMemo)(() => ({ activeThread, setActiveThread }), [activeThread]);
  if (activeChatView !== "threads") return null;
  return /* @__PURE__ */ import_react120.default.createElement(ThreadsViewContext.Provider, { value }, /* @__PURE__ */ import_react120.default.createElement("div", { className: "str-chat__chat-view__threads" }, children));
};
var useActiveThread = ({ activeThread }) => {
  (0, import_react120.useEffect)(() => {
    if (!activeThread) return;
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible" && document.hasFocus()) {
        activeThread.activate();
      }
      if (document.visibilityState === "hidden" || !document.hasFocus()) {
        activeThread.deactivate();
      }
    };
    handleVisibilityChange();
    window.addEventListener("focus", handleVisibilityChange);
    window.addEventListener("blur", handleVisibilityChange);
    return () => {
      activeThread.deactivate();
      window.addEventListener("blur", handleVisibilityChange);
      window.removeEventListener("focus", handleVisibilityChange);
    };
  }, [activeThread]);
};
var ThreadAdapter = ({ children }) => {
  const { activeThread } = useThreadsViewContext();
  useActiveThread({ activeThread });
  return /* @__PURE__ */ import_react120.default.createElement(ThreadProvider, { thread: activeThread }, children);
};
var selector2 = ({ unreadThreadCount }) => ({
  unreadThreadCount
});
var ChatViewSelector = () => {
  const { client } = useChatContext();
  const { unreadThreadCount } = useStateStore(client.threads.state, selector2);
  const { activeChatView, setActiveChatView } = (0, import_react120.useContext)(ChatViewContext);
  return /* @__PURE__ */ import_react120.default.createElement("div", { className: "str-chat__chat-view__selector" }, /* @__PURE__ */ import_react120.default.createElement(
    "button",
    {
      "aria-selected": activeChatView === "channels",
      className: "str-chat__chat-view__selector-button",
      onPointerDown: () => setActiveChatView("channels"),
      role: "tab"
    },
    /* @__PURE__ */ import_react120.default.createElement(Icon.MessageBubbleEmpty, null),
    /* @__PURE__ */ import_react120.default.createElement("div", { className: "str-chat__chat-view__selector-button-text" }, "Channels")
  ), /* @__PURE__ */ import_react120.default.createElement(
    "button",
    {
      "aria-selected": activeChatView === "threads",
      className: "str-chat__chat-view__selector-button",
      onPointerDown: () => setActiveChatView("threads"),
      role: "tab"
    },
    /* @__PURE__ */ import_react120.default.createElement(UnreadCountBadge, { count: unreadThreadCount, position: "top-right" }, /* @__PURE__ */ import_react120.default.createElement(Icon.MessageBubble, null)),
    /* @__PURE__ */ import_react120.default.createElement("div", { className: "str-chat__chat-view__selector-button-text" }, "Threads")
  ));
};
ChatView.Channels = ChannelsView;
ChatView.Threads = ThreadsView;
ChatView.ThreadAdapter = ThreadAdapter;
ChatView.Selector = ChatViewSelector;

// src/components/Threads/ThreadList/ThreadListItemUI.tsx
var attachmentTypeIconMap = {
  audio: "\u{1F508}",
  file: "\u{1F4C4}",
  image: "\u{1F4F7}",
  video: "\u{1F3A5}",
  voiceRecording: "\u{1F399}\uFE0F"
};
var getTitleFromMessage = ({
  currentUserId,
  message
}) => {
  const attachment = message?.attachments?.at(0);
  let attachmentIcon = "";
  if (attachment) {
    attachmentIcon += attachmentTypeIconMap[attachment.type ?? "file"] ?? attachmentTypeIconMap.file;
  }
  const messageBelongsToCurrentUser = message?.user?.id === currentUserId;
  if (message?.deleted_at && message.parent_id)
    return (0, import_clsx27.default)(messageBelongsToCurrentUser && "You:", "This reply was deleted.");
  if (message?.deleted_at && !message.parent_id)
    return (0, import_clsx27.default)(messageBelongsToCurrentUser && "You:", "The source message was deleted.");
  if (attachment?.type === "voiceRecording")
    return (0, import_clsx27.default)(attachmentIcon, messageBelongsToCurrentUser && "You:", "Voice message");
  return (0, import_clsx27.default)(
    attachmentIcon,
    messageBelongsToCurrentUser && "You:",
    message?.text || attachment?.fallback || "N/A"
  );
};
var ThreadListItemUI = (props) => {
  const { client } = useChatContext();
  const thread = useThreadListItemContext();
  const selector7 = (0, import_react121.useCallback)(
    (nextValue) => ({
      channel: nextValue.channel,
      deletedAt: nextValue.deletedAt,
      latestReply: nextValue.replies.at(-1),
      ownUnreadMessageCount: client.userID && nextValue.read[client.userID]?.unreadMessageCount || 0,
      parentMessage: nextValue.parentMessage
    }),
    [client]
  );
  const { channel, deletedAt, latestReply, ownUnreadMessageCount, parentMessage } = useStateStore(thread.state, selector7);
  const { displayTitle: channelDisplayTitle } = useChannelPreviewInfo({ channel });
  const { activeThread, setActiveThread } = useThreadsViewContext();
  const avatarProps = deletedAt ? null : latestReply?.user;
  return /* @__PURE__ */ import_react121.default.createElement(
    "button",
    {
      "aria-selected": activeThread === thread,
      className: "str-chat__thread-list-item",
      "data-thread-id": thread.id,
      onClick: () => setActiveThread(thread),
      role: "option",
      ...props
    },
    /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__channel" }, /* @__PURE__ */ import_react121.default.createElement(Icon.MessageBubble, null), /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__channel-text" }, channelDisplayTitle)),
    /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__parent-message" }, /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__parent-message-text" }, "replied to: ", getTitleFromMessage({ message: parentMessage })), !deletedAt && /* @__PURE__ */ import_react121.default.createElement(UnreadCountBadge, { count: ownUnreadMessageCount })),
    /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply" }, /* @__PURE__ */ import_react121.default.createElement(Avatar, { ...avatarProps }), /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-details" }, !deletedAt && /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-created-by" }, latestReply?.user?.name || latestReply?.user?.id || "Unknown sender"), /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-text-and-timestamp" }, /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-text" }, deletedAt ? "This thread was deleted" : getTitleFromMessage({
      currentUserId: client.user?.id,
      message: latestReply
    })), /* @__PURE__ */ import_react121.default.createElement("div", { className: "str-chat__thread-list-item__latest-reply-timestamp" }, /* @__PURE__ */ import_react121.default.createElement(Timestamp, { timestamp: deletedAt ?? latestReply?.created_at })))))
  );
};

// src/components/Threads/ThreadList/ThreadListItem.tsx
var ThreadListItemContext = (0, import_react122.createContext)(void 0);
var useThreadListItemContext = () => (0, import_react122.useContext)(ThreadListItemContext);
var ThreadListItem = ({
  thread,
  threadListItemUIProps
}) => {
  const { ThreadListItemUI: ThreadListItemUI2 = ThreadListItemUI } = useComponentContext();
  return /* @__PURE__ */ import_react122.default.createElement(ThreadListItemContext.Provider, { value: thread }, /* @__PURE__ */ import_react122.default.createElement(ThreadListItemUI2, { ...threadListItemUIProps }));
};
{
}

// src/components/Threads/ThreadList/ThreadListEmptyPlaceholder.tsx
var import_react123 = __toESM(require("react"));
var ThreadListEmptyPlaceholder = () => /* @__PURE__ */ import_react123.default.createElement("div", { className: "str-chat__thread-list-empty-placeholder" }, /* @__PURE__ */ import_react123.default.createElement(Icon.MessageBubble, null), "No threads here yet...");

// src/components/Threads/ThreadList/ThreadListUnseenThreadsBanner.tsx
var import_react124 = __toESM(require("react"));
var selector3 = (nextValue) => ({
  unseenThreadIds: nextValue.unseenThreadIds
});
var ThreadListUnseenThreadsBanner = () => {
  const { client } = useChatContext();
  const { unseenThreadIds } = useStateStore(client.threads.state, selector3);
  if (!unseenThreadIds.length) return null;
  return /* @__PURE__ */ import_react124.default.createElement("div", { className: "str-chat__unseen-threads-banner" }, unseenThreadIds.length, " unread threads", /* @__PURE__ */ import_react124.default.createElement(
    "button",
    {
      className: "str-chat__unseen-threads-banner__button",
      onClick: () => client.threads.reload()
    },
    /* @__PURE__ */ import_react124.default.createElement(Icon.Reload, null)
  ));
};

// src/components/Threads/ThreadList/ThreadListLoadingIndicator.tsx
var import_react125 = __toESM(require("react"));
var selector4 = (nextValue) => ({
  isLoadingNext: nextValue.pagination.isLoadingNext
});
var ThreadListLoadingIndicator = () => {
  const { LoadingIndicator: LoadingIndicator2 = LoadingIndicator } = useComponentContext();
  const { client } = useChatContext();
  const { isLoadingNext } = useStateStore(client.threads.state, selector4);
  if (!isLoadingNext) return null;
  return /* @__PURE__ */ import_react125.default.createElement("div", { className: "str-chat__thread-list-loading-indicator" }, /* @__PURE__ */ import_react125.default.createElement(LoadingIndicator2, null));
};

// src/components/Threads/ThreadList/ThreadList.tsx
var selector5 = (nextValue) => ({ threads: nextValue.threads });
var computeItemKey = (_, item2) => item2.id;
var useThreadList = () => {
  const { client } = useChatContext();
  (0, import_react126.useEffect)(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === "visible") {
        client.threads.activate();
      }
      if (document.visibilityState === "hidden") {
        client.threads.deactivate();
      }
    };
    handleVisibilityChange();
    document.addEventListener("visibilitychange", handleVisibilityChange);
    return () => {
      client.threads.deactivate();
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [client]);
};
var ThreadList = ({ virtuosoProps }) => {
  const { client } = useChatContext();
  const {
    ThreadListEmptyPlaceholder: ThreadListEmptyPlaceholder2 = ThreadListEmptyPlaceholder,
    ThreadListItem: ThreadListItem2 = ThreadListItem,
    ThreadListLoadingIndicator: ThreadListLoadingIndicator2 = ThreadListLoadingIndicator,
    ThreadListUnseenThreadsBanner: ThreadListUnseenThreadsBanner2 = ThreadListUnseenThreadsBanner
  } = useComponentContext();
  const { threads } = useStateStore(client.threads.state, selector5);
  useThreadList();
  return /* @__PURE__ */ import_react126.default.createElement("div", { className: "str-chat__thread-list-container" }, /* @__PURE__ */ import_react126.default.createElement(ThreadListUnseenThreadsBanner2, null), /* @__PURE__ */ import_react126.default.createElement(
    import_react_virtuoso.Virtuoso,
    {
      atBottomStateChange: (atBottom) => atBottom && client.threads.loadNextPage(),
      className: "str-chat__thread-list",
      components: {
        EmptyPlaceholder: ThreadListEmptyPlaceholder2,
        Footer: ThreadListLoadingIndicator2
      },
      computeItemKey,
      data: threads,
      itemContent: (_, thread) => /* @__PURE__ */ import_react126.default.createElement(ThreadListItem2, { thread }),
      ...virtuosoProps
    }
  ));
};

// src/components/Message/hooks/useReactionHandler.ts
var reactionHandlerWarning = `Reaction handler was called, but it is missing one of its required arguments.
Make sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;
var useReactionHandler = (message) => {
  const thread = useThreadContext();
  const { updateMessage } = useChannelActionContext("useReactionHandler");
  const { channel, channelCapabilities } = useChannelStateContext("useReactionHandler");
  const { client } = useChatContext("useReactionHandler");
  const createMessagePreview = (0, import_react127.useCallback)(
    (add, reaction, message2) => {
      const newReactionGroups = message2?.reaction_groups || {};
      const reactionType = reaction.type;
      const hasReaction = !!newReactionGroups[reactionType];
      if (add) {
        const timestamp = (/* @__PURE__ */ new Date()).toISOString();
        newReactionGroups[reactionType] = hasReaction ? {
          ...newReactionGroups[reactionType],
          count: newReactionGroups[reactionType].count + 1
        } : {
          count: 1,
          first_reaction_at: timestamp,
          last_reaction_at: timestamp,
          sum_scores: 1
        };
      } else {
        if (hasReaction && newReactionGroups[reactionType].count > 1) {
          newReactionGroups[reactionType] = {
            ...newReactionGroups[reactionType],
            count: newReactionGroups[reactionType].count - 1
          };
        } else {
          delete newReactionGroups[reactionType];
        }
      }
      const newReactions = add ? [reaction, ...message2?.latest_reactions || []] : message2.latest_reactions?.filter(
        (item2) => !(item2.type === reaction.type && item2.user_id === reaction.user_id)
      );
      const newOwnReactions = add ? [reaction, ...message2?.own_reactions || []] : message2?.own_reactions?.filter((item2) => item2.type !== reaction.type);
      return {
        ...message2,
        latest_reactions: newReactions || message2.latest_reactions,
        own_reactions: newOwnReactions,
        reaction_groups: newReactionGroups
      };
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [client.user, client.userID]
  );
  const createReactionPreview = (type) => ({
    message_id: message?.id,
    score: 1,
    type,
    user: client.user,
    user_id: client.user?.id
  });
  const toggleReaction = (0, import_lodash16.default)(async (id, type, add) => {
    if (!message || !channelCapabilities["send-reaction"]) return;
    const newReaction = createReactionPreview(
      type
    );
    const tempMessage = createMessagePreview(add, newReaction, message);
    try {
      updateMessage(tempMessage);
      thread?.upsertReplyLocally({ message: tempMessage });
      const messageResponse = add ? await channel.sendReaction(id, { type }) : await channel.deleteReaction(id, type);
      updateMessage(messageResponse.message);
    } catch (error) {
      updateMessage(message);
      thread?.upsertReplyLocally({ message });
    }
  }, 1e3);
  return async (reactionType, event) => {
    if (event?.preventDefault) {
      event.preventDefault();
    }
    if (!message) {
      return console.warn(reactionHandlerWarning);
    }
    let userExistingReaction = null;
    if (message.own_reactions) {
      message.own_reactions.forEach((reaction) => {
        if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {
          userExistingReaction = reaction;
        } else if (reaction.user && client.userID !== reaction.user.id) {
          console.warn(
            `message.own_reactions contained reactions from a different user, this indicates a bug`
          );
        }
      });
    }
    try {
      if (userExistingReaction) {
        await toggleReaction(message.id, userExistingReaction.type, false);
      } else {
        await toggleReaction(message.id, reactionType, true);
      }
    } catch (error) {
      console.log({ error });
    }
  };
};

// src/components/Message/hooks/useRetryHandler.ts
var useRetryHandler = (customRetrySendMessage) => {
  const { retrySendMessage: contextRetrySendMessage } = useChannelActionContext("useRetryHandler");
  const retrySendMessage = customRetrySendMessage || contextRetrySendMessage;
  return async (message) => {
    if (message) {
      await retrySendMessage(message);
    }
  };
};

// src/components/Message/hooks/useUserHandler.ts
var useUserHandler = (message, eventHandlers) => ({
  onUserClick: (event) => {
    if (typeof eventHandlers?.onUserClickHandler !== "function" || !message?.user) {
      return;
    }
    eventHandlers.onUserClickHandler(event, message.user);
  },
  onUserHover: (event) => {
    if (typeof eventHandlers?.onUserHoverHandler !== "function" || !message?.user) {
      return;
    }
    eventHandlers.onUserHoverHandler(event, message.user);
  }
});

// src/components/Message/hooks/useUserRole.ts
var useUserRole = (message, onlySenderCanEdit, disableQuotedMessages) => {
  const { channel, channelCapabilities = {} } = useChannelStateContext("useUserRole");
  const { client } = useChatContext("useUserRole");
  const isAdmin = client.user?.role === "admin" || channel.state.membership.role === "admin";
  const isOwner = channel.state.membership.role === "owner";
  const isModerator = client.user?.role === "channel_moderator" || channel.state.membership.role === "channel_moderator" || channel.state.membership.role === "moderator" || channel.state.membership.is_moderator === true || channel.state.membership.channel_role === "channel_moderator";
  const isMyMessage = client.userID === message.user?.id;
  const canEdit = !message.poll && (!onlySenderCanEdit && channelCapabilities["update-any-message"] || isMyMessage && channelCapabilities["update-own-message"]);
  const canDelete = channelCapabilities["delete-any-message"] || isMyMessage && channelCapabilities["delete-own-message"];
  const canFlag = !isMyMessage && channelCapabilities["flag-message"];
  const canMarkUnread = channelCapabilities["read-events"];
  const canMute = !isMyMessage && channelCapabilities["mute-channel"];
  const canQuote = !disableQuotedMessages && channelCapabilities["quote-message"];
  const canReact = channelCapabilities["send-reaction"];
  const canReply = channelCapabilities["send-reply"];
  return {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canQuote,
    canReact,
    canReply,
    isAdmin,
    isModerator,
    isMyMessage,
    isOwner
  };
};

// src/components/Message/hooks/useReactionsFetcher.ts
var MAX_MESSAGE_REACTIONS_TO_FETCH = 1e3;
function useReactionsFetcher(message, notifications = {}) {
  const { client } = useChatContext("useRectionsFetcher");
  const { t: t2 } = useTranslationContext("useReactionFetcher");
  const { getErrorNotification, notify } = notifications;
  return async (reactionType, sort) => {
    try {
      return await fetchMessageReactions(client, message.id, reactionType, sort);
    } catch (e2) {
      const errorMessage2 = getErrorNotification?.(message);
      notify?.(errorMessage2 || t2("Error fetching reactions"), "error");
      throw e2;
    }
  };
}
async function fetchMessageReactions(client, messageId, reactionType, sort) {
  const reactions = [];
  const limit = 25;
  let next;
  let hasNext = true;
  while (hasNext && reactions.length < MAX_MESSAGE_REACTIONS_TO_FETCH) {
    const response = await client.queryReactions(
      messageId,
      reactionType ? { type: reactionType } : {},
      sort,
      { limit, next }
    );
    reactions.push(...response.reactions);
    next = response.next;
    hasNext = Boolean(next);
  }
  return reactions;
}

// src/components/Message/hooks/useMessageTextStreaming.ts
var import_react128 = require("react");
var DEFAULT_LETTER_INTERVAL = 30;
var DEFAULT_RENDERING_LETTER_COUNT = 2;
var useMessageTextStreaming = ({
  renderingLetterCount = DEFAULT_RENDERING_LETTER_COUNT,
  streamingLetterIntervalMs = DEFAULT_LETTER_INTERVAL,
  text: text8
}) => {
  const [streamedMessageText, setStreamedMessageText] = (0, import_react128.useState)(text8);
  const textCursor = (0, import_react128.useRef)(text8.length);
  (0, import_react128.useEffect)(() => {
    const textLength = text8.length;
    const interval = setInterval(() => {
      if (!text8 || textCursor.current >= textLength) {
        clearInterval(interval);
      }
      const newCursorValue = textCursor.current + renderingLetterCount;
      const newText = text8.substring(0, newCursorValue);
      textCursor.current += newText.length - textCursor.current;
      setStreamedMessageText(newText);
    }, streamingLetterIntervalMs);
    return () => {
      clearInterval(interval);
    };
  }, [streamingLetterIntervalMs, renderingLetterCount, text8]);
  return { streamedMessageText };
};

// src/components/Message/MessageSimple.tsx
var import_react225 = __toESM(require("react"));
var import_clsx60 = __toESM(require("clsx"));

// src/components/Message/icons.tsx
var import_react129 = __toESM(require("react"));
var ActionsIcon = ({ className = "" }) => /* @__PURE__ */ import_react129.default.createElement(
  "svg",
  {
    className,
    height: "4",
    viewBox: "0 0 11 4",
    width: "11",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react129.default.createElement(
    "path",
    {
      d: "M1.5 3a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm4 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z",
      fillRule: "nonzero"
    }
  )
);
var ReactionIcon = ({ className = "" }) => /* @__PURE__ */ import_react129.default.createElement(
  "svg",
  {
    className,
    height: "12",
    viewBox: "0 0 12 12",
    width: "12",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react129.default.createElement("g", { clipRule: "evenodd", fillRule: "evenodd" }, /* @__PURE__ */ import_react129.default.createElement("path", { d: "M6 1.2C3.3 1.2 1.2 3.3 1.2 6c0 2.7 2.1 4.8 4.8 4.8 2.7 0 4.8-2.1 4.8-4.8 0-2.7-2.1-4.8-4.8-4.8zM0 6c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z" }), /* @__PURE__ */ import_react129.default.createElement("path", { d: "M5.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM8.4 4.5c0 .5-.4.9-.9.9s-.9-.4-.9-.9.4-.9.9-.9.9.4.9.9zM3.3 6.7c.3-.2.6-.1.8.1.3.4.8.9 1.5 1 .6.2 1.4.1 2.4-1 .2-.2.6-.3.8 0 .2.2.3.6 0 .8-1.1 1.3-2.4 1.7-3.5 1.5-1-.2-1.8-.9-2.2-1.5-.2-.3-.1-.7.2-.9z" }))
);
var ThreadIcon = ({ className = "" }) => /* @__PURE__ */ import_react129.default.createElement("svg", { className, height: "10", width: "14", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react129.default.createElement(
  "path",
  {
    d: "M8.516 3c4.78 0 4.972 6.5 4.972 6.5-1.6-2.906-2.847-3.184-4.972-3.184v2.872L3.772 4.994 8.516.5V3zM.484 5l4.5-4.237v1.78L2.416 5l2.568 2.125v1.828L.484 5z",
    fillRule: "evenodd"
  }
));
var PinIcon = () => /* @__PURE__ */ import_react129.default.createElement("svg", { height: "13", viewBox: "0 0 14 13", width: "14", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react129.default.createElement(
  "path",
  {
    d: "M13.3518 6.686L6.75251 0.0866699L5.80984 1.02867L6.75318 1.972V1.97334L3.45318 5.272L3.45251 5.27334L2.50984 4.32934L1.56718 5.27267L4.39584 8.10067L0.624512 11.8713L1.56718 12.814L5.33851 9.04334L8.16718 11.8713L9.10984 10.9293L8.16718 9.986L11.4672 6.686L12.4098 7.62867L13.3518 6.686ZM7.22451 9.04267L7.22385 9.04334L4.39584 6.21467L7.69518 2.91467L10.5232 5.74267L7.22451 9.04267Z",
    fillRule: "evenodd"
  }
));
var PinIndicator = ({
  message,
  t: t2
}) => {
  if (!message || !t2) return null;
  return /* @__PURE__ */ import_react129.default.createElement("div", { style: { alignItems: "center", display: "flex" } }, /* @__PURE__ */ import_react129.default.createElement(PinIcon, null), /* @__PURE__ */ import_react129.default.createElement(
    "div",
    {
      style: {
        fontSize: "14px",
        marginBottom: "0",
        marginLeft: "8px",
        marginTop: "0"
      }
    },
    message.pinned_by ? `${t2("Pinned by")} ${message.pinned_by?.name || message.pinned_by?.id}` : t2("Message pinned")
  ));
};
var MessageDeliveredIcon = () => /* @__PURE__ */ import_react129.default.createElement(
  "svg",
  {
    "data-testid": "delivered-icon",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react129.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M8.9999 16.2L4.7999 12L3.3999 13.4L8.9999 19L20.9999 6.99998L19.5999 5.59998L8.9999 16.2Z",
      fill: "black",
      fillRule: "evenodd"
    }
  )
);
var MessageErrorIcon = () => /* @__PURE__ */ import_react129.default.createElement("div", { className: "str-chat__message-error-icon" }, /* @__PURE__ */ import_react129.default.createElement(
  "svg",
  {
    "data-testid": "error",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react129.default.createElement(
    "path",
    {
      d: "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2Z",
      fill: "black",
      id: "background"
    }
  ),
  /* @__PURE__ */ import_react129.default.createElement("path", { d: "M13 17H11V15H13V17ZM13 13H11V7H13V13Z", fill: "white" })
));

// src/components/MessageBounce/MessageBounceModal.tsx
var import_react130 = __toESM(require("react"));
function MessageBounceModal({
  MessageBouncePrompt: MessageBouncePrompt2,
  ...modalProps
}) {
  return /* @__PURE__ */ import_react130.default.createElement(Modal, { className: "str-chat__message-bounce-modal", ...modalProps }, /* @__PURE__ */ import_react130.default.createElement(MessageBounceProvider, null, /* @__PURE__ */ import_react130.default.createElement(MessageBouncePrompt2, { onClose: modalProps.onClose })));
}

// src/components/MessageBounce/MessageBouncePrompt.tsx
var import_react131 = __toESM(require("react"));
function MessageBouncePrompt({ children, onClose }) {
  const { handleDelete: handleDelete2, handleEdit, handleRetry } = useMessageBounceContext("MessageBouncePrompt");
  const { t: t2 } = useTranslationContext("MessageBouncePrompt");
  function createHandler(handle2) {
    return (e2) => {
      handle2(e2);
      onClose?.(e2);
    };
  }
  return /* @__PURE__ */ import_react131.default.createElement("div", { className: "str-chat__message-bounce-prompt", "data-testid": "message-bounce-prompt" }, /* @__PURE__ */ import_react131.default.createElement("div", { className: "str-chat__message-bounce-prompt-header" }, children ?? t2("This message did not meet our content guidelines")), /* @__PURE__ */ import_react131.default.createElement("div", { className: "str-chat__message-bounce-actions" }, /* @__PURE__ */ import_react131.default.createElement(
    "button",
    {
      className: "str-chat__message-bounce-edit",
      "data-testid": "message-bounce-edit",
      onClick: createHandler(handleEdit),
      type: "button"
    },
    t2("Edit Message")
  ), /* @__PURE__ */ import_react131.default.createElement(
    "button",
    {
      className: "str-chat__message-bounce-send",
      "data-testid": "message-bounce-send",
      onClick: createHandler(handleRetry)
    },
    t2("Send Anyway")
  ), /* @__PURE__ */ import_react131.default.createElement(
    "button",
    {
      className: "str-chat__message-bounce-delete",
      "data-testid": "message-bounce-delete",
      onClick: createHandler(handleDelete2)
    },
    t2("Delete")
  )));
}

// src/components/Message/MessageDeleted.tsx
var import_react132 = __toESM(require("react"));
var MessageDeleted = (props) => {
  const { message } = props;
  const { t: t2 } = useTranslationContext("MessageDeleted");
  const { isMyMessage } = useUserRole(message);
  const messageClasses = isMyMessage ? "str-chat__message str-chat__message--me str-chat__message-simple str-chat__message-simple--me" : "str-chat__message str-chat__message-simple str-chat__message--other";
  return /* @__PURE__ */ import_react132.default.createElement(
    "div",
    {
      className: `${messageClasses} str-chat__message--deleted ${message.type} `,
      "data-testid": "message-deleted-component",
      key: message.id
    },
    /* @__PURE__ */ import_react132.default.createElement("div", { className: "str-chat__message--deleted-inner" }, t2("This message was deleted..."))
  );
};

// src/components/Message/MessageBlocked.tsx
var import_react133 = __toESM(require("react"));
var import_clsx28 = __toESM(require("clsx"));
var MessageBlocked = () => {
  const { message } = useMessageContext();
  const { t: t2 } = useTranslationContext("MessageBlocked");
  const { isMyMessage } = useUserRole(message);
  const messageClasses = (0, import_clsx28.default)(
    "str-chat__message str-chat__message-simple str-chat__message--blocked",
    message.type,
    {
      "str-chat__message--me str-chat__message-simple--me": isMyMessage,
      "str-chat__message--other": !isMyMessage
    }
  );
  return /* @__PURE__ */ import_react133.default.createElement(
    "div",
    {
      className: messageClasses,
      "data-testid": "message-blocked-component",
      key: message.id
    },
    /* @__PURE__ */ import_react133.default.createElement("div", { className: "str-chat__message--blocked-inner" }, t2("Message was blocked by moderation policies"))
  );
};

// src/components/Message/MessageOptions.tsx
var import_clsx33 = __toESM(require("clsx"));
var import_react143 = __toESM(require("react"));

// src/components/MessageActions/MessageActions.tsx
var import_clsx31 = __toESM(require("clsx"));
var import_react137 = __toESM(require("react"));

// src/components/MessageActions/MessageActionsBox.tsx
var import_clsx29 = __toESM(require("clsx"));
var import_react135 = __toESM(require("react"));

// src/components/MessageActions/CustomMessageActionsList.tsx
var import_react134 = __toESM(require("react"));
var CustomMessageActionsList = (props) => {
  const { customMessageActions, message } = props;
  if (!customMessageActions) return null;
  const customActionsArray = Object.keys(customMessageActions);
  return /* @__PURE__ */ import_react134.default.createElement(import_react134.default.Fragment, null, customActionsArray.map((customAction) => {
    const customHandler = customMessageActions[customAction];
    return /* @__PURE__ */ import_react134.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: "str-chat__message-actions-list-item str-chat__message-actions-list-item-button",
        key: customAction,
        onClick: (event) => customHandler(message, event),
        role: "option"
      },
      customAction
    );
  }));
};

// src/components/MessageActions/MessageActionsBox.tsx
var UnMemoizedMessageActionsBox = (props) => {
  const {
    className,
    getMessageActions: getMessageActions2,
    handleDelete: handleDelete2,
    handleEdit,
    handleFlag,
    handleMarkUnread,
    handleMute,
    handlePin,
    isUserMuted: isUserMuted2,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    mine,
    open,
    ...restDivProps
  } = props;
  const { CustomMessageActionsList: CustomMessageActionsList2 = CustomMessageActionsList } = useComponentContext("MessageActionsBox");
  const { setQuotedMessage } = useChannelActionContext("MessageActionsBox");
  const { customMessageActions, message, threadList } = useMessageContext("MessageActionsBox");
  const { t: t2 } = useTranslationContext("MessageActionsBox");
  const messageActions = getMessageActions2();
  const handleQuote = () => {
    setQuotedMessage(message);
    const elements = message.parent_id ? document.querySelectorAll(".str-chat__thread .str-chat__textarea__textarea") : document.getElementsByClassName("str-chat__textarea__textarea");
    const textarea = elements.item(0);
    if (textarea instanceof HTMLTextAreaElement) {
      textarea.focus();
    }
  };
  const rootClassName2 = (0, import_clsx29.default)("str-chat__message-actions-box", className, {
    "str-chat__message-actions-box--open": open
  });
  const buttonClassName = "str-chat__message-actions-list-item str-chat__message-actions-list-item-button";
  return /* @__PURE__ */ import_react135.default.createElement("div", { ...restDivProps, className: rootClassName2, "data-testid": "message-actions-box" }, /* @__PURE__ */ import_react135.default.createElement(
    "div",
    {
      "aria-label": t2("aria/Message Options"),
      className: "str-chat__message-actions-list",
      role: "listbox"
    },
    /* @__PURE__ */ import_react135.default.createElement(
      CustomMessageActionsList2,
      {
        customMessageActions,
        message
      }
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handleQuote,
        role: "option"
      },
      t2("Reply")
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handlePin,
        role: "option"
      },
      !message.pinned ? t2("Pin") : t2("Unpin")
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handleMarkUnread,
        role: "option"
      },
      t2("Mark as unread")
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handleFlag,
        role: "option"
      },
      t2("Flag")
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handleMute,
        role: "option"
      },
      isUserMuted2() ? t2("Unmute") : t2("Mute")
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handleEdit,
        role: "option"
      },
      t2("Edit Message")
    ),
    messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && /* @__PURE__ */ import_react135.default.createElement(
      "button",
      {
        "aria-selected": "false",
        className: buttonClassName,
        onClick: handleDelete2,
        role: "option"
      },
      t2("Delete")
    )
  ));
};
var MessageActionsBox = import_react135.default.memo(
  UnMemoizedMessageActionsBox
);

// src/components/Dialog/DialogAnchor.tsx
var import_clsx30 = __toESM(require("clsx"));
var import_react136 = __toESM(require("react"));
var import_focus2 = require("@react-aria/focus");
var import_react_popper = require("react-popper");
function useDialogAnchor({
  open,
  placement,
  referenceElement
}) {
  const [popperElement, setPopperElement] = (0, import_react136.useState)(null);
  const { attributes, styles, update } = (0, import_react_popper.usePopper)(referenceElement, popperElement, {
    modifiers: [
      {
        name: "eventListeners",
        options: {
          // It's not safe to update popper position on resize and scroll, since popper's
          // reference element might not be visible at the time.
          resize: false,
          scroll: false
        }
      }
    ],
    placement
  });
  (0, import_react136.useEffect)(() => {
    if (open && popperElement) {
      update?.();
    }
  }, [open, popperElement, update]);
  if (popperElement && !open) {
    setPopperElement(null);
  }
  return {
    attributes,
    setPopperElement,
    styles
  };
}
var DialogAnchor = ({
  children,
  className,
  focus = true,
  id,
  placement = "auto",
  referenceElement = null,
  trapFocus,
  ...restDivProps
}) => {
  const dialog = useDialog({ id });
  const open = useDialogIsOpen(id);
  const { attributes, setPopperElement, styles } = useDialogAnchor({
    open,
    placement,
    referenceElement
  });
  (0, import_react136.useEffect)(() => {
    if (!open) return;
    const hideOnEscape = (event) => {
      if (event.key !== "Escape") return;
      dialog?.close();
    };
    document.addEventListener("keyup", hideOnEscape);
    return () => {
      document.removeEventListener("keyup", hideOnEscape);
    };
  }, [dialog, open]);
  if (!open) {
    return null;
  }
  return /* @__PURE__ */ import_react136.default.createElement(DialogPortalEntry, { dialogId: id }, /* @__PURE__ */ import_react136.default.createElement(import_focus2.FocusScope, { autoFocus: focus, contain: trapFocus, restoreFocus: true }, /* @__PURE__ */ import_react136.default.createElement(
    "div",
    {
      ...restDivProps,
      ...attributes.popper,
      className: (0, import_clsx30.default)("str-chat__dialog-contents", className),
      "data-testid": "str-chat__dialog-contents",
      ref: setPopperElement,
      style: styles.popper,
      tabIndex: 0
    },
    children
  )));
};

// src/components/MessageActions/MessageActions.tsx
var MessageActions = (props) => {
  const {
    ActionsIcon: ActionsIcon2 = ActionsIcon,
    customWrapperClass = "",
    getMessageActions: propGetMessageActions,
    handleDelete: propHandleDelete,
    handleFlag: propHandleFlag,
    handleMarkUnread: propHandleMarkUnread,
    handleMute: propHandleMute,
    handlePin: propHandlePin,
    inline,
    message: propMessage,
    mine
  } = props;
  const { mutes } = useChatContext("MessageActions");
  const {
    customMessageActions,
    getMessageActions: contextGetMessageActions,
    handleDelete: contextHandleDelete,
    handleFlag: contextHandleFlag,
    handleMarkUnread: contextHandleMarkUnread,
    handleMute: contextHandleMute,
    handlePin: contextHandlePin,
    isMyMessage,
    message: contextMessage,
    setEditingState,
    threadList
  } = useMessageContext("MessageActions");
  const { CustomMessageActionsList: CustomMessageActionsList2 } = useComponentContext("MessageActions");
  const { t: t2 } = useTranslationContext("MessageActions");
  const getMessageActions2 = propGetMessageActions || contextGetMessageActions;
  const handleDelete2 = propHandleDelete || contextHandleDelete;
  const handleFlag = propHandleFlag || contextHandleFlag;
  const handleMarkUnread = propHandleMarkUnread || contextHandleMarkUnread;
  const handleMute = propHandleMute || contextHandleMute;
  const handlePin = propHandlePin || contextHandlePin;
  const message = propMessage || contextMessage;
  const isMine = mine ? mine() : isMyMessage();
  const isMuted = (0, import_react137.useCallback)(() => isUserMuted(message, mutes), [message, mutes]);
  const dialogId = `message-actions--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  const messageActions = getMessageActions2();
  const renderMessageActions = shouldRenderMessageActions({
    customMessageActions,
    CustomMessageActionsList: CustomMessageActionsList2,
    inThread: threadList,
    messageActions
  });
  const actionsBoxButtonRef = (0, import_react137.useRef)(null);
  if (!renderMessageActions) return null;
  return /* @__PURE__ */ import_react137.default.createElement(
    MessageActionsWrapper,
    {
      customWrapperClass,
      inline,
      toggleOpen: dialog?.toggle
    },
    /* @__PURE__ */ import_react137.default.createElement(
      DialogAnchor,
      {
        id: dialogId,
        placement: isMine ? "top-end" : "top-start",
        referenceElement: actionsBoxButtonRef.current,
        trapFocus: true
      },
      /* @__PURE__ */ import_react137.default.createElement(
        MessageActionsBox,
        {
          getMessageActions: getMessageActions2,
          handleDelete: handleDelete2,
          handleEdit: setEditingState,
          handleFlag,
          handleMarkUnread,
          handleMute,
          handlePin,
          isUserMuted: isMuted,
          mine: isMine,
          open: dialogIsOpen
        }
      )
    ),
    /* @__PURE__ */ import_react137.default.createElement(
      "button",
      {
        "aria-expanded": dialogIsOpen,
        "aria-haspopup": "true",
        "aria-label": t2("aria/Open Message Actions Menu"),
        className: "str-chat__message-actions-box-button",
        "data-testid": "message-actions-toggle-button",
        ref: actionsBoxButtonRef
      },
      /* @__PURE__ */ import_react137.default.createElement(ActionsIcon2, { className: "str-chat__message-action-icon" })
    )
  );
};
var MessageActionsWrapper = (props) => {
  const { children, customWrapperClass, inline, toggleOpen } = props;
  const defaultWrapperClass = (0, import_clsx31.default)(
    "str-chat__message-simple__actions__action",
    "str-chat__message-simple__actions__action--options",
    "str-chat__message-actions-container"
  );
  const wrapperProps = {
    className: customWrapperClass || defaultWrapperClass,
    "data-testid": "message-actions",
    onClick: toggleOpen
  };
  if (inline) return /* @__PURE__ */ import_react137.default.createElement("span", { ...wrapperProps }, children);
  return /* @__PURE__ */ import_react137.default.createElement("div", { ...wrapperProps }, children);
};

// src/components/Reactions/ReactionSelectorWithButton.tsx
var import_react142 = __toESM(require("react"));

// src/components/Reactions/ReactionSelector.tsx
var import_react141 = __toESM(require("react"));
var import_clsx32 = __toESM(require("clsx"));

// src/components/Reactions/reactionOptions.tsx
var import_react140 = __toESM(require("react"));

// src/components/Reactions/StreamEmoji.tsx
var import_react139 = __toESM(require("react"));

// src/components/Reactions/SpriteImage.tsx
var import_react138 = __toESM(require("react"));

// src/components/Reactions/utils/utils.ts
var isMutableRef = (ref) => {
  if (ref) {
    return ref.current !== void 0;
  }
  return false;
};
var getImageDimensions = (source) => new Promise((resolve, reject) => {
  const image4 = new Image();
  image4.addEventListener(
    "load",
    () => {
      resolve([image4.width, image4.height]);
    },
    { once: true }
  );
  image4.addEventListener("error", () => reject(`Couldn't load image from ${source}`), {
    once: true
  });
  image4.src = source;
});

// src/components/Reactions/SpriteImage.tsx
var SpriteImage = ({
  columns,
  fallback,
  height,
  position: position4,
  rows,
  spriteUrl,
  style,
  width
}) => {
  const [[spriteWidth, spriteHeight], setSpriteDimensions] = (0, import_react138.useState)([0, 0]);
  (0, import_react138.useEffect)(() => {
    getImageDimensions(spriteUrl).then(setSpriteDimensions).catch(console.error);
  }, [spriteUrl]);
  const [x, y] = position4;
  if (!spriteHeight || !spriteWidth) return /* @__PURE__ */ import_react138.default.createElement(import_react138.default.Fragment, null, fallback);
  return /* @__PURE__ */ import_react138.default.createElement(
    "div",
    {
      "data-testid": "sprite-image",
      style: {
        ...style,
        "--str-chat__sprite-image-resize-ratio": "var(--str-chat__sprite-image-resize-ratio-x, var(--str-chat__sprite-image-resize-ratio-y, 1))",
        "--str-chat__sprite-image-resize-ratio-x": "calc(var(--str-chat__sprite-image-width) / var(--str-chat__sprite-item-width))",
        "--str-chat__sprite-image-resize-ratio-y": "calc(var(--str-chat__sprite-image-height) / var(--str-chat__sprite-item-height))",
        "--str-chat__sprite-item-height": `${spriteHeight / rows}`,
        "--str-chat__sprite-item-width": `${spriteWidth / columns}`,
        ...Number.isFinite(height) ? { "--str-chat__sprite-image-height": `${height}px` } : {},
        ...Number.isFinite(width) ? { "--str-chat__sprite-image-width": `${width}px` } : {},
        backgroundImage: `url('${spriteUrl}')`,
        backgroundPosition: `${x * (100 / (columns - 1))}% ${y * (100 / (rows - 1))}%`,
        backgroundSize: `${columns * 100}% ${rows * 100}%`,
        height: "var(--str-chat__sprite-image-height, calc(var(--str-chat__sprite-item-height) * var(--str-chat__sprite-image-resize-ratio)))",
        width: "var(--str-chat__sprite-image-width, calc(var(--str-chat__sprite-item-width) * var(--str-chat__sprite-image-resize-ratio)))"
      }
    }
  );
};

// src/components/Reactions/StreamEmoji.tsx
var StreamSpriteEmojiPositions = {
  angry: [1, 1],
  haha: [1, 0],
  like: [0, 0],
  love: [1, 2],
  sad: [0, 1],
  wow: [0, 2]
};
var STREAM_SPRITE_URL = "https://getstream.imgix.net/images/emoji-sprite.png";
var StreamEmoji = ({
  fallback,
  type
}) => {
  const position4 = StreamSpriteEmojiPositions[type];
  return /* @__PURE__ */ import_react139.default.createElement(
    SpriteImage,
    {
      columns: 2,
      fallback,
      position: position4,
      rows: 3,
      spriteUrl: STREAM_SPRITE_URL,
      style: {
        "--str-chat__sprite-image-height": "var(--str-chat__stream-emoji-size, 18px)"
      }
    }
  );
};

// src/components/Reactions/reactionOptions.tsx
var defaultReactionOptions = [
  {
    type: "haha",
    Component: () => /* @__PURE__ */ import_react140.default.createElement(StreamEmoji, { fallback: "\u{1F602}", type: "haha" }),
    name: "Joy"
  },
  {
    type: "like",
    Component: () => /* @__PURE__ */ import_react140.default.createElement(StreamEmoji, { fallback: "\u{1F44D}", type: "like" }),
    name: "Thumbs up"
  },
  {
    type: "love",
    Component: () => /* @__PURE__ */ import_react140.default.createElement(StreamEmoji, { fallback: "\u2764\uFE0F", type: "love" }),
    name: "Heart"
  },
  { type: "sad", Component: () => /* @__PURE__ */ import_react140.default.createElement(StreamEmoji, { fallback: "\u{1F614}", type: "sad" }), name: "Sad" },
  {
    type: "wow",
    Component: () => /* @__PURE__ */ import_react140.default.createElement(StreamEmoji, { fallback: "\u{1F632}", type: "wow" }),
    name: "Astonished"
  }
];

// src/components/Reactions/ReactionSelector.tsx
var UnMemoizedReactionSelector = (props) => {
  const {
    Avatar: propAvatar,
    detailedView = true,
    handleReaction: propHandleReaction,
    latest_reactions: propLatestReactions,
    own_reactions: propOwnReactions,
    reaction_groups: propReactionGroups,
    reactionOptions: propReactionOptions,
    reverse = false
  } = props;
  const {
    Avatar: contextAvatar,
    reactionOptions: contextReactionOptions = defaultReactionOptions
  } = useComponentContext("ReactionSelector");
  const {
    closeReactionSelectorOnClick,
    handleReaction: contextHandleReaction,
    message
  } = useMessageContext("ReactionSelector");
  const dialogId = `reaction-selector--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const reactionOptions = propReactionOptions ?? contextReactionOptions;
  const Avatar2 = propAvatar || contextAvatar || Avatar;
  const handleReaction = propHandleReaction || contextHandleReaction;
  const latestReactions = propLatestReactions || message?.latest_reactions || [];
  const ownReactions = propOwnReactions || message?.own_reactions || [];
  const reactionGroups = propReactionGroups || message?.reaction_groups || {};
  const [tooltipReactionType, setTooltipReactionType] = (0, import_react141.useState)(null);
  const [tooltipPositions, setTooltipPositions] = (0, import_react141.useState)(null);
  const rootRef = (0, import_react141.useRef)(null);
  const targetRef = (0, import_react141.useRef)(null);
  const tooltipRef = (0, import_react141.useRef)(null);
  const showTooltip = (0, import_react141.useCallback)(
    (event, reactionType) => {
      targetRef.current = event.currentTarget;
      setTooltipReactionType(reactionType);
    },
    []
  );
  const hideTooltip = (0, import_react141.useCallback)(() => {
    setTooltipReactionType(null);
    setTooltipPositions(null);
  }, []);
  (0, import_react141.useEffect)(() => {
    if (!tooltipReactionType || !rootRef.current) return;
    const tooltip = tooltipRef.current?.getBoundingClientRect();
    const target = targetRef.current?.getBoundingClientRect();
    const container = isMutableRef(rootRef) ? rootRef.current?.getBoundingClientRect() : null;
    if (!tooltip || !target || !container) return;
    const tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;
    const arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;
    setTooltipPositions({
      arrow: arrowPosition,
      tooltip: tooltipPosition
    });
  }, [tooltipReactionType, rootRef]);
  const getUsersPerReactionType = (type) => latestReactions.map((reaction) => {
    if (reaction.type === type) {
      return reaction.user?.name || reaction.user?.id;
    }
    return null;
  }).filter(Boolean);
  const iHaveReactedWithReaction = (reactionType) => ownReactions.find((reaction) => reaction.type === reactionType);
  const getLatestUserForReactionType = (type) => latestReactions.find((reaction) => reaction.type === type && !!reaction.user)?.user || void 0;
  return /* @__PURE__ */ import_react141.default.createElement(
    "div",
    {
      className: (0, import_clsx32.default)(
        "str-chat__reaction-selector str-chat__message-reaction-selector str-chat-react__message-reaction-selector",
        {
          "str-chat__reaction-selector--reverse": reverse
        }
      ),
      "data-testid": "reaction-selector",
      ref: rootRef
    },
    !!tooltipReactionType && detailedView && /* @__PURE__ */ import_react141.default.createElement(
      "div",
      {
        className: "str-chat__reaction-selector-tooltip",
        ref: tooltipRef,
        style: {
          left: tooltipPositions?.tooltip,
          visibility: tooltipPositions ? "visible" : "hidden"
        }
      },
      /* @__PURE__ */ import_react141.default.createElement("div", { className: "arrow", style: { left: tooltipPositions?.arrow } }),
      getUsersPerReactionType(tooltipReactionType)?.map((user, i, users) => /* @__PURE__ */ import_react141.default.createElement("span", { className: "latest-user-username", key: `key-${i}-${user}` }, `${user}${i < users.length - 1 ? ", " : ""}`))
    ),
    /* @__PURE__ */ import_react141.default.createElement("ul", { className: "str-chat__message-reactions-list str-chat__message-reactions-options" }, reactionOptions.map(({ Component: Component2, name: reactionName, type: reactionType }) => {
      const latestUser = getLatestUserForReactionType(reactionType);
      const count = reactionGroups[reactionType]?.count ?? 0;
      return /* @__PURE__ */ import_react141.default.createElement("li", { key: reactionType }, /* @__PURE__ */ import_react141.default.createElement(
        "button",
        {
          "aria-label": `Select Reaction: ${reactionName || reactionType}`,
          className: (0, import_clsx32.default)(
            "str-chat__message-reactions-list-item str-chat__message-reactions-option",
            {
              "str-chat__message-reactions-option-selected": iHaveReactedWithReaction(reactionType)
            }
          ),
          "data-testid": "select-reaction-button",
          "data-text": reactionType,
          onClick: (event) => {
            handleReaction(reactionType, event);
            if (closeReactionSelectorOnClick) {
              dialog.close();
            }
          }
        },
        !!count && detailedView && /* @__PURE__ */ import_react141.default.createElement(
          "div",
          {
            className: "latest-user str-chat__message-reactions-last-user",
            onClick: hideTooltip,
            onMouseEnter: (e2) => showTooltip(e2, reactionType),
            onMouseLeave: hideTooltip
          },
          latestUser ? /* @__PURE__ */ import_react141.default.createElement(
            Avatar2,
            {
              image: latestUser.image,
              name: latestUser.name,
              size: 20,
              user: latestUser
            }
          ) : /* @__PURE__ */ import_react141.default.createElement("div", { className: "latest-user-not-found" })
        ),
        /* @__PURE__ */ import_react141.default.createElement("span", { className: "str-chat__message-reaction-emoji" }, /* @__PURE__ */ import_react141.default.createElement(Component2, null)),
        Boolean(count) && detailedView && /* @__PURE__ */ import_react141.default.createElement("span", { className: "str-chat__message-reactions-list-item__count" }, count || "")
      ));
    }))
  );
};
var ReactionSelector = import_react141.default.memo(
  UnMemoizedReactionSelector
);

// src/components/Reactions/ReactionSelectorWithButton.tsx
var ReactionSelectorWithButton = ({
  ReactionIcon: ReactionIcon2
}) => {
  const { t: t2 } = useTranslationContext("ReactionSelectorWithButton");
  const { isMyMessage, message } = useMessageContext("MessageOptions");
  const { ReactionSelector: ReactionSelector2 = ReactionSelector } = useComponentContext("MessageOptions");
  const buttonRef = (0, import_react142.useRef)(null);
  const dialogId = `reaction-selector--${message.id}`;
  const dialog = useDialog({ id: dialogId });
  const dialogIsOpen = useDialogIsOpen(dialogId);
  return /* @__PURE__ */ import_react142.default.createElement(import_react142.default.Fragment, null, /* @__PURE__ */ import_react142.default.createElement(
    DialogAnchor,
    {
      id: dialogId,
      placement: isMyMessage() ? "top-end" : "top-start",
      referenceElement: buttonRef.current,
      trapFocus: true
    },
    /* @__PURE__ */ import_react142.default.createElement(ReactionSelector2, null)
  ), /* @__PURE__ */ import_react142.default.createElement(
    "button",
    {
      "aria-expanded": dialogIsOpen,
      "aria-label": t2("aria/Open Reaction Selector"),
      className: "str-chat__message-reactions-button",
      "data-testid": "message-reaction-action",
      onClick: () => dialog?.toggle(),
      ref: buttonRef
    },
    /* @__PURE__ */ import_react142.default.createElement(ReactionIcon2, { className: "str-chat__message-action-icon" })
  ));
};

// src/components/Message/MessageOptions.tsx
var UnMemoizedMessageOptions = (props) => {
  const {
    ActionsIcon: ActionsIcon2 = ActionsIcon,
    displayReplies = true,
    handleOpenThread: propHandleOpenThread,
    ReactionIcon: ReactionIcon2 = ReactionIcon,
    theme = "simple",
    ThreadIcon: ThreadIcon2 = ThreadIcon
  } = props;
  const {
    getMessageActions: getMessageActions2,
    handleOpenThread: contextHandleOpenThread,
    initialMessage,
    message,
    threadList
  } = useMessageContext("MessageOptions");
  const { t: t2 } = useTranslationContext("MessageOptions");
  const messageActionsDialogIsOpen = useDialogIsOpen(`message-actions--${message.id}`);
  const reactionSelectorDialogIsOpen = useDialogIsOpen(
    `reaction-selector--${message.id}`
  );
  const handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
  const messageActions = getMessageActions2();
  const shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
  const shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
  if (!message.type || message.type === "error" || message.type === "system" || message.type === "ephemeral" || message.status === "failed" || message.status === "sending" || initialMessage) {
    return null;
  }
  return /* @__PURE__ */ import_react143.default.createElement(
    "div",
    {
      className: (0, import_clsx33.default)(`str-chat__message-${theme}__actions str-chat__message-options`, {
        "str-chat__message-options--active": messageActionsDialogIsOpen || reactionSelectorDialogIsOpen
      }),
      "data-testid": "message-options"
    },
    /* @__PURE__ */ import_react143.default.createElement(MessageActions, { ActionsIcon: ActionsIcon2 }),
    shouldShowReplies && /* @__PURE__ */ import_react143.default.createElement(
      "button",
      {
        "aria-label": t2("aria/Open Thread"),
        className: `str-chat__message-${theme}__actions__action str-chat__message-${theme}__actions__action--thread str-chat__message-reply-in-thread-button`,
        "data-testid": "thread-action",
        onClick: handleOpenThread
      },
      /* @__PURE__ */ import_react143.default.createElement(ThreadIcon2, { className: "str-chat__message-action-icon" })
    ),
    shouldShowReactions && /* @__PURE__ */ import_react143.default.createElement(ReactionSelectorWithButton, { ReactionIcon: ReactionIcon2 })
  );
};
var MessageOptions = import_react143.default.memo(
  UnMemoizedMessageOptions
);

// src/components/Message/MessageRepliesCountButton.tsx
var import_react144 = __toESM(require("react"));
var UnMemoizedMessageRepliesCountButton = (props) => {
  const { labelPlural, labelSingle, onClick, reply_count = 0 } = props;
  const { t: t2 } = useTranslationContext("MessageRepliesCountButton");
  if (!reply_count) return null;
  let replyCountText = t2("replyCount", { count: reply_count });
  if (labelPlural && reply_count > 1) {
    replyCountText = `${reply_count} ${labelPlural}`;
  } else if (labelSingle) {
    replyCountText = `1 ${labelSingle}`;
  }
  return /* @__PURE__ */ import_react144.default.createElement("div", { className: "str-chat__message-replies-count-button-wrapper" }, /* @__PURE__ */ import_react144.default.createElement(
    "button",
    {
      className: "str-chat__message-replies-count-button",
      "data-testid": "replies-count-button",
      onClick
    },
    replyCountText
  ));
};
var MessageRepliesCountButton = import_react144.default.memo(
  UnMemoizedMessageRepliesCountButton
);

// src/components/Message/MessageStatus.tsx
var import_react147 = __toESM(require("react"));
var import_clsx34 = __toESM(require("clsx"));

// src/components/Tooltip/Tooltip.tsx
var import_react145 = __toESM(require("react"));
var import_react_popper2 = require("react-popper");
var Tooltip = ({ children, ...rest }) => /* @__PURE__ */ import_react145.default.createElement("div", { className: "str-chat__tooltip", ...rest }, children);
var PopperTooltip = ({
  children,
  offset = [0, 10],
  placement = "top",
  referenceElement,
  visible = false
}) => {
  const [popperElement, setPopperElement] = (0, import_react145.useState)(null);
  const { attributes, styles } = (0, import_react_popper2.usePopper)(referenceElement, popperElement, {
    modifiers: [
      {
        name: "offset",
        options: {
          offset
        }
      }
    ],
    placement
  });
  if (!visible) return null;
  return /* @__PURE__ */ import_react145.default.createElement(
    "div",
    {
      className: "str-chat__tooltip",
      ref: setPopperElement,
      style: styles.popper,
      ...attributes.popper
    },
    children
  );
};

// src/components/Tooltip/hooks/useEnterLeaveHandlers.ts
var import_react146 = require("react");
var useEnterLeaveHandlers = ({
  onMouseEnter,
  onMouseLeave
} = {}) => {
  const [tooltipVisible, setTooltipVisible] = (0, import_react146.useState)(false);
  const handleEnter = (0, import_react146.useCallback)(
    (e2) => {
      setTooltipVisible(true);
      onMouseEnter?.(e2);
    },
    [onMouseEnter]
  );
  const handleLeave = (0, import_react146.useCallback)(
    (e2) => {
      setTooltipVisible(false);
      onMouseLeave?.(e2);
    },
    [onMouseLeave]
  );
  return { handleEnter, handleLeave, tooltipVisible };
};

// src/components/Message/MessageStatus.tsx
var UnMemoizedMessageStatus = (props) => {
  const {
    Avatar: propAvatar,
    MessageDeliveredStatus,
    MessageReadStatus,
    MessageSendingStatus,
    messageType = "simple",
    tooltipUserNameMapper = mapToUserNameOrId
  } = props;
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const { client } = useChatContext("MessageStatus");
  const { Avatar: contextAvatar } = useComponentContext("MessageStatus");
  const { isMyMessage, lastReceivedId, message, readBy, threadList } = useMessageContext("MessageStatus");
  const { t: t2 } = useTranslationContext("MessageStatus");
  const [referenceElement, setReferenceElement] = (0, import_react147.useState)(null);
  const Avatar2 = propAvatar || contextAvatar || Avatar;
  if (!isMyMessage() || message.type === "error") return null;
  const justReadByMe = readBy?.length === 1 && readBy[0].id === client.user?.id;
  const rootClassName2 = `str-chat__message-${messageType}-status str-chat__message-status`;
  const sending = message.status === "sending";
  const delivered = message.status === "received" && message.id === lastReceivedId && !threadList;
  const deliveredAndRead = !!(readBy?.length && !threadList && !justReadByMe);
  const readersWithoutOwnUser = deliveredAndRead ? readBy.filter((item2) => item2.id !== client.user?.id) : [];
  const [lastReadUser] = readersWithoutOwnUser;
  return /* @__PURE__ */ import_react147.default.createElement(
    "span",
    {
      className: rootClassName2,
      "data-testid": (0, import_clsx34.default)({
        "message-status-read-by": deliveredAndRead,
        "message-status-received": delivered && !deliveredAndRead,
        "message-status-sending": sending
      }),
      onMouseEnter: handleEnter,
      onMouseLeave: handleLeave,
      ref: setReferenceElement
    },
    sending && (MessageSendingStatus ? /* @__PURE__ */ import_react147.default.createElement(MessageSendingStatus, null) : /* @__PURE__ */ import_react147.default.createElement(import_react147.default.Fragment, null, /* @__PURE__ */ import_react147.default.createElement(
      PopperTooltip,
      {
        offset: [0, 5],
        referenceElement,
        visible: tooltipVisible
      },
      t2("Sending...")
    ), /* @__PURE__ */ import_react147.default.createElement(LoadingIndicator, null))),
    delivered && !deliveredAndRead && (MessageDeliveredStatus ? /* @__PURE__ */ import_react147.default.createElement(MessageDeliveredStatus, null) : /* @__PURE__ */ import_react147.default.createElement(import_react147.default.Fragment, null, /* @__PURE__ */ import_react147.default.createElement(
      PopperTooltip,
      {
        offset: [0, 5],
        referenceElement,
        visible: tooltipVisible
      },
      t2("Delivered")
    ), /* @__PURE__ */ import_react147.default.createElement(MessageDeliveredIcon, null))),
    deliveredAndRead && (MessageReadStatus ? /* @__PURE__ */ import_react147.default.createElement(MessageReadStatus, null) : /* @__PURE__ */ import_react147.default.createElement(import_react147.default.Fragment, null, /* @__PURE__ */ import_react147.default.createElement(
      PopperTooltip,
      {
        offset: [0, 5],
        referenceElement,
        visible: tooltipVisible
      },
      getReadByTooltipText(readBy, t2, client, tooltipUserNameMapper)
    ), /* @__PURE__ */ import_react147.default.createElement(
      Avatar2,
      {
        className: "str-chat__avatar--message-status",
        image: lastReadUser.image,
        name: lastReadUser.name || lastReadUser.id,
        user: lastReadUser
      }
    ), readersWithoutOwnUser.length > 1 && /* @__PURE__ */ import_react147.default.createElement(
      "span",
      {
        className: `str-chat__message-${messageType}-status-number`,
        "data-testid": "message-status-read-by-many"
      },
      readersWithoutOwnUser.length
    )))
  );
};
var MessageStatus = import_react147.default.memo(
  UnMemoizedMessageStatus
);

// src/components/Message/MessageText.tsx
var import_clsx50 = __toESM(require("clsx"));
var import_react182 = __toESM(require("react"));

// src/components/Message/QuotedMessage.tsx
var import_react180 = __toESM(require("react"));
var import_clsx49 = __toESM(require("clsx"));

// src/components/Poll/Poll.tsx
var import_react174 = __toESM(require("react"));

// src/components/Poll/PollContent.tsx
var import_clsx43 = __toESM(require("clsx"));
var import_react172 = __toESM(require("react"));

// src/components/Poll/PollHeader.tsx
var import_react148 = __toESM(require("react"));
var pollStateSelector = (nextValue) => ({
  enforce_unique_vote: nextValue.enforce_unique_vote,
  is_closed: nextValue.is_closed,
  max_votes_allowed: nextValue.max_votes_allowed,
  name: nextValue.name,
  options: nextValue.options
});
var PollHeader = () => {
  const { t: t2 } = useTranslationContext("PollHeader");
  const { poll } = usePollContext();
  const { enforce_unique_vote, is_closed, max_votes_allowed, name: name2, options } = useStateStore(poll.state, pollStateSelector);
  const selectionInstructions = (0, import_react148.useMemo)(() => {
    if (is_closed) return t2("Vote ended");
    if (enforce_unique_vote) return t2("Select one");
    if (max_votes_allowed)
      return t2("Select up to {{count}}", {
        count: max_votes_allowed > options.length ? options.length : max_votes_allowed
      });
    return t2("Select one or more");
  }, [is_closed, enforce_unique_vote, max_votes_allowed, options.length, t2]);
  if (!name2) return;
  return /* @__PURE__ */ import_react148.default.createElement("div", { className: "str-chat__poll-header" }, /* @__PURE__ */ import_react148.default.createElement("div", { className: "str-chat__poll-title" }, name2), /* @__PURE__ */ import_react148.default.createElement("div", { className: "str-chat__poll-subtitle" }, selectionInstructions));
};

// src/components/Poll/PollActions/AddCommentForm.tsx
var import_react151 = __toESM(require("react"));

// src/components/Dialog/FormDialog.tsx
var import_react150 = __toESM(require("react"));
var import_clsx36 = __toESM(require("clsx"));

// src/components/Form/FieldError.tsx
var import_clsx35 = __toESM(require("clsx"));
var import_react149 = __toESM(require("react"));
var FieldError = ({ className, text: text8, ...props }) => /* @__PURE__ */ import_react149.default.createElement("div", { ...props, className: (0, import_clsx35.default)("str-chat__form-field-error", className) }, text8);

// src/components/Dialog/FormDialog.tsx
var FormDialog = ({
  className,
  close,
  fields,
  onSubmit,
  shouldDisableSubmitButton,
  title
}) => {
  const { t: t2 } = useTranslationContext();
  const [fieldErrors, setFieldErrors] = (0, import_react150.useState)({});
  const [value, setValue] = (0, import_react150.useState)(() => {
    let acc = {};
    for (const [id, config] of Object.entries(fields)) {
      acc = { ...acc, [id]: config.props.value };
    }
    return acc;
  });
  const handleChange = (0, import_react150.useCallback)(
    (event) => {
      const fieldId = event.target.id;
      const fieldConfig = fields[fieldId];
      if (!fieldConfig) return;
      const error = fieldConfig.validator?.(event.target.value);
      if (error) {
        setFieldErrors((prev) => ({ [fieldId]: error, ...prev }));
      } else {
        setFieldErrors((prev) => {
          delete prev[fieldId];
          return prev;
        });
      }
      setValue((prev) => ({ ...prev, [fieldId]: event.target.value }));
      if (!fieldConfig.props.onChange) return;
      if (fieldConfig.element === "input") {
        fieldConfig.props.onChange(
          event
        );
      } else if (fieldConfig.element === "textarea") {
        fieldConfig.props.onChange(
          event
        );
      }
    },
    [fields]
  );
  const handleSubmit = async () => {
    if (!Object.keys(value).length) return;
    const errors = {};
    for (const [id, fieldValue] of Object.entries(value)) {
      const thisFieldError = fields[id].validator?.(fieldValue);
      if (thisFieldError) {
        errors[id] = thisFieldError;
      }
    }
    if (Object.keys(errors).length) {
      setFieldErrors(errors);
      return;
    }
    await onSubmit(value);
    close();
  };
  return /* @__PURE__ */ import_react150.default.createElement("div", { className: (0, import_clsx36.default)("str-chat__dialog str-chat__dialog--form", className) }, /* @__PURE__ */ import_react150.default.createElement("div", { className: "str-chat__dialog__body" }, title && /* @__PURE__ */ import_react150.default.createElement("div", { className: "str-chat__dialog__title" }, title), /* @__PURE__ */ import_react150.default.createElement("form", { autoComplete: "off" }, Object.entries(fields).map(([id, fieldConfig]) => /* @__PURE__ */ import_react150.default.createElement("div", { className: "str-chat__dialog__field", key: `dialog-field-${id}` }, fieldConfig.label && /* @__PURE__ */ import_react150.default.createElement(
    "label",
    {
      className: (0, import_clsx36.default)(
        `str-chat__dialog__title str-chat__dialog__title--${id}`
      ),
      htmlFor: id
    },
    fieldConfig.label
  ), import_react150.default.createElement(fieldConfig.element, {
    id,
    ...fieldConfig.props,
    onChange: handleChange,
    value: value[id]
  }), /* @__PURE__ */ import_react150.default.createElement(FieldError, { text: fieldErrors[id]?.message }))))), /* @__PURE__ */ import_react150.default.createElement("div", { className: "str-chat__dialog__controls" }, /* @__PURE__ */ import_react150.default.createElement(
    "button",
    {
      className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel",
      onClick: close
    },
    t2("Cancel")
  ), /* @__PURE__ */ import_react150.default.createElement(
    "button",
    {
      className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit",
      disabled: Object.keys(fieldErrors).length > 0 || shouldDisableSubmitButton?.(value),
      onClick: handleSubmit,
      type: "submit"
    },
    t2("Send")
  )));
};

// src/components/Poll/PollActions/AddCommentForm.tsx
var pollStateSelector2 = (nextValue) => ({ ownAnswer: nextValue.ownAnswer });
var AddCommentForm = ({
  close,
  messageId
}) => {
  const { t: t2 } = useTranslationContext("AddCommentForm");
  const { poll } = usePollContext();
  const { ownAnswer } = useStateStore(poll.state, pollStateSelector2);
  return /* @__PURE__ */ import_react151.default.createElement(
    FormDialog,
    {
      className: "str-chat__prompt-dialog str-chat__modal__poll-add-comment",
      close,
      fields: {
        comment: {
          element: "input",
          props: {
            id: "comment",
            name: "comment",
            required: true,
            type: "text",
            value: ownAnswer?.answer_text ?? ""
          }
        }
      },
      onSubmit: async (value) => {
        await poll.addAnswer(value.comment, messageId);
      },
      shouldDisableSubmitButton: (value) => !value.comment || value.comment === ownAnswer?.answer_text,
      title: ownAnswer ? t2("Update your comment") : t2("Add a comment")
    }
  );
};

// src/components/Dialog/PromptDialog.tsx
var import_react152 = __toESM(require("react"));
var import_clsx37 = __toESM(require("clsx"));
var PromptDialog = ({
  actions,
  className,
  prompt,
  title
}) => /* @__PURE__ */ import_react152.default.createElement("div", { className: (0, import_clsx37.default)("str-chat__dialog str-chat__dialog--prompt", className) }, /* @__PURE__ */ import_react152.default.createElement("div", { className: "str-chat__dialog__body" }, title && /* @__PURE__ */ import_react152.default.createElement("div", { className: "str-chat__dialog__title" }, title), /* @__PURE__ */ import_react152.default.createElement("div", { className: "str-chat__dialog__prompt" }, prompt)), /* @__PURE__ */ import_react152.default.createElement("div", { className: "str-chat__dialog__controls" }, actions.map(({ className: className2, ...props }, i) => /* @__PURE__ */ import_react152.default.createElement(
  "button",
  {
    className: (0, import_clsx37.default)(`str-chat__dialog__controls-button`, className2),
    key: `prompt-dialog__controls-button--${i}`,
    ...props
  }
))));

// src/components/Poll/PollActions/EndPollDialog.tsx
var import_react153 = __toESM(require("react"));
var EndPollDialog = ({
  close
}) => {
  const { t: t2 } = useTranslationContext("SuggestPollOptionForm");
  const { poll } = usePollContext();
  return /* @__PURE__ */ import_react153.default.createElement(
    PromptDialog,
    {
      actions: [
        {
          children: t2("Cancel"),
          className: "str-chat__dialog__controls-button--cancel",
          onClick: close
        },
        {
          children: t2("End"),
          className: ".str-chat__dialog__controls-button--submit str-chat__dialog__controls-button--end-poll",
          onClick: poll.close
        }
      ],
      className: "str-chat__modal__end-vote",
      prompt: t2("Nobody will be able to vote in this poll anymore."),
      title: t2("End vote")
    }
  );
};

// src/components/Poll/PollActions/PollActions.tsx
var import_react171 = __toESM(require("react"));

// src/components/Poll/PollActions/PollAction.tsx
var import_react154 = __toESM(require("react"));
var PollAction = ({
  buttonText,
  children,
  closeModal,
  modalClassName,
  modalIsOpen,
  openModal
}) => /* @__PURE__ */ import_react154.default.createElement(import_react154.default.Fragment, null, /* @__PURE__ */ import_react154.default.createElement("button", { className: "str-chat__poll-action", onClick: openModal }, buttonText), /* @__PURE__ */ import_react154.default.createElement(Modal, { className: modalClassName, onClose: closeModal, open: modalIsOpen }, children));

// src/components/Poll/PollActions/SuggestPollOptionForm.tsx
var import_react155 = __toESM(require("react"));
var pollStateSelector3 = (nextValue) => ({ options: nextValue.options });
var SuggestPollOptionForm = ({
  close,
  messageId
}) => {
  const { client } = useChatContext("SuggestPollOptionForm");
  const { t: t2 } = useTranslationContext("SuggestPollOptionForm");
  const { poll } = usePollContext();
  const { options } = useStateStore(poll.state, pollStateSelector3);
  return /* @__PURE__ */ import_react155.default.createElement(
    FormDialog,
    {
      className: "str-chat__prompt-dialog str-chat__modal__suggest-poll-option",
      close,
      fields: {
        optionText: {
          element: "input",
          props: {
            id: "optionText",
            name: "optionText",
            required: true,
            type: "text",
            value: ""
          },
          validator: (value) => {
            if (!value) return;
            const existingOption = options.find(
              (option) => option.text === value.trim()
            );
            if (existingOption) {
              return new Error(t2("Option already exists"));
            }
            return;
          }
        }
      },
      onSubmit: async (value) => {
        const { poll_option } = await client.createPollOption(poll.id, {
          text: value.optionText
        });
        poll.castVote(poll_option.id, messageId);
      },
      shouldDisableSubmitButton: (value) => !value.optionText,
      title: t2("Suggest an option")
    }
  );
};

// src/components/Poll/PollActions/PollAnswerList.tsx
var import_react163 = __toESM(require("react"));

// src/components/Modal/ModalHeader.tsx
var import_react156 = __toESM(require("react"));
var import_clsx38 = __toESM(require("clsx"));
var ModalHeader = ({ className, close, goBack, title }) => /* @__PURE__ */ import_react156.default.createElement("div", { className: (0, import_clsx38.default)("str-chat__modal-header", className) }, goBack && /* @__PURE__ */ import_react156.default.createElement("button", { className: "str-chat__modal-header__go-back-button", onClick: goBack }), /* @__PURE__ */ import_react156.default.createElement("div", { className: "str-chat__modal-header__title" }, title), close && /* @__PURE__ */ import_react156.default.createElement("button", { className: "str-chat__modal-header__close-button", onClick: close }));

// src/components/Poll/PollVote.tsx
var import_react157 = __toESM(require("react"));
var PollVoteTimestamp = ({ timestamp }) => {
  const { t: t2 } = useTranslationContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react157.useState)(null);
  const timestampDate = new Date(timestamp);
  return /* @__PURE__ */ import_react157.default.createElement(
    "div",
    {
      className: "str-chat__poll-vote__timestamp",
      onMouseEnter: handleEnter,
      onMouseLeave: handleLeave,
      ref: setReferenceElement
    },
    t2("timestamp/PollVote", { timestamp: timestampDate }),
    /* @__PURE__ */ import_react157.default.createElement(
      PopperTooltip,
      {
        offset: [0, 5],
        placement: "bottom",
        referenceElement,
        visible: tooltipVisible
      },
      t2("timestamp/PollVoteTooltip", { timestamp: timestampDate })
    )
  );
};
var PollVoteAuthor = ({
  vote
}) => {
  const { t: t2 } = useTranslationContext();
  const { client } = useChatContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react157.useState)(null);
  const displayName = client.user?.id && client.user.id === vote.user?.id ? t2("You") : vote.user?.name || t2("Anonymous");
  return /* @__PURE__ */ import_react157.default.createElement(
    "div",
    {
      className: "str-chat__poll-vote__author",
      onMouseEnter: handleEnter,
      onMouseLeave: handleLeave,
      ref: setReferenceElement
    },
    vote.user && /* @__PURE__ */ import_react157.default.createElement(
      Avatar,
      {
        className: "str-chat__avatar--poll-vote-author",
        image: vote.user.image,
        key: `poll-vote-${vote.id}-avatar-${vote.user.id}`,
        name: vote.user.name
      }
    ),
    /* @__PURE__ */ import_react157.default.createElement("div", { className: "str-chat__poll-vote__author__name" }, displayName),
    /* @__PURE__ */ import_react157.default.createElement(
      PopperTooltip,
      {
        offset: [0, 5],
        placement: "bottom",
        referenceElement,
        visible: tooltipVisible
      },
      displayName
    )
  );
};
var PollVote = ({
  vote
}) => /* @__PURE__ */ import_react157.default.createElement("div", { className: "str-chat__poll-vote" }, /* @__PURE__ */ import_react157.default.createElement(PollVoteAuthor, { vote }), /* @__PURE__ */ import_react157.default.createElement(PollVoteTimestamp, { timestamp: vote.created_at }));
var PollVoteListing = ({
  votes
}) => /* @__PURE__ */ import_react157.default.createElement("div", { className: "str-chat__poll-vote-listing" }, votes.map((vote) => /* @__PURE__ */ import_react157.default.createElement(PollVote, { key: `poll-vote-${vote.id}`, vote })));

// src/components/Poll/hooks/usePollAnswerPagination.ts
var import_react160 = require("react");

// src/components/Poll/hooks/useManagePollVotesRealtime.ts
var import_react158 = require("react");
var import_stream_chat3 = require("stream-chat");
function useManagePollVotesRealtime(managedVoteType, cursorPaginatorState, optionId) {
  const { client } = useChatContext();
  const [votesInRealtime, setVotesInRealtime] = (0, import_react158.useState)(
    cursorPaginatorState?.getLatestValue().items ?? []
  );
  (0, import_react158.useEffect)(
    () => cursorPaginatorState?.subscribeWithSelector(
      (state) => [state.latestPageItems],
      ([latestPageItems]) => setVotesInRealtime((prev) => [...prev, ...latestPageItems])
    ),
    [cursorPaginatorState]
  );
  (0, import_react158.useEffect)(() => {
    const handleVoteEvent = (event) => {
      if (!event.poll_vote) return;
      const isAnswer = (0, import_stream_chat3.isVoteAnswer)(event.poll_vote);
      if (managedVoteType === "answer" && !isAnswer || managedVoteType === "vote" && (isAnswer || event.poll_vote.option_id !== optionId))
        return;
      if (event.type === "poll.vote_removed") {
        setVotesInRealtime(
          (prev) => event.poll_vote ? prev.filter((vote) => vote.id !== event.poll_vote.id) : prev
        );
      }
      if (event.type === "poll.vote_changed") {
        setVotesInRealtime(
          (prev) => event.poll_vote ? prev.filter((vote) => vote.id !== event.poll_vote.id) : prev
        );
      }
      if (["poll.vote_casted", "poll.vote_changed"].includes(event.type)) {
        setVotesInRealtime(
          (prev) => event.poll_vote ? [event.poll_vote, ...prev] : prev
        );
      }
    };
    const voteCastedSubscription = client.on("poll.vote_casted", handleVoteEvent);
    const voteRemovedSubscription = client.on("poll.vote_removed", handleVoteEvent);
    const voteChangedSubscription = client.on("poll.vote_changed", handleVoteEvent);
    return () => {
      voteCastedSubscription.unsubscribe();
      voteRemovedSubscription.unsubscribe();
      voteChangedSubscription.unsubscribe();
    };
  }, [client, optionId, managedVoteType]);
  return votesInRealtime;
}

// src/components/InfiniteScrollPaginator/hooks/useCursorPaginator.ts
var import_lodash17 = __toESM(require("lodash.uniqby"));
var import_react159 = require("react");
var import_stream_chat4 = require("stream-chat");
var useCursorPaginator = (paginationFn, loadFirstPage) => {
  const cursorPaginatorState = (0, import_react159.useMemo)(
    () => new import_stream_chat4.StateStore({
      hasNextPage: true,
      items: [],
      latestPageItems: [],
      loading: false
    }),
    []
  );
  const loadMore = (0, import_react159.useCallback)(async () => {
    const { loading, next: currentNext } = cursorPaginatorState.getLatestValue();
    if (currentNext === null || loading) return;
    cursorPaginatorState.partialNext({ loading: true });
    try {
      const { items, next } = await paginationFn(currentNext);
      cursorPaginatorState.next((prev) => ({
        ...prev,
        hasNextPage: !!next,
        items: (0, import_lodash17.default)(prev.items.concat(items), "id"),
        latestPageItems: items,
        next: next || null
      }));
    } catch (error) {
      cursorPaginatorState.partialNext({ error });
    }
    cursorPaginatorState.partialNext({ loading: false });
  }, [cursorPaginatorState, paginationFn]);
  (0, import_react159.useEffect)(() => {
    const { items } = cursorPaginatorState.getLatestValue();
    if (!loadFirstPage || items.length) return;
    loadMore();
  }, [cursorPaginatorState, loadFirstPage, loadMore]);
  return {
    cursorPaginatorState,
    loadMore
  };
};

// src/components/Poll/hooks/usePollAnswerPagination.ts
var paginationStateSelector = (state) => [
  state.error,
  state.hasNextPage,
  state.loading
];
var usePollAnswerPagination = ({ paginationParams } = {}) => {
  const { poll } = usePollContext();
  const paginationFn = (0, import_react160.useCallback)(
    async (next) => {
      const { next: newNext, votes } = await poll.queryAnswers({
        filter: paginationParams?.filter,
        options: !next ? paginationParams?.options : { ...paginationParams?.options, next },
        sort: { created_at: -1, ...paginationParams?.sort }
      });
      return { items: votes, next: newNext };
    },
    [paginationParams, poll]
  );
  const { cursorPaginatorState, loadMore } = useCursorPaginator(paginationFn, true);
  const answers = useManagePollVotesRealtime("answer", cursorPaginatorState);
  const [error, hasNextPage, loading] = useStateStore(
    cursorPaginatorState,
    paginationStateSelector
  );
  return {
    answers,
    error,
    hasNextPage,
    loading,
    loadMore
  };
};

// src/components/Poll/hooks/usePollOptionVotesPagination.ts
var import_react161 = require("react");
var paginationStateSelector2 = (state) => [
  state.error,
  state.hasNextPage,
  state.loading
];
var usePollOptionVotesPagination = ({
  paginationParams
}) => {
  const { poll } = usePollContext();
  const paginationFn = (0, import_react161.useCallback)(
    async (next) => {
      const { next: newNext, votes: votes2 } = await poll.queryOptionVotes({
        filter: paginationParams.filter,
        options: !next ? paginationParams?.options : { ...paginationParams?.options, next },
        sort: { created_at: -1, ...paginationParams?.sort }
      });
      return { items: votes2, next: newNext };
    },
    [paginationParams, poll]
  );
  const { cursorPaginatorState, loadMore } = useCursorPaginator(paginationFn, true);
  const votes = useManagePollVotesRealtime("vote", cursorPaginatorState, paginationParams.filter.option_id);
  const [error, hasNextPage, loading] = useStateStore(
    cursorPaginatorState,
    paginationStateSelector2
  );
  return {
    error,
    hasNextPage,
    loading,
    loadMore,
    votes
  };
};

// src/components/InfiniteScrollPaginator/InfiniteScrollPaginator.tsx
var import_clsx39 = __toESM(require("clsx"));
var import_lodash18 = __toESM(require("lodash.debounce"));
var import_react162 = __toESM(require("react"));
var mousewheelListener = (event) => {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScrollPaginator = (props) => {
  const {
    children,
    className,
    listenToScroll,
    loadNextDebounceMs = 500,
    loadNextOnScrollToBottom,
    loadNextOnScrollToTop,
    threshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD,
    useCapture = false,
    ...componentProps
  } = props;
  const rootRef = (0, import_react162.useRef)(null);
  const childRef = (0, import_react162.useRef)(null);
  const scrollListener = (0, import_react162.useMemo)(
    () => (0, import_lodash18.default)(() => {
      const root4 = rootRef.current;
      const child = childRef.current;
      if (!root4 || root4.offsetParent === null || !child) {
        return;
      }
      const distanceFromBottom = child.scrollHeight - root4.scrollTop - root4.clientHeight;
      const distanceFromTop = root4.scrollTop;
      if (listenToScroll) {
        listenToScroll(distanceFromBottom, distanceFromTop, threshold);
      }
      if (distanceFromTop < Number(threshold)) {
        loadNextOnScrollToTop?.();
      }
      if (distanceFromBottom < Number(threshold)) {
        loadNextOnScrollToBottom?.();
      }
    }, loadNextDebounceMs),
    [
      listenToScroll,
      loadNextDebounceMs,
      loadNextOnScrollToBottom,
      loadNextOnScrollToTop,
      threshold
    ]
  );
  (0, import_react162.useEffect)(() => {
    const scrollElement = rootRef.current;
    if (!scrollElement) return;
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    return () => {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
    };
  }, [scrollListener, useCapture]);
  (0, import_react162.useEffect)(() => {
    const root4 = rootRef.current;
    if (!root4 || typeof ResizeObserver === "undefined" || !scrollListener) return;
    const observer = new ResizeObserver(scrollListener);
    observer.observe(root4);
    return () => {
      observer.disconnect();
    };
  }, [scrollListener]);
  (0, import_react162.useEffect)(() => {
    const root4 = rootRef.current;
    if (root4) {
      root4.addEventListener("wheel", mousewheelListener, { passive: false });
    }
    return () => {
      if (root4) {
        root4.removeEventListener("wheel", mousewheelListener, useCapture);
      }
    };
  }, [useCapture]);
  return /* @__PURE__ */ import_react162.default.createElement(
    "div",
    {
      ...componentProps,
      className: (0, import_clsx39.default)("str-chat__infinite-scroll-paginator", className),
      ref: rootRef
    },
    /* @__PURE__ */ import_react162.default.createElement("div", { className: "str-chat__infinite-scroll-paginator__content", ref: childRef }, children)
  );
};

// src/components/Poll/PollActions/PollAnswerList.tsx
var pollStateSelector4 = (nextValue) => ({
  is_closed: nextValue.is_closed,
  ownAnswer: nextValue.ownAnswer
});
var PollAnswerList = ({
  close,
  onUpdateOwnAnswerClick
}) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { is_closed, ownAnswer } = useStateStore(poll.state, pollStateSelector4);
  const { answers, error, hasNextPage, loading, loadMore } = usePollAnswerPagination();
  return /* @__PURE__ */ import_react163.default.createElement("div", { className: "str-chat__modal__poll-answer-list" }, /* @__PURE__ */ import_react163.default.createElement(ModalHeader, { close, title: t2("Poll comments") }), /* @__PURE__ */ import_react163.default.createElement("div", { className: "str-chat__modal__poll-answer-list__body" }, /* @__PURE__ */ import_react163.default.createElement(InfiniteScrollPaginator, { loadNextOnScrollToBottom: loadMore, threshold: 40 }, /* @__PURE__ */ import_react163.default.createElement("div", { className: "str-chat__poll-answer-list" }, answers.map((answer) => /* @__PURE__ */ import_react163.default.createElement("div", { className: "str-chat__poll-answer", key: `comment-${answer.id}` }, answer.answer_text && /* @__PURE__ */ import_react163.default.createElement("p", { className: "str-chat__poll-answer__text" }, answer.answer_text), /* @__PURE__ */ import_react163.default.createElement(PollVote, { key: `poll-vote-${answer.id}`, vote: answer })))), hasNextPage && /* @__PURE__ */ import_react163.default.createElement("div", { className: "str-chat__loading-indicator-placeholder" }, loading && /* @__PURE__ */ import_react163.default.createElement(LoadingIndicator, null))), error?.message && /* @__PURE__ */ import_react163.default.createElement("div", null, error?.message)), answers.length > 0 && !is_closed && /* @__PURE__ */ import_react163.default.createElement("button", { className: "str-chat__poll-action", onClick: onUpdateOwnAnswerClick }, ownAnswer ? t2("Update your comment") : t2("Add a comment")));
};

// src/components/Poll/PollActions/PollOptionsFullList.tsx
var import_react166 = __toESM(require("react"));

// src/components/Poll/PollOptionList.tsx
var import_clsx41 = __toESM(require("clsx"));
var import_react165 = __toESM(require("react"));

// src/components/Poll/PollOptionSelector.tsx
var import_clsx40 = __toESM(require("clsx"));
var import_lodash19 = __toESM(require("lodash.debounce"));
var import_react164 = __toESM(require("react"));
var import_stream_chat5 = require("stream-chat");
var AmountBar = ({ amount, className }) => /* @__PURE__ */ import_react164.default.createElement(
  "div",
  {
    className: (0, import_clsx40.default)("str-chat__amount-bar", className),
    "data-testid": "amount-bar",
    role: "progressbar",
    style: {
      "--str-chat__amount-bar-fulfillment": amount + "%"
    }
  }
);
var Checkmark = ({ checked }) => /* @__PURE__ */ import_react164.default.createElement(
  "div",
  {
    className: (0, import_clsx40.default)("str-chat__checkmark", { "str-chat__checkmark--checked": checked })
  }
);
var pollStateSelector5 = (nextValue) => ({
  is_closed: nextValue.is_closed,
  latest_votes_by_option: nextValue.latest_votes_by_option,
  maxVotedOptionIds: nextValue.maxVotedOptionIds,
  ownVotesByOptionId: nextValue.ownVotesByOptionId,
  vote_counts_by_option: nextValue.vote_counts_by_option,
  voting_visibility: nextValue.voting_visibility
});
var PollOptionSelector = ({
  displayAvatarCount,
  option,
  voteCountVerbose
}) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities = {} } = useChannelStateContext("PollOptionsShortlist");
  const { message } = useMessageContext();
  const { poll } = usePollContext();
  const {
    is_closed,
    latest_votes_by_option,
    maxVotedOptionIds,
    ownVotesByOptionId,
    vote_counts_by_option,
    voting_visibility
  } = useStateStore(poll.state, pollStateSelector5);
  const canCastVote = channelCapabilities["cast-poll-vote"] && !is_closed;
  const winningOptionCount = maxVotedOptionIds[0] ? vote_counts_by_option[maxVotedOptionIds[0]] : 0;
  const toggleVote = (0, import_react164.useMemo)(
    () => (0, import_lodash19.default)(() => {
      if (!canCastVote) return;
      const haveVotedForTheOption = !!ownVotesByOptionId[option.id];
      return haveVotedForTheOption ? poll.removeVote(ownVotesByOptionId[option.id].id, message.id) : poll.castVote(option.id, message.id);
    }, 100),
    [canCastVote, message.id, option.id, ownVotesByOptionId, poll]
  );
  return /* @__PURE__ */ import_react164.default.createElement(
    "div",
    {
      className: (0, import_clsx40.default)("str-chat__poll-option", {
        "str-chat__poll-option--votable": canCastVote
      }),
      key: `base-poll-option-${option.id}`,
      onClick: toggleVote
    },
    canCastVote && /* @__PURE__ */ import_react164.default.createElement(Checkmark, { checked: !!ownVotesByOptionId[option.id] }),
    /* @__PURE__ */ import_react164.default.createElement("div", { className: "str-chat__poll-option-data" }, /* @__PURE__ */ import_react164.default.createElement("p", { className: "str-chat__poll-option-text" }, option.text), displayAvatarCount && voting_visibility === "public" && /* @__PURE__ */ import_react164.default.createElement("div", { className: "str-chat__poll-option-voters" }, latest_votes_by_option?.[option.id] && latest_votes_by_option[option.id].filter((vote) => !!vote.user && !(0, import_stream_chat5.isVoteAnswer)(vote)).slice(0, displayAvatarCount).map(({ user }) => /* @__PURE__ */ import_react164.default.createElement(
      Avatar,
      {
        image: user?.image,
        key: `poll-option-${option.id}-avatar-${user?.id}`,
        name: user?.name
      }
    ))), /* @__PURE__ */ import_react164.default.createElement("div", { className: "str-chat__poll-option-vote-count" }, voteCountVerbose ? t2("{{count}} votes", {
      count: vote_counts_by_option[option.id] ?? 0
    }) : vote_counts_by_option[option.id] ?? 0)),
    /* @__PURE__ */ import_react164.default.createElement(
      AmountBar,
      {
        amount: (winningOptionCount && (vote_counts_by_option[option.id] ?? 0) / winningOptionCount) * 100,
        className: (0, import_clsx40.default)("str-chat__poll-option__votes-bar", {
          "str-chat__poll-option__votes-bar--winner": is_closed && maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === option.id
        })
      }
    )
  );
};

// src/components/Poll/PollOptionList.tsx
var pollStateSelector6 = (nextValue) => ({ options: nextValue.options });
var PollOptionList = ({
  optionsDisplayCount
}) => {
  const { PollOptionSelector: PollOptionSelector2 = PollOptionSelector } = useComponentContext();
  const { poll } = usePollContext();
  const { options } = useStateStore(poll.state, pollStateSelector6);
  return /* @__PURE__ */ import_react165.default.createElement(
    "div",
    {
      className: (0, import_clsx41.default)("str-chat__poll-option-list", {
        "str-chat__poll-option-list--full": typeof optionsDisplayCount === "undefined"
      })
    },
    options.slice(0, optionsDisplayCount ?? options.length).map((option) => /* @__PURE__ */ import_react165.default.createElement(
      PollOptionSelector2,
      {
        displayAvatarCount: 3,
        key: `poll-option-${option.id}`,
        option
      }
    ))
  );
};

// src/components/Poll/PollActions/PollOptionsFullList.tsx
var pollStateSelector7 = (nextValue) => ({ name: nextValue.name });
var PollOptionsFullList = ({
  close
}) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { name: name2 } = useStateStore(poll.state, pollStateSelector7);
  return /* @__PURE__ */ import_react166.default.createElement("div", { className: "str-chat__modal__poll-option-list" }, /* @__PURE__ */ import_react166.default.createElement(ModalHeader, { close, title: t2("Poll options") }), /* @__PURE__ */ import_react166.default.createElement("div", { className: "str-chat__modal__poll-option-list__body" }, /* @__PURE__ */ import_react166.default.createElement("div", { className: "str-chat__modal__poll-option-list__title" }, name2), /* @__PURE__ */ import_react166.default.createElement(PollOptionList, null)));
};

// src/components/Poll/PollActions/PollResults/PollResults.tsx
var import_clsx42 = __toESM(require("clsx"));
var import_react170 = __toESM(require("react"));

// src/components/Poll/PollActions/PollResults/PollOptionVotesList.tsx
var import_react168 = __toESM(require("react"));

// src/components/Poll/PollActions/PollResults/PollOptionWithVotesHeader.tsx
var import_react167 = __toESM(require("react"));
var pollStateSelector8 = (nextValue) => ({
  maxVotedOptionIds: nextValue.maxVotedOptionIds,
  vote_counts_by_option: nextValue.vote_counts_by_option
});
var PollResultOptionVoteCounter = ({
  optionId
}) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { maxVotedOptionIds, vote_counts_by_option } = useStateStore(
    poll.state,
    pollStateSelector8
  );
  return /* @__PURE__ */ import_react167.default.createElement("div", { className: "str-chat__poll-result-option-vote-counter" }, maxVotedOptionIds.length === 1 && maxVotedOptionIds[0] === optionId && /* @__PURE__ */ import_react167.default.createElement("div", { className: "str-chat__poll-result-winning-option-icon" }), /* @__PURE__ */ import_react167.default.createElement("span", { className: "str-chat__poll-result-option-vote-count" }, t2("{{count}} votes", { count: vote_counts_by_option[optionId] ?? 0 })));
};
var PollOptionWithVotesHeader = ({
  option
}) => /* @__PURE__ */ import_react167.default.createElement("div", { className: "str-chat__poll-option__header" }, /* @__PURE__ */ import_react167.default.createElement("div", { className: "str-chat__poll-option__option-text" }, option.text), /* @__PURE__ */ import_react167.default.createElement(PollResultOptionVoteCounter, { optionId: option.id }));

// src/components/Poll/PollActions/PollResults/PollOptionVotesList.tsx
var PollOptionVotesList = ({
  option
}) => {
  const paginationParams = (0, import_react168.useMemo)(
    () => ({ filter: { option_id: option.id } }),
    [option.id]
  );
  const { error, hasNextPage, loading, loadMore, votes } = usePollOptionVotesPagination({
    paginationParams
  });
  return /* @__PURE__ */ import_react168.default.createElement("div", { className: "str-chat__poll-option str-chat__poll-option--full-vote-list" }, /* @__PURE__ */ import_react168.default.createElement(PollOptionWithVotesHeader, { option }), /* @__PURE__ */ import_react168.default.createElement(InfiniteScrollPaginator, { loadNextOnScrollToBottom: loadMore, threshold: 40 }, /* @__PURE__ */ import_react168.default.createElement(PollVoteListing, { votes }), hasNextPage && /* @__PURE__ */ import_react168.default.createElement("div", { className: "str-chat__loading-indicator-placeholder" }, loading && /* @__PURE__ */ import_react168.default.createElement(LoadingIndicator, null))), error && error.message);
};

// src/components/Poll/PollActions/PollResults/PollOptionWithLatestVotes.tsx
var import_react169 = __toESM(require("react"));
var pollStateSelector9 = (nextValue) => ({
  latest_votes_by_option: nextValue.latest_votes_by_option
});
var PollOptionWithLatestVotes = ({
  countVotesPreview = 5,
  option,
  showAllVotes
}) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities = {} } = useChannelStateContext(
    "PollOptionWithLatestVotes"
  );
  const { poll } = usePollContext();
  const { latest_votes_by_option } = useStateStore(poll.state, pollStateSelector9);
  const votes = latest_votes_by_option && latest_votes_by_option[option.id];
  return /* @__PURE__ */ import_react169.default.createElement("div", { className: "str-chat__poll-option" }, /* @__PURE__ */ import_react169.default.createElement(PollOptionWithVotesHeader, { option }), votes && /* @__PURE__ */ import_react169.default.createElement(PollVoteListing, { votes: votes.slice(0, countVotesPreview) }), channelCapabilities["query-poll-votes"] && showAllVotes && votes?.length > countVotesPreview && /* @__PURE__ */ import_react169.default.createElement(
    "button",
    {
      className: "str-chat__poll-option__show-all-votes-button",
      onClick: showAllVotes
    },
    t2("Show all")
  ));
};

// src/components/Poll/PollActions/PollResults/PollResults.tsx
var pollStateSelector10 = (nextValue) => ({
  name: nextValue.name,
  options: nextValue.options,
  vote_counts_by_option: nextValue.vote_counts_by_option
});
var PollResults = ({
  close
}) => {
  const { t: t2 } = useTranslationContext();
  const { poll } = usePollContext();
  const { name: name2, options, vote_counts_by_option } = useStateStore(
    poll.state,
    pollStateSelector10
  );
  const [optionToView, setOptionToView] = (0, import_react170.useState)();
  const goBack = (0, import_react170.useCallback)(() => setOptionToView(void 0), []);
  return /* @__PURE__ */ import_react170.default.createElement(
    "div",
    {
      className: (0, import_clsx42.default)("str-chat__modal__poll-results", {
        "str-chat__modal__poll-results--option-detail": optionToView
      })
    },
    optionToView ? /* @__PURE__ */ import_react170.default.createElement(import_react170.default.Fragment, null, /* @__PURE__ */ import_react170.default.createElement(ModalHeader, { close, goBack, title: optionToView.text }), /* @__PURE__ */ import_react170.default.createElement("div", { className: "str-chat__modal__poll-results__body" }, /* @__PURE__ */ import_react170.default.createElement(
      PollOptionVotesList,
      {
        key: `poll-option-detail-${optionToView.id}`,
        option: optionToView
      }
    ))) : /* @__PURE__ */ import_react170.default.createElement(import_react170.default.Fragment, null, /* @__PURE__ */ import_react170.default.createElement(ModalHeader, { close, title: t2("Poll results") }), /* @__PURE__ */ import_react170.default.createElement("div", { className: "str-chat__modal__poll-results__body" }, /* @__PURE__ */ import_react170.default.createElement("div", { className: "str-chat__modal__poll-results__title" }, name2), /* @__PURE__ */ import_react170.default.createElement("div", { className: "str-chat__modal__poll-results__option-list" }, options.sort(
      (next, current) => (vote_counts_by_option[current.id] ?? 0) >= (vote_counts_by_option[next.id] ?? 0) ? 1 : -1
    ).map((option) => /* @__PURE__ */ import_react170.default.createElement(
      PollOptionWithLatestVotes,
      {
        key: `poll-option-${option.id}`,
        option,
        showAllVotes: () => setOptionToView(option)
      }
    )))))
  );
};

// src/components/Poll/constants.ts
var MAX_POLL_OPTIONS = 100;
var VALID_MAX_VOTES_VALUE_REGEX = /^([2-9]|10)$/;
var MAX_OPTIONS_DISPLAYED = 10;

// src/components/Poll/PollActions/PollActions.tsx
var pollStateSelector11 = (nextValue) => ({
  allow_answers: nextValue.allow_answers,
  allow_user_suggested_options: nextValue.allow_user_suggested_options,
  answers_count: nextValue.answers_count,
  created_by_id: nextValue.created_by_id,
  is_closed: nextValue.is_closed,
  options: nextValue.options,
  ownAnswer: nextValue.ownAnswer
});
var PollActions = ({
  AddCommentForm: AddCommentForm2 = AddCommentForm,
  EndPollDialog: EndPollDialog2 = EndPollDialog,
  PollAnswerList: PollAnswerList2 = PollAnswerList,
  PollOptionsFullList: PollOptionsFullList2 = PollOptionsFullList,
  PollResults: PollResults2 = PollResults,
  SuggestPollOptionForm: SuggestPollOptionForm2 = SuggestPollOptionForm
}) => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext("PollActions");
  const { channelCapabilities = {} } = useChannelStateContext("PollActions");
  const { message } = useMessageContext("PollActions");
  const { poll } = usePollContext();
  const {
    allow_answers,
    allow_user_suggested_options,
    answers_count,
    created_by_id,
    is_closed,
    options,
    ownAnswer
  } = useStateStore(poll.state, pollStateSelector11);
  const [modalOpen, setModalOpen] = (0, import_react171.useState)();
  const closeModal = (0, import_react171.useCallback)(() => setModalOpen(void 0), []);
  const onUpdateAnswerClick = (0, import_react171.useCallback)(() => setModalOpen("add-comment"), []);
  return /* @__PURE__ */ import_react171.default.createElement("div", { className: "str-chat__poll-actions" }, options.length > MAX_OPTIONS_DISPLAYED && /* @__PURE__ */ import_react171.default.createElement(
    PollAction,
    {
      buttonText: t2("See all options ({{count}})", {
        count: options.length
      }),
      closeModal,
      modalIsOpen: modalOpen === "view-all-options",
      openModal: () => setModalOpen("view-all-options")
    },
    /* @__PURE__ */ import_react171.default.createElement(PollOptionsFullList2, { close: closeModal })
  ), !is_closed && allow_user_suggested_options && options.length < MAX_POLL_OPTIONS && /* @__PURE__ */ import_react171.default.createElement(
    PollAction,
    {
      buttonText: t2("Suggest an option"),
      closeModal,
      modalClassName: "str-chat__suggest-poll-option-modal",
      modalIsOpen: modalOpen === "suggest-option",
      openModal: () => setModalOpen("suggest-option")
    },
    /* @__PURE__ */ import_react171.default.createElement(SuggestPollOptionForm2, { close: closeModal, messageId: message.id })
  ), !is_closed && allow_answers && /* @__PURE__ */ import_react171.default.createElement(
    PollAction,
    {
      buttonText: ownAnswer ? t2("Update your comment") : t2("Add a comment"),
      closeModal,
      modalClassName: "str-chat__add-poll-answer-modal",
      modalIsOpen: modalOpen === "add-comment",
      openModal: () => setModalOpen("add-comment")
    },
    /* @__PURE__ */ import_react171.default.createElement(AddCommentForm2, { close: closeModal, messageId: message.id })
  ), answers_count > 0 && channelCapabilities["query-poll-votes"] && /* @__PURE__ */ import_react171.default.createElement(
    PollAction,
    {
      buttonText: t2("View {{count}} comments", { count: answers_count }),
      closeModal,
      modalClassName: "str-chat__poll-answer-list-modal",
      modalIsOpen: modalOpen === "view-comments",
      openModal: () => setModalOpen("view-comments")
    },
    /* @__PURE__ */ import_react171.default.createElement(
      PollAnswerList2,
      {
        close: closeModal,
        onUpdateOwnAnswerClick: onUpdateAnswerClick
      }
    )
  ), /* @__PURE__ */ import_react171.default.createElement(
    PollAction,
    {
      buttonText: t2("View results"),
      closeModal,
      modalClassName: "str-chat__poll-results-modal",
      modalIsOpen: modalOpen === "view-results",
      openModal: () => setModalOpen("view-results")
    },
    /* @__PURE__ */ import_react171.default.createElement(PollResults2, { close: closeModal })
  ), !is_closed && created_by_id === client.user?.id && /* @__PURE__ */ import_react171.default.createElement(
    PollAction,
    {
      buttonText: t2("End vote"),
      closeModal,
      modalClassName: "str-chat__end-poll-modal",
      modalIsOpen: modalOpen === "end-vote",
      openModal: () => setModalOpen("end-vote")
    },
    /* @__PURE__ */ import_react171.default.createElement(EndPollDialog2, { close: closeModal })
  ));
};

// src/components/Poll/PollContent.tsx
var pollStateSelectorPollContent = (nextValue) => ({ is_closed: nextValue.is_closed });
var PollContent = () => {
  const { PollActions: PollActions2 = PollActions, PollHeader: PollHeader2 = PollHeader } = useComponentContext();
  const { poll } = usePollContext();
  const { is_closed } = useStateStore(poll.state, pollStateSelectorPollContent);
  return /* @__PURE__ */ import_react172.default.createElement("div", { className: (0, import_clsx43.default)("str-chat__poll", { "str-chat__poll--closed": is_closed }) }, /* @__PURE__ */ import_react172.default.createElement(PollHeader2, null), /* @__PURE__ */ import_react172.default.createElement(PollOptionList, { optionsDisplayCount: MAX_OPTIONS_DISPLAYED }), /* @__PURE__ */ import_react172.default.createElement(PollActions2, null));
};

// src/components/Poll/QuotedPoll.tsx
var import_clsx44 = __toESM(require("clsx"));
var import_react173 = __toESM(require("react"));
var pollStateSelectorQuotedPoll = (nextValue) => ({
  is_closed: nextValue.is_closed,
  name: nextValue.name
});
var QuotedPoll = () => {
  const { poll } = usePollContext();
  const { is_closed, name: name2 } = useStateStore(poll.state, pollStateSelectorQuotedPoll);
  return /* @__PURE__ */ import_react173.default.createElement(
    "div",
    {
      className: (0, import_clsx44.default)("str-chat__quoted-poll-preview", {
        "str-chat__quoted-poll-preview--closed": is_closed
      })
    },
    /* @__PURE__ */ import_react173.default.createElement("div", { className: "str-chat__quoted-poll-preview__icon" }, "\u{1F4CA}"),
    /* @__PURE__ */ import_react173.default.createElement("div", { className: "str-chat__quoted-poll-preview__name" }, name2)
  );
};

// src/components/Poll/Poll.tsx
var Poll = ({
  isQuoted,
  poll
}) => {
  const { PollContent: PollContent2 = PollContent, QuotedPoll: QuotedPoll2 = QuotedPoll } = useComponentContext();
  return poll ? /* @__PURE__ */ import_react174.default.createElement(PollProvider, { poll }, isQuoted ? /* @__PURE__ */ import_react174.default.createElement(QuotedPoll2, null) : /* @__PURE__ */ import_react174.default.createElement(PollContent2, null)) : null;
};

// src/components/Poll/PollCreationDialog/PollCreationDialog.tsx
var import_clsx48 = __toESM(require("clsx"));
var import_nanoid6 = require("nanoid");
var import_react179 = __toESM(require("react"));

// src/components/Poll/PollCreationDialog/OptionFieldSet.tsx
var import_clsx46 = __toESM(require("clsx"));
var import_nanoid5 = require("nanoid");
var import_react176 = __toESM(require("react"));

// src/components/DragAndDrop/DragAndDropContainer.tsx
var import_react175 = __toESM(require("react"));
var import_clsx45 = __toESM(require("clsx"));
var DragAndDropContainer = ({
  children,
  className,
  draggable,
  onSetNewOrder
}) => {
  const [order2, setOrder] = (0, import_react175.useState)([]);
  const [dragStartIndex, setDragStartIndex] = (0, import_react175.useState)(null);
  const [dragOverIndex, setDragOverIndex] = (0, import_react175.useState)(null);
  const [container, setContainer] = (0, import_react175.useState)(null);
  const moveDirection = dragStartIndex === null || dragOverIndex === null ? void 0 : dragStartIndex <= dragOverIndex ? "down" : "up";
  const childrenArray = import_react175.default.Children.toArray(children);
  (0, import_react175.useEffect)(() => {
    setOrder(import_react175.default.Children.map(children, (_, index3) => index3) || []);
  }, [children]);
  (0, import_react175.useEffect)(() => {
    if (!container) return;
    const handleDragStart = (e2) => {
      const target = e2.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (e2.dataTransfer) {
        e2.dataTransfer.effectAllowed = "move";
      }
      if (draggableItem instanceof HTMLElement) {
        const index3 = Array.from(draggableItem.parentElement?.children || []).indexOf(
          draggableItem
        );
        setDragStartIndex(index3);
        e2.dataTransfer?.setData("text/plain", index3.toString());
        draggableItem.style.opacity = "0.3";
      }
    };
    const handleDragOver = (e2) => {
      e2.preventDefault();
      const target = e2.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (draggableItem instanceof HTMLElement) {
        const index3 = Array.from(draggableItem.parentElement?.children || []).indexOf(
          draggableItem
        );
        setDragOverIndex(index3);
      }
    };
    const handleDragLeave = () => {
      setDragOverIndex(null);
    };
    const handleDrop = (e2) => {
      e2.preventDefault();
      const draggedIndex = parseInt(e2.dataTransfer?.getData("text/plain") || "-1", 10);
      const target = e2.target;
      const draggableItem = target.closest(".str-chat__drag-and-drop-container__item");
      if (draggableItem instanceof HTMLElement) {
        const dropIndex = Array.from(draggableItem.parentElement?.children || []).indexOf(
          draggableItem
        );
        if (draggedIndex !== -1 && draggedIndex !== dropIndex) {
          setOrder((prevOrder) => {
            const newOrder = [...prevOrder];
            const [removed] = newOrder.splice(draggedIndex, 1);
            newOrder.splice(dropIndex, 0, removed);
            onSetNewOrder?.(newOrder);
            return newOrder;
          });
        }
      }
      setDragStartIndex(null);
      setDragOverIndex(null);
    };
    const handleDragEnd = (e2) => {
      const target = e2.target;
      if (target instanceof HTMLElement) {
        target.style.opacity = "";
      }
      setDragStartIndex(null);
      setDragOverIndex(null);
    };
    container.addEventListener("dragstart", handleDragStart);
    container.addEventListener("dragover", handleDragOver);
    container.addEventListener("dragleave", handleDragLeave);
    container.addEventListener("drop", handleDrop);
    container.addEventListener("dragend", handleDragEnd);
    return () => {
      container.removeEventListener("dragstart", handleDragStart);
      container.removeEventListener("dragover", handleDragOver);
      container.removeEventListener("dragleave", handleDragLeave);
      container.removeEventListener("drop", handleDrop);
      container.removeEventListener("dragend", handleDragEnd);
    };
  }, [container, onSetNewOrder]);
  return /* @__PURE__ */ import_react175.default.createElement(
    "div",
    {
      className: (0, import_clsx45.default)("str-chat__drag-and-drop-container", className),
      ref: setContainer
    },
    order2.map((originalIndex, currentIndex) => {
      const child = childrenArray[originalIndex];
      return /* @__PURE__ */ import_react175.default.createElement(
        "div",
        {
          className: (0, import_clsx45.default)("str-chat__drag-and-drop-container__item", {
            "str-chat__drag-and-drop-container__item--dragged-over-from-bottom": moveDirection === "up" && dragOverIndex === currentIndex,
            "str-chat__drag-and-drop-container__item--dragged-over-from-top": moveDirection === "down" && dragOverIndex === currentIndex
          }),
          draggable,
          key: import_react175.default.isValidElement(child) ? child.key : `draggable-item-${originalIndex}`
        },
        child
      );
    })
  );
};

// src/components/Poll/PollCreationDialog/OptionFieldSet.tsx
var VALIDATION_ERRORS = { "Option already exists": true };
var OptionFieldSet = ({
  errors,
  options,
  setErrors,
  setState
}) => {
  const { t: t2 } = useTranslationContext("OptionFieldSet");
  const findOptionDuplicate = (sourceOption) => {
    const isDuplicateFilter = (option) => !!sourceOption.text.trim() && // do not include empty options into consideration
    option.id !== sourceOption.id && option.text.trim() === sourceOption.text.trim();
    return options.find(isDuplicateFilter);
  };
  const onSetNewOrder = (0, import_react176.useCallback)(
    (newOrder) => {
      setState((prev) => ({
        ...prev,
        options: newOrder.map((index3) => prev.options[index3])
      }));
    },
    [setState]
  );
  const draggable = options.length > 1;
  return /* @__PURE__ */ import_react176.default.createElement("fieldset", { className: "str-chat__form__field str-chat__form__input-fieldset" }, /* @__PURE__ */ import_react176.default.createElement("legend", { className: "str-chat__form__field-label" }, t2("Options")), /* @__PURE__ */ import_react176.default.createElement(
    DragAndDropContainer,
    {
      className: "str-chat__form__input-fieldset__values",
      draggable,
      onSetNewOrder
    },
    options.map((option, i) => /* @__PURE__ */ import_react176.default.createElement(
      "div",
      {
        className: (0, import_clsx46.default)("str-chat__form__input-field", {
          "str-chat__form__input-field--draggable": draggable,
          "str-chat__form__input-field--has-error": errors[option.id]
        }),
        key: `new-poll-option-${i}`
      },
      /* @__PURE__ */ import_react176.default.createElement("div", { className: "str-chat__form__input-field__value" }, /* @__PURE__ */ import_react176.default.createElement(
        FieldError,
        {
          className: "str-chat__form__input-field__error",
          "data-testid": "poll-option-input-field-error",
          text: errors[option.id]
        }
      ), /* @__PURE__ */ import_react176.default.createElement(
        "input",
        {
          id: option.id,
          onBlur: (e2) => {
            if (findOptionDuplicate({ id: e2.target.id, text: e2.target.value })) {
              setErrors((prev) => ({
                ...prev,
                [e2.target.id]: t2("Option already exists")
              }));
            }
          },
          onChange: (e2) => {
            setState((prev) => {
              const shouldAddEmptyOption = prev.options.length < MAX_POLL_OPTIONS && (!prev.options || prev.options.slice(i + 1).length === 0 && !!e2.target.value);
              const shouldRemoveOption = prev.options && prev.options.slice(i + 1).length > 0 && !e2.target.value;
              const optionListHead = prev.options ? prev.options.slice(0, i) : [];
              const optionListTail = shouldAddEmptyOption ? [{ id: (0, import_nanoid5.nanoid)(), text: "" }] : (prev.options || []).slice(i + 1);
              if (errors[option.id] && !e2.target.value || VALIDATION_ERRORS[errors[option.id]] && !findOptionDuplicate({ id: e2.target.id, text: e2.target.value })) {
                setErrors((prev2) => {
                  delete prev2[option.id];
                  return prev2;
                });
              }
              return {
                ...prev,
                options: [
                  ...optionListHead,
                  ...shouldRemoveOption ? [] : [{ ...option, text: e2.target.value }],
                  ...optionListTail
                ]
              };
            });
          },
          onKeyUp: (event) => {
            if (event.key === "Enter") {
              const nextInputId = options[i + 1].id;
              document.getElementById(nextInputId)?.focus();
            }
          },
          placeholder: t2("Add an option"),
          type: "text",
          value: option.text
        }
      )),
      draggable && /* @__PURE__ */ import_react176.default.createElement("div", { className: "str-chat__drag-handle" })
    ))
  ));
};

// src/components/Poll/PollCreationDialog/PollCreationDialogControls.tsx
var import_react177 = __toESM(require("react"));
var PollCreationDialogControls = ({
  close,
  errors,
  state
}) => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext("PollCreationDialogControls");
  const { handleSubmit: handleSubmitMessage } = useMessageInputContext(
    "PollCreationDialogControls"
  );
  const canSubmit = () => {
    const hasAtLeastOneOption = state.options.filter((o2) => !!o2.text).length > 0;
    const hasName = !!state.name;
    const maxVotesAllowedNumber = parseInt(
      state.max_votes_allowed?.match(VALID_MAX_VOTES_VALUE_REGEX)?.[0] || ""
    );
    const validMaxVotesAllowed = state.max_votes_allowed === "" || !!maxVotesAllowedNumber && (2 <= maxVotesAllowedNumber || maxVotesAllowedNumber <= 10);
    const noErrors = errors.length === 0;
    return hasAtLeastOneOption && hasName && validMaxVotesAllowed && noErrors;
  };
  return /* @__PURE__ */ import_react177.default.createElement("div", { className: "str-chat__dialog__controls" }, /* @__PURE__ */ import_react177.default.createElement(
    "button",
    {
      className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--cancel",
      onClick: close
    },
    t2("Cancel")
  ), /* @__PURE__ */ import_react177.default.createElement(
    "button",
    {
      className: "str-chat__dialog__controls-button str-chat__dialog__controls-button--submit",
      disabled: !canSubmit(),
      onClick: async (e2) => {
        let pollId;
        try {
          const { poll } = await client.createPoll({
            ...state,
            max_votes_allowed: state.max_votes_allowed ? parseInt(state.max_votes_allowed) : void 0,
            options: state.options?.filter((o2) => o2.text).map((o2) => ({ text: o2.text }))
          });
          pollId = poll.id;
        } catch (e3) {
          return;
        }
        try {
          await handleSubmitMessage(e2, { poll_id: pollId });
        } catch (e3) {
          return;
        }
        close();
      },
      type: "submit"
    },
    t2("Create")
  ));
};

// src/components/Form/SwitchField.tsx
var import_clsx47 = __toESM(require("clsx"));
var import_react178 = __toESM(require("react"));
var SwitchField = ({ children, ...props }) => {
  const inputRef = (0, import_react178.useRef)(null);
  const handleKeyUp = (event) => {
    if (![" ", "Enter"].includes(event.key) || !inputRef.current) return;
    event.preventDefault();
    inputRef.current.click();
  };
  return /* @__PURE__ */ import_react178.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field" }, /* @__PURE__ */ import_react178.default.createElement("label", null, /* @__PURE__ */ import_react178.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field-content" }, children), /* @__PURE__ */ import_react178.default.createElement("input", { type: "checkbox", ...props, ref: inputRef }), /* @__PURE__ */ import_react178.default.createElement(
    "div",
    {
      className: (0, import_clsx47.default)("str-chat__form__switch-field__switch", {
        "str-chat__form__switch-field__switch--on": props.checked
      }),
      onKeyUp: handleKeyUp,
      tabIndex: 0
    },
    /* @__PURE__ */ import_react178.default.createElement("div", { className: "str-chat__form__switch-field__switch-handle" })
  )));
};
var SimpleSwitchField = ({ labelText, ...props }) => /* @__PURE__ */ import_react178.default.createElement(SwitchField, { ...props }, /* @__PURE__ */ import_react178.default.createElement("div", { className: "str-chat__form__field str-chat__form__switch-field__text" }, labelText));

// src/components/Poll/PollCreationDialog/PollCreationDialog.tsx
var PollCreationDialog = ({ close }) => {
  const { client } = useChatContext();
  const { t: t2 } = useTranslationContext();
  const [nameError, setNameError] = (0, import_react179.useState)();
  const [optionsErrors, setOptionsErrors] = (0, import_react179.useState)({});
  const [multipleAnswerCountError, setMultipleAnswerCountError] = (0, import_react179.useState)();
  const [state, setState] = (0, import_react179.useState)(
    () => ({
      allow_answers: false,
      allow_user_suggested_options: false,
      description: "",
      enforce_unique_vote: true,
      id: (0, import_nanoid6.nanoid)(),
      max_votes_allowed: "",
      name: "",
      options: [{ id: (0, import_nanoid6.nanoid)(), text: "" }],
      user_id: client.user?.id,
      voting_visibility: "public"
    })
  );
  return /* @__PURE__ */ import_react179.default.createElement(
    "div",
    {
      className: "str-chat__dialog str-chat__poll-creation-dialog",
      "data-testid": "poll-creation-dialog"
    },
    /* @__PURE__ */ import_react179.default.createElement(ModalHeader, { close, title: t2("Create poll") }),
    /* @__PURE__ */ import_react179.default.createElement("div", { className: "str-chat__dialog__body" }, /* @__PURE__ */ import_react179.default.createElement("form", { autoComplete: "off" }, /* @__PURE__ */ import_react179.default.createElement(
      "div",
      {
        className: (0, import_clsx48.default)(
          "str-chat__form__field str-chat__form__input-field str-chat__form__input-field--with-label",
          {
            "str-chat__form__input-field--has-error": nameError
          }
        )
      },
      /* @__PURE__ */ import_react179.default.createElement("label", { className: "str-chat__form__field-label", htmlFor: "name" }, t2("Question")),
      /* @__PURE__ */ import_react179.default.createElement("div", { className: (0, import_clsx48.default)("str-chat__form__input-field__value") }, /* @__PURE__ */ import_react179.default.createElement(
        FieldError,
        {
          className: "str-chat__form__input-field__error",
          "data-testid": "poll-name-input-field-error",
          text: nameError
        }
      ), /* @__PURE__ */ import_react179.default.createElement(
        "input",
        {
          id: "name",
          onBlur: (e2) => {
            if (!e2.target.value) {
              setNameError("The field is required");
            }
          },
          onChange: (e2) => {
            setState((prev) => ({ ...prev, name: e2.target.value }));
            if (nameError && e2.target.value) {
              setNameError(void 0);
            }
          },
          placeholder: t2("Ask a question"),
          type: "text",
          value: state.name
        }
      ))
    ), /* @__PURE__ */ import_react179.default.createElement(
      OptionFieldSet,
      {
        errors: optionsErrors,
        options: state.options,
        setErrors: setOptionsErrors,
        setState
      }
    ), /* @__PURE__ */ import_react179.default.createElement(
      "div",
      {
        className: (0, import_clsx48.default)("str-chat__form__expandable-field", {
          "str-chat__form__expandable-field--expanded": !state.enforce_unique_vote
        })
      },
      /* @__PURE__ */ import_react179.default.createElement(
        SimpleSwitchField,
        {
          checked: !state.enforce_unique_vote,
          id: "enforce_unique_vote",
          labelText: t2("Multiple answers"),
          onChange: (e2) => {
            setState((prev) => ({
              ...prev,
              enforce_unique_vote: !e2.target.checked,
              max_votes_allowed: ""
            }));
            setMultipleAnswerCountError(void 0);
          }
        }
      ),
      !state.enforce_unique_vote && /* @__PURE__ */ import_react179.default.createElement(
        "div",
        {
          className: (0, import_clsx48.default)("str-chat__form__input-field", {
            "str-chat__form__input-field--has-error": multipleAnswerCountError
          })
        },
        /* @__PURE__ */ import_react179.default.createElement("div", { className: (0, import_clsx48.default)("str-chat__form__input-field__value") }, /* @__PURE__ */ import_react179.default.createElement(
          FieldError,
          {
            className: "str-chat__form__input-field__error",
            "data-testid": "poll-max-votes-allowed-input-field-error",
            text: multipleAnswerCountError
          }
        ), /* @__PURE__ */ import_react179.default.createElement(
          "input",
          {
            id: "max_votes_allowed",
            onChange: (e2) => {
              const isValidValue = !e2.target.value || e2.target.value.match(VALID_MAX_VOTES_VALUE_REGEX);
              if (!isValidValue) {
                setMultipleAnswerCountError(
                  t2("Type a number from 2 to 10")
                );
              } else if (multipleAnswerCountError) {
                setMultipleAnswerCountError(void 0);
              }
              setState((prev) => ({
                ...prev,
                max_votes_allowed: e2.target.value
              }));
            },
            placeholder: t2("Maximum number of votes (from 2 to 10)"),
            type: "number",
            value: state.max_votes_allowed
          }
        ))
      )
    ), /* @__PURE__ */ import_react179.default.createElement(
      SimpleSwitchField,
      {
        checked: state.voting_visibility === "anonymous",
        id: "voting_visibility",
        labelText: t2("Anonymous poll"),
        onChange: (e2) => setState((prev) => ({
          ...prev,
          voting_visibility: e2.target.checked ? "anonymous" : "public"
        }))
      }
    ), /* @__PURE__ */ import_react179.default.createElement(
      SimpleSwitchField,
      {
        checked: state.allow_user_suggested_options,
        id: "allow_user_suggested_options",
        labelText: t2("Allow option suggestion"),
        onChange: (e2) => setState((prev) => ({
          ...prev,
          allow_user_suggested_options: e2.target.checked
        }))
      }
    ), /* @__PURE__ */ import_react179.default.createElement(
      SimpleSwitchField,
      {
        checked: state.allow_answers,
        id: "allow_answers",
        labelText: t2("Allow comments"),
        onChange: (e2) => setState((prev) => ({ ...prev, allow_answers: e2.target.checked }))
      }
    ))),
    /* @__PURE__ */ import_react179.default.createElement(
      PollCreationDialogControls,
      {
        close,
        errors: [
          ...nameError ?? [],
          ...multipleAnswerCountError ?? [],
          ...Object.keys(optionsErrors)
        ],
        state
      }
    )
  );
};

// src/components/Message/QuotedMessage.tsx
var QuotedMessage = ({
  renderText: propsRenderText
}) => {
  const { Attachment: Attachment2 = Attachment, Avatar: ContextAvatar } = useComponentContext("QuotedMessage");
  const { client } = useChatContext();
  const {
    isMyMessage,
    message,
    renderText: contextRenderText
  } = useMessageContext("QuotedMessage");
  const { t: t2, userLanguage } = useTranslationContext("QuotedMessage");
  const { jumpToMessage } = useChannelActionContext("QuotedMessage");
  const renderText2 = propsRenderText ?? contextRenderText ?? renderText;
  const Avatar2 = ContextAvatar || Avatar;
  const { quoted_message } = message;
  const poll = quoted_message?.poll_id && client.polls.fromState(quoted_message.poll_id);
  const quotedMessageDeleted = quoted_message?.deleted_at || quoted_message?.type === "deleted";
  const quotedMessageText = quotedMessageDeleted ? t2("This message was deleted...") : quoted_message?.i18n?.[`${userLanguage}_text`] || quoted_message?.text;
  const quotedMessageAttachment = quoted_message?.attachments?.length && !quotedMessageDeleted ? quoted_message.attachments[0] : null;
  const renderedText = (0, import_react180.useMemo)(
    () => renderText2(quotedMessageText, quoted_message?.mentioned_users),
    [quotedMessageText, quoted_message?.mentioned_users, renderText2]
  );
  if (!quoted_message) return null;
  if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment) return null;
  return /* @__PURE__ */ import_react180.default.createElement(import_react180.default.Fragment, null, /* @__PURE__ */ import_react180.default.createElement(
    "div",
    {
      className: (0, import_clsx49.default)("str-chat__quoted-message-preview", { mine: isMyMessage() }),
      "data-testid": "quoted-message",
      onClickCapture: (e2) => {
        e2.stopPropagation();
        e2.preventDefault();
        jumpToMessage(quoted_message.id);
      }
    },
    quoted_message.user && /* @__PURE__ */ import_react180.default.createElement(
      Avatar2,
      {
        className: "str-chat__avatar--quoted-message-sender",
        image: quoted_message.user.image,
        name: quoted_message.user.name || quoted_message.user.id,
        user: quoted_message.user
      }
    ),
    /* @__PURE__ */ import_react180.default.createElement(
      "div",
      {
        className: "str-chat__quoted-message-bubble",
        "data-testid": "quoted-message-contents"
      },
      poll ? /* @__PURE__ */ import_react180.default.createElement(Poll, { isQuoted: true, poll }) : /* @__PURE__ */ import_react180.default.createElement(import_react180.default.Fragment, null, quotedMessageAttachment && /* @__PURE__ */ import_react180.default.createElement(Attachment2, { attachments: [quotedMessageAttachment], isQuoted: true }), /* @__PURE__ */ import_react180.default.createElement(
        "div",
        {
          className: "str-chat__quoted-message-bubble__text",
          "data-testid": "quoted-message-text"
        },
        renderedText
      ))
    )
  ), message.attachments?.length ? /* @__PURE__ */ import_react180.default.createElement(Attachment2, { attachments: message.attachments }) : null);
};

// src/components/Message/MessageErrorText.tsx
var import_react181 = __toESM(require("react"));
function MessageErrorText({ message, theme }) {
  const { t: t2 } = useTranslationContext("MessageText");
  if (message.type === "error" && !isMessageBounced(message)) {
    return /* @__PURE__ */ import_react181.default.createElement(
      "div",
      {
        className: `str-chat__${theme}-message--error-message str-chat__message--error-message`
      },
      t2("Error \xB7 Unsent")
    );
  }
  if (message.status === "failed") {
    return /* @__PURE__ */ import_react181.default.createElement(
      "div",
      {
        className: `str-chat__${theme}-message--error-message str-chat__message--error-message`
      },
      message.errorStatusCode !== 403 ? t2("Message Failed \xB7 Click to try again") : t2("Message Failed \xB7 Unauthorized")
    );
  }
  return null;
}

// src/components/Message/MessageText.tsx
var UnMemoizedMessageTextComponent = (props) => {
  const {
    customInnerClass,
    customWrapperClass = "",
    message: propMessage,
    renderText: propsRenderText,
    theme = "simple"
  } = props;
  const { QuotedMessage: QuotedMessage2 = QuotedMessage } = useComponentContext("MessageText");
  const {
    message: contextMessage,
    onMentionsClickMessage,
    onMentionsHoverMessage,
    renderText: contextRenderText,
    unsafeHTML
  } = useMessageContext("MessageText");
  const renderText2 = propsRenderText ?? contextRenderText ?? renderText;
  const { userLanguage } = useTranslationContext("MessageText");
  const message = propMessage || contextMessage;
  const hasAttachment = messageHasAttachments(message);
  const messageTextToRender = message.i18n?.[`${userLanguage}_text`] || message.text;
  const messageText = (0, import_react182.useMemo)(
    () => renderText2(messageTextToRender, message.mentioned_users),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [message.mentioned_users, messageTextToRender]
  );
  const wrapperClass = customWrapperClass || "str-chat__message-text";
  const innerClass = customInnerClass || `str-chat__message-text-inner str-chat__message-${theme}-text-inner`;
  if (!messageTextToRender && !message.quoted_message) return null;
  return /* @__PURE__ */ import_react182.default.createElement("div", { className: wrapperClass, tabIndex: 0 }, /* @__PURE__ */ import_react182.default.createElement(
    "div",
    {
      className: (0, import_clsx50.default)(innerClass, {
        [`str-chat__message-${theme}-text-inner--has-attachment`]: hasAttachment,
        [` str-chat__message-${theme}-text-inner--is-emoji`]: isOnlyEmojis(message.text) && !message.quoted_message
      }),
      "data-testid": "message-text-inner-wrapper",
      onClick: onMentionsClickMessage,
      onMouseOver: onMentionsHoverMessage
    },
    message.quoted_message && /* @__PURE__ */ import_react182.default.createElement(QuotedMessage2, null),
    /* @__PURE__ */ import_react182.default.createElement(MessageErrorText, { message, theme }),
    unsafeHTML && message.html ? /* @__PURE__ */ import_react182.default.createElement("div", { dangerouslySetInnerHTML: { __html: message.html } }) : /* @__PURE__ */ import_react182.default.createElement("div", null, messageText)
  ));
};
var MessageText = import_react182.default.memo(
  UnMemoizedMessageTextComponent
);

// src/components/Message/MessageTimestamp.tsx
var import_react183 = __toESM(require("react"));
var UnMemoizedMessageTimestamp = (props) => {
  const { message: propMessage, ...timestampProps } = props;
  const { message: contextMessage } = useMessageContext("MessageTimestamp");
  const { Timestamp: Timestamp2 = Timestamp } = useComponentContext("MessageTimestamp");
  const message = propMessage || contextMessage;
  return /* @__PURE__ */ import_react183.default.createElement(Timestamp2, { timestamp: message.created_at, ...timestampProps });
};
var MessageTimestamp = import_react183.default.memo(
  UnMemoizedMessageTimestamp
);

// src/constants/messageTypes.ts
var CUSTOM_MESSAGE_TYPE = {
  date: "message.date",
  intro: "channel.intro"
};

// src/components/MessageInput/AttachmentSelector.tsx
var import_nanoid8 = require("nanoid");
var import_react187 = __toESM(require("react"));

// src/components/MessageInput/icons.tsx
var import_react184 = __toESM(require("react"));
var import_nanoid7 = require("nanoid");
var LoadingIndicatorIcon = ({ size = 20 }) => {
  const id = (0, import_react184.useMemo)(() => (0, import_nanoid7.nanoid)(), []);
  return /* @__PURE__ */ import_react184.default.createElement("div", { className: "str-chat__loading-indicator" }, /* @__PURE__ */ import_react184.default.createElement(
    "svg",
    {
      "data-testid": "loading-indicator",
      height: size,
      viewBox: "0 0 30 30",
      width: size,
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ import_react184.default.createElement("defs", null, /* @__PURE__ */ import_react184.default.createElement(
      "linearGradient",
      {
        id: `${id}-linear-gradient`,
        x1: "50%",
        x2: "50%",
        y1: "0%",
        y2: "100%"
      },
      /* @__PURE__ */ import_react184.default.createElement("stop", { offset: "0%", stopColor: "#FFF", stopOpacity: "0" }),
      /* @__PURE__ */ import_react184.default.createElement("stop", { "data-testid": "stop-color", offset: "100%", stopOpacity: "1" })
    )),
    /* @__PURE__ */ import_react184.default.createElement(
      "path",
      {
        d: "M2.518 23.321l1.664-1.11A12.988 12.988 0 0 0 15 28c7.18 0 13-5.82 13-13S22.18 2 15 2V0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-5.206 0-9.792-2.652-12.482-6.679z",
        fill: `url(#${id}-linear-gradient)`,
        fillRule: "evenodd"
      }
    )
  ));
};
var UploadIcon = () => {
  const { t: t2 } = useTranslationContext("UploadIcon");
  return /* @__PURE__ */ import_react184.default.createElement(
    "svg",
    {
      "data-testid": "attach-icon",
      fill: "none",
      height: "24",
      viewBox: "0 0 24 24",
      width: "24",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ import_react184.default.createElement("title", null, t2("Attach files")),
    /* @__PURE__ */ import_react184.default.createElement("g", { clipPath: "url(#clip0_10878_5)" }, /* @__PURE__ */ import_react184.default.createElement(
      "path",
      {
        d: "M12.9997 6.99993L10.9997 6.99993L10.9997 10.9999L6.99972 10.9999L6.99972 12.9999L10.9997 12.9999L10.9997 16.9999L12.9997 16.9999L12.9997 12.9999L16.9997 12.9999L16.9997 10.9999L12.9997 10.9999L12.9997 6.99993ZM11.9997 1.99992C6.47972 1.99992 1.99972 6.47993 1.99972 11.9999C1.99972 17.5199 6.47972 21.9999 11.9997 21.9999C17.5197 21.9999 21.9997 17.5199 21.9997 11.9999C21.9997 6.47993 17.5197 1.99992 11.9997 1.99992ZM11.9997 19.9999C7.58972 19.9999 3.99972 16.4099 3.99972 11.9999C3.99972 7.58993 7.58972 3.99993 11.9997 3.99993C16.4097 3.99993 19.9997 7.58993 19.9997 11.9999C19.9997 16.4099 16.4097 19.9999 11.9997 19.9999Z",
        fill: "black"
      }
    )),
    /* @__PURE__ */ import_react184.default.createElement("defs", null, /* @__PURE__ */ import_react184.default.createElement("clipPath", { id: "clip0_10878_5" }, /* @__PURE__ */ import_react184.default.createElement("rect", { fill: "white", height: "24", width: "24" })))
  );
};
var CloseIcon = () => /* @__PURE__ */ import_react184.default.createElement(
  "svg",
  {
    "data-testid": "close-no-outline",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react184.default.createElement(
    "path",
    {
      d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z",
      fill: "black"
    }
  )
);
var RetryIcon = () => /* @__PURE__ */ import_react184.default.createElement(
  "svg",
  {
    "data-testid": "retry",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react184.default.createElement(
    "path",
    {
      d: "M17.6449 6.35C16.1949 4.9 14.2049 4 11.9949 4C7.57488 4 4.00488 7.58 4.00488 12C4.00488 16.42 7.57488 20 11.9949 20C15.7249 20 18.8349 17.45 19.7249 14H17.6449C16.8249 16.33 14.6049 18 11.9949 18C8.68488 18 5.99488 15.31 5.99488 12C5.99488 8.69 8.68488 6 11.9949 6C13.6549 6 15.1349 6.69 16.2149 7.78L12.9949 11H19.9949V4L17.6449 6.35Z",
      fill: "black"
    }
  )
);
var DownloadIcon2 = () => /* @__PURE__ */ import_react184.default.createElement(
  "svg",
  {
    "data-testid": "download",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react184.default.createElement(
    "path",
    {
      d: "M19.35 10.04C18.67 6.59 15.64 4 12 4C9.11 4 6.6 5.64 5.35 8.04C2.34 8.36 0 10.91 0 14C0 17.31 2.69 20 6 20H19C21.76 20 24 17.76 24 15C24 12.36 21.95 10.22 19.35 10.04ZM19 18H6C3.79 18 2 16.21 2 14C2 11.95 3.53 10.24 5.56 10.03L6.63 9.92L7.13 8.97C8.08 7.14 9.94 6 12 6C14.62 6 16.88 7.86 17.39 10.43L17.69 11.93L19.22 12.04C20.78 12.14 22 13.45 22 15C22 16.65 20.65 18 19 18ZM13.45 10H10.55V13H8L12 17L16 13H13.45V10Z",
      fill: "black"
    }
  )
);
var LinkIcon = () => /* @__PURE__ */ import_react184.default.createElement(
  "svg",
  {
    fill: "none",
    height: "11",
    viewBox: "0 0 20 11",
    width: "20",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react184.default.createElement(
    "path",
    {
      clipRule: "evenodd",
      d: "M1.9 5.5C1.9 3.79 3.29 2.4 5 2.4H8.05C8.57467 2.4 9 1.97467 9 1.45C9 0.925329 8.57467 0.5 8.05 0.5H5C2.24 0.5 0 2.74 0 5.5C0 8.26 2.24 10.5 5 10.5H8.05C8.57467 10.5 9 10.0747 9 9.55C9 9.02533 8.57467 8.6 8.05 8.6H5C3.29 8.6 1.9 7.21 1.9 5.5ZM6 5.5C6 6.05228 6.44772 6.5 7 6.5H13C13.5523 6.5 14 6.05228 14 5.5C14 4.94772 13.5523 4.5 13 4.5H7C6.44772 4.5 6 4.94772 6 5.5ZM15 0.5H11.95C11.4253 0.5 11 0.925329 11 1.45C11 1.97467 11.4253 2.4 11.95 2.4H15C16.71 2.4 18.1 3.79 18.1 5.5C18.1 7.21 16.71 8.6 15 8.6H11.95C11.4253 8.6 11 9.02533 11 9.55C11 10.0747 11.4253 10.5 11.95 10.5H15C17.76 10.5 20 8.26 20 5.5C20 2.74 17.76 0.5 15 0.5Z",
      fill: "#005DFF",
      fillRule: "evenodd"
    }
  )
);
var SendIcon = () => {
  const { t: t2 } = useTranslationContext("SendButton");
  return /* @__PURE__ */ import_react184.default.createElement(
    "svg",
    {
      "data-testid": "send",
      fill: "currentColor",
      height: "24",
      viewBox: "0 0 24 24",
      width: "24",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ import_react184.default.createElement("title", null, t2("Send")),
    /* @__PURE__ */ import_react184.default.createElement("path", { d: "M4.00952 22L24 12L4.00952 2L4 9.77778L18.2857 12L4 14.2222L4.00952 22Z" })
  );
};
var MicIcon = () => /* @__PURE__ */ import_react184.default.createElement("svg", { fill: "currentColor", viewBox: "0 0 14 20", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react184.default.createElement("path", { d: "M7 12.5C8.66 12.5 10 11.16 10 9.5V3.5C10 1.84 8.66 0.5 7 0.5C5.34 0.5 4 1.84 4 3.5V9.5C4 11.16 5.34 12.5 7 12.5Z" }), /* @__PURE__ */ import_react184.default.createElement("path", { d: "M12 9.5C12 12.26 9.76 14.5 7 14.5C4.24 14.5 2 12.26 2 9.5H0C0 13.03 2.61 15.93 6 16.42V19.5H8V16.42C11.39 15.93 14 13.03 14 9.5H12Z" }));
var BinIcon = () => /* @__PURE__ */ import_react184.default.createElement("svg", { fill: "currentColor", viewBox: "0 0 32 32", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react184.default.createElement("path", { d: "M8.00033 25.3333C8.00033 26.8 9.20033 28 10.667 28H21.3337C22.8003 28 24.0003 26.8 24.0003 25.3333V12C24.0003 10.5333 22.8003 9.33333 21.3337 9.33333H10.667C9.20033 9.33333 8.00033 10.5333 8.00033 12V25.3333ZM24.0003 5.33333H20.667L19.7203 4.38667C19.4803 4.14667 19.1337 4 18.787 4H13.2137C12.867 4 12.5203 4.14667 12.2803 4.38667L11.3337 5.33333H8.00033C7.26699 5.33333 6.66699 5.93333 6.66699 6.66667C6.66699 7.4 7.26699 8 8.00033 8H24.0003C24.7337 8 25.3337 7.4 25.3337 6.66667C25.3337 5.93333 24.7337 5.33333 24.0003 5.33333Z" }));
var PauseIcon2 = () => /* @__PURE__ */ import_react184.default.createElement(
  "svg",
  {
    "data-testid": "str-chat__pause-icon",
    fill: "currentColor",
    viewBox: "0 0 16 20",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react184.default.createElement("path", { d: "M0 19.3333H5.33333V0.666626H0V19.3333ZM10.6667 0.666626V19.3333H16V0.666626H10.6667Z" })
);
var PlayIcon = () => /* @__PURE__ */ import_react184.default.createElement(
  "svg",
  {
    "data-testid": "str-chat__play-icon",
    fill: "currentColor",
    viewBox: "0 0 14 18",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react184.default.createElement("path", { d: "M0.236328 2.09338V15.9067C0.236328 16.9601 1.39633 17.6001 2.28966 17.0267L13.143 10.1201C13.9697 9.60005 13.9697 8.40005 13.143 7.86672L2.28966 0.973385C1.39633 0.400051 0.236328 1.04005 0.236328 2.09338Z" })
);
var CheckSignIcon = () => /* @__PURE__ */ import_react184.default.createElement("svg", { fill: "currentColor", viewBox: "0 0 18 14", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react184.default.createElement("path", { d: "M5.79457 10.875L2.32457 7.40502C1.93457 7.01502 1.30457 7.01502 0.91457 7.40502C0.52457 7.79502 0.52457 8.42502 0.91457 8.81502L5.09457 12.995C5.48457 13.385 6.11457 13.385 6.50457 12.995L17.0846 2.41502C17.4746 2.02502 17.4746 1.39502 17.0846 1.00502C16.6946 0.615024 16.0646 0.615024 15.6746 1.00502L5.79457 10.875Z" }));

// src/components/Dialog/DialogMenu.tsx
var import_react185 = __toESM(require("react"));
var import_clsx51 = __toESM(require("clsx"));
var DialogMenuButton = ({
  children,
  className,
  ...props
}) => /* @__PURE__ */ import_react185.default.createElement("button", { className: (0, import_clsx51.default)("str-chat__dialog-menu__button", className), ...props }, /* @__PURE__ */ import_react185.default.createElement("div", { className: "str-chat__dialog-menu__button-icon" }), /* @__PURE__ */ import_react185.default.createElement("div", { className: "str-chat__dialog-menu__button-text" }, children));

// src/context/AttachmentSelectorContext.tsx
var import_react186 = __toESM(require("react"));
var AttachmentSelectorContext = (0, import_react186.createContext)({
  fileInput: null
});
var AttachmentSelectorContextProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react186.default.createElement(AttachmentSelectorContext.Provider, { value }, children);
var useAttachmentSelectorContext = () => (0, import_react186.useContext)(AttachmentSelectorContext);

// src/components/MessageInput/AttachmentSelector.tsx
var SimpleAttachmentSelector = () => {
  const {
    AttachmentSelectorInitiationButtonContents,
    FileUploadIcon = UploadIcon
  } = useComponentContext();
  const inputRef = (0, import_react187.useRef)(null);
  const [labelElement, setLabelElement] = (0, import_react187.useState)(null);
  const id = (0, import_react187.useMemo)(() => (0, import_nanoid8.nanoid)(), []);
  (0, import_react187.useEffect)(() => {
    if (!labelElement) return;
    const handleKeyUp = (event) => {
      if (![" ", "Enter"].includes(event.key) || !inputRef.current) return;
      event.preventDefault();
      inputRef.current.click();
    };
    labelElement.addEventListener("keyup", handleKeyUp);
    return () => {
      labelElement.removeEventListener("keyup", handleKeyUp);
    };
  }, [labelElement]);
  return /* @__PURE__ */ import_react187.default.createElement("div", { className: "str-chat__file-input-container", "data-testid": "file-upload-button" }, /* @__PURE__ */ import_react187.default.createElement(UploadFileInput, { id, ref: inputRef }), /* @__PURE__ */ import_react187.default.createElement(
    "label",
    {
      className: "str-chat__file-input-label",
      htmlFor: id,
      ref: setLabelElement,
      tabIndex: 0
    },
    AttachmentSelectorInitiationButtonContents ? /* @__PURE__ */ import_react187.default.createElement(AttachmentSelectorInitiationButtonContents, null) : /* @__PURE__ */ import_react187.default.createElement(FileUploadIcon, null)
  ));
};
var AttachmentSelectorMenuInitButtonIcon = () => {
  const { AttachmentSelectorInitiationButtonContents, FileUploadIcon } = useComponentContext("SimpleAttachmentSelector");
  if (AttachmentSelectorInitiationButtonContents) {
    return /* @__PURE__ */ import_react187.default.createElement(AttachmentSelectorInitiationButtonContents, null);
  }
  if (FileUploadIcon) {
    return /* @__PURE__ */ import_react187.default.createElement(FileUploadIcon, null);
  }
  return /* @__PURE__ */ import_react187.default.createElement("div", { className: "str-chat__attachment-selector__menu-button__icon" });
};
var DefaultAttachmentSelectorComponents = {
  File({ closeMenu }) {
    const { t: t2 } = useTranslationContext();
    const { fileInput } = useAttachmentSelectorContext();
    return /* @__PURE__ */ import_react187.default.createElement(
      DialogMenuButton,
      {
        className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__upload-file-button",
        onClick: () => {
          if (fileInput) fileInput.click();
          closeMenu();
        }
      },
      t2("File")
    );
  },
  Poll({ closeMenu, openModalForAction }) {
    const { t: t2 } = useTranslationContext();
    return /* @__PURE__ */ import_react187.default.createElement(
      DialogMenuButton,
      {
        className: "str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__create-poll-button",
        onClick: () => {
          openModalForAction("createPoll");
          closeMenu();
        }
      },
      t2("Poll")
    );
  }
};
var defaultAttachmentSelectorActionSet = [
  { ActionButton: DefaultAttachmentSelectorComponents.File, type: "uploadFile" },
  {
    ActionButton: DefaultAttachmentSelectorComponents.Poll,
    type: "createPoll"
  }
];
var useAttachmentSelectorActionsFiltered = (original) => {
  const { PollCreationDialog: PollCreationDialog2 = PollCreationDialog } = useComponentContext();
  const { channelCapabilities, channelConfig } = useChannelStateContext();
  const { isThreadInput } = useMessageInputContext();
  return original.filter((action) => {
    if (action.type === "uploadFile" && !channelCapabilities["upload-file"])
      return false;
    if (action.type === "createPoll" && (!channelConfig?.polls || isThreadInput || !channelCapabilities["send-poll"]))
      return false;
    return true;
  }).map((action) => {
    if (action.type === "createPoll" && !action.ModalContent) {
      return { ...action, ModalContent: PollCreationDialog2 };
    }
    return action;
  });
};
var AttachmentSelector = ({
  attachmentSelectorActionSet = defaultAttachmentSelectorActionSet,
  getModalPortalDestination
}) => {
  const { t: t2 } = useTranslationContext();
  const { channelCapabilities } = useChannelStateContext();
  const { isThreadInput } = useMessageInputContext();
  const actions = useAttachmentSelectorActionsFiltered(
    attachmentSelectorActionSet
  );
  const menuDialogId = `attachment-actions-menu${isThreadInput ? "-thread" : ""}`;
  const menuDialog = useDialog({ id: menuDialogId });
  const menuDialogIsOpen = useDialogIsOpen(menuDialogId);
  const [modalContentAction, setModalContentActionAction] = (0, import_react187.useState)();
  const openModal = (0, import_react187.useCallback)(
    (actionType) => {
      const action = actions.find((a2) => a2.type === actionType);
      if (!action?.ModalContent) return;
      setModalContentActionAction(action);
    },
    [actions]
  );
  const closeModal = (0, import_react187.useCallback)(() => setModalContentActionAction(void 0), []);
  const [fileInput, setFileInput] = (0, import_react187.useState)(null);
  const menuButtonRef = (0, import_react187.useRef)(null);
  const getDefaultPortalDestination = (0, import_react187.useCallback)(
    () => document.getElementById(CHANNEL_CONTAINER_ID),
    []
  );
  if (actions.length === 0) return null;
  if (actions.length === 1 && actions[0].type === "uploadFile")
    return /* @__PURE__ */ import_react187.default.createElement(SimpleAttachmentSelector, null);
  const ModalContent = modalContentAction?.ModalContent;
  const modalIsOpen = !!ModalContent;
  return /* @__PURE__ */ import_react187.default.createElement(AttachmentSelectorContextProvider, { value: { fileInput } }, /* @__PURE__ */ import_react187.default.createElement("div", { className: "str-chat__attachment-selector" }, channelCapabilities["upload-file"] && /* @__PURE__ */ import_react187.default.createElement(UploadFileInput, { ref: setFileInput }), /* @__PURE__ */ import_react187.default.createElement(
    "button",
    {
      "aria-expanded": menuDialogIsOpen,
      "aria-haspopup": "true",
      "aria-label": t2("aria/Open Attachment Selector"),
      className: "str-chat__attachment-selector__menu-button",
      "data-testid": "invoke-attachment-selector-button",
      onClick: () => menuDialog?.toggle(),
      ref: menuButtonRef
    },
    /* @__PURE__ */ import_react187.default.createElement(AttachmentSelectorMenuInitButtonIcon, null)
  ), /* @__PURE__ */ import_react187.default.createElement(
    DialogAnchor,
    {
      id: menuDialogId,
      placement: "top-start",
      referenceElement: menuButtonRef.current,
      trapFocus: true
    },
    /* @__PURE__ */ import_react187.default.createElement(
      "div",
      {
        className: "str-chat__attachment-selector-actions-menu str-chat__dialog-menu",
        "data-testid": "attachment-selector-actions-menu"
      },
      actions.map(({ ActionButton, type }) => /* @__PURE__ */ import_react187.default.createElement(
        ActionButton,
        {
          closeMenu: menuDialog.close,
          key: `attachment-selector-item-${type}`,
          openModalForAction: openModal
        }
      ))
    )
  ), /* @__PURE__ */ import_react187.default.createElement(
    Portal,
    {
      getPortalDestination: getModalPortalDestination ?? getDefaultPortalDestination,
      isOpen: modalIsOpen
    },
    /* @__PURE__ */ import_react187.default.createElement(
      Modal,
      {
        className: "str-chat__create-poll-modal",
        onClose: closeModal,
        open: modalIsOpen
      },
      ModalContent && /* @__PURE__ */ import_react187.default.createElement(ModalContent, { close: closeModal })
    )
  )));
};

// src/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.tsx
var import_react199 = __toESM(require("react"));

// src/components/MessageInput/AttachmentPreviewList/UnsupportedAttachmentPreview.tsx
var import_react188 = __toESM(require("react"));
var UnsupportedAttachmentPreview = ({
  attachment,
  handleRetry,
  removeAttachments
}) => {
  const { t: t2 } = useTranslationContext("UnsupportedAttachmentPreview");
  const title = attachment.title ?? t2("Unsupported attachment");
  return /* @__PURE__ */ import_react188.default.createElement(
    "div",
    {
      className: "str-chat__attachment-preview-unsupported",
      "data-testid": "attachment-preview-unknown"
    },
    /* @__PURE__ */ import_react188.default.createElement("div", { className: "str-chat__attachment-preview-file-icon" }, /* @__PURE__ */ import_react188.default.createElement(FileIcon, { filename: title, mimeType: attachment.mime_type })),
    /* @__PURE__ */ import_react188.default.createElement(
      "button",
      {
        className: "str-chat__attachment-preview-delete",
        "data-testid": "file-preview-item-delete-button",
        disabled: attachment.localMetadata?.uploadState === "uploading",
        onClick: () => attachment.localMetadata?.id && removeAttachments([attachment.localMetadata?.id])
      },
      /* @__PURE__ */ import_react188.default.createElement(CloseIcon, null)
    ),
    attachment.localMetadata?.uploadState === "failed" && !!handleRetry && /* @__PURE__ */ import_react188.default.createElement(
      "button",
      {
        className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file",
        "data-testid": "file-preview-item-retry-button",
        onClick: () => handleRetry(attachment)
      },
      /* @__PURE__ */ import_react188.default.createElement(RetryIcon, null)
    ),
    /* @__PURE__ */ import_react188.default.createElement("div", { className: "str-chat__attachment-preview-metadata" }, /* @__PURE__ */ import_react188.default.createElement("div", { className: "str-chat__attachment-preview-title", title }, title), attachment.localMetadata?.uploadState === "finished" && !!attachment.asset_url && /* @__PURE__ */ import_react188.default.createElement(
      "a",
      {
        className: "str-chat__attachment-preview-file-download",
        download: true,
        href: attachment.asset_url,
        rel: "noreferrer",
        target: "_blank"
      },
      /* @__PURE__ */ import_react188.default.createElement(DownloadIcon2, null)
    ), attachment.localMetadata?.uploadState === "uploading" && /* @__PURE__ */ import_react188.default.createElement(LoadingIndicatorIcon, { size: 17 }))
  );
};

// src/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.tsx
var import_react196 = __toESM(require("react"));

// src/components/MediaRecorder/RecordingPermissionDeniedNotification.tsx
var import_react189 = __toESM(require("react"));
var RecordingPermissionDeniedNotification = ({
  onClose,
  permissionName
}) => {
  const { t: t2 } = useTranslationContext();
  const permissionTranslations = {
    body: {
      camera: t2("To start recording, allow the camera access in your browser"),
      microphone: t2("To start recording, allow the microphone access in your browser")
    },
    heading: {
      camera: t2("Allow access to camera"),
      microphone: t2("Allow access to microphone")
    }
  };
  return /* @__PURE__ */ import_react189.default.createElement("div", { className: "str-chat__recording-permission-denied-notification" }, /* @__PURE__ */ import_react189.default.createElement("div", { className: "str-chat__recording-permission-denied-notification__heading" }, permissionTranslations.heading[permissionName]), /* @__PURE__ */ import_react189.default.createElement("p", { className: "str-chat__recording-permission-denied-notification__message" }, permissionTranslations.body[permissionName]), /* @__PURE__ */ import_react189.default.createElement("div", { className: "str-chat__recording-permission-denied-notification__dismiss-button-container" }, /* @__PURE__ */ import_react189.default.createElement(
    "button",
    {
      className: "str-chat__recording-permission-denied-notification__dismiss-button",
      onClick: onClose
    },
    t2("Ok")
  )));
};

// src/components/MediaRecorder/AudioRecorder/AudioRecorder.tsx
var import_react194 = __toESM(require("react"));

// src/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.tsx
var import_react191 = __toESM(require("react"));

// src/components/MediaRecorder/AudioRecorder/RecordingTimer.tsx
var import_clsx52 = __toESM(require("clsx"));
var import_react190 = __toESM(require("react"));
var RecordingTimer = ({ durationSeconds }) => /* @__PURE__ */ import_react190.default.createElement(
  "div",
  {
    className: (0, import_clsx52.default)("str-chat__recording-timer", {
      "str-chat__recording-timer--hours": durationSeconds >= 3600
    })
  },
  displayDuration(durationSeconds)
);

// src/components/MediaRecorder/AudioRecorder/AudioRecordingPreview.tsx
var AudioRecordingPreview = ({
  durationSeconds,
  mimeType,
  waveformData,
  ...props
}) => {
  const { audioRef, isPlaying, progress, secondsElapsed, seek, togglePlay } = useAudioController({
    durationSeconds,
    mimeType
  });
  const displayedDuration = secondsElapsed || durationSeconds;
  return /* @__PURE__ */ import_react191.default.createElement(import_react191.default.Fragment, null, /* @__PURE__ */ import_react191.default.createElement("audio", { ref: audioRef }, /* @__PURE__ */ import_react191.default.createElement("source", { src: props.src, type: mimeType })), /* @__PURE__ */ import_react191.default.createElement(
    "button",
    {
      className: "str-chat__audio_recorder__toggle-playback-button",
      "data-testid": "audio-recording-preview-toggle-play-btn",
      onClick: togglePlay
    },
    isPlaying ? /* @__PURE__ */ import_react191.default.createElement(PauseIcon2, null) : /* @__PURE__ */ import_react191.default.createElement(PlayIcon, null)
  ), /* @__PURE__ */ import_react191.default.createElement(RecordingTimer, { durationSeconds: displayedDuration }), /* @__PURE__ */ import_react191.default.createElement("div", { className: "str-chat__wave-progress-bar__track-container" }, /* @__PURE__ */ import_react191.default.createElement(
    WaveProgressBar,
    {
      progress,
      seek,
      waveformData: waveformData || []
    }
  )));
};

// src/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.tsx
var import_react193 = __toESM(require("react"));

// src/components/MessageInput/hooks/useTimeElapsed.ts
var import_react192 = require("react");
var useTimeElapsed = ({ startOnMount } = {}) => {
  const [secondsElapsed, setSecondsElapsed] = (0, import_react192.useState)(0);
  const updateInterval = (0, import_react192.useRef)(void 0);
  const startCounter = (0, import_react192.useCallback)(() => {
    if (updateInterval.current) return;
    updateInterval.current = setInterval(() => {
      setSecondsElapsed((prev) => prev + 1);
    }, 1e3);
  }, []);
  const stopCounter = (0, import_react192.useCallback)(() => {
    clearInterval(updateInterval.current);
    updateInterval.current = void 0;
  }, []);
  (0, import_react192.useEffect)(() => {
    if (!startOnMount) return;
    startCounter();
    return () => {
      stopCounter();
    };
  }, [startCounter, startOnMount, stopCounter]);
  return {
    secondsElapsed,
    startCounter,
    stopCounter
  };
};

// src/components/MediaRecorder/AudioRecorder/AudioRecordingInProgress.tsx
var AudioRecordingWaveform = ({ maxDataPointsDrawn = 100 }) => {
  const {
    recordingController: { recorder }
  } = useMessageInputContext();
  const [amplitudes, setAmplitudes] = (0, import_react193.useState)([]);
  (0, import_react193.useEffect)(() => {
    if (!recorder?.amplitudeRecorder) return;
    const amplitudesSubscription = recorder.amplitudeRecorder.amplitudes.subscribe(setAmplitudes);
    return () => {
      amplitudesSubscription.unsubscribe();
    };
  }, [recorder]);
  if (!recorder) return null;
  return /* @__PURE__ */ import_react193.default.createElement("div", { className: "str-chat__waveform-box-container" }, /* @__PURE__ */ import_react193.default.createElement("div", { className: "str-chat__audio_recorder__waveform-box" }, amplitudes.slice(-maxDataPointsDrawn).map((amplitude, i) => /* @__PURE__ */ import_react193.default.createElement(
    "div",
    {
      className: "str-chat__wave-progress-bar__amplitude-bar",
      key: `amplitude-${i}-voice-recording`,
      style: {
        "--str-chat__wave-progress-bar__amplitude-bar-height": amplitude ? amplitude * 100 + "%" : "0%"
      }
    }
  ))));
};
var AudioRecordingInProgress = () => {
  const { secondsElapsed, startCounter, stopCounter } = useTimeElapsed();
  const {
    recordingController: { recorder }
  } = useMessageInputContext();
  (0, import_react193.useEffect)(() => {
    if (!recorder?.mediaRecorder) return;
    const { mediaRecorder } = recorder;
    if (mediaRecorder.state === "recording") {
      startCounter();
    }
    mediaRecorder.addEventListener("start", startCounter);
    mediaRecorder.addEventListener("resume", startCounter);
    mediaRecorder.addEventListener("stop", stopCounter);
    mediaRecorder.addEventListener("pause", stopCounter);
    return () => {
      mediaRecorder.removeEventListener("start", startCounter);
      mediaRecorder.removeEventListener("resume", startCounter);
      mediaRecorder.removeEventListener("stop", stopCounter);
      mediaRecorder.removeEventListener("pause", stopCounter);
    };
  }, [recorder, startCounter, stopCounter]);
  return /* @__PURE__ */ import_react193.default.createElement(import_react193.default.Fragment, null, /* @__PURE__ */ import_react193.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed }), /* @__PURE__ */ import_react193.default.createElement(AudioRecordingWaveform, null));
};

// src/components/MediaRecorder/AudioRecorder/AudioRecorder.tsx
var AudioRecorder = () => {
  const {
    recordingController: { completeRecording, recorder, recording, recordingState }
  } = useMessageInputContext();
  const isUploadingFile = recording?.localMetadata?.uploadState === "uploading";
  const state = (0, import_react194.useMemo)(
    () => ({
      paused: recordingState === "paused" /* PAUSED */,
      recording: recordingState === "recording" /* RECORDING */,
      stopped: recordingState === "stopped" /* STOPPED */
    }),
    [recordingState]
  );
  if (!recorder) return null;
  return /* @__PURE__ */ import_react194.default.createElement("div", { className: "str-chat__audio_recorder-container" }, /* @__PURE__ */ import_react194.default.createElement("div", { className: "str-chat__audio_recorder", "data-testid": "audio-recorder" }, /* @__PURE__ */ import_react194.default.createElement(
    "button",
    {
      className: "str-chat__audio_recorder__cancel-button",
      "data-testid": "cancel-recording-audio-button",
      disabled: isUploadingFile,
      onClick: recorder.cancel
    },
    /* @__PURE__ */ import_react194.default.createElement(BinIcon, null)
  ), state.stopped && recording?.asset_url ? /* @__PURE__ */ import_react194.default.createElement(
    AudioRecordingPreview,
    {
      durationSeconds: recording.duration ?? 0,
      mimeType: recording.mime_type,
      src: recording.asset_url,
      waveformData: recording.waveform_data
    }
  ) : state.paused || state.recording ? /* @__PURE__ */ import_react194.default.createElement(AudioRecordingInProgress, null) : null, state.paused && /* @__PURE__ */ import_react194.default.createElement(
    "button",
    {
      className: "str-chat__audio_recorder__resume-recording-button",
      onClick: recorder.resume
    },
    /* @__PURE__ */ import_react194.default.createElement(MicIcon, null)
  ), state.recording && /* @__PURE__ */ import_react194.default.createElement(
    "button",
    {
      className: "str-chat__audio_recorder__pause-recording-button",
      "data-testid": "pause-recording-audio-button",
      onClick: recorder.pause
    },
    /* @__PURE__ */ import_react194.default.createElement(PauseIcon2, null)
  ), state.stopped ? /* @__PURE__ */ import_react194.default.createElement(
    "button",
    {
      className: "str-chat__audio_recorder__complete-button",
      "data-testid": "audio-recorder-complete-button",
      disabled: isUploadingFile,
      onClick: completeRecording
    },
    isUploadingFile ? /* @__PURE__ */ import_react194.default.createElement(LoadingIndicatorIcon, null) : /* @__PURE__ */ import_react194.default.createElement(SendIcon, null)
  ) : /* @__PURE__ */ import_react194.default.createElement(
    "button",
    {
      className: "str-chat__audio_recorder__stop-button",
      "data-testid": "audio-recorder-stop-button",
      onClick: recorder.stop
    },
    /* @__PURE__ */ import_react194.default.createElement(CheckSignIcon, null)
  )));
};

// src/components/MediaRecorder/AudioRecorder/AudioRecordingButtons.tsx
var import_react195 = __toESM(require("react"));
var StartRecordingAudioButton = (props) => /* @__PURE__ */ import_react195.default.createElement(
  "button",
  {
    "aria-label": "Start recording audio",
    className: "str-chat__start-recording-audio-button",
    "data-testid": "start-recording-audio-button",
    ...props
  },
  /* @__PURE__ */ import_react195.default.createElement(MicIcon, null)
);

// src/components/MessageInput/AttachmentPreviewList/VoiceRecordingPreview.tsx
var VoiceRecordingPreview = ({
  attachment,
  handleRetry,
  removeAttachments
}) => {
  const { audioRef, isPlaying, secondsElapsed, togglePlay } = useAudioController({
    mimeType: attachment.mime_type
  });
  return /* @__PURE__ */ import_react196.default.createElement(
    "div",
    {
      className: "str-chat__attachment-preview-voice-recording",
      "data-testid": "attachment-preview-voice-recording"
    },
    /* @__PURE__ */ import_react196.default.createElement("audio", { ref: audioRef }, /* @__PURE__ */ import_react196.default.createElement(
      "source",
      {
        "data-testid": "audio-source",
        src: attachment.asset_url,
        type: attachment.mime_type
      }
    )),
    /* @__PURE__ */ import_react196.default.createElement(PlayButton, { isPlaying, onClick: togglePlay }),
    /* @__PURE__ */ import_react196.default.createElement(
      "button",
      {
        className: "str-chat__attachment-preview-delete",
        "data-testid": "file-preview-item-delete-button",
        disabled: attachment.localMetadata?.uploadState === "uploading",
        onClick: () => attachment.localMetadata?.id && removeAttachments([attachment.localMetadata.id])
      },
      /* @__PURE__ */ import_react196.default.createElement(CloseIcon, null)
    ),
    attachment.localMetadata?.uploadState === "failed" && !!handleRetry && /* @__PURE__ */ import_react196.default.createElement(
      "button",
      {
        className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file",
        "data-testid": "file-preview-item-retry-button",
        onClick: () => handleRetry(attachment)
      },
      /* @__PURE__ */ import_react196.default.createElement(RetryIcon, null)
    ),
    /* @__PURE__ */ import_react196.default.createElement("div", { className: "str-chat__attachment-preview-metadata" }, /* @__PURE__ */ import_react196.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title), typeof attachment.duration !== "undefined" && /* @__PURE__ */ import_react196.default.createElement(RecordingTimer, { durationSeconds: secondsElapsed || attachment.duration }), attachment.localMetadata?.uploadState === "uploading" && /* @__PURE__ */ import_react196.default.createElement(LoadingIndicatorIcon, { size: 17 })),
    /* @__PURE__ */ import_react196.default.createElement("div", { className: "str-chat__attachment-preview-file-icon" }, /* @__PURE__ */ import_react196.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type }))
  );
};

// src/components/MessageInput/AttachmentPreviewList/FileAttachmentPreview.tsx
var import_react197 = __toESM(require("react"));
var FileAttachmentPreview = ({
  attachment,
  handleRetry,
  removeAttachments
}) => {
  const { t: t2 } = useTranslationContext("FilePreview");
  return /* @__PURE__ */ import_react197.default.createElement(
    "div",
    {
      className: "str-chat__attachment-preview-file",
      "data-testid": "attachment-preview-file"
    },
    /* @__PURE__ */ import_react197.default.createElement("div", { className: "str-chat__attachment-preview-file-icon" }, /* @__PURE__ */ import_react197.default.createElement(FileIcon, { filename: attachment.title, mimeType: attachment.mime_type })),
    /* @__PURE__ */ import_react197.default.createElement(
      "button",
      {
        "aria-label": t2("aria/Remove attachment"),
        className: "str-chat__attachment-preview-delete",
        "data-testid": "file-preview-item-delete-button",
        disabled: attachment.localMetadata?.uploadState === "uploading",
        onClick: () => attachment.localMetadata?.id && removeAttachments([attachment.localMetadata?.id])
      },
      /* @__PURE__ */ import_react197.default.createElement(CloseIcon, null)
    ),
    attachment.localMetadata?.uploadState === "failed" && !!handleRetry && /* @__PURE__ */ import_react197.default.createElement(
      "button",
      {
        className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-file",
        "data-testid": "file-preview-item-retry-button",
        onClick: () => handleRetry(attachment)
      },
      /* @__PURE__ */ import_react197.default.createElement(RetryIcon, null)
    ),
    /* @__PURE__ */ import_react197.default.createElement("div", { className: "str-chat__attachment-preview-file-end" }, /* @__PURE__ */ import_react197.default.createElement("div", { className: "str-chat__attachment-preview-file-name", title: attachment.title }, attachment.title), attachment.localMetadata?.uploadState === "finished" && !!attachment.asset_url && /* @__PURE__ */ import_react197.default.createElement(
      "a",
      {
        "aria-label": t2("aria/Download attachment"),
        className: "str-chat__attachment-preview-file-download",
        download: true,
        href: attachment.asset_url,
        rel: "noreferrer",
        target: "_blank",
        title: t2("Download attachment {{ name }}", { name: attachment.title })
      },
      /* @__PURE__ */ import_react197.default.createElement(DownloadIcon2, null)
    ), attachment.localMetadata?.uploadState === "uploading" && /* @__PURE__ */ import_react197.default.createElement(LoadingIndicatorIcon, { size: 17 }))
  );
};

// src/components/MessageInput/AttachmentPreviewList/ImageAttachmentPreview.tsx
var import_clsx53 = __toESM(require("clsx"));
var import_react198 = __toESM(require("react"));
var ImageAttachmentPreview = ({
  attachment,
  handleRetry,
  removeAttachments
}) => {
  const { t: t2 } = useTranslationContext("ImagePreviewItem");
  const { BaseImage: BaseImage3 = BaseImage } = useComponentContext("ImagePreview");
  const [previewError, setPreviewError] = (0, import_react198.useState)(false);
  const { id, uploadState } = attachment.localMetadata ?? {};
  const handleLoadError = (0, import_react198.useCallback)(() => setPreviewError(true), []);
  const assetUrl = attachment.image_url || attachment.localMetadata.previewUri;
  return /* @__PURE__ */ import_react198.default.createElement(
    "div",
    {
      className: (0, import_clsx53.default)("str-chat__attachment-preview-image", {
        "str-chat__attachment-preview-image--error": previewError
      }),
      "data-testid": "attachment-preview-image"
    },
    /* @__PURE__ */ import_react198.default.createElement(
      "button",
      {
        "aria-label": t2("aria/Remove attachment"),
        className: "str-chat__attachment-preview-delete",
        "data-testid": "image-preview-item-delete-button",
        disabled: uploadState === "uploading",
        onClick: () => id && removeAttachments([id])
      },
      /* @__PURE__ */ import_react198.default.createElement(CloseIcon, null)
    ),
    uploadState === "failed" && /* @__PURE__ */ import_react198.default.createElement(
      "button",
      {
        className: "str-chat__attachment-preview-error str-chat__attachment-preview-error-image",
        "data-testid": "image-preview-item-retry-button",
        onClick: () => handleRetry(attachment)
      },
      /* @__PURE__ */ import_react198.default.createElement(RetryIcon, null)
    ),
    uploadState === "uploading" && /* @__PURE__ */ import_react198.default.createElement("div", { className: "str-chat__attachment-preview-image-loading" }, /* @__PURE__ */ import_react198.default.createElement(LoadingIndicatorIcon, { size: 17 })),
    assetUrl && /* @__PURE__ */ import_react198.default.createElement(
      BaseImage3,
      {
        alt: attachment.fallback,
        className: "str-chat__attachment-preview-thumbnail",
        onError: handleLoadError,
        src: assetUrl,
        title: attachment.fallback
      }
    )
  );
};

// src/components/MessageInput/AttachmentPreviewList/AttachmentPreviewList.tsx
var AttachmentPreviewList = ({
  AudioAttachmentPreview = FileAttachmentPreview,
  FileAttachmentPreview: FileAttachmentPreview2 = FileAttachmentPreview,
  ImageAttachmentPreview: ImageAttachmentPreview2 = ImageAttachmentPreview,
  UnsupportedAttachmentPreview: UnsupportedAttachmentPreview2 = UnsupportedAttachmentPreview,
  VideoAttachmentPreview = FileAttachmentPreview,
  VoiceRecordingPreview: VoiceRecordingPreview2 = VoiceRecordingPreview
}) => {
  const { attachments, removeAttachments, uploadAttachment } = useMessageInputContext("AttachmentPreviewList");
  return /* @__PURE__ */ import_react199.default.createElement("div", { className: "str-chat__attachment-preview-list" }, /* @__PURE__ */ import_react199.default.createElement(
    "div",
    {
      className: "str-chat__attachment-list-scroll-container",
      "data-testid": "attachment-list-scroll-container"
    },
    attachments.map((attachment) => {
      if (isScrapedContent(attachment)) return null;
      if (isLocalVoiceRecordingAttachment(attachment)) {
        return /* @__PURE__ */ import_react199.default.createElement(
          VoiceRecordingPreview2,
          {
            attachment,
            handleRetry: uploadAttachment,
            key: attachment.localMetadata.id || attachment.asset_url,
            removeAttachments
          }
        );
      } else if (isLocalAudioAttachment(attachment)) {
        return /* @__PURE__ */ import_react199.default.createElement(
          AudioAttachmentPreview,
          {
            attachment,
            handleRetry: uploadAttachment,
            key: attachment.localMetadata.id || attachment.asset_url,
            removeAttachments
          }
        );
      } else if (isLocalMediaAttachment(attachment)) {
        return /* @__PURE__ */ import_react199.default.createElement(
          VideoAttachmentPreview,
          {
            attachment,
            handleRetry: uploadAttachment,
            key: attachment.localMetadata.id || attachment.asset_url,
            removeAttachments
          }
        );
      } else if (isLocalImageAttachment(attachment)) {
        return /* @__PURE__ */ import_react199.default.createElement(
          ImageAttachmentPreview2,
          {
            attachment,
            handleRetry: uploadAttachment,
            key: attachment.localMetadata.id || attachment.image_url,
            removeAttachments
          }
        );
      } else if (isLocalFileAttachment(attachment)) {
        return /* @__PURE__ */ import_react199.default.createElement(
          FileAttachmentPreview2,
          {
            attachment,
            handleRetry: uploadAttachment,
            key: attachment.localMetadata.id || attachment.asset_url,
            removeAttachments
          }
        );
      } else if (isLocalAttachment(attachment)) {
        return /* @__PURE__ */ import_react199.default.createElement(
          UnsupportedAttachmentPreview2,
          {
            attachment,
            handleRetry: uploadAttachment,
            key: attachment.localMetadata.id,
            removeAttachments
          }
        );
      }
      return null;
    })
  ));
};

// src/components/MessageInput/CooldownTimer.tsx
var import_react201 = __toESM(require("react"));

// src/components/MessageInput/hooks/useTimer.ts
var import_react200 = require("react");
var useTimer = ({ startFrom }) => {
  const [secondsLeft, setSecondsLeft] = (0, import_react200.useState)();
  (0, import_react200.useEffect)(() => {
    let countdownTimeout;
    if (typeof secondsLeft === "number" && secondsLeft > 0) {
      countdownTimeout = setTimeout(() => {
        setSecondsLeft(secondsLeft - 1);
      }, 1e3);
    }
    return () => {
      clearTimeout(countdownTimeout);
    };
  }, [secondsLeft]);
  (0, import_react200.useEffect)(() => {
    setSecondsLeft(startFrom ?? 0);
  }, [startFrom]);
  return secondsLeft;
};

// src/components/MessageInput/CooldownTimer.tsx
var CooldownTimer = ({ cooldownInterval }) => {
  const secondsLeft = useTimer({ startFrom: cooldownInterval });
  return /* @__PURE__ */ import_react201.default.createElement("div", { className: "str-chat__message-input-cooldown", "data-testid": "cooldown-timer" }, secondsLeft);
};

// src/components/MessageInput/DefaultTriggerProvider.tsx
var import_react204 = __toESM(require("react"));

// src/components/MessageInput/hooks/useCommandTrigger.ts
var useCommandTrigger = () => {
  const { channelConfig } = useChannelStateContext("useCommandTrigger");
  const { t: t2 } = useTranslationContext("useCommandTrigger");
  const commands = channelConfig?.commands;
  return {
    component: CommandItem,
    dataProvider: (query, text8, onReady) => {
      if (text8.indexOf("/") !== 0 || !commands) {
        return [];
      }
      const selectedCommands = commands.filter(
        (command) => command.name?.indexOf(query) !== -1
      );
      selectedCommands.sort((a2, b) => {
        let nameA = a2.name?.toLowerCase();
        let nameB = b.name?.toLowerCase();
        if (nameA?.indexOf(query) === 0) {
          nameA = `0${nameA}`;
        }
        if (nameB?.indexOf(query) === 0) {
          nameB = `0${nameB}`;
        }
        if (nameA != null && nameB != null) {
          if (nameA < nameB) {
            return -1;
          }
          if (nameA > nameB) {
            return 1;
          }
        }
        return 0;
      });
      const result = selectedCommands.slice(0, 5);
      if (onReady)
        onReady(
          result.filter(
            (result2) => result2.name !== void 0
          ).map((commandData) => {
            const translatedCommandData = {
              name: commandData.name
            };
            if (commandData.args)
              translatedCommandData.args = t2(`${commandData.name}-command-args`, {
                defaultValue: commandData.args
              });
            if (commandData.description)
              translatedCommandData.description = t2(
                `${commandData.name}-command-description`,
                {
                  defaultValue: commandData.description
                }
              );
            return translatedCommandData;
          }),
          query
        );
      return result;
    },
    output: (entity) => ({
      caretPosition: "next",
      key: entity.name,
      text: `/${entity.name}`
    })
  };
};

// src/components/EmoticonItem/EmoticonItem.tsx
var import_react202 = __toESM(require("react"));
var UnMemoizedEmoticonItem = (props) => {
  const { entity } = props;
  const hasEntity = Object.keys(entity).length;
  const itemParts = entity?.itemNameParts;
  const renderName = () => {
    if (!hasEntity) return null;
    return hasEntity && itemParts.parts.map(
      (part, i) => part.toLowerCase() === itemParts.match.toLowerCase() ? /* @__PURE__ */ import_react202.default.createElement("span", { className: "str-chat__emoji-item--highlight", key: `part-${i}` }, part) : /* @__PURE__ */ import_react202.default.createElement("span", { className: "str-chat__emoji-item--part", key: `part-${i}` }, part)
    );
  };
  return /* @__PURE__ */ import_react202.default.createElement("div", { className: "str-chat__emoji-item" }, /* @__PURE__ */ import_react202.default.createElement("span", { className: "str-chat__emoji-item--entity" }, entity.native), /* @__PURE__ */ import_react202.default.createElement("span", { className: "str-chat__emoji-item--name" }, renderName()));
};
var EmoticonItem = import_react202.default.memo(
  UnMemoizedEmoticonItem
);

// src/components/MessageInput/hooks/useEmojiTrigger.ts
var useEmojiTrigger = (emojiSearchIndex) => ({
  component: EmoticonItem,
  dataProvider: async (query, _, onReady) => {
    if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {
      return onReady([], query);
    }
    const emojis = await emojiSearchIndex?.search(query) ?? [];
    const result = emojis.filter(Boolean).slice(0, 7).map(({ id, name: name2, native, skins = [] }) => {
      const [firstSkin] = skins;
      return {
        id,
        name: name2,
        native: native ?? firstSkin.native
      };
    });
    if (onReady) onReady(result, query);
  },
  output: (entity) => ({
    caretPosition: "next",
    key: entity.id,
    text: `${"native" in entity ? entity.native : ""}`
  })
});

// src/components/MessageInput/hooks/useUserTrigger.ts
var import_react203 = require("react");
var import_lodash20 = __toESM(require("lodash.throttle"));
var useUserTrigger = (params) => {
  const {
    disableMentions,
    mentionAllAppUsers,
    mentionQueryParams = {},
    onSelectUser,
    useMentionsTransliteration
  } = params;
  const [searching, setSearching] = (0, import_react203.useState)(false);
  const { client, mutes } = useChatContext("useUserTrigger");
  const { channel } = useChannelStateContext("useUserTrigger");
  const { members } = channel.state;
  const { watchers } = channel.state;
  const getMembersAndWatchers = (0, import_react203.useCallback)(() => {
    const memberUsers = members ? Object.values(members).map(({ user }) => user) : [];
    const watcherUsers = watchers ? Object.values(watchers) : [];
    const users = [...memberUsers, ...watcherUsers];
    const uniqueUsers = {};
    users.forEach((user) => {
      if (user && !uniqueUsers[user.id]) {
        uniqueUsers[user.id] = user;
      }
    });
    return Object.values(uniqueUsers);
  }, [members, watchers]);
  const queryMembersThrottled = (0, import_react203.useCallback)(
    (0, import_lodash20.default)(
      async (query, onReady) => {
        try {
          const response = await channel.queryMembers({
            name: { $autocomplete: query }
          });
          const users = response.members.map(
            (member) => member.user
          );
          if (onReady && users.length) {
            onReady(users);
          } else {
            onReady([]);
          }
        } catch (error) {
          console.log({ error });
        }
      },
      200
    ),
    [channel]
  );
  const queryUsers = async (query, onReady) => {
    if (!query || searching) return;
    setSearching(true);
    try {
      const { users } = await client.queryUsers(
        // @ts-expect-error valid query
        {
          $or: [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }],
          ...typeof mentionQueryParams.filters === "function" ? mentionQueryParams.filters(query) : mentionQueryParams.filters
        },
        Array.isArray(mentionQueryParams.sort) ? [{ id: 1 }, ...mentionQueryParams.sort] : { id: 1, ...mentionQueryParams.sort },
        { limit: 10, ...mentionQueryParams.options }
      );
      if (onReady && users.length) {
        onReady(users);
      } else {
        onReady([]);
      }
    } catch (error) {
      console.log({ error });
    }
    setSearching(false);
  };
  const queryUsersThrottled = (0, import_lodash20.default)(queryUsers, 200);
  return {
    callback: (item2) => onSelectUser(item2),
    component: UserItem,
    dataProvider: (query, text8, onReady) => {
      if (disableMentions) return;
      const filterMutes = (data) => {
        if (text8.includes("/unmute") && !mutes.length) {
          return [];
        }
        if (!mutes.length) return data;
        if (text8.includes("/unmute")) {
          return data.filter(
            (suggestion) => mutes.some((mute) => mute.target.id === suggestion.id)
          );
        }
        return data.filter(
          (suggestion) => mutes.every((mute) => mute.target.id !== suggestion.id)
        );
      };
      if (mentionAllAppUsers) {
        return queryUsersThrottled(query, (data) => {
          if (onReady) onReady(filterMutes(data), query);
        });
      }
      if (!query || Object.values(members || {}).length < 100) {
        const users = getMembersAndWatchers();
        const params2 = {
          ownUserId: client.userID,
          query,
          text: text8,
          useMentionsTransliteration,
          users
        };
        const matchingUsers = searchLocalUsers(params2);
        const usersToShow = mentionQueryParams.options?.limit ?? 7;
        const data = matchingUsers.slice(0, usersToShow);
        if (onReady) onReady(filterMutes(data), query);
        return data;
      }
      return queryMembersThrottled(query, (data) => {
        if (onReady) onReady(filterMutes(data), query);
      });
    },
    output: (entity) => ({
      caretPosition: "next",
      key: entity.id,
      text: `@${entity.name || entity.id}`
    })
  };
};

// src/components/MessageInput/DefaultTriggerProvider.tsx
var DefaultTriggerProvider = ({
  children
}) => {
  const currentValue = useMessageInputContext(
    "DefaultTriggerProvider"
  );
  const defaultAutocompleteTriggers = {
    "/": useCommandTrigger(),
    ":": useEmojiTrigger(currentValue.emojiSearchIndex),
    "@": useUserTrigger({
      disableMentions: currentValue.disableMentions,
      mentionAllAppUsers: currentValue.mentionAllAppUsers,
      mentionQueryParams: currentValue.mentionQueryParams,
      onSelectUser: currentValue.onSelectUser,
      useMentionsTransliteration: currentValue.useMentionsTransliteration
    })
  };
  const newValue = {
    ...currentValue,
    autocompleteTriggers: defaultAutocompleteTriggers
  };
  return /* @__PURE__ */ import_react204.default.createElement(MessageInputContextProvider, { value: newValue }, children);
};

// src/components/MessageInput/EditMessageForm.tsx
var import_react217 = __toESM(require("react"));

// src/components/MessageInput/MessageInputFlat.tsx
var import_react216 = __toESM(require("react"));
var import_clsx55 = __toESM(require("clsx"));
var import_react_dropzone2 = require("react-dropzone");

// src/components/MessageInput/SendButton.tsx
var import_react205 = __toESM(require("react"));
var SendButton = ({
  sendMessage,
  ...rest
}) => /* @__PURE__ */ import_react205.default.createElement(
  "button",
  {
    "aria-label": "Send",
    className: "str-chat__send-button",
    "data-testid": "send-button",
    onClick: sendMessage,
    type: "button",
    ...rest
  },
  /* @__PURE__ */ import_react205.default.createElement(SendIcon, null)
);

// src/components/MessageInput/StopAIGenerationButton.tsx
var import_react206 = __toESM(require("react"));
var StopAIGenerationButton = ({
  onClick,
  ...restProps
}) => {
  const { t: t2 } = useTranslationContext();
  return /* @__PURE__ */ import_react206.default.createElement(
    "button",
    {
      "aria-label": t2("aria/Stop AI Generation"),
      className: "str-chat__stop-ai-generation-button",
      "data-testid": "stop-ai-generation-button",
      onClick,
      ...restProps
    }
  );
};

// src/components/MessageInput/QuotedMessagePreview.tsx
var import_react211 = __toESM(require("react"));

// src/components/Message/FixedHeightMessage.tsx
var import_react209 = __toESM(require("react"));

// src/components/MML/MML.tsx
var import_react208 = __toESM(require("react"));
var MMLReact = import_react208.default.lazy(async () => {
  const mml = await Promise.resolve().then(() => (init_mml_react_esm(), mml_react_esm_exports));
  return { default: mml.MML };
});
var MML3 = (props) => {
  const { actionHandler, align = "right", source } = props;
  const { theme } = useChatContext("MML");
  return /* @__PURE__ */ import_react208.default.createElement(import_react208.Suspense, { fallback: null }, /* @__PURE__ */ import_react208.default.createElement(
    MMLReact,
    {
      className: `mml-align-${align}`,
      Loading: null,
      onSubmit: actionHandler,
      source,
      Success: null,
      theme: (theme || "").replace(" ", "-")
    }
  ));
};

// src/components/Message/FixedHeightMessage.tsx
var selectColor = (number3, dark) => {
  const hue = number3 * 137.508;
  return `hsl(${hue},${dark ? "50%" : "85%"}, ${dark ? "75%" : "55%"})`;
};
var hashUserId = (userId) => {
  const hash = userId.split("").reduce((acc, c) => {
    acc = (acc << 5) - acc + c.charCodeAt(0);
    return acc & acc;
  }, 0);
  return Math.abs(hash) / 10 ** Math.ceil(Math.log10(Math.abs(hash) + 1));
};
var getUserColor = (theme, userId) => selectColor(hashUserId(userId), theme.includes("dark"));
var UnMemoizedFixedHeightMessage = (props) => {
  const { groupedByUser: propGroupedByUser, message: propMessage } = props;
  const { theme } = useChatContext("FixedHeightMessage");
  const { groupedByUser: contextGroupedByUser, message: contextMessage } = useMessageContext("FixedHeightMessage");
  const { MessageDeleted: MessageDeleted2 = MessageDeleted } = useComponentContext("FixedHeightMessage");
  const { userLanguage } = useTranslationContext("FixedHeightMessage");
  const groupedByUser = propGroupedByUser !== void 0 ? propGroupedByUser : contextGroupedByUser;
  const message = propMessage || contextMessage;
  const handleAction = useActionHandler(message);
  const handleDelete2 = useDeleteHandler(message);
  const role = useUserRole(message);
  const messageTextToRender = message?.i18n?.[`${userLanguage}_text`] || message?.text;
  const renderedText = (0, import_react209.useMemo)(
    () => renderText(messageTextToRender, message.mentioned_users),
    [message.mentioned_users, messageTextToRender]
  );
  const userId = message.user?.id || "";
  const userColor = (0, import_react209.useMemo)(() => getUserColor(theme, userId), [userId, theme]);
  const messageActionsHandler = (0, import_react209.useCallback)(
    () => getMessageActions(["delete"], { canDelete: role.canDelete }),
    [role]
  );
  const images = message?.attachments?.filter(({ type }) => type === "image");
  return /* @__PURE__ */ import_react209.default.createElement(
    "div",
    {
      className: `str-chat__virtual-message__wrapper ${role.isMyMessage ? "str-chat__virtual-message__wrapper--me" : ""} ${groupedByUser ? "str-chat__virtual-message__wrapper--group" : ""}`,
      key: message.id
    },
    message.user && /* @__PURE__ */ import_react209.default.createElement(
      Avatar,
      {
        image: message.user.image,
        name: message.user.name || message.user.id,
        user: message.user
      }
    ),
    /* @__PURE__ */ import_react209.default.createElement("div", { className: "str-chat__virtual-message__content" }, /* @__PURE__ */ import_react209.default.createElement("div", { className: "str-chat__virtual-message__meta" }, /* @__PURE__ */ import_react209.default.createElement("div", { className: "str-chat__virtual-message__author", style: { color: userColor } }, /* @__PURE__ */ import_react209.default.createElement("strong", null, message.user?.name || "unknown"))), message.deleted_at || message.type === "deleted" ? /* @__PURE__ */ import_react209.default.createElement(MessageDeleted2, { message }) : /* @__PURE__ */ import_react209.default.createElement(import_react209.default.Fragment, null, images && /* @__PURE__ */ import_react209.default.createElement(Gallery, { images }), /* @__PURE__ */ import_react209.default.createElement("div", { className: "str-chat__virtual-message__text", "data-testid": "msg-text" }, renderedText, message.mml && /* @__PURE__ */ import_react209.default.createElement(MML3, { actionHandler: handleAction, align: "left", source: message.mml }), /* @__PURE__ */ import_react209.default.createElement("div", { className: "str-chat__virtual-message__data" }, /* @__PURE__ */ import_react209.default.createElement(
      MessageActions,
      {
        customWrapperClass: "str-chat__virtual-message__actions",
        getMessageActions: messageActionsHandler,
        handleDelete: handleDelete2,
        message,
        mine: () => role.isMyMessage
      }
    ), /* @__PURE__ */ import_react209.default.createElement("span", { className: "str-chat__virtual-message__date" }, /* @__PURE__ */ import_react209.default.createElement(
      MessageTimestamp,
      {
        customClass: "str-chat__message-simple-timestamp",
        message
      }
    ))))))
  );
};
var FixedHeightMessage = import_react209.default.memo(
  UnMemoizedFixedHeightMessage
);

// src/components/Message/StreamedMessageText.tsx
var import_react210 = __toESM(require("react"));
var StreamedMessageText = (props) => {
  const {
    message: messageFromProps,
    renderingLetterCount,
    renderText: renderText2,
    streamingLetterIntervalMs
  } = props;
  const { message: messageFromContext } = useMessageContext("StreamedMessageText");
  const message = messageFromProps || messageFromContext;
  const { text: text8 = "" } = message;
  const { streamedMessageText } = useMessageTextStreaming({
    renderingLetterCount,
    streamingLetterIntervalMs,
    text: text8
  });
  return /* @__PURE__ */ import_react210.default.createElement(
    MessageText,
    {
      message: { ...message, text: streamedMessageText },
      renderText: renderText2
    }
  );
};

// src/components/MessageInput/QuotedMessagePreview.tsx
var QuotedMessagePreviewHeader = () => {
  const { setQuotedMessage } = useChannelActionContext("QuotedMessagePreview");
  const { t: t2 } = useTranslationContext("QuotedMessagePreview");
  return /* @__PURE__ */ import_react211.default.createElement("div", { className: "str-chat__quoted-message-preview-header" }, /* @__PURE__ */ import_react211.default.createElement("div", { className: "str-chat__quoted-message-reply-to-message" }, t2("Reply to Message")), /* @__PURE__ */ import_react211.default.createElement(
    "button",
    {
      "aria-label": t2("aria/Cancel Reply"),
      className: "str-chat__quoted-message-remove",
      onClick: () => setQuotedMessage(void 0)
    },
    /* @__PURE__ */ import_react211.default.createElement(CloseIcon, null)
  ));
};
var QuotedMessagePreview = ({
  quotedMessage,
  renderText: renderText2 = renderText
}) => {
  const { client } = useChatContext();
  const { Attachment: Attachment2 = Attachment, Avatar: Avatar2 = Avatar } = useComponentContext("QuotedMessagePreview");
  const { userLanguage } = useTranslationContext("QuotedMessagePreview");
  const quotedMessageText = quotedMessage.i18n?.[`${userLanguage}_text`] || quotedMessage.text;
  const renderedText = (0, import_react211.useMemo)(
    () => renderText2(quotedMessageText, quotedMessage.mentioned_users),
    [quotedMessage.mentioned_users, quotedMessageText, renderText2]
  );
  const quotedMessageAttachment = (0, import_react211.useMemo)(() => {
    const [attachment] = quotedMessage.attachments ?? [];
    return attachment ? [attachment] : [];
  }, [quotedMessage.attachments]);
  if (!quotedMessageText && !quotedMessageAttachment) return null;
  const poll = quotedMessage.poll_id && client.polls.fromState(quotedMessage.poll_id);
  return /* @__PURE__ */ import_react211.default.createElement(
    "div",
    {
      className: "str-chat__quoted-message-preview",
      "data-testid": "quoted-message-preview"
    },
    quotedMessage.user && /* @__PURE__ */ import_react211.default.createElement(
      Avatar2,
      {
        className: "str-chat__avatar--quoted-message-sender",
        image: quotedMessage.user.image,
        name: quotedMessage.user.name || quotedMessage.user.id,
        user: quotedMessage.user
      }
    ),
    /* @__PURE__ */ import_react211.default.createElement("div", { className: "str-chat__quoted-message-bubble" }, poll ? /* @__PURE__ */ import_react211.default.createElement(Poll, { isQuoted: true, poll }) : /* @__PURE__ */ import_react211.default.createElement(import_react211.default.Fragment, null, !!quotedMessageAttachment.length && /* @__PURE__ */ import_react211.default.createElement(Attachment2, { attachments: quotedMessageAttachment, isQuoted: true }), /* @__PURE__ */ import_react211.default.createElement(
      "div",
      {
        className: "str-chat__quoted-message-text",
        "data-testid": "quoted-message-text"
      },
      renderedText
    )))
  );
};

// src/components/MessageInput/LinkPreviewList.tsx
var import_clsx54 = __toESM(require("clsx"));
var import_react212 = __toESM(require("react"));
var LinkPreviewList = ({ linkPreviews }) => {
  const { quotedMessage } = useChannelStateContext();
  const showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;
  if (!showLinkPreviews) return null;
  return /* @__PURE__ */ import_react212.default.createElement("div", { className: "str-chat__link-preview-list" }, Array.from(linkPreviews.values()).map(
    (linkPreview) => linkPreview.state === "loaded" /* LOADED */ ? /* @__PURE__ */ import_react212.default.createElement(LinkPreviewCard, { key: linkPreview.og_scrape_url, linkPreview }) : null
  ));
};
var LinkPreviewCard = ({ linkPreview }) => {
  const { dismissLinkPreview } = useMessageInputContext();
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();
  const [referenceElement, setReferenceElement] = (0, import_react212.useState)(null);
  return /* @__PURE__ */ import_react212.default.createElement(
    "div",
    {
      className: (0, import_clsx54.default)("str-chat__link-preview-card", {
        "str-chat__link-preview-card--loading": linkPreview.state === "loading" /* LOADING */
      }),
      "data-testid": "link-preview-card"
    },
    /* @__PURE__ */ import_react212.default.createElement(
      PopperTooltip,
      {
        offset: [0, 5],
        referenceElement,
        visible: tooltipVisible
      },
      linkPreview.og_scrape_url
    ),
    /* @__PURE__ */ import_react212.default.createElement(
      "div",
      {
        className: "str-chat__link-preview-card__icon-container",
        onMouseEnter: handleEnter,
        onMouseLeave: handleLeave,
        ref: setReferenceElement
      },
      /* @__PURE__ */ import_react212.default.createElement(LinkIcon, null)
    ),
    /* @__PURE__ */ import_react212.default.createElement("div", { className: "str-chat__link-preview-card__content" }, /* @__PURE__ */ import_react212.default.createElement("div", { className: "str-chat__link-preview-card__content-title" }, linkPreview.title), /* @__PURE__ */ import_react212.default.createElement("div", { className: "str-chat__link-preview-card__content-description" }, linkPreview.text)),
    /* @__PURE__ */ import_react212.default.createElement(
      "button",
      {
        className: "str-chat__link-preview-card__dismiss-button",
        "data-testid": "link-preview-card-dismiss-btn",
        onClick: () => dismissLinkPreview(linkPreview)
      },
      /* @__PURE__ */ import_react212.default.createElement(CloseIcon, null)
    )
  );
};

// src/components/ChatAutoComplete/ChatAutoComplete.tsx
var import_react213 = __toESM(require("react"));
var UnMemoizedChatAutoComplete = (props) => {
  const {
    AutocompleteSuggestionItem: SuggestionItem,
    AutocompleteSuggestionList: SuggestionList
  } = useComponentContext("ChatAutoComplete");
  const { t: t2 } = useTranslationContext("ChatAutoComplete");
  const messageInput = useMessageInputContext("ChatAutoComplete");
  const {
    cooldownRemaining,
    disabled,
    emojiSearchIndex,
    textareaRef: innerRef
  } = messageInput;
  const placeholder = props.placeholder || t2("Type your message");
  const emojiReplace = props.wordReplace ? (word) => props.wordReplace?.(word, emojiSearchIndex) : async (word) => {
    const found = await emojiSearchIndex?.search(word) || [];
    const emoji = found.filter(Boolean).slice(0, 10).find(({ emoticons }) => !!emoticons?.includes(word));
    if (!emoji) return null;
    const [firstSkin] = emoji.skins ?? [];
    return emoji.native ?? firstSkin.native;
  };
  const updateInnerRef = (0, import_react213.useCallback)(
    (ref) => {
      if (innerRef) {
        innerRef.current = ref;
      }
    },
    [innerRef]
  );
  return /* @__PURE__ */ import_react213.default.createElement(
    ReactTextareaAutocomplete,
    {
      additionalTextareaProps: messageInput.additionalTextareaProps,
      "aria-label": cooldownRemaining ? t2("Slow Mode ON") : placeholder,
      className: "str-chat__textarea__textarea str-chat__message-textarea",
      closeCommandsList: messageInput.closeCommandsList,
      closeMentionsList: messageInput.closeMentionsList,
      containerClassName: "str-chat__textarea str-chat__message-textarea-react-host",
      disabled: (props.disabled ?? disabled) || !!cooldownRemaining,
      disableMentions: messageInput.disableMentions,
      grow: messageInput.grow,
      handleSubmit: props.handleSubmit || messageInput.handleSubmit,
      innerRef: updateInnerRef,
      loadingComponent: LoadingIndicator,
      maxRows: messageInput.maxRows,
      minChar: 0,
      minRows: messageInput.minRows,
      onBlur: props.onBlur,
      onChange: props.onChange || messageInput.handleChange,
      onFocus: props.onFocus,
      onPaste: props.onPaste || messageInput.onPaste,
      placeholder: cooldownRemaining ? t2("Slow Mode ON") : placeholder,
      replaceWord: emojiReplace,
      rows: props.rows || 1,
      shouldSubmit: messageInput.shouldSubmit,
      showCommandsList: messageInput.showCommandsList,
      showMentionsList: messageInput.showMentionsList,
      SuggestionItem,
      SuggestionList,
      trigger: messageInput.autocompleteTriggers || {},
      value: props.value || messageInput.text
    }
  );
};
var ChatAutoComplete = import_react213.default.memo(
  UnMemoizedChatAutoComplete
);

// src/components/AIStateIndicator/AIStateIndicator.tsx
var import_react215 = __toESM(require("react"));

// src/components/AIStateIndicator/hooks/useAIState.ts
var import_react214 = require("react");
var AIStates = {
  Error: "AI_STATE_ERROR",
  ExternalSources: "AI_STATE_EXTERNAL_SOURCES",
  Generating: "AI_STATE_GENERATING",
  Idle: "AI_STATE_IDLE",
  Thinking: "AI_STATE_THINKING"
};
var useAIState = (channel) => {
  const [aiState, setAiState] = (0, import_react214.useState)(AIStates.Idle);
  (0, import_react214.useEffect)(() => {
    if (!channel) {
      return;
    }
    const indicatorChangedListener = channel.on(
      "ai_indicator.update",
      (event) => {
        const { cid } = event;
        const state = event.ai_state;
        if (channel.cid === cid) {
          setAiState(state);
        }
      }
    );
    const indicatorClearedListener = channel.on("ai_indicator.clear", (event) => {
      const { cid } = event;
      if (channel.cid === cid) {
        setAiState(AIStates.Idle);
      }
    });
    return () => {
      indicatorChangedListener.unsubscribe();
      indicatorClearedListener.unsubscribe();
    };
  }, [channel]);
  return { aiState };
};

// src/components/AIStateIndicator/AIStateIndicator.tsx
var AIStateIndicator = ({
  channel: channelFromProps
}) => {
  const { t: t2 } = useTranslationContext();
  const { channel: channelFromContext } = useChannelStateContext("AIStateIndicator");
  const channel = channelFromProps || channelFromContext;
  const { aiState } = useAIState(channel);
  const allowedStates = {
    [AIStates.Thinking]: t2("Thinking..."),
    [AIStates.Generating]: t2("Generating...")
  };
  return aiState in allowedStates ? /* @__PURE__ */ import_react215.default.createElement("div", { className: "str-chat__ai-state-indicator-container" }, /* @__PURE__ */ import_react215.default.createElement("p", { className: "str-chat__ai-state-indicator-text" }, allowedStates[aiState])) : null;
};

// src/components/MessageInput/MessageInputFlat.tsx
var MessageInputFlat = () => {
  const { t: t2 } = useTranslationContext("MessageInputFlat");
  const {
    asyncMessagesMultiSendEnabled,
    attachments,
    cooldownRemaining,
    findAndEnqueueURLsToEnrich,
    handleSubmit,
    hideSendButton,
    isUploadEnabled,
    linkPreviews,
    maxFilesLeft,
    message,
    numberOfUploads,
    parent,
    recordingController,
    setCooldownRemaining,
    text: text8,
    uploadNewFiles
  } = useMessageInputContext("MessageInputFlat");
  const {
    AttachmentPreviewList: AttachmentPreviewList2 = AttachmentPreviewList,
    AttachmentSelector: AttachmentSelector2 = message ? SimpleAttachmentSelector : AttachmentSelector,
    AudioRecorder: AudioRecorder2 = AudioRecorder,
    CooldownTimer: CooldownTimer2 = CooldownTimer,
    EmojiPicker,
    LinkPreviewList: LinkPreviewList2 = LinkPreviewList,
    QuotedMessagePreview: QuotedMessagePreview2 = QuotedMessagePreview,
    RecordingPermissionDeniedNotification: RecordingPermissionDeniedNotification2 = RecordingPermissionDeniedNotification,
    SendButton: SendButton2 = SendButton,
    StartRecordingAudioButton: StartRecordingAudioButton2 = StartRecordingAudioButton,
    StopAIGenerationButton: StopAIGenerationButtonOverride
  } = useComponentContext("MessageInputFlat");
  const {
    acceptedFiles = [],
    multipleUploads,
    quotedMessage
  } = useChannelStateContext("MessageInputFlat");
  const { setQuotedMessage } = useChannelActionContext("MessageInputFlat");
  const { channel } = useChatContext("MessageInputFlat");
  const { aiState } = useAIState(channel);
  const stopGenerating = (0, import_react216.useCallback)(() => channel?.stopAIResponse(), [channel]);
  const [
    showRecordingPermissionDeniedNotification,
    setShowRecordingPermissionDeniedNotification
  ] = (0, import_react216.useState)(false);
  const closePermissionDeniedNotification = (0, import_react216.useCallback)(() => {
    setShowRecordingPermissionDeniedNotification(false);
  }, []);
  const failedUploadsCount = (0, import_react216.useMemo)(
    () => attachments.filter((a2) => a2.localMetadata?.uploadState === "failed").length,
    [attachments]
  );
  const accept = (0, import_react216.useMemo)(
    () => acceptedFiles.reduce((mediaTypeMap, mediaType) => {
      mediaTypeMap[mediaType] ?? (mediaTypeMap[mediaType] = []);
      return mediaTypeMap;
    }, {}),
    [acceptedFiles]
  );
  const { getRootProps, isDragActive, isDragReject } = (0, import_react_dropzone2.useDropzone)({
    accept,
    disabled: !isUploadEnabled || maxFilesLeft === 0,
    multiple: multipleUploads,
    noClick: true,
    onDrop: uploadNewFiles
  });
  (0, import_react216.useEffect)(() => {
    const handleQuotedMessageUpdate = (e2) => {
      if (e2.message?.id !== quotedMessage?.id) return;
      if (e2.type === "message.deleted") {
        setQuotedMessage(void 0);
        return;
      }
      setQuotedMessage(e2.message);
    };
    channel?.on("message.deleted", handleQuotedMessageUpdate);
    channel?.on("message.updated", handleQuotedMessageUpdate);
    return () => {
      channel?.off("message.deleted", handleQuotedMessageUpdate);
      channel?.off("message.updated", handleQuotedMessageUpdate);
    };
  }, [channel, quotedMessage]);
  if (recordingController.recordingState) return /* @__PURE__ */ import_react216.default.createElement(AudioRecorder2, null);
  const displayQuotedMessage = !message && quotedMessage && quotedMessage.parent_id === parent?.id;
  const recordingEnabled = !!(recordingController.recorder && navigator.mediaDevices);
  const isRecording = !!recordingController.recordingState;
  const StopAIGenerationButton2 = StopAIGenerationButtonOverride === void 0 ? StopAIGenerationButton : StopAIGenerationButtonOverride;
  const shouldDisplayStopAIGeneration = [AIStates.Thinking, AIStates.Generating].includes(aiState) && !!StopAIGenerationButton2;
  return /* @__PURE__ */ import_react216.default.createElement(import_react216.default.Fragment, null, /* @__PURE__ */ import_react216.default.createElement("div", { ...getRootProps({ className: "str-chat__message-input" }) }, recordingEnabled && recordingController.permissionState === "denied" && showRecordingPermissionDeniedNotification && /* @__PURE__ */ import_react216.default.createElement(
    RecordingPermissionDeniedNotification2,
    {
      onClose: closePermissionDeniedNotification,
      permissionName: "microphone" /* MIC */
    }
  ), findAndEnqueueURLsToEnrich && /* @__PURE__ */ import_react216.default.createElement(LinkPreviewList2, { linkPreviews: Array.from(linkPreviews.values()) }), isDragActive && /* @__PURE__ */ import_react216.default.createElement(
    "div",
    {
      className: (0, import_clsx55.default)("str-chat__dropzone-container", {
        "str-chat__dropzone-container--not-accepted": isDragReject
      })
    },
    !isDragReject && /* @__PURE__ */ import_react216.default.createElement("p", null, t2("Drag your files here")),
    isDragReject && /* @__PURE__ */ import_react216.default.createElement("p", null, t2("Some of the files will not be accepted"))
  ), displayQuotedMessage && /* @__PURE__ */ import_react216.default.createElement(QuotedMessagePreviewHeader, null), /* @__PURE__ */ import_react216.default.createElement("div", { className: "str-chat__message-input-inner" }, /* @__PURE__ */ import_react216.default.createElement(AttachmentSelector2, null), /* @__PURE__ */ import_react216.default.createElement("div", { className: "str-chat__message-textarea-container" }, displayQuotedMessage && /* @__PURE__ */ import_react216.default.createElement(QuotedMessagePreview2, { quotedMessage }), isUploadEnabled && !!(numberOfUploads + failedUploadsCount || attachments.length > 0) && /* @__PURE__ */ import_react216.default.createElement(AttachmentPreviewList2, null), /* @__PURE__ */ import_react216.default.createElement("div", { className: "str-chat__message-textarea-with-emoji-picker" }, /* @__PURE__ */ import_react216.default.createElement(ChatAutoComplete, null), EmojiPicker && /* @__PURE__ */ import_react216.default.createElement(EmojiPicker, null))), shouldDisplayStopAIGeneration ? /* @__PURE__ */ import_react216.default.createElement(StopAIGenerationButton2, { onClick: stopGenerating }) : !hideSendButton && /* @__PURE__ */ import_react216.default.createElement(import_react216.default.Fragment, null, cooldownRemaining ? /* @__PURE__ */ import_react216.default.createElement(
    CooldownTimer2,
    {
      cooldownInterval: cooldownRemaining,
      setCooldownRemaining
    }
  ) : /* @__PURE__ */ import_react216.default.createElement(import_react216.default.Fragment, null, /* @__PURE__ */ import_react216.default.createElement(
    SendButton2,
    {
      disabled: !numberOfUploads && !text8.length && attachments.length - failedUploadsCount === 0,
      sendMessage: handleSubmit
    }
  ), recordingEnabled && /* @__PURE__ */ import_react216.default.createElement(
    StartRecordingAudioButton2,
    {
      disabled: isRecording || !asyncMessagesMultiSendEnabled && attachments.some(
        (a2) => a2.type === "voiceRecording" /* VOICE_RECORDING */
      ),
      onClick: () => {
        recordingController.recorder?.start();
        setShowRecordingPermissionDeniedNotification(true);
      }
    }
  ))))));
};

// src/components/MessageInput/EditMessageForm.tsx
var EditMessageForm = () => {
  const { t: t2 } = useTranslationContext("EditMessageForm");
  const { clearEditingState, handleSubmit } = useMessageInputContext("EditMessageForm");
  (0, import_react217.useEffect)(() => {
    const onKeyDown = (event) => {
      if (event.key === "Escape") clearEditingState?.();
    };
    document.addEventListener("keydown", onKeyDown);
    return () => document.removeEventListener("keydown", onKeyDown);
  }, [clearEditingState]);
  return /* @__PURE__ */ import_react217.default.createElement(
    "form",
    {
      autoComplete: "off",
      className: "str-chat__edit-message-form",
      onSubmit: handleSubmit
    },
    /* @__PURE__ */ import_react217.default.createElement(MessageInputFlat, null),
    /* @__PURE__ */ import_react217.default.createElement("div", { className: "str-chat__edit-message-form-options" }, /* @__PURE__ */ import_react217.default.createElement(
      "button",
      {
        className: "str-chat__edit-message-cancel",
        "data-testid": "cancel-button",
        onClick: clearEditingState
      },
      t2("Cancel")
    ), /* @__PURE__ */ import_react217.default.createElement(
      "button",
      {
        className: "str-chat__edit-message-send",
        "data-testid": "send-button-edit-form",
        type: "submit"
      },
      t2("Send")
    ))
  );
};

// src/components/MessageInput/MessageInput.tsx
var import_react218 = __toESM(require("react"));
var MessageInputProvider = (props) => {
  const cooldownTimerState = useCooldownTimer();
  const messageInputState = useMessageInputState(props);
  const { emojiSearchIndex } = useComponentContext("MessageInput");
  const messageInputContextValue = useCreateMessageInputContext({
    ...cooldownTimerState,
    ...messageInputState,
    ...props,
    emojiSearchIndex: props.emojiSearchIndex ?? emojiSearchIndex
  });
  return /* @__PURE__ */ import_react218.default.createElement(MessageInputContextProvider, { value: messageInputContextValue }, props.children);
};
var UnMemoizedMessageInput = (props) => {
  const { Input: PropInput } = props;
  const { dragAndDropWindow } = useChannelStateContext();
  const { Input: ContextInput, TriggerProvider = DefaultTriggerProvider } = useComponentContext("MessageInput");
  const Input3 = PropInput || ContextInput || MessageInputFlat;
  const dialogManagerId = props.isThreadInput ? "message-input-dialog-manager-thread" : "message-input-dialog-manager";
  if (dragAndDropWindow)
    return /* @__PURE__ */ import_react218.default.createElement(DialogManagerProvider, { id: dialogManagerId }, /* @__PURE__ */ import_react218.default.createElement(TriggerProvider, null, /* @__PURE__ */ import_react218.default.createElement(Input3, null)));
  return /* @__PURE__ */ import_react218.default.createElement(DialogManagerProvider, { id: dialogManagerId }, /* @__PURE__ */ import_react218.default.createElement(MessageInputProvider, { ...props }, /* @__PURE__ */ import_react218.default.createElement(TriggerProvider, null, /* @__PURE__ */ import_react218.default.createElement(Input3, null))));
};
var MessageInput = import_react218.default.memo(
  UnMemoizedMessageInput
);

// src/components/Reactions/ReactionsList.tsx
var import_react222 = __toESM(require("react"));
var import_clsx57 = __toESM(require("clsx"));

// src/components/Reactions/ReactionsListModal.tsx
var import_react220 = __toESM(require("react"));
var import_clsx56 = __toESM(require("clsx"));

// src/components/Reactions/hooks/useFetchReactions.ts
var import_react219 = require("react");
function useFetchReactions(options) {
  const { handleFetchReactions: contextHandleFetchReactions } = useMessageContext("useFetchReactions");
  const [reactions, setReactions] = (0, import_react219.useState)([]);
  const {
    handleFetchReactions: propHandleFetchReactions,
    reactionType,
    shouldFetch,
    sort
  } = options;
  const [isLoading, setIsLoading] = (0, import_react219.useState)(shouldFetch);
  const handleFetchReactions = propHandleFetchReactions ?? contextHandleFetchReactions;
  (0, import_react219.useEffect)(() => {
    if (!shouldFetch) {
      return;
    }
    let cancel = false;
    (async () => {
      try {
        setIsLoading(true);
        const reactions2 = await handleFetchReactions(reactionType, sort);
        if (!cancel) {
          setReactions(reactions2);
        }
      } catch (e2) {
        if (!cancel) {
          setReactions([]);
        }
      } finally {
        if (!cancel) {
          setIsLoading(false);
        }
      }
    })();
    return () => {
      cancel = true;
    };
  }, [handleFetchReactions, reactionType, shouldFetch, sort]);
  return { isLoading, reactions };
}

// src/components/Reactions/ReactionsListModal.tsx
var defaultReactionDetailsSort = { created_at: -1 };
function ReactionsListModal({
  handleFetchReactions,
  onSelectedReactionTypeChange,
  reactionDetailsSort: propReactionDetailsSort,
  reactions,
  selectedReactionType,
  sortReactionDetails: propSortReactionDetails,
  ...modalProps
}) {
  const selectedReaction = reactions.find(
    ({ reactionType }) => reactionType === selectedReactionType
  );
  const SelectedEmojiComponent = selectedReaction?.EmojiComponent ?? null;
  const {
    reactionDetailsSort: contextReactionDetailsSort,
    sortReactionDetails: contextSortReactionDetails
  } = useMessageContext("ReactionsListModal");
  const legacySortReactionDetails = propSortReactionDetails ?? contextSortReactionDetails;
  const reactionDetailsSort = propReactionDetailsSort ?? contextReactionDetailsSort ?? defaultReactionDetailsSort;
  const { isLoading: areReactionsLoading, reactions: reactionDetails } = useFetchReactions({
    handleFetchReactions,
    reactionType: selectedReactionType,
    shouldFetch: modalProps.open,
    sort: reactionDetailsSort
  });
  const reactionDetailsWithLegacyFallback = (0, import_react220.useMemo)(
    () => legacySortReactionDetails ? [...reactionDetails].sort(legacySortReactionDetails) : reactionDetails,
    [legacySortReactionDetails, reactionDetails]
  );
  return /* @__PURE__ */ import_react220.default.createElement(
    Modal,
    {
      ...modalProps,
      className: (0, import_clsx56.default)("str-chat__message-reactions-details-modal", modalProps.className)
    },
    /* @__PURE__ */ import_react220.default.createElement(
      "div",
      {
        className: "str-chat__message-reactions-details",
        "data-testid": "reactions-list-modal"
      },
      /* @__PURE__ */ import_react220.default.createElement("div", { className: "str-chat__message-reactions-details-reaction-types" }, reactions.map(
        ({ EmojiComponent, reactionCount, reactionType }) => EmojiComponent && /* @__PURE__ */ import_react220.default.createElement(
          "div",
          {
            className: (0, import_clsx56.default)("str-chat__message-reactions-details-reaction-type", {
              "str-chat__message-reactions-details-reaction-type--selected": selectedReactionType === reactionType
            }),
            "data-testid": `reaction-details-selector-${reactionType}`,
            key: reactionType,
            onClick: () => onSelectedReactionTypeChange?.(
              reactionType
            )
          },
          /* @__PURE__ */ import_react220.default.createElement("span", { className: "str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback" }, /* @__PURE__ */ import_react220.default.createElement(EmojiComponent, null)),
          "\xA0",
          /* @__PURE__ */ import_react220.default.createElement("span", { className: "str-chat__message-reaction-count" }, reactionCount)
        )
      )),
      SelectedEmojiComponent && /* @__PURE__ */ import_react220.default.createElement("div", { className: "str-chat__message-reaction-emoji str-chat__message-reaction-emoji--with-fallback str-chat__message-reaction-emoji-big" }, /* @__PURE__ */ import_react220.default.createElement(SelectedEmojiComponent, null)),
      /* @__PURE__ */ import_react220.default.createElement(
        "div",
        {
          className: "str-chat__message-reactions-details-reacting-users",
          "data-testid": "all-reacting-users"
        },
        areReactionsLoading ? /* @__PURE__ */ import_react220.default.createElement(LoadingIndicator, null) : reactionDetailsWithLegacyFallback.map(({ user }) => /* @__PURE__ */ import_react220.default.createElement(
          "div",
          {
            className: "str-chat__message-reactions-details-reacting-user",
            key: user?.id
          },
          /* @__PURE__ */ import_react220.default.createElement(
            Avatar,
            {
              className: "stream-chat__avatar--reaction",
              "data-testid": "avatar",
              image: user?.image,
              name: user?.name || user?.id
            }
          ),
          /* @__PURE__ */ import_react220.default.createElement(
            "span",
            {
              className: "str-chat__user-item--name",
              "data-testid": "reaction-user-username"
            },
            user?.name || user?.id
          )
        ))
      )
    )
  );
}

// src/components/Reactions/hooks/useProcessReactions.tsx
var import_react221 = require("react");
var defaultReactionsSort = (a2, b) => {
  if (a2.firstReactionAt && b.firstReactionAt) {
    return +a2.firstReactionAt - +b.firstReactionAt;
  }
  return a2.reactionType.localeCompare(b.reactionType, "en");
};
var useProcessReactions = (params) => {
  const {
    own_reactions: propOwnReactions,
    reaction_groups: propReactionGroups,
    reactionOptions: propReactionOptions,
    reactions: propReactions,
    sortReactions: propSortReactions
  } = params;
  const { message, sortReactions: contextSortReactions } = useMessageContext("useProcessReactions");
  const { reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext("useProcessReactions");
  const reactionOptions = propReactionOptions ?? contextReactionOptions;
  const sortReactions = propSortReactions ?? contextSortReactions ?? defaultReactionsSort;
  const latestReactions = propReactions || message.latest_reactions;
  const ownReactions = propOwnReactions || message?.own_reactions;
  const reactionGroups = propReactionGroups || message?.reaction_groups;
  const isOwnReaction = (0, import_react221.useCallback)(
    (reactionType) => ownReactions?.some((reaction) => reaction.type === reactionType) ?? false,
    [ownReactions]
  );
  const getEmojiByReactionType = (0, import_react221.useCallback)(
    (reactionType) => reactionOptions.find(({ type }) => type === reactionType)?.Component ?? null,
    [reactionOptions]
  );
  const isSupportedReaction = (0, import_react221.useCallback)(
    (reactionType) => reactionOptions.some((reactionOption) => reactionOption.type === reactionType),
    [reactionOptions]
  );
  const getLatestReactedUserNames = (0, import_react221.useCallback)(
    (reactionType) => latestReactions?.flatMap((reaction) => {
      if (reactionType && reactionType === reaction.type) {
        const username = reaction.user?.name || reaction.user?.id;
        return username ? [username] : [];
      }
      return [];
    }) ?? [],
    [latestReactions]
  );
  const existingReactions = (0, import_react221.useMemo)(() => {
    if (!reactionGroups) {
      return [];
    }
    const unsortedReactions = Object.entries(reactionGroups).flatMap(
      ([reactionType, { count, first_reaction_at, last_reaction_at }]) => {
        if (count === 0 || !isSupportedReaction(reactionType)) {
          return [];
        }
        const latestReactedUserNames = getLatestReactedUserNames(reactionType);
        return [
          {
            EmojiComponent: getEmojiByReactionType(reactionType),
            firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,
            isOwnReaction: isOwnReaction(reactionType),
            lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,
            latestReactedUserNames,
            reactionCount: count,
            reactionType,
            unlistedReactedUserCount: count - latestReactedUserNames.length
          }
        ];
      }
    );
    return unsortedReactions.sort(sortReactions);
  }, [
    getEmojiByReactionType,
    getLatestReactedUserNames,
    isOwnReaction,
    isSupportedReaction,
    reactionGroups,
    sortReactions
  ]);
  const hasReactions = existingReactions.length > 0;
  const totalReactionCount = (0, import_react221.useMemo)(
    () => existingReactions.reduce((total, { reactionCount }) => total + reactionCount, 0),
    [existingReactions]
  );
  return {
    existingReactions,
    hasReactions,
    totalReactionCount
  };
};

// src/components/Reactions/ReactionsList.tsx
var UnMemoizedReactionsList = (props) => {
  const {
    handleFetchReactions,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    reactionDetailsSort,
    reverse = false,
    sortReactionDetails,
    ...rest
  } = props;
  const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);
  const [selectedReactionType, setSelectedReactionType] = (0, import_react222.useState)(null);
  const { t: t2 } = useTranslationContext("ReactionsList");
  const { ReactionsListModal: ReactionsListModal2 = ReactionsListModal } = useComponentContext();
  const handleReactionButtonClick = (reactionType) => {
    if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {
      return;
    }
    setSelectedReactionType(reactionType);
  };
  if (!hasReactions) return null;
  return /* @__PURE__ */ import_react222.default.createElement(import_react222.default.Fragment, null, /* @__PURE__ */ import_react222.default.createElement(
    "div",
    {
      "aria-label": t2("aria/Reaction list"),
      className: (0, import_clsx57.default)("str-chat__reaction-list str-chat__message-reactions-container", {
        // we are stuck with both classes as both are used in CSS
        "str-chat__reaction-list--reverse": reverse
      }),
      "data-testid": "reaction-list",
      role: "figure"
    },
    /* @__PURE__ */ import_react222.default.createElement("ul", { className: "str-chat__message-reactions" }, existingReactions.map(
      ({ EmojiComponent, isOwnReaction, reactionCount, reactionType }) => EmojiComponent && /* @__PURE__ */ import_react222.default.createElement(
        "li",
        {
          className: (0, import_clsx57.default)("str-chat__message-reaction", {
            "str-chat__message-reaction-own": isOwnReaction
          }),
          key: reactionType
        },
        /* @__PURE__ */ import_react222.default.createElement(
          "button",
          {
            "aria-label": `Reactions: ${reactionType}`,
            "data-testid": `reactions-list-button-${reactionType}`,
            onClick: () => handleReactionButtonClick(reactionType),
            type: "button"
          },
          /* @__PURE__ */ import_react222.default.createElement("span", { className: "str-chat__message-reaction-emoji" }, /* @__PURE__ */ import_react222.default.createElement(EmojiComponent, null)),
          "\xA0",
          /* @__PURE__ */ import_react222.default.createElement(
            "span",
            {
              className: "str-chat__message-reaction-count",
              "data-testclass": "reaction-list-reaction-count"
            },
            reactionCount
          )
        )
      )
    ), /* @__PURE__ */ import_react222.default.createElement("li", null, /* @__PURE__ */ import_react222.default.createElement("span", { className: "str-chat__reaction-list--counter" }, totalReactionCount)))
  ), selectedReactionType !== null && /* @__PURE__ */ import_react222.default.createElement(
    ReactionsListModal2,
    {
      handleFetchReactions,
      onClose: () => setSelectedReactionType(null),
      onSelectedReactionTypeChange: setSelectedReactionType,
      open: selectedReactionType !== null,
      reactions: existingReactions,
      selectedReactionType,
      sortReactionDetails
    }
  ));
};
var ReactionsList = import_react222.default.memo(
  UnMemoizedReactionsList
);

// src/components/Reactions/SimpleReactionsList.tsx
var import_react223 = __toESM(require("react"));
var import_clsx58 = __toESM(require("clsx"));
var WithTooltip = ({
  children,
  onMouseEnter,
  onMouseLeave,
  title
}) => {
  const [referenceElement, setReferenceElement] = (0, import_react223.useState)(null);
  const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers({
    onMouseEnter,
    onMouseLeave
  });
  return /* @__PURE__ */ import_react223.default.createElement(import_react223.default.Fragment, null, /* @__PURE__ */ import_react223.default.createElement(PopperTooltip, { referenceElement, visible: tooltipVisible }, title), /* @__PURE__ */ import_react223.default.createElement(
    "span",
    {
      onMouseEnter: handleEnter,
      onMouseLeave: handleLeave,
      ref: setReferenceElement
    },
    children
  ));
};
var UnMemoizedSimpleReactionsList = (props) => {
  const { handleReaction: propHandleReaction, ...rest } = props;
  const { handleReaction: contextHandleReaction } = useMessageContext("SimpleReactionsList");
  const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);
  const handleReaction = propHandleReaction || contextHandleReaction;
  if (!hasReactions) return null;
  return /* @__PURE__ */ import_react223.default.createElement("div", { className: "str-chat__message-reactions-container" }, /* @__PURE__ */ import_react223.default.createElement(
    "ul",
    {
      className: "str-chat__simple-reactions-list str-chat__message-reactions",
      "data-testid": "simple-reaction-list"
    },
    existingReactions.map(
      ({ EmojiComponent, isOwnReaction, latestReactedUserNames, reactionType }) => {
        const tooltipContent = latestReactedUserNames.join(", ");
        return EmojiComponent && /* @__PURE__ */ import_react223.default.createElement(
          "li",
          {
            className: (0, import_clsx58.default)("str-chat__simple-reactions-list-item", {
              "str-chat__message-reaction-own": isOwnReaction
            }),
            key: reactionType,
            onClick: (event) => handleReaction(reactionType, event),
            onKeyUp: (event) => handleReaction(reactionType, event)
          },
          /* @__PURE__ */ import_react223.default.createElement(WithTooltip, { title: tooltipContent }, /* @__PURE__ */ import_react223.default.createElement(EmojiComponent, null))
        );
      }
    ),
    /* @__PURE__ */ import_react223.default.createElement("li", { className: "str-chat__simple-reactions-list-item--last-number" }, totalReactionCount)
  ));
};
var SimpleReactionsList = import_react223.default.memo(
  UnMemoizedSimpleReactionsList
);

// src/components/Message/MessageEditedTimestamp.tsx
var import_react224 = __toESM(require("react"));
var import_clsx59 = __toESM(require("clsx"));
function MessageEditedTimestamp({
  message: propMessage,
  open,
  ...timestampProps
}) {
  const { t: t2 } = useTranslationContext("MessageEditedTimestamp");
  const { message: contextMessage } = useMessageContext(
    "MessageEditedTimestamp"
  );
  const { Timestamp: Timestamp2 = Timestamp } = useComponentContext("MessageEditedTimestamp");
  const message = propMessage || contextMessage;
  if (!isMessageEdited(message)) {
    return null;
  }
  return /* @__PURE__ */ import_react224.default.createElement(
    "div",
    {
      className: (0, import_clsx59.default)(
        "str-chat__message-edited-timestamp",
        open ? "str-chat__message-edited-timestamp--open" : "str-chat__message-edited-timestamp--collapsed"
      ),
      "data-testid": "message-edited-timestamp"
    },
    t2("Edited"),
    " ",
    /* @__PURE__ */ import_react224.default.createElement(Timestamp2, { timestamp: message.message_text_updated_at, ...timestampProps })
  );
}

// src/components/Message/MessageSimple.tsx
var MessageSimpleWithContext = (props) => {
  const {
    additionalMessageInputProps,
    clearEditingState,
    editing,
    endOfGroup,
    firstOfGroup,
    groupedByUser,
    handleAction,
    handleOpenThread,
    handleRetry,
    highlighted,
    isMessageAIGenerated,
    isMyMessage,
    message,
    onUserClick,
    onUserHover,
    renderText: renderText2,
    threadList
  } = props;
  const { client } = useChatContext("MessageSimple");
  const { t: t2 } = useTranslationContext("MessageSimple");
  const [isBounceDialogOpen, setIsBounceDialogOpen] = (0, import_react225.useState)(false);
  const [isEditedTimestampOpen, setEditedTimestampOpen] = (0, import_react225.useState)(false);
  const {
    Attachment: Attachment2 = Attachment,
    Avatar: Avatar2 = Avatar,
    EditMessageInput = EditMessageForm,
    MessageOptions: MessageOptions2 = MessageOptions,
    // TODO: remove this "passthrough" in the next
    // major release and use the new default instead
    MessageActions: MessageActions2 = MessageOptions2,
    MessageBlocked: MessageBlocked2 = MessageBlocked,
    MessageDeleted: MessageDeleted2 = MessageDeleted,
    MessageBouncePrompt: MessageBouncePrompt2 = MessageBouncePrompt,
    MessageRepliesCountButton: MessageRepliesCountButton2 = MessageRepliesCountButton,
    MessageStatus: MessageStatus2 = MessageStatus,
    MessageTimestamp: MessageTimestamp2 = MessageTimestamp,
    ReactionsList: ReactionsList2 = ReactionsList,
    StreamedMessageText: StreamedMessageText2 = StreamedMessageText,
    PinIndicator: PinIndicator2
  } = useComponentContext("MessageSimple");
  const hasAttachment = messageHasAttachments(message);
  const hasReactions = messageHasReactions(message);
  const isAIGenerated = (0, import_react225.useMemo)(
    () => isMessageAIGenerated?.(message),
    [isMessageAIGenerated, message]
  );
  if (message.customType === CUSTOM_MESSAGE_TYPE.date) {
    return null;
  }
  if (message.deleted_at || message.type === "deleted") {
    return /* @__PURE__ */ import_react225.default.createElement(MessageDeleted2, { message });
  }
  if (isMessageBlocked(message)) {
    return /* @__PURE__ */ import_react225.default.createElement(MessageBlocked2, null);
  }
  const showMetadata = !groupedByUser || endOfGroup;
  const showReplyCountButton = !threadList && !!message.reply_count;
  const allowRetry = message.status === "failed" && message.errorStatusCode !== 403;
  const isBounced = isMessageBounced(message);
  const isEdited = isMessageEdited(message) && !isAIGenerated;
  let handleClick = void 0;
  if (allowRetry) {
    handleClick = () => handleRetry(message);
  } else if (isBounced) {
    handleClick = () => setIsBounceDialogOpen(true);
  } else if (isEdited) {
    handleClick = () => setEditedTimestampOpen((prev) => !prev);
  }
  const rootClassName2 = (0, import_clsx60.default)(
    "str-chat__message str-chat__message-simple",
    `str-chat__message--${message.type}`,
    `str-chat__message--${message.status}`,
    isMyMessage() ? "str-chat__message--me str-chat__message-simple--me" : "str-chat__message--other",
    message.text ? "str-chat__message--has-text" : "has-no-text",
    {
      "str-chat__message--has-attachment": hasAttachment,
      "str-chat__message--highlighted": highlighted,
      "str-chat__message--pinned pinned-message": message.pinned,
      "str-chat__message--with-reactions": hasReactions,
      "str-chat__message-send-can-be-retried": message?.status === "failed" && message?.errorStatusCode !== 403,
      "str-chat__message-with-thread-link": showReplyCountButton,
      "str-chat__virtual-message__wrapper--end": endOfGroup,
      "str-chat__virtual-message__wrapper--first": firstOfGroup,
      "str-chat__virtual-message__wrapper--group": groupedByUser
    }
  );
  const poll = message.poll_id && client.polls.fromState(message.poll_id);
  return /* @__PURE__ */ import_react225.default.createElement(import_react225.default.Fragment, null, editing && /* @__PURE__ */ import_react225.default.createElement(
    Modal,
    {
      className: "str-chat__edit-message-modal",
      onClose: clearEditingState,
      open: editing
    },
    /* @__PURE__ */ import_react225.default.createElement(
      MessageInput,
      {
        clearEditingState,
        grow: true,
        hideSendButton: true,
        Input: EditMessageInput,
        message,
        ...additionalMessageInputProps
      }
    )
  ), isBounceDialogOpen && /* @__PURE__ */ import_react225.default.createElement(
    MessageBounceModal,
    {
      MessageBouncePrompt: MessageBouncePrompt2,
      onClose: () => setIsBounceDialogOpen(false),
      open: isBounceDialogOpen
    }
  ), /* @__PURE__ */ import_react225.default.createElement("div", { className: rootClassName2, key: message.id }, PinIndicator2 && /* @__PURE__ */ import_react225.default.createElement(PinIndicator2, null), message.user && /* @__PURE__ */ import_react225.default.createElement(
    Avatar2,
    {
      image: message.user.image,
      name: message.user.name || message.user.id,
      onClick: onUserClick,
      onMouseOver: onUserHover,
      user: message.user
    }
  ), /* @__PURE__ */ import_react225.default.createElement(
    "div",
    {
      className: (0, import_clsx60.default)("str-chat__message-inner", {
        "str-chat__simple-message--error-failed": allowRetry || isBounced
      }),
      "data-testid": "message-inner",
      onClick: handleClick,
      onKeyUp: handleClick
    },
    /* @__PURE__ */ import_react225.default.createElement(MessageActions2, null),
    /* @__PURE__ */ import_react225.default.createElement("div", { className: "str-chat__message-reactions-host" }, hasReactions && /* @__PURE__ */ import_react225.default.createElement(ReactionsList2, { reverse: true })),
    /* @__PURE__ */ import_react225.default.createElement("div", { className: "str-chat__message-bubble" }, poll && /* @__PURE__ */ import_react225.default.createElement(Poll, { poll }), message.attachments?.length && !message.quoted_message ? /* @__PURE__ */ import_react225.default.createElement(
      Attachment2,
      {
        actionHandler: handleAction,
        attachments: message.attachments
      }
    ) : null, isAIGenerated ? /* @__PURE__ */ import_react225.default.createElement(StreamedMessageText2, { message, renderText: renderText2 }) : /* @__PURE__ */ import_react225.default.createElement(MessageText, { message, renderText: renderText2 }), message.mml && /* @__PURE__ */ import_react225.default.createElement(
      MML3,
      {
        actionHandler: handleAction,
        align: isMyMessage() ? "right" : "left",
        source: message.mml
      }
    ), /* @__PURE__ */ import_react225.default.createElement(MessageErrorIcon, null))
  ), showReplyCountButton && /* @__PURE__ */ import_react225.default.createElement(
    MessageRepliesCountButton2,
    {
      onClick: handleOpenThread,
      reply_count: message.reply_count
    }
  ), showMetadata && /* @__PURE__ */ import_react225.default.createElement("div", { className: "str-chat__message-metadata" }, /* @__PURE__ */ import_react225.default.createElement(MessageStatus2, null), !isMyMessage() && !!message.user && /* @__PURE__ */ import_react225.default.createElement("span", { className: "str-chat__message-simple-name" }, message.user.name || message.user.id), /* @__PURE__ */ import_react225.default.createElement(MessageTimestamp2, { customClass: "str-chat__message-simple-timestamp" }), isEdited && /* @__PURE__ */ import_react225.default.createElement("span", { className: "str-chat__mesage-simple-edited" }, t2("Edited")), isEdited && /* @__PURE__ */ import_react225.default.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen }))));
};
var MemoizedMessageSimple = import_react225.default.memo(
  MessageSimpleWithContext,
  areMessageUIPropsEqual
);
var MessageSimple = (props) => {
  const messageContext = useMessageContext("MessageSimple");
  return /* @__PURE__ */ import_react225.default.createElement(MemoizedMessageSimple, { ...messageContext, ...props });
};

// src/components/Message/Message.tsx
var MessageWithContext = (props) => {
  const {
    canPin,
    groupedByUser,
    Message: propMessage,
    message,
    messageActions = Object.keys(MESSAGE_ACTIONS),
    onUserClick: propOnUserClick,
    onUserHover: propOnUserHover,
    userRoles
  } = props;
  const { client, isMessageAIGenerated } = useChatContext("Message");
  const { read } = useChannelStateContext("Message");
  const { Message: contextMessage } = useComponentContext("Message");
  const actionsEnabled = message.type === "regular" && message.status === "received";
  const MessageUIComponent = propMessage ?? contextMessage ?? MessageSimple;
  const { clearEdit, editing, setEdit } = useEditHandler();
  const { onUserClick, onUserHover } = useUserHandler(message, {
    onUserClickHandler: propOnUserClick,
    onUserHoverHandler: propOnUserHover
  });
  const {
    canDelete,
    canEdit,
    canFlag,
    canMarkUnread,
    canMute,
    canQuote,
    canReact,
    canReply,
    isMyMessage
  } = userRoles;
  const messageIsUnread = (0, import_react226.useMemo)(
    () => !!(!isMyMessage && client.user?.id && read && (!read[client.user.id] || message?.created_at && new Date(message.created_at).getTime() > read[client.user.id].last_read.getTime())),
    [client, isMyMessage, message.created_at, read]
  );
  const messageActionsHandler = (0, import_react226.useCallback)(
    () => getMessageActions(messageActions, {
      canDelete,
      canEdit,
      canFlag,
      canMarkUnread,
      canMute,
      canPin,
      canQuote,
      canReact,
      canReply
    }),
    [
      messageActions,
      canDelete,
      canEdit,
      canFlag,
      canMarkUnread,
      canMute,
      canPin,
      canQuote,
      canReact,
      canReply
    ]
  );
  const {
    canPin: canPinPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    messageActions: messageActionsPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onlySenderCanEdit: onlySenderCanEditPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onUserClick: onUserClickPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    onUserHover: onUserHoverPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    userRoles: userRolesPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    ...rest
  } = props;
  const messageContextValue = {
    ...rest,
    actionsEnabled,
    clearEditingState: clearEdit,
    editing,
    getMessageActions: messageActionsHandler,
    handleEdit: setEdit,
    isMessageAIGenerated,
    isMyMessage: () => isMyMessage,
    messageIsUnread,
    onUserClick,
    onUserHover,
    setEditingState: setEdit
  };
  return /* @__PURE__ */ import_react226.default.createElement(MessageProvider, { value: messageContextValue }, /* @__PURE__ */ import_react226.default.createElement(MessageUIComponent, { groupedByUser }));
};
var MemoizedMessage = import_react226.default.memo(
  MessageWithContext,
  areMessagePropsEqual
);
var Message = (props) => {
  const {
    closeReactionSelectorOnClick,
    disableQuotedMessages,
    getDeleteMessageErrorNotification,
    getFetchReactionsErrorNotification,
    getFlagMessageErrorNotification,
    getFlagMessageSuccessNotification,
    getMarkMessageUnreadErrorNotification,
    getMarkMessageUnreadSuccessNotification,
    getMuteUserErrorNotification,
    getMuteUserSuccessNotification,
    getPinMessageErrorNotification,
    message,
    onlySenderCanEdit = false,
    onMentionsClick: propOnMentionsClick,
    onMentionsHover: propOnMentionsHover,
    openThread: propOpenThread,
    pinPermissions,
    reactionDetailsSort,
    retrySendMessage: propRetrySendMessage,
    sortReactionDetails,
    sortReactions
  } = props;
  const { addNotification } = useChannelActionContext("Message");
  const { highlightedMessageId, mutes } = useChannelStateContext("Message");
  const handleAction = useActionHandler(message);
  const handleOpenThread = useOpenThreadHandler(message, propOpenThread);
  const handleReaction = useReactionHandler(message);
  const handleRetry = useRetryHandler(propRetrySendMessage);
  const userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);
  const handleFetchReactions = useReactionsFetcher(message, {
    getErrorNotification: getFetchReactionsErrorNotification,
    notify: addNotification
  });
  const handleDelete2 = useDeleteHandler(message, {
    getErrorNotification: getDeleteMessageErrorNotification,
    notify: addNotification
  });
  const handleFlag = useFlagHandler(message, {
    getErrorNotification: getFlagMessageErrorNotification,
    getSuccessNotification: getFlagMessageSuccessNotification,
    notify: addNotification
  });
  const handleMarkUnread = useMarkUnreadHandler(message, {
    getErrorNotification: getMarkMessageUnreadErrorNotification,
    getSuccessNotification: getMarkMessageUnreadSuccessNotification,
    notify: addNotification
  });
  const handleMute = useMuteHandler(message, {
    getErrorNotification: getMuteUserErrorNotification,
    getSuccessNotification: getMuteUserSuccessNotification,
    notify: addNotification
  });
  const { onMentionsClick, onMentionsHover } = useMentionsHandler(message, {
    onMentionsClick: propOnMentionsClick,
    onMentionsHover: propOnMentionsHover
  });
  const { canPin, handlePin } = usePinHandler(message, pinPermissions, {
    getErrorNotification: getPinMessageErrorNotification,
    notify: addNotification
  });
  const highlighted = highlightedMessageId === message.id;
  return /* @__PURE__ */ import_react226.default.createElement(
    MemoizedMessage,
    {
      additionalMessageInputProps: props.additionalMessageInputProps,
      autoscrollToBottom: props.autoscrollToBottom,
      canPin,
      closeReactionSelectorOnClick,
      customMessageActions: props.customMessageActions,
      disableQuotedMessages: props.disableQuotedMessages,
      endOfGroup: props.endOfGroup,
      firstOfGroup: props.firstOfGroup,
      formatDate: props.formatDate,
      groupedByUser: props.groupedByUser,
      groupStyles: props.groupStyles,
      handleAction,
      handleDelete: handleDelete2,
      handleFetchReactions,
      handleFlag,
      handleMarkUnread,
      handleMute,
      handleOpenThread,
      handlePin,
      handleReaction,
      handleRetry,
      highlighted,
      initialMessage: props.initialMessage,
      lastReceivedId: props.lastReceivedId,
      message,
      Message: props.Message,
      messageActions: props.messageActions,
      messageListRect: props.messageListRect,
      mutes,
      onMentionsClickMessage: onMentionsClick,
      onMentionsHoverMessage: onMentionsHover,
      onUserClick: props.onUserClick,
      onUserHover: props.onUserHover,
      pinPermissions: props.pinPermissions,
      reactionDetailsSort,
      readBy: props.readBy,
      renderText: props.renderText,
      sortReactionDetails,
      sortReactions,
      threadList: props.threadList,
      unsafeHTML: props.unsafeHTML,
      userRoles
    }
  );
};

// src/components/MessageList/GiphyPreviewMessage.tsx
var GiphyPreviewMessage = (props) => {
  const { message } = props;
  return /* @__PURE__ */ import_react227.default.createElement("div", { className: "giphy-preview-message" }, /* @__PURE__ */ import_react227.default.createElement(Message, { message }));
};

// src/components/MessageList/MessageList.tsx
var import_clsx62 = __toESM(require("clsx"));
var import_react246 = __toESM(require("react"));

// src/components/MessageList/hooks/MessageList/useEnrichedMessages.ts
var import_react228 = require("react");

// src/components/MessageList/utils.ts
var import_nanoid9 = require("nanoid");
var processMessages = (params) => {
  const { messages, reviewProcessedMessage, setGiphyPreviewMessage, ...context } = params;
  const {
    enableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    userId
  } = context;
  let unread = false;
  let ephemeralMessagePresent = false;
  let lastDateSeparator;
  const newMessages = [];
  for (let i = 0; i < messages.length; i += 1) {
    const message = messages[i];
    if (hideDeletedMessages && message.type === "deleted") {
      continue;
    }
    if (setGiphyPreviewMessage && message.type === "ephemeral" && message.command === "giphy") {
      ephemeralMessagePresent = true;
      setGiphyPreviewMessage(message);
      continue;
    }
    const changes = [];
    const messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || "";
    const previousMessage = messages[i - 1];
    let prevMessageDate = messageDate;
    if (enableDateSeparator && previousMessage?.created_at && isDate(previousMessage.created_at)) {
      prevMessageDate = previousMessage.created_at.toDateString();
    }
    if (!unread && !hideNewMessageSeparator) {
      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false;
      if (enableDateSeparator && unread && message.user?.id !== userId) {
        changes.push({
          customType: CUSTOM_MESSAGE_TYPE.date,
          date: message.created_at,
          id: makeDateMessageId(message.created_at),
          unread
        });
      }
    }
    if (enableDateSeparator && (i === 0 || // always put date separator before the first message
    messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date
    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date
    hideDeletedMessages && previousMessage?.type === "deleted" && lastDateSeparator !== messageDate) && changes[changes.length - 1]?.customType !== CUSTOM_MESSAGE_TYPE.date) {
      lastDateSeparator = messageDate;
      changes.push(
        {
          customType: CUSTOM_MESSAGE_TYPE.date,
          date: message.created_at,
          id: makeDateMessageId(message.created_at)
        },
        message
      );
    } else {
      changes.push(message);
    }
    newMessages.push(
      ...reviewProcessedMessage?.({
        changes,
        context,
        index: i,
        messages,
        processedMessages: newMessages
      }) || changes
    );
  }
  if (setGiphyPreviewMessage && !ephemeralMessagePresent) {
    setGiphyPreviewMessage(void 0);
  }
  return newMessages;
};
var makeDateMessageId = (date) => {
  let idSuffix;
  try {
    idSuffix = !date ? (0, import_nanoid9.nanoid)() : date instanceof Date ? date.toISOString() : date;
  } catch (e2) {
    idSuffix = (0, import_nanoid9.nanoid)();
  }
  return `${CUSTOM_MESSAGE_TYPE.date}-${idSuffix}`;
};
var getLastReceived = (messages) => {
  for (let i = messages.length - 1; i > 0; i -= 1) {
    if (messages[i].status === "received") {
      return messages[i].id;
    }
  }
  return null;
};
var getReadStates = (messages, read = {}, returnAllReadData) => {
  const readData = {};
  Object.values(read).forEach((readState) => {
    if (!readState.last_read) return;
    let userLastReadMsgId;
    messages.forEach((msg) => {
      if (msg.created_at && msg.created_at < readState.last_read) {
        userLastReadMsgId = msg.id;
        if (returnAllReadData) {
          if (!readData[userLastReadMsgId]) {
            readData[userLastReadMsgId] = [];
          }
          readData[userLastReadMsgId].push(readState.user);
        }
      }
    });
    if (userLastReadMsgId && !returnAllReadData) {
      if (!readData[userLastReadMsgId]) {
        readData[userLastReadMsgId] = [];
      }
      readData[userLastReadMsgId].push(readState.user);
    }
  });
  return readData;
};
var insertIntro = (messages, headerPosition) => {
  const newMessages = messages;
  const intro = {
    customType: CUSTOM_MESSAGE_TYPE.intro
  };
  if (!headerPosition) {
    newMessages.unshift(intro);
    return newMessages;
  }
  if (!newMessages.length) {
    newMessages.unshift(intro);
    return newMessages;
  }
  for (let i = 0; i < messages.length; i += 1) {
    const message = messages[i];
    const messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;
    const nextMessage = messages[i + 1];
    const nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null;
    if (messageTime && messageTime < headerPosition) {
      if (nextMessageTime && nextMessageTime < headerPosition) {
        if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date)
          continue;
        if (!nextMessageTime) {
          newMessages.push(intro);
          return newMessages;
        }
      } else {
        newMessages.splice(i + 1, 0, intro);
        return newMessages;
      }
    }
  }
  return newMessages;
};
var getGroupStyles = (message, previousMessage, nextMessage, noGroupByUser, maxTimeBetweenGroupedMessages) => {
  if (message.customType === CUSTOM_MESSAGE_TYPE.date) return "";
  if (message.customType === CUSTOM_MESSAGE_TYPE.intro) return "";
  if (noGroupByUser || message.attachments?.length !== 0) return "single";
  const isTopMessage = !previousMessage || previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro || previousMessage.customType === CUSTOM_MESSAGE_TYPE.date || previousMessage.type === "system" || previousMessage.type === "error" || previousMessage.attachments?.length !== 0 || message.user?.id !== previousMessage.user?.id || previousMessage.deleted_at || message.reaction_groups && Object.keys(message.reaction_groups).length > 0 || isMessageEdited(previousMessage) || maxTimeBetweenGroupedMessages !== void 0 && previousMessage.created_at && message.created_at && new Date(message.created_at).getTime() - new Date(previousMessage.created_at).getTime() > maxTimeBetweenGroupedMessages;
  const isBottomMessage = !nextMessage || nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro || nextMessage.customType === CUSTOM_MESSAGE_TYPE.date || nextMessage.type === "system" || nextMessage.type === "error" || nextMessage.attachments?.length !== 0 || message.user?.id !== nextMessage.user?.id || nextMessage.deleted_at || nextMessage.reaction_groups && Object.keys(nextMessage.reaction_groups).length > 0 || isMessageEdited(message) || maxTimeBetweenGroupedMessages !== void 0 && nextMessage.created_at && message.created_at && new Date(nextMessage.created_at).getTime() - new Date(message.created_at).getTime() > maxTimeBetweenGroupedMessages;
  if (!isTopMessage && !isBottomMessage) {
    if (message.deleted_at || message.type === "error") return "single";
    return "middle";
  }
  if (isBottomMessage) {
    if (isTopMessage || message.deleted_at || message.type === "error") return "single";
    return "bottom";
  }
  if (isTopMessage) return "top";
  return "";
};
var hasMoreMessagesProbably = (returnedCountMessages, limit) => returnedCountMessages >= limit;
var hasNotMoreMessages = (returnedCountMessages, limit) => returnedCountMessages < limit;
function isDateSeparatorMessage(message) {
  return message.customType === CUSTOM_MESSAGE_TYPE.date && !!message.date && isDate(message.date);
}
var getIsFirstUnreadMessage = ({
  firstUnreadMessageId,
  isFirstMessage,
  lastReadDate,
  lastReadMessageId,
  message,
  previousMessage,
  unreadMessageCount = 0
}) => {
  if (message.parent_id) return false;
  const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();
  const lastReadTimestamp = lastReadDate?.getTime();
  const messageIsUnread = !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp;
  const previousMessageIsLastRead = !!lastReadMessageId && lastReadMessageId === previousMessage?.id;
  return firstUnreadMessageId === message.id || !!unreadMessageCount && messageIsUnread && (isFirstMessage || previousMessageIsLastRead);
};

// src/components/MessageList/hooks/MessageList/useEnrichedMessages.ts
var useEnrichedMessages = (args) => {
  const {
    channel,
    disableDateSeparator,
    groupStyles,
    headerPosition,
    hideDeletedMessages,
    hideNewMessageSeparator,
    maxTimeBetweenGroupedMessages,
    messages,
    noGroupByUser,
    reviewProcessedMessage
  } = args;
  const { client } = useChatContext("useEnrichedMessages");
  const { HeaderComponent } = useComponentContext("useEnrichedMessages");
  const lastRead = (0, import_react228.useMemo)(() => channel.lastRead?.(), [channel]);
  const enableDateSeparator = !disableDateSeparator;
  let messagesWithDates = !enableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator ? messages : processMessages({
    enableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    reviewProcessedMessage,
    userId: client.userID || ""
  });
  if (HeaderComponent) {
    messagesWithDates = insertIntro(messagesWithDates, headerPosition);
  }
  const groupStylesFn = groupStyles || getGroupStyles;
  const messageGroupStyles = (0, import_react228.useMemo)(
    () => messagesWithDates.reduce((acc, message, i) => {
      const style = groupStylesFn(
        message,
        messagesWithDates[i - 1],
        messagesWithDates[i + 1],
        noGroupByUser,
        maxTimeBetweenGroupedMessages
      );
      if (style) acc[message.id] = style;
      return acc;
    }, {}),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [maxTimeBetweenGroupedMessages, messagesWithDates, noGroupByUser]
  );
  return { messageGroupStyles, messages: messagesWithDates };
};

// src/components/MessageList/hooks/MessageList/useMessageListElements.tsx
var import_react230 = require("react");

// src/components/MessageList/hooks/useLastReadData.ts
var import_react229 = require("react");
var useLastReadData = (props) => {
  const { messages, read, returnAllReadData, userID } = props;
  return (0, import_react229.useMemo)(
    () => getReadStates(
      messages.filter(({ user }) => user?.id === userID),
      read,
      returnAllReadData
    ),
    [messages, read, returnAllReadData, userID]
  );
};

// src/components/MessageList/hooks/MessageList/useMessageListElements.tsx
var useMessageListElements = (props) => {
  const {
    channelUnreadUiState,
    enrichedMessages,
    internalMessageProps,
    messageGroupStyles,
    read,
    renderMessages,
    returnAllReadData,
    threadList
  } = props;
  const { client, customClasses } = useChatContext(
    "useMessageListElements"
  );
  const components = useComponentContext("useMessageListElements");
  const readData = useLastReadData({
    messages: enrichedMessages,
    read,
    returnAllReadData,
    userID: client.userID
  });
  const lastReceivedMessageId = (0, import_react230.useMemo)(
    () => getLastReceived(enrichedMessages),
    [enrichedMessages]
  );
  const elements = (0, import_react230.useMemo)(
    () => renderMessages({
      channelUnreadUiState,
      components,
      customClasses,
      lastReceivedMessageId,
      messageGroupStyles,
      messages: enrichedMessages,
      readData,
      sharedMessageProps: { ...internalMessageProps, threadList }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      enrichedMessages,
      internalMessageProps,
      lastReceivedMessageId,
      messageGroupStyles,
      channelUnreadUiState,
      readData,
      renderMessages,
      threadList
    ]
  );
  return elements;
};

// src/components/MessageList/hooks/MessageList/useMessageListScrollManager.ts
var import_react231 = require("react");
function useMessageListScrollManager(params) {
  const {
    loadMoreScrollThreshold,
    onScrollBy,
    scrollContainerMeasures,
    scrolledUpThreshold,
    scrollToBottom,
    showNewMessages
  } = params;
  const { client } = useChatContext("useMessageListScrollManager");
  const measures = (0, import_react231.useRef)({
    offsetHeight: 0,
    scrollHeight: 0
  });
  const messages = (0, import_react231.useRef)(void 0);
  const scrollTop = (0, import_react231.useRef)(0);
  (0, import_react231.useLayoutEffect)(() => {
    const prevMeasures = measures.current;
    const prevMessages = messages.current;
    const newMessages = params.messages;
    const lastNewMessage = newMessages[newMessages.length - 1] || {};
    const lastPrevMessage = prevMessages?.[prevMessages.length - 1];
    const newMeasures = scrollContainerMeasures();
    const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;
    if (typeof prevMessages !== "undefined") {
      if (prevMessages.length < newMessages.length) {
        if (lastPrevMessage?.id === lastNewMessage.id) {
          if (scrollTop.current < loadMoreScrollThreshold) {
            const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;
            onScrollBy(listHeightDelta);
          }
        } else {
          const lastMessageIsFromCurrentUser = lastNewMessage.user?.id === client.userID;
          if (lastMessageIsFromCurrentUser || wasAtBottom) {
            scrollToBottom();
          } else {
            showNewMessages();
          }
        }
      } else {
        const hasNewReactions = lastPrevMessage?.latest_reactions?.length !== lastNewMessage.latest_reactions?.length;
        const hasNewReplies = lastPrevMessage?.reply_count !== lastNewMessage.reply_count;
        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {
          scrollToBottom();
        }
      }
    }
    messages.current = newMessages;
    measures.current = newMeasures;
  }, [measures, messages, params.messages]);
  return (scrollTopValue) => {
    scrollTop.current = scrollTopValue;
  };
}

// src/components/MessageList/hooks/MessageList/useScrollLocationLogic.tsx
var import_react232 = require("react");
var useScrollLocationLogic = (params) => {
  const {
    hasMoreNewer,
    listElement,
    loadMoreScrollThreshold,
    messages = [],
    scrolledUpThreshold = 200,
    suppressAutoscroll
  } = params;
  const [hasNewMessages, setHasNewMessages] = (0, import_react232.useState)(false);
  const [wrapperRect, setWrapperRect] = (0, import_react232.useState)();
  const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = (0, import_react232.useState)(true);
  const closeToBottom = (0, import_react232.useRef)(false);
  const closeToTop = (0, import_react232.useRef)(false);
  const scrollToBottom = (0, import_react232.useCallback)(() => {
    if (!listElement?.scrollTo || hasMoreNewer || suppressAutoscroll) {
      return;
    }
    listElement.scrollTo({
      top: listElement.scrollHeight
    });
    setHasNewMessages(false);
  }, [listElement, hasMoreNewer, suppressAutoscroll]);
  (0, import_react232.useLayoutEffect)(() => {
    if (listElement) {
      setWrapperRect(listElement.getBoundingClientRect());
      scrollToBottom();
    }
  }, [listElement, hasMoreNewer]);
  const updateScrollTop = useMessageListScrollManager({
    loadMoreScrollThreshold,
    messages,
    onScrollBy: (scrollBy) => {
      listElement?.scrollBy({ top: scrollBy });
    },
    scrollContainerMeasures: () => ({
      offsetHeight: listElement?.offsetHeight || 0,
      scrollHeight: listElement?.scrollHeight || 0
    }),
    scrolledUpThreshold,
    scrollToBottom,
    showNewMessages: () => setHasNewMessages(true)
  });
  const onScroll = (0, import_react232.useCallback)(
    (event) => {
      const element4 = event.target;
      const scrollTop = element4.scrollTop;
      updateScrollTop(scrollTop);
      const offsetHeight = element4.offsetHeight;
      const scrollHeight = element4.scrollHeight;
      const prevCloseToBottom = closeToBottom.current;
      closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;
      closeToTop.current = scrollTop < scrolledUpThreshold;
      if (closeToBottom.current) {
        setHasNewMessages(false);
      }
      if (prevCloseToBottom && !closeToBottom.current) {
        setIsMessageListScrolledToBottom(false);
      } else if (!prevCloseToBottom && closeToBottom.current) {
        setIsMessageListScrolledToBottom(true);
      }
    },
    [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]
  );
  return {
    hasNewMessages,
    isMessageListScrolledToBottom,
    onScroll,
    scrollToBottom,
    wrapperRect
  };
};

// src/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.ts
var import_react235 = require("react");

// src/components/MessageList/MessageListMainPanel.tsx
var import_react233 = __toESM(require("react"));
var MESSAGE_LIST_MAIN_PANEL_CLASS = "str-chat__main-panel-inner str-chat__message-list-main-panel";
var MessageListMainPanel = ({ children }) => /* @__PURE__ */ import_react233.default.createElement("div", { className: MESSAGE_LIST_MAIN_PANEL_CLASS }, children);

// src/components/MessageList/UnreadMessagesSeparator.tsx
var import_react234 = __toESM(require("react"));
var UNREAD_MESSAGE_SEPARATOR_CLASS = "str-chat__unread-messages-separator";
var UnreadMessagesSeparator = ({
  showCount,
  unreadCount
}) => {
  const { t: t2 } = useTranslationContext("UnreadMessagesSeparator");
  return /* @__PURE__ */ import_react234.default.createElement(
    "div",
    {
      className: UNREAD_MESSAGE_SEPARATOR_CLASS,
      "data-testid": "unread-messages-separator"
    },
    unreadCount && showCount ? t2("unreadMessagesSeparatorText", { count: unreadCount }) : t2("Unread messages")
  );
};

// src/components/MessageList/hooks/MessageList/useUnreadMessagesNotification.ts
var targetScrolledAboveVisibleContainerArea = (element4) => {
  const { bottom: targetBottom } = element4.getBoundingClientRect();
  return targetBottom < 0;
};
var targetScrolledBelowVisibleContainerArea = (element4, container) => {
  const { top: targetTop } = element4.getBoundingClientRect();
  const { top: containerBottom } = container.getBoundingClientRect();
  return targetTop > containerBottom;
};
var useUnreadMessagesNotification = ({
  isMessageListScrolledToBottom,
  showAlways,
  unreadCount
}) => {
  const { messages } = useChannelStateContext("UnreadMessagesNotification");
  const [show, setShow] = (0, import_react235.useState)(false);
  const isScrolledAboveTargetTop = (0, import_react235.useRef)(false);
  const intersectionObserverIsSupported = typeof IntersectionObserver !== "undefined";
  (0, import_react235.useEffect)(() => {
    if (!(unreadCount && intersectionObserverIsSupported)) {
      setShow(false);
      return;
    }
    const [msgListPanel] = document.getElementsByClassName(MESSAGE_LIST_MAIN_PANEL_CLASS);
    if (!msgListPanel) return;
    const [observedTarget] = document.getElementsByClassName(
      UNREAD_MESSAGE_SEPARATOR_CLASS
    );
    if (!observedTarget) {
      setShow(true);
      return;
    }
    const scrolledBelowSeparator = targetScrolledAboveVisibleContainerArea(observedTarget);
    const scrolledAboveSeparator = targetScrolledBelowVisibleContainerArea(
      observedTarget,
      msgListPanel
    );
    setShow(
      showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator
    );
    const observer = new IntersectionObserver(
      (elements) => {
        if (!elements.length) return;
        const { boundingClientRect, isIntersecting } = elements[0];
        if (isIntersecting) {
          setShow(false);
          return;
        }
        const separatorIsAboveContainerTop = boundingClientRect.bottom < 0;
        setShow(showAlways || separatorIsAboveContainerTop);
        isScrolledAboveTargetTop.current = separatorIsAboveContainerTop;
      },
      { root: msgListPanel }
    );
    observer.observe(observedTarget);
    return () => {
      observer.disconnect();
    };
  }, [
    intersectionObserverIsSupported,
    isMessageListScrolledToBottom,
    messages,
    showAlways,
    unreadCount
  ]);
  (0, import_react235.useEffect)(() => {
    if (unreadCount && isMessageListScrolledToBottom && isScrolledAboveTargetTop.current) {
      setShow(true);
      isScrolledAboveTargetTop.current = false;
    }
  }, [isMessageListScrolledToBottom, unreadCount]);
  return { show: show && intersectionObserverIsSupported };
};

// src/components/MessageList/hooks/useMarkRead.ts
var import_react236 = require("react");
var hasReadLastMessage = (channel, userId) => {
  const latestMessageIdInChannel = channel.state.latestMessages.slice(-1)[0]?.id;
  const lastReadMessageIdServer = channel.state.read[userId]?.last_read_message_id;
  return latestMessageIdInChannel === lastReadMessageIdServer;
};
var useMarkRead = ({
  isMessageListScrolledToBottom,
  messageListIsThread,
  wasMarkedUnread
}) => {
  const { client } = useChatContext("useMarkRead");
  const { markRead, setChannelUnreadUiState } = useChannelActionContext("useMarkRead");
  const { channel } = useChannelStateContext("useMarkRead");
  (0, import_react236.useEffect)(() => {
    const shouldMarkRead = () => !document.hidden && !wasMarkedUnread && !messageListIsThread && isMessageListScrolledToBottom && client.user?.id && !hasReadLastMessage(channel, client.user.id);
    const onVisibilityChange = () => {
      if (shouldMarkRead()) markRead();
    };
    const handleMessageNew = (event) => {
      const mainChannelUpdated = !event.message?.parent_id || event.message?.show_in_channel;
      if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {
        setChannelUnreadUiState((prev) => {
          const previousUnreadCount = prev?.unread_messages ?? 0;
          const previousLastMessage = getPreviousLastMessage(
            channel.state.messages,
            event.message
          );
          return {
            ...prev || {},
            last_read: prev?.last_read ?? (previousUnreadCount === 0 && previousLastMessage?.created_at ? new Date(previousLastMessage.created_at) : /* @__PURE__ */ new Date(0)),
            // not having information about the last read message means the whole channel is unread,
            unread_messages: previousUnreadCount + 1
          };
        });
      } else if (mainChannelUpdated && shouldMarkRead()) {
        markRead();
      }
    };
    channel.on("message.new", handleMessageNew);
    document.addEventListener("visibilitychange", onVisibilityChange);
    if (shouldMarkRead()) {
      markRead();
    }
    return () => {
      channel.off("message.new", handleMessageNew);
      document.removeEventListener("visibilitychange", onVisibilityChange);
    };
  }, [
    channel,
    client,
    isMessageListScrolledToBottom,
    markRead,
    messageListIsThread,
    setChannelUnreadUiState,
    wasMarkedUnread
  ]);
};
function getPreviousLastMessage(messages, newMessage) {
  if (!newMessage) return;
  let previousLastMessage;
  for (let i = messages.length - 1; i >= 0; i--) {
    const msg = messages[i];
    if (!msg?.id) break;
    if (msg.id !== newMessage.id) {
      previousLastMessage = msg;
      break;
    }
  }
  return previousLastMessage;
}

// src/components/MessageList/MessageNotification.tsx
var import_react237 = __toESM(require("react"));
var UnMemoizedMessageNotification = (props) => {
  const { children, onClick, showNotification = true } = props;
  if (!showNotification) return null;
  return /* @__PURE__ */ import_react237.default.createElement(
    "button",
    {
      "aria-live": "polite",
      className: `str-chat__message-notification`,
      "data-testid": "message-notification",
      onClick
    },
    children
  );
};
var MessageNotification = import_react237.default.memo(
  UnMemoizedMessageNotification
);

// src/components/MessageList/MessageListNotifications.tsx
var import_react238 = __toESM(require("react"));
var MessageListNotifications = (props) => {
  const {
    hasNewMessages,
    isMessageListScrolledToBottom,
    isNotAtLatestMessageSet,
    MessageNotification: MessageNotification2,
    notifications,
    scrollToBottom,
    threadList,
    unreadCount
  } = props;
  const { t: t2 } = useTranslationContext("MessageListNotifications");
  return /* @__PURE__ */ import_react238.default.createElement("div", { className: "str-chat__list-notifications" }, notifications.map((notification) => /* @__PURE__ */ import_react238.default.createElement(CustomNotification, { active: true, key: notification.id, type: notification.type }, notification.text)), /* @__PURE__ */ import_react238.default.createElement(ConnectionStatus, null), /* @__PURE__ */ import_react238.default.createElement(
    MessageNotification2,
    {
      isMessageListScrolledToBottom,
      onClick: scrollToBottom,
      showNotification: hasNewMessages || isNotAtLatestMessageSet,
      threadList,
      unreadCount
    },
    isNotAtLatestMessageSet ? t2("Latest Messages") : t2("New Messages!")
  ));
};

// src/components/MessageList/UnreadMessagesNotification.tsx
var import_react240 = __toESM(require("react"));

// src/components/MessageList/icons.tsx
var import_react239 = __toESM(require("react"));
var ArrowDown = ({ className, color: color2 }) => /* @__PURE__ */ import_react239.default.createElement(
  "svg",
  {
    className,
    "data-testid": "arrow-down",
    fill: "none",
    height: "24",
    viewBox: "0 0 24 24",
    width: "24",
    xmlns: "http://www.w3.org/2000/svg"
  },
  /* @__PURE__ */ import_react239.default.createElement(
    "path",
    {
      d: "M7.41 8.29504L12 12.875L16.59 8.29504L18 9.70504L12 15.705L6 9.70504L7.41 8.29504Z",
      fill: color2 || "var(--primary-color)"
    }
  )
);
var CloseIcon2 = () => /* @__PURE__ */ import_react239.default.createElement("svg", { fill: "currentColor", viewBox: "0 0 14 13", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react239.default.createElement("path", { d: "M1.32227 12.3408C0.944336 11.9629 0.953125 11.3213 1.32227 10.9521L5.60254 6.66309L1.32227 2.38281C0.953125 2.01367 0.944336 1.37207 1.32227 0.994141C1.7002 0.616211 2.3418 0.625 2.71094 0.985352L7 5.27441L11.2803 0.994141C11.6494 0.625 12.291 0.616211 12.6689 0.994141C13.0469 1.37207 13.0381 2.01367 12.6689 2.38281L8.38867 6.66309L12.6689 10.9521C13.0381 11.3213 13.0469 11.9629 12.6689 12.3408C12.291 12.7188 11.6494 12.71 11.2803 12.3408L7 8.06055L2.71094 12.3408C2.3418 12.71 1.7002 12.7188 1.32227 12.3408Z" }));

// src/components/MessageList/UnreadMessagesNotification.tsx
var UnreadMessagesNotification = ({
  queryMessageLimit,
  showCount,
  unreadCount
}) => {
  const { jumpToFirstUnreadMessage, markRead } = useChannelActionContext(
    "UnreadMessagesNotification"
  );
  const { t: t2 } = useTranslationContext("UnreadMessagesNotification");
  return /* @__PURE__ */ import_react240.default.createElement(
    "div",
    {
      className: "str-chat__unread-messages-notification",
      "data-testid": "unread-messages-notification"
    },
    /* @__PURE__ */ import_react240.default.createElement("button", { onClick: () => jumpToFirstUnreadMessage(queryMessageLimit) }, unreadCount && showCount ? t2("{{count}} unread", { count: unreadCount ?? 0 }) : t2("Unread messages")),
    /* @__PURE__ */ import_react240.default.createElement("button", { onClick: () => markRead() }, /* @__PURE__ */ import_react240.default.createElement(CloseIcon2, null))
  );
};

// src/components/InfiniteScrollPaginator/InfiniteScroll.tsx
var import_react241 = __toESM(require("react"));
var mousewheelListener2 = (event) => {
  if (event instanceof WheelEvent && event.deltaY === 1) {
    event.preventDefault();
  }
};
var InfiniteScroll = (props) => {
  const {
    children,
    element: element4 = "div",
    hasMore,
    hasMoreNewer,
    hasNextPage,
    hasPreviousPage,
    head,
    initialLoad = true,
    isLoading,
    listenToScroll,
    loader,
    loadMore,
    loadMoreNewer,
    loadNextPage,
    loadPreviousPage,
    threshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD,
    useCapture = false,
    ...elementProps
  } = props;
  const loadNextPageFn = loadNextPage || loadMoreNewer;
  const loadPreviousPageFn = loadPreviousPage || loadMore;
  const hasNextPageFlag = hasNextPage || hasMoreNewer;
  const hasPreviousPageFlag = hasPreviousPage || hasMore;
  const scrollComponent = (0, import_react241.useRef)(void 0);
  const previousOffset = (0, import_react241.useRef)(void 0);
  const previousReverseOffset = (0, import_react241.useRef)(void 0);
  const scrollListenerRef = (0, import_react241.useRef)(void 0);
  scrollListenerRef.current = () => {
    const element5 = scrollComponent.current;
    if (!element5 || element5.offsetParent === null) {
      return;
    }
    const parentElement = element5.parentElement;
    const offset = element5.scrollHeight - parentElement.scrollTop - parentElement.clientHeight;
    const reverseOffset = parentElement.scrollTop;
    if (listenToScroll) {
      listenToScroll(offset, reverseOffset, threshold);
    }
    if (isLoading) return;
    if (previousOffset.current === offset && previousReverseOffset.current === reverseOffset)
      return;
    previousOffset.current = offset;
    previousReverseOffset.current = reverseOffset;
    if (reverseOffset < Number(threshold) && typeof loadPreviousPageFn === "function" && hasPreviousPageFlag) {
      loadPreviousPageFn();
    }
    if (offset < Number(threshold) && typeof loadNextPageFn === "function" && hasNextPageFlag) {
      loadNextPageFn();
    }
  };
  (0, import_react241.useEffect)(() => {
    deprecationAndReplacementWarning(
      [
        [{ hasMoreNewer }, { hasNextPage }],
        [{ loadMoreNewer }, { loadNextPage }],
        [{ hasMore }, { hasPreviousPage }],
        [{ loadMore }, { loadPreviousPage }]
      ],
      "InfiniteScroll"
    );
  }, []);
  (0, import_react241.useEffect)(() => {
    const scrollElement = scrollComponent.current?.parentNode;
    if (!scrollElement) return;
    const scrollListener = () => scrollListenerRef.current?.();
    scrollElement.addEventListener("scroll", scrollListener, useCapture);
    scrollElement.addEventListener("resize", scrollListener, useCapture);
    scrollListener();
    return () => {
      scrollElement.removeEventListener("scroll", scrollListener, useCapture);
      scrollElement.removeEventListener("resize", scrollListener, useCapture);
    };
  }, [initialLoad, useCapture]);
  (0, import_react241.useEffect)(() => {
    const scrollElement = scrollComponent.current?.parentNode;
    if (scrollElement) {
      scrollElement.addEventListener("wheel", mousewheelListener2, { passive: false });
    }
    return () => {
      if (scrollElement) {
        scrollElement.removeEventListener("wheel", mousewheelListener2, useCapture);
      }
    };
  }, [useCapture]);
  const attributes = {
    ...elementProps,
    ref: (element5) => {
      scrollComponent.current = element5;
    }
  };
  const childrenArray = [loader, children];
  if (head) {
    childrenArray.unshift(head);
  }
  return import_react241.default.createElement(element4, attributes, childrenArray);
};

// src/components/TypingIndicator/TypingIndicator.tsx
var import_react242 = __toESM(require("react"));
var import_clsx61 = __toESM(require("clsx"));
var useJoinTypingUsers = (names) => {
  const { t: t2 } = useTranslationContext();
  if (!names.length) return null;
  const [name2, ...rest] = names;
  if (names.length === 1)
    return t2("{{ user }} is typing...", {
      user: name2
    });
  const MAX_JOINED_USERS = 3;
  if (names.length > MAX_JOINED_USERS)
    return t2("{{ users }} and more are typing...", {
      users: names.slice(0, MAX_JOINED_USERS).join(", ").trim()
    });
  return t2("{{ users }} and {{ user }} are typing...", {
    user: name2,
    users: rest.join(", ").trim()
  });
};
var UnMemoizedTypingIndicator = (props) => {
  const { threadList } = props;
  const { channelConfig, thread } = useChannelStateContext("TypingIndicator");
  const { client } = useChatContext("TypingIndicator");
  const { typing = {} } = useTypingContext("TypingIndicator");
  const typingInChannel = !threadList ? Object.values(typing).filter(
    ({ parent_id, user }) => user?.id !== client.user?.id && !parent_id
  ) : [];
  const typingInThread = threadList ? Object.values(typing).filter(
    ({ parent_id, user }) => user?.id !== client.user?.id && parent_id === thread?.id
  ) : [];
  const typingUserList = (threadList ? typingInThread : typingInChannel).map(({ user }) => user?.name || user?.id).filter(Boolean);
  const joinedTypingUsers = useJoinTypingUsers(typingUserList);
  const isTypingActive = threadList && typingInThread.length || !threadList && typingInChannel.length;
  if (channelConfig?.typing_events === false) {
    return null;
  }
  if (!isTypingActive) return null;
  return /* @__PURE__ */ import_react242.default.createElement(
    "div",
    {
      className: (0, import_clsx61.default)("str-chat__typing-indicator", {
        "str-chat__typing-indicator--typing": isTypingActive
      }),
      "data-testid": "typing-indicator"
    },
    /* @__PURE__ */ import_react242.default.createElement("div", { className: "str-chat__typing-indicator__dots" }, /* @__PURE__ */ import_react242.default.createElement("span", { className: "str-chat__typing-indicator__dot" }), /* @__PURE__ */ import_react242.default.createElement("span", { className: "str-chat__typing-indicator__dot" }), /* @__PURE__ */ import_react242.default.createElement("span", { className: "str-chat__typing-indicator__dot" })),
    /* @__PURE__ */ import_react242.default.createElement("div", { className: "str-chat__typing-indicator__users", "data-testid": "typing-users" }, joinedTypingUsers)
  );
};
var TypingIndicator = import_react242.default.memo(
  UnMemoizedTypingIndicator
);

// src/components/MessageList/renderMessages.tsx
var import_react245 = __toESM(require("react"));

// src/components/DateSeparator/DateSeparator.tsx
var import_react243 = __toESM(require("react"));
var UnMemoizedDateSeparator = (props) => {
  const {
    calendar: calendar3,
    date: messageCreatedAt,
    formatDate,
    position: position4 = "right",
    unread,
    ...restTimestampFormatterOptions
  } = props;
  const { t: t2, tDateTimeParser } = useTranslationContext("DateSeparator");
  const formattedDate = getDateString({
    calendar: calendar3,
    ...restTimestampFormatterOptions,
    formatDate,
    messageCreatedAt,
    t: t2,
    tDateTimeParser,
    timestampTranslationKey: "timestamp/DateSeparator"
  });
  return /* @__PURE__ */ import_react243.default.createElement("div", { className: "str-chat__date-separator", "data-testid": "date-separator" }, (position4 === "right" || position4 === "center") && /* @__PURE__ */ import_react243.default.createElement("hr", { className: "str-chat__date-separator-line" }), /* @__PURE__ */ import_react243.default.createElement("div", { className: "str-chat__date-separator-date" }, unread ? `${t2("New")} - ${formattedDate}` : formattedDate), (position4 === "left" || position4 === "center") && /* @__PURE__ */ import_react243.default.createElement("hr", { className: "str-chat__date-separator-line" }));
};
var DateSeparator = import_react243.default.memo(
  UnMemoizedDateSeparator
);

// src/components/EventComponent/EventComponent.tsx
var import_react244 = __toESM(require("react"));
var UnMemoizedEventComponent = (props) => {
  const { Avatar: Avatar2 = Avatar, calendar: calendar3, calendarFormats, format, message } = props;
  const { t: t2, tDateTimeParser } = useTranslationContext("EventComponent");
  const { created_at = "", event, text: text8, type } = message;
  const getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser };
  if (type === "system")
    return /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__message--system", "data-testid": "message-system" }, /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__message--system__text" }, /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__message--system__line" }), /* @__PURE__ */ import_react244.default.createElement("p", null, text8), /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__message--system__line" })), /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__message--system__date" }, /* @__PURE__ */ import_react244.default.createElement("strong", null, getDateString({
      ...getDateOptions,
      calendar: calendar3,
      calendarFormats,
      format,
      t: t2,
      timestampTranslationKey: "timestamp/SystemMessage"
    }))));
  if (event?.type === "member.removed" || event?.type === "member.added") {
    const name2 = event.user?.name || event.user?.id;
    const sentence = `${name2} ${event.type === "member.added" ? "has joined the chat" : "was removed from the chat"}`;
    return /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__event-component__channel-event" }, /* @__PURE__ */ import_react244.default.createElement(Avatar2, { image: event.user?.image, name: name2, user: event.user }), /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__event-component__channel-event__content" }, /* @__PURE__ */ import_react244.default.createElement("em", { className: "str-chat__event-component__channel-event__sentence" }, sentence), /* @__PURE__ */ import_react244.default.createElement("div", { className: "str-chat__event-component__channel-event__date" }, getDateString({ ...getDateOptions, format: "LT" }))));
  }
  return null;
};
var EventComponent = import_react244.default.memo(
  UnMemoizedEventComponent
);

// src/components/MessageList/renderMessages.tsx
function defaultRenderMessages({
  channelUnreadUiState,
  components,
  customClasses,
  lastReceivedMessageId: lastReceivedId,
  messageGroupStyles,
  messages,
  readData,
  sharedMessageProps: messageProps
}) {
  const {
    DateSeparator: DateSeparator2 = DateSeparator,
    HeaderComponent,
    MessageSystem = EventComponent,
    UnreadMessagesSeparator: UnreadMessagesSeparator2 = UnreadMessagesSeparator
  } = components;
  const renderedMessages = [];
  let firstMessage;
  let previousMessage = void 0;
  for (let index3 = 0; index3 < messages.length; index3++) {
    const message = messages[index3];
    if (isDateSeparatorMessage(message)) {
      renderedMessages.push(
        /* @__PURE__ */ import_react245.default.createElement("li", { key: `${message.date.toISOString()}-i` }, /* @__PURE__ */ import_react245.default.createElement(
          DateSeparator2,
          {
            date: message.date,
            formatDate: messageProps.formatDate,
            unread: message.unread
          }
        ))
      );
    } else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {
      renderedMessages.push(
        /* @__PURE__ */ import_react245.default.createElement("li", { key: "intro" }, /* @__PURE__ */ import_react245.default.createElement(HeaderComponent, null))
      );
    } else if (message.type === "system") {
      renderedMessages.push(
        /* @__PURE__ */ import_react245.default.createElement(
          "li",
          {
            "data-message-id": message.id,
            key: message.id || message.created_at
          },
          /* @__PURE__ */ import_react245.default.createElement(MessageSystem, { message })
        )
      );
    } else {
      if (!firstMessage) {
        firstMessage = message;
      }
      const groupStyles = messageGroupStyles[message.id] || "";
      const messageClass = customClasses?.message || `str-chat__li str-chat__li--${groupStyles}`;
      const isFirstUnreadMessage = getIsFirstUnreadMessage({
        firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,
        isFirstMessage: !!firstMessage?.id && firstMessage.id === message.id,
        lastReadDate: channelUnreadUiState?.last_read,
        lastReadMessageId: channelUnreadUiState?.last_read_message_id,
        message,
        previousMessage,
        unreadMessageCount: channelUnreadUiState?.unread_messages
      });
      renderedMessages.push(
        /* @__PURE__ */ import_react245.default.createElement(import_react245.Fragment, { key: message.id || message.created_at }, isFirstUnreadMessage && UnreadMessagesSeparator2 && /* @__PURE__ */ import_react245.default.createElement("li", { className: "str-chat__li str-chat__unread-messages-separator-wrapper" }, /* @__PURE__ */ import_react245.default.createElement(
          UnreadMessagesSeparator2,
          {
            unreadCount: channelUnreadUiState?.unread_messages
          }
        )), /* @__PURE__ */ import_react245.default.createElement(
          "li",
          {
            className: messageClass,
            "data-message-id": message.id,
            "data-testid": messageClass
          },
          /* @__PURE__ */ import_react245.default.createElement(
            Message,
            {
              groupStyles: [groupStyles],
              lastReceivedId,
              message,
              readBy: readData[message.id] || [],
              ...messageProps
            }
          )
        ))
      );
      previousMessage = message;
    }
  }
  return renderedMessages;
}

// src/components/MessageList/MessageList.tsx
var MessageListWithContext = (props) => {
  const {
    channel,
    channelUnreadUiState,
    disableDateSeparator = false,
    groupStyles,
    hasMoreNewer = false,
    headerPosition,
    hideDeletedMessages = false,
    hideNewMessageSeparator = false,
    highlightedMessageId,
    internalInfiniteScrollProps: {
      threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD,
      ...restInternalInfiniteScrollProps
    } = {},
    jumpToLatestMessage = () => Promise.resolve(),
    loadMore: loadMoreCallback,
    loadMoreNewer: loadMoreNewerCallback,
    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release
    maxTimeBetweenGroupedMessages,
    messageActions = Object.keys(MESSAGE_ACTIONS),
    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,
    messages = [],
    noGroupByUser = false,
    notifications,
    pinPermissions = defaultPinPermissions,
    reactionDetailsSort,
    read,
    renderMessages = defaultRenderMessages,
    returnAllReadData = false,
    reviewProcessedMessage,
    showUnreadNotificationAlways,
    sortReactionDetails,
    sortReactions,
    suppressAutoscroll,
    threadList = false,
    unsafeHTML = false
  } = props;
  const [listElement, setListElement] = import_react246.default.useState(null);
  const [ulElement, setUlElement] = import_react246.default.useState(null);
  const { customClasses } = useChatContext("MessageList");
  const {
    EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator,
    LoadingIndicator: LoadingIndicator2 = LoadingIndicator,
    MessageListMainPanel: MessageListMainPanel2 = MessageListMainPanel,
    MessageListNotifications: MessageListNotifications2 = MessageListNotifications,
    MessageNotification: MessageNotification2 = MessageNotification,
    TypingIndicator: TypingIndicator2 = TypingIndicator,
    UnreadMessagesNotification: UnreadMessagesNotification2 = UnreadMessagesNotification
  } = useComponentContext("MessageList");
  const {
    hasNewMessages,
    isMessageListScrolledToBottom,
    onScroll,
    scrollToBottom,
    wrapperRect
  } = useScrollLocationLogic({
    hasMoreNewer,
    listElement,
    loadMoreScrollThreshold,
    messages,
    scrolledUpThreshold: props.scrolledUpThreshold,
    suppressAutoscroll
  });
  const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({
    isMessageListScrolledToBottom,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: channelUnreadUiState?.unread_messages
  });
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: threadList,
    wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id
  });
  const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({
    channel,
    disableDateSeparator,
    groupStyles,
    headerPosition,
    hideDeletedMessages,
    hideNewMessageSeparator,
    maxTimeBetweenGroupedMessages,
    messages,
    noGroupByUser,
    reviewProcessedMessage
  });
  const elements = useMessageListElements({
    channelUnreadUiState,
    enrichedMessages,
    internalMessageProps: {
      additionalMessageInputProps: props.additionalMessageInputProps,
      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,
      customMessageActions: props.customMessageActions,
      disableQuotedMessages: props.disableQuotedMessages,
      formatDate: props.formatDate,
      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,
      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,
      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,
      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,
      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,
      getMuteUserErrorNotification: props.getMuteUserErrorNotification,
      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,
      getPinMessageErrorNotification: props.getPinMessageErrorNotification,
      Message: props.Message,
      messageActions,
      messageListRect: wrapperRect,
      onlySenderCanEdit: props.onlySenderCanEdit,
      onMentionsClick: props.onMentionsClick,
      onMentionsHover: props.onMentionsHover,
      onUserClick: props.onUserClick,
      onUserHover: props.onUserHover,
      openThread: props.openThread,
      pinPermissions,
      reactionDetailsSort,
      renderText: props.renderText,
      retrySendMessage: props.retrySendMessage,
      sortReactionDetails,
      sortReactions,
      unsafeHTML
    },
    messageGroupStyles,
    read,
    renderMessages,
    returnAllReadData,
    threadList
  });
  const messageListClass = customClasses?.messageList || "str-chat__list";
  const loadMore = import_react246.default.useCallback(() => {
    if (loadMoreCallback) {
      loadMoreCallback(messageLimit);
    }
  }, [loadMoreCallback, messageLimit]);
  const loadMoreNewer = import_react246.default.useCallback(() => {
    if (loadMoreNewerCallback) {
      loadMoreNewerCallback(messageLimit);
    }
  }, [loadMoreNewerCallback, messageLimit]);
  const scrollToBottomFromNotification = import_react246.default.useCallback(async () => {
    if (hasMoreNewer) {
      await jumpToLatestMessage();
    } else {
      scrollToBottom();
    }
  }, [scrollToBottom, hasMoreNewer]);
  import_react246.default.useLayoutEffect(() => {
    if (highlightedMessageId) {
      const element4 = ulElement?.querySelector(
        `[data-message-id='${highlightedMessageId}']`
      );
      element4?.scrollIntoView({ block: "center" });
    }
  }, [highlightedMessageId]);
  const showEmptyStateIndicator = elements.length === 0 && !threadList;
  const dialogManagerId = threadList ? "message-list-dialog-manager-thread" : "message-list-dialog-manager";
  return /* @__PURE__ */ import_react246.default.createElement(MessageListContextProvider, { value: { listElement, scrollToBottom } }, /* @__PURE__ */ import_react246.default.createElement(MessageListMainPanel2, null, /* @__PURE__ */ import_react246.default.createElement(DialogManagerProvider, { id: dialogManagerId }, !threadList && showUnreadMessagesNotification && /* @__PURE__ */ import_react246.default.createElement(
    UnreadMessagesNotification2,
    {
      unreadCount: channelUnreadUiState?.unread_messages
    }
  ), /* @__PURE__ */ import_react246.default.createElement(
    "div",
    {
      className: (0, import_clsx62.default)(messageListClass, customClasses?.threadList),
      onScroll,
      ref: setListElement,
      tabIndex: 0
    },
    showEmptyStateIndicator ? /* @__PURE__ */ import_react246.default.createElement(EmptyStateIndicator2, { listType: threadList ? "thread" : "message" }) : /* @__PURE__ */ import_react246.default.createElement(
      InfiniteScroll,
      {
        className: "str-chat__message-list-scroll",
        "data-testid": "reverse-infinite-scroll",
        hasNextPage: props.hasMoreNewer,
        hasPreviousPage: props.hasMore,
        head: props.head,
        isLoading: props.loadingMore,
        loader: /* @__PURE__ */ import_react246.default.createElement("div", { className: "str-chat__list__loading", key: "loading-indicator" }, props.loadingMore && /* @__PURE__ */ import_react246.default.createElement(LoadingIndicator2, { size: 20 })),
        loadNextPage: loadMoreNewer,
        loadPreviousPage: loadMore,
        threshold: loadMoreScrollThreshold,
        ...restInternalInfiniteScrollProps
      },
      /* @__PURE__ */ import_react246.default.createElement("ul", { className: "str-chat__ul", ref: setUlElement }, elements),
      /* @__PURE__ */ import_react246.default.createElement(TypingIndicator2, { threadList }),
      /* @__PURE__ */ import_react246.default.createElement("div", { key: "bottom" })
    )
  ))), /* @__PURE__ */ import_react246.default.createElement(
    MessageListNotifications2,
    {
      hasNewMessages,
      isMessageListScrolledToBottom,
      isNotAtLatestMessageSet: hasMoreNewer,
      MessageNotification: MessageNotification2,
      notifications,
      scrollToBottom: scrollToBottomFromNotification,
      threadList,
      unreadCount: threadList ? void 0 : channelUnreadUiState?.unread_messages
    }
  ));
};
var MessageList = (props) => {
  const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext("MessageList");
  const {
    members: membersPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    mutes: mutesPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    watchers: watchersPropToNotPass,
    // eslint-disable-line @typescript-eslint/no-unused-vars
    ...restChannelStateContext
  } = useChannelStateContext("MessageList");
  return /* @__PURE__ */ import_react246.default.createElement(
    MessageListWithContext,
    {
      jumpToLatestMessage,
      loadMore,
      loadMoreNewer,
      ...restChannelStateContext,
      ...props
    }
  );
};

// src/components/MessageList/ScrollToBottomButton.tsx
var import_react247 = __toESM(require("react"));
var import_clsx63 = __toESM(require("clsx"));
var UnMemoizedScrollToBottomButton = (props) => {
  const { isMessageListScrolledToBottom, onClick, threadList } = props;
  const { channel: activeChannel, client } = useChatContext();
  const { thread } = useChannelStateContext();
  const [countUnread, setCountUnread] = (0, import_react247.useState)(activeChannel?.countUnread() || 0);
  const [replyCount, setReplyCount] = (0, import_react247.useState)(thread?.reply_count || 0);
  const observedEvent = threadList ? "message.updated" : "message.new";
  (0, import_react247.useEffect)(() => {
    const handleEvent = (event) => {
      const newMessageInAnotherChannel = event.cid !== activeChannel?.cid;
      const newMessageIsMine = event.user?.id === client.user?.id;
      const isThreadOpen = !!thread;
      const newMessageIsReply = !!event.message?.parent_id;
      const dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;
      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {
        return;
      }
      if (event.type === "message.new") {
        setCountUnread((prev) => prev + 1);
      } else if (event.message?.id === thread?.id) {
        const newReplyCount = event.message?.reply_count || 0;
        setCountUnread(() => newReplyCount - replyCount);
      }
    };
    client.on(observedEvent, handleEvent);
    return () => {
      client.off(observedEvent, handleEvent);
    };
  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);
  (0, import_react247.useEffect)(() => {
    if (isMessageListScrolledToBottom) {
      setCountUnread(0);
      setReplyCount(thread?.reply_count || 0);
    }
  }, [isMessageListScrolledToBottom, thread]);
  if (isMessageListScrolledToBottom) return null;
  return /* @__PURE__ */ import_react247.default.createElement("div", { className: "str-chat__jump-to-latest-message" }, /* @__PURE__ */ import_react247.default.createElement(
    "button",
    {
      "aria-live": "polite",
      className: `
        str-chat__message-notification-scroll-to-latest
        str-chat__circle-fab
      `,
      "data-testid": "message-notification",
      onClick
    },
    /* @__PURE__ */ import_react247.default.createElement(ArrowDown, null),
    countUnread > 0 && /* @__PURE__ */ import_react247.default.createElement(
      "div",
      {
        className: (0, import_clsx63.default)(
          "str-chat__message-notification",
          "str-chat__jump-to-latest-unread-count"
        ),
        "data-testid": "unread-message-notification-counter"
      },
      countUnread
    )
  ));
};
var ScrollToBottomButton = import_react247.default.memo(
  UnMemoizedScrollToBottomButton
);

// src/components/MessageList/VirtualizedMessageList.tsx
var import_react257 = __toESM(require("react"));
var import_react_virtuoso3 = require("react-virtuoso");

// src/components/MessageList/hooks/VirtualizedMessageList/useNewMessageNotification.ts
var import_react248 = require("react");
function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {
  const [newMessagesNotification, setNewMessagesNotification] = (0, import_react248.useState)(false);
  const [isMessageListScrolledToBottom, setIsMessageListScrolledToBottom] = (0, import_react248.useState)(true);
  const didMount = (0, import_react248.useRef)(false);
  const lastMessageId = (0, import_react248.useRef)("");
  const atBottom = (0, import_react248.useRef)(false);
  (0, import_react248.useEffect)(() => {
    if (hasMoreNewer) {
      setNewMessagesNotification(true);
      return;
    }
    if (!messages?.length) return;
    const lastMessage = messages[messages.length - 1];
    const prevMessageId = lastMessageId.current;
    lastMessageId.current = lastMessage.id || "";
    if (lastMessage.id === prevMessageId) return;
    if (atBottom.current) return;
    if (lastMessage.user?.id !== currentUserId && didMount.current) {
      setNewMessagesNotification(true);
    }
    didMount.current = true;
  }, [currentUserId, messages, hasMoreNewer]);
  return {
    atBottom,
    isMessageListScrolledToBottom,
    newMessagesNotification,
    setIsMessageListScrolledToBottom,
    setNewMessagesNotification
  };
}

// src/components/MessageList/hooks/VirtualizedMessageList/usePrependMessagesCount.ts
var import_react249 = require("react");
var STATUSES_EXCLUDED_FROM_PREPEND = {
  failed: true,
  sending: true
};
function usePrependedMessagesCount(messages, hasDateSeparator) {
  const firstRealMessageIndex = hasDateSeparator ? 1 : 0;
  const firstMessageOnFirstLoadedPage = (0, import_react249.useRef)(void 0);
  const previousFirstMessageOnFirstLoadedPage = (0, import_react249.useRef)(void 0);
  const previousNumItemsPrepended = (0, import_react249.useRef)(0);
  const numItemsPrepended = (0, import_react249.useMemo)(() => {
    if (!messages || !messages.length) {
      previousNumItemsPrepended.current = 0;
      return 0;
    }
    const currentFirstMessage = messages?.[firstRealMessageIndex];
    const noNewMessages = currentFirstMessage?.id === previousFirstMessageOnFirstLoadedPage.current?.id;
    const firstMsgMovedAfterMessagesInExcludedStatus = !!(currentFirstMessage?.status && STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessage.status]);
    if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {
      return previousNumItemsPrepended.current;
    }
    if (!firstMessageOnFirstLoadedPage.current) {
      firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    }
    previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;
    for (let prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {
      const messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === firstMessageOnFirstLoadedPage.current?.id;
      if (messageIsFirstOnFirstLoadedPage) {
        previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;
        return previousNumItemsPrepended.current;
      }
    }
    firstMessageOnFirstLoadedPage.current = currentFirstMessage;
    previousNumItemsPrepended.current = 0;
    return 0;
  }, [firstRealMessageIndex, messages, messages?.length]);
  return numItemsPrepended;
}

// src/components/MessageList/hooks/VirtualizedMessageList/useShouldForceScrollToBottom.ts
var import_react250 = require("react");
function useShouldForceScrollToBottom(messages, currentUserId) {
  const lastFocusedOwnMessage = (0, import_react250.useRef)("");
  const initialFocusRegistered = (0, import_react250.useRef)(false);
  function recheckForNewOwnMessage() {
    if (messages && messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.user?.id === currentUserId && lastFocusedOwnMessage.current !== lastMessage.id) {
        lastFocusedOwnMessage.current = lastMessage.id;
        return true;
      }
    }
    return false;
  }
  (0, import_react250.useEffect)(() => {
    if (messages && messages.length && !initialFocusRegistered.current) {
      initialFocusRegistered.current = true;
      recheckForNewOwnMessage();
    }
  }, [messages, messages?.length]);
  return recheckForNewOwnMessage;
}

// src/components/MessageList/hooks/VirtualizedMessageList/useGiphyPreview.ts
var import_react251 = require("react");
var useGiphyPreview = (separateGiphyPreview) => {
  const [giphyPreviewMessage, setGiphyPreviewMessage] = (0, import_react251.useState)();
  const { client } = useChatContext("useGiphyPreview");
  (0, import_react251.useEffect)(() => {
    const handleEvent = (event) => {
      const { message, user } = event;
      if (message?.command === "giphy" && user?.id === client.userID) {
        setGiphyPreviewMessage(void 0);
      }
    };
    if (separateGiphyPreview) client.on("message.new", handleEvent);
    return () => client.off("message.new", handleEvent);
  }, [client, separateGiphyPreview]);
  return {
    giphyPreviewMessage,
    setGiphyPreviewMessage: separateGiphyPreview ? setGiphyPreviewMessage : void 0
  };
};

// src/components/MessageList/hooks/VirtualizedMessageList/useMessageSetKey.ts
var import_react252 = require("react");
var useMessageSetKey = ({
  messages
}) => {
  const [messageSetKey, setMessageSetKey] = (0, import_react252.useState)(+/* @__PURE__ */ new Date());
  const firstMessageId = (0, import_react252.useRef)(void 0);
  (0, import_react252.useEffect)(() => {
    const continuousSet = messages?.find(
      (message) => message.id === firstMessageId.current
    );
    if (!continuousSet) {
      setMessageSetKey(+/* @__PURE__ */ new Date());
    }
    firstMessageId.current = messages?.[0]?.id;
  }, [messages]);
  return {
    messageSetKey
  };
};

// src/components/MessageList/hooks/VirtualizedMessageList/useScrollToBottomOnNewMessage.ts
var import_react253 = require("react");
var useScrollToBottomOnNewMessage = ({
  messages,
  scrollToBottom,
  scrollToLatestMessageOnFocus
}) => {
  const [newMessagesReceivedInBackground, setNewMessagesReceivedInBackground] = (0, import_react253.useState)(false);
  const scrollToBottomIfConfigured = (0, import_react253.useRef)(void 0);
  scrollToBottomIfConfigured.current = (event) => {
    if (!scrollToLatestMessageOnFocus || !newMessagesReceivedInBackground || event.target !== window) {
      return;
    }
    setTimeout(scrollToBottom, 100);
  };
  (0, import_react253.useEffect)(() => {
    setNewMessagesReceivedInBackground(true);
  }, [messages]);
  (0, import_react253.useEffect)(() => {
    const handleFocus = (event) => {
      scrollToBottomIfConfigured.current?.(event);
    };
    const handleBlur = () => {
      setNewMessagesReceivedInBackground(false);
    };
    if (typeof window !== "undefined") {
      window.addEventListener("focus", handleFocus);
      window.addEventListener("blur", handleBlur);
    }
    return () => {
      window.removeEventListener("focus", handleFocus);
      window.removeEventListener("blur", handleBlur);
    };
  }, []);
};

// src/components/MessageList/hooks/VirtualizedMessageList/useUnreadMessagesNotificationVirtualized.ts
var import_react254 = require("react");
var useUnreadMessagesNotificationVirtualized = ({
  lastRead,
  showAlways,
  unreadCount
}) => {
  const [show, setShow] = (0, import_react254.useState)(false);
  const toggleShowUnreadMessagesNotification = (0, import_react254.useCallback)(
    (renderedMessages) => {
      if (!unreadCount) return;
      const firstRenderedMessage = renderedMessages[0];
      const lastRenderedMessage = renderedMessages.slice(-1)[0];
      if (!(firstRenderedMessage && lastRenderedMessage)) return;
      const scrolledBelowSeparator = !!lastRead && new Date(firstRenderedMessage.created_at).getTime() > lastRead.getTime();
      const scrolledAboveSeparator = !!lastRead && new Date(lastRenderedMessage.created_at).getTime() < lastRead.getTime();
      setShow(
        showAlways ? scrolledBelowSeparator || scrolledAboveSeparator : scrolledBelowSeparator
      );
    },
    [lastRead, showAlways, unreadCount]
  );
  (0, import_react254.useEffect)(() => {
    if (!unreadCount) setShow(false);
  }, [unreadCount]);
  return { show, toggleShowUnreadMessagesNotification };
};

// src/components/MessageList/VirtualizedMessageListComponents.tsx
var import_clsx64 = __toESM(require("clsx"));
var import_lodash21 = __toESM(require("lodash.throttle"));
var import_react255 = __toESM(require("react"));
var PREPEND_OFFSET = 10 ** 7;
function calculateItemIndex(virtuosoIndex, numItemsPrepended) {
  return virtuosoIndex + numItemsPrepended - PREPEND_OFFSET;
}
function calculateFirstItemIndex(numItemsPrepended) {
  return PREPEND_OFFSET - numItemsPrepended;
}
var makeItemsRenderedHandler = (renderedItemsActions, processedMessages) => (0, import_lodash21.default)((items) => {
  const renderedMessages = items.map((item2) => {
    if (!item2.originalIndex) return void 0;
    return processedMessages[calculateItemIndex(item2.originalIndex, PREPEND_OFFSET)];
  }).filter((msg) => !!msg);
  renderedItemsActions.forEach(
    (action) => action(renderedMessages)
  );
}, 200);
var Item3 = ({
  context,
  ...props
}) => {
  if (!context) return /* @__PURE__ */ import_react255.default.createElement(import_react255.default.Fragment, null);
  const message = context.processedMessages[calculateItemIndex(props["data-item-index"], context.numItemsPrepended)];
  const groupStyles = context.messageGroupStyles[message.id];
  return /* @__PURE__ */ import_react255.default.createElement(
    "div",
    {
      ...props,
      className: context?.customClasses?.virtualMessage || (0, import_clsx64.default)("str-chat__virtual-list-message-wrapper str-chat__li", {
        [`str-chat__li--${groupStyles}`]: groupStyles
      })
    }
  );
};
var Header = ({
  context
}) => {
  const { LoadingIndicator: LoadingIndicator2 = LoadingIndicator } = useComponentContext("VirtualizedMessageListHeader");
  return /* @__PURE__ */ import_react255.default.createElement(import_react255.default.Fragment, null, context?.head, context?.loadingMore && LoadingIndicator2 && /* @__PURE__ */ import_react255.default.createElement("div", { className: "str-chat__virtual-list__loading" }, /* @__PURE__ */ import_react255.default.createElement(LoadingIndicator2, { size: 20 })));
};
var EmptyPlaceholder = ({
  context
}) => {
  const { EmptyStateIndicator: EmptyStateIndicator2 = EmptyStateIndicator } = useComponentContext("VirtualizedMessageList");
  return /* @__PURE__ */ import_react255.default.createElement(import_react255.default.Fragment, null, EmptyStateIndicator2 && /* @__PURE__ */ import_react255.default.createElement(EmptyStateIndicator2, { listType: context?.threadList ? "thread" : "message" }));
};
var messageRenderer = (virtuosoIndex, _data, virtuosoContext) => {
  const {
    additionalMessageInputProps,
    closeReactionSelectorOnClick,
    customMessageActions,
    customMessageRenderer,
    DateSeparator: DateSeparator2,
    firstUnreadMessageId,
    formatDate,
    lastReadDate,
    lastReadMessageId,
    lastReceivedMessageId,
    Message: MessageUIComponent,
    messageActions,
    messageGroupStyles,
    MessageSystem,
    numItemsPrepended,
    openThread,
    ownMessagesReadByOthers,
    processedMessages: messageList,
    reactionDetailsSort,
    shouldGroupByUser,
    sortReactionDetails,
    sortReactions,
    threadList,
    unreadMessageCount = 0,
    UnreadMessagesSeparator: UnreadMessagesSeparator2,
    virtuosoRef
  } = virtuosoContext;
  const streamMessageIndex = calculateItemIndex(virtuosoIndex, numItemsPrepended);
  if (customMessageRenderer) {
    return customMessageRenderer(messageList, streamMessageIndex);
  }
  const message = messageList[streamMessageIndex];
  if (!message) return /* @__PURE__ */ import_react255.default.createElement("div", { style: { height: "1px" } });
  if (isDateSeparatorMessage(message)) {
    return DateSeparator2 ? /* @__PURE__ */ import_react255.default.createElement(DateSeparator2, { date: message.date, unread: message.unread }) : null;
  }
  if (message.type === "system") {
    return MessageSystem ? /* @__PURE__ */ import_react255.default.createElement(MessageSystem, { message }) : null;
  }
  const groupedByUser = shouldGroupByUser && streamMessageIndex > 0 && message.user?.id === messageList[streamMessageIndex - 1].user?.id;
  const maybePrevMessage = messageList[streamMessageIndex - 1];
  const maybeNextMessage = messageList[streamMessageIndex + 1];
  const firstOfGroup = shouldGroupByUser && (message.user?.id !== maybePrevMessage?.user?.id || maybePrevMessage && isMessageEdited(maybePrevMessage));
  const endOfGroup = shouldGroupByUser && (message.user?.id !== maybeNextMessage?.user?.id || isMessageEdited(message));
  const isFirstUnreadMessage = getIsFirstUnreadMessage({
    firstUnreadMessageId,
    isFirstMessage: streamMessageIndex === 0,
    lastReadDate,
    lastReadMessageId,
    message,
    previousMessage: streamMessageIndex ? messageList[streamMessageIndex - 1] : void 0,
    unreadMessageCount
  });
  return /* @__PURE__ */ import_react255.default.createElement(import_react255.default.Fragment, null, isFirstUnreadMessage && /* @__PURE__ */ import_react255.default.createElement("div", { className: "str-chat__unread-messages-separator-wrapper" }, /* @__PURE__ */ import_react255.default.createElement(UnreadMessagesSeparator2, { unreadCount: unreadMessageCount })), /* @__PURE__ */ import_react255.default.createElement(
    Message,
    {
      additionalMessageInputProps,
      autoscrollToBottom: virtuosoRef.current?.autoscrollToBottom,
      closeReactionSelectorOnClick,
      customMessageActions,
      endOfGroup,
      firstOfGroup,
      formatDate,
      groupedByUser,
      groupStyles: [messageGroupStyles[message.id] ?? ""],
      lastReceivedId: lastReceivedMessageId,
      message,
      Message: MessageUIComponent,
      messageActions,
      openThread,
      reactionDetailsSort,
      readBy: ownMessagesReadByOthers[message.id] || [],
      sortReactionDetails,
      sortReactions,
      threadList
    }
  ));
};

// src/context/VirtualizedMessageListContext.tsx
var import_react256 = __toESM(require("react"));
var VirtualizedMessageListContext = (0, import_react256.createContext)(void 0);
var VirtualizedMessageListContextProvider = ({
  children,
  value
}) => /* @__PURE__ */ import_react256.default.createElement(
  VirtualizedMessageListContext.Provider,
  {
    value
  },
  children
);

// src/components/MessageList/VirtualizedMessageList.tsx
function captureResizeObserverExceededError(e2) {
  if (e2.message === "ResizeObserver loop completed with undelivered notifications." || e2.message === "ResizeObserver loop limit exceeded") {
    e2.stopImmediatePropagation();
  }
}
function useCaptureResizeObserverExceededError() {
  (0, import_react257.useEffect)(() => {
    window.addEventListener("error", captureResizeObserverExceededError);
    return () => {
      window.removeEventListener("error", captureResizeObserverExceededError);
    };
  }, []);
}
function fractionalItemSize(element4) {
  return element4.getBoundingClientRect().height;
}
function findMessageIndex(messages, id) {
  return messages.findIndex((message) => message.id === id);
}
function calculateInitialTopMostItemIndex(messages, highlightedMessageId) {
  if (highlightedMessageId) {
    const index3 = findMessageIndex(messages, highlightedMessageId);
    if (index3 !== -1) {
      return { align: "center", index: index3 };
    }
  }
  return messages.length - 1;
}
var VirtualizedMessageListWithContext = (props) => {
  const {
    additionalMessageInputProps,
    additionalVirtuosoProps = {},
    channel,
    channelUnreadUiState,
    closeReactionSelectorOnClick,
    customMessageActions,
    customMessageRenderer,
    defaultItemHeight,
    disableDateSeparator = true,
    formatDate,
    groupStyles,
    hasMoreNewer,
    head,
    hideDeletedMessages = false,
    hideNewMessageSeparator = false,
    highlightedMessageId,
    jumpToLatestMessage,
    loadingMore,
    loadMore,
    loadMoreNewer,
    maxTimeBetweenGroupedMessages,
    Message: MessageUIComponentFromProps,
    messageActions,
    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,
    messages,
    notifications,
    openThread,
    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component
    overscan = 0,
    reactionDetailsSort,
    read,
    returnAllReadData = false,
    reviewProcessedMessage,
    scrollSeekPlaceHolder,
    scrollToLatestMessageOnFocus = false,
    separateGiphyPreview = false,
    shouldGroupByUser = false,
    showUnreadNotificationAlways,
    sortReactionDetails,
    sortReactions,
    stickToBottomScrollBehavior = "smooth",
    suppressAutoscroll,
    threadList
  } = props;
  const { components: virtuosoComponentsFromProps, ...overridingVirtuosoProps } = additionalVirtuosoProps;
  useCaptureResizeObserverExceededError();
  const {
    DateSeparator: DateSeparator2 = DateSeparator,
    GiphyPreviewMessage: GiphyPreviewMessage2 = GiphyPreviewMessage,
    MessageListMainPanel: MessageListMainPanel2 = MessageListMainPanel,
    MessageListNotifications: MessageListNotifications2 = MessageListNotifications,
    MessageNotification: MessageNotification2 = MessageNotification,
    MessageSystem = EventComponent,
    TypingIndicator: TypingIndicator2,
    UnreadMessagesNotification: UnreadMessagesNotification2 = UnreadMessagesNotification,
    UnreadMessagesSeparator: UnreadMessagesSeparator2 = UnreadMessagesSeparator,
    VirtualMessage: MessageUIComponentFromContext = MessageSimple
  } = useComponentContext("VirtualizedMessageList");
  const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;
  const { client, customClasses } = useChatContext(
    "VirtualizedMessageList"
  );
  const virtuoso = (0, import_react257.useRef)(null);
  const lastRead = (0, import_react257.useMemo)(() => channel.lastRead?.(), [channel]);
  const { show: showUnreadMessagesNotification, toggleShowUnreadMessagesNotification } = useUnreadMessagesNotificationVirtualized({
    lastRead: channelUnreadUiState?.last_read,
    showAlways: !!showUnreadNotificationAlways,
    unreadCount: channelUnreadUiState?.unread_messages ?? 0
  });
  const { giphyPreviewMessage, setGiphyPreviewMessage } = useGiphyPreview(separateGiphyPreview);
  const processedMessages = (0, import_react257.useMemo)(() => {
    if (typeof messages === "undefined") {
      return [];
    }
    if (disableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator && !separateGiphyPreview) {
      return messages;
    }
    return processMessages({
      enableDateSeparator: !disableDateSeparator,
      hideDeletedMessages,
      hideNewMessageSeparator,
      lastRead,
      messages,
      reviewProcessedMessage,
      setGiphyPreviewMessage,
      userId: client.userID || ""
    });
  }, [
    disableDateSeparator,
    hideDeletedMessages,
    hideNewMessageSeparator,
    lastRead,
    messages,
    messages?.length,
    client.userID
  ]);
  const ownMessagesReadByOthers = useLastReadData({
    messages: processedMessages,
    read,
    returnAllReadData,
    userID: client.userID
  });
  const lastReceivedMessageId = (0, import_react257.useMemo)(
    () => getLastReceived(processedMessages),
    [processedMessages]
  );
  const groupStylesFn = groupStyles || getGroupStyles;
  const messageGroupStyles = (0, import_react257.useMemo)(
    () => processedMessages.reduce((acc, message, i) => {
      const style = groupStylesFn(
        message,
        processedMessages[i - 1],
        processedMessages[i + 1],
        !shouldGroupByUser,
        maxTimeBetweenGroupedMessages
      );
      if (style) acc[message.id] = style;
      return acc;
    }, {}),
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      maxTimeBetweenGroupedMessages,
      processedMessages.length,
      shouldGroupByUser,
      groupStylesFn
    ]
  );
  const {
    atBottom,
    isMessageListScrolledToBottom,
    newMessagesNotification,
    setIsMessageListScrolledToBottom,
    setNewMessagesNotification
  } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);
  useMarkRead({
    isMessageListScrolledToBottom,
    messageListIsThread: !!threadList,
    wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id
  });
  const scrollToBottom = (0, import_react257.useCallback)(async () => {
    if (hasMoreNewer) {
      await jumpToLatestMessage();
      return;
    }
    if (virtuoso.current) {
      virtuoso.current.scrollToIndex(processedMessages.length - 1);
    }
    setNewMessagesNotification(false);
  }, [
    virtuoso,
    processedMessages,
    setNewMessagesNotification,
    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage
    processedMessages.length,
    hasMoreNewer,
    jumpToLatestMessage
  ]);
  useScrollToBottomOnNewMessage({
    messages,
    scrollToBottom,
    scrollToLatestMessageOnFocus
  });
  const numItemsPrepended = usePrependedMessagesCount(
    processedMessages,
    !disableDateSeparator
  );
  const { messageSetKey } = useMessageSetKey({ messages });
  const shouldForceScrollToBottom = useShouldForceScrollToBottom(
    processedMessages,
    client.userID
  );
  const handleItemsRendered = (0, import_react257.useMemo)(
    () => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages),
    [processedMessages, toggleShowUnreadMessagesNotification]
  );
  const followOutput = (isAtBottom) => {
    if (hasMoreNewer || suppressAutoscroll) {
      return false;
    }
    if (shouldForceScrollToBottom()) {
      return isAtBottom ? stickToBottomScrollBehavior : "auto";
    }
    return isAtBottom ? stickToBottomScrollBehavior : false;
  };
  const computeItemKey2 = (0, import_react257.useCallback)(
    (index3, _, { numItemsPrepended: numItemsPrepended2, processedMessages: processedMessages2 }) => processedMessages2[calculateItemIndex(index3, numItemsPrepended2)].id,
    []
  );
  const atBottomStateChange = (isAtBottom) => {
    atBottom.current = isAtBottom;
    setIsMessageListScrolledToBottom(isAtBottom);
    if (isAtBottom) {
      loadMoreNewer?.(messageLimit);
      setNewMessagesNotification?.(false);
    }
  };
  const atTopStateChange = (isAtTop) => {
    if (isAtTop) {
      loadMore?.(messageLimit);
    }
  };
  (0, import_react257.useEffect)(() => {
    let scrollTimeout;
    if (highlightedMessageId) {
      const index3 = findMessageIndex(processedMessages, highlightedMessageId);
      if (index3 !== -1) {
        scrollTimeout = setTimeout(() => {
          virtuoso.current?.scrollToIndex({ align: "center", index: index3 });
        }, 0);
      }
    }
    return () => {
      clearTimeout(scrollTimeout);
    };
  }, [highlightedMessageId, processedMessages]);
  if (!processedMessages) return null;
  const dialogManagerId = threadList ? "virtualized-message-list-dialog-manager-thread" : "virtualized-message-list-dialog-manager";
  return /* @__PURE__ */ import_react257.default.createElement(VirtualizedMessageListContextProvider, { value: { scrollToBottom } }, /* @__PURE__ */ import_react257.default.createElement(MessageListMainPanel2, null, /* @__PURE__ */ import_react257.default.createElement(DialogManagerProvider, { id: dialogManagerId }, !threadList && showUnreadMessagesNotification && /* @__PURE__ */ import_react257.default.createElement(
    UnreadMessagesNotification2,
    {
      unreadCount: channelUnreadUiState?.unread_messages
    }
  ), /* @__PURE__ */ import_react257.default.createElement(
    "div",
    {
      className: customClasses?.virtualizedMessageList || "str-chat__virtual-list"
    },
    /* @__PURE__ */ import_react257.default.createElement(
      import_react_virtuoso3.Virtuoso,
      {
        atBottomStateChange,
        atBottomThreshold: 100,
        atTopStateChange,
        atTopThreshold: 100,
        className: "str-chat__message-list-scroll",
        components: {
          EmptyPlaceholder,
          Header,
          Item: Item3,
          ...virtuosoComponentsFromProps
        },
        computeItemKey: computeItemKey2,
        context: {
          additionalMessageInputProps,
          closeReactionSelectorOnClick,
          customClasses,
          customMessageActions,
          customMessageRenderer,
          DateSeparator: DateSeparator2,
          firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,
          formatDate,
          head,
          lastReadDate: channelUnreadUiState?.last_read,
          lastReadMessageId: channelUnreadUiState?.last_read_message_id,
          lastReceivedMessageId,
          loadingMore,
          Message: MessageUIComponent,
          messageActions,
          messageGroupStyles,
          MessageSystem,
          numItemsPrepended,
          openThread,
          ownMessagesReadByOthers,
          processedMessages,
          reactionDetailsSort,
          shouldGroupByUser,
          sortReactionDetails,
          sortReactions,
          threadList,
          unreadMessageCount: channelUnreadUiState?.unread_messages,
          UnreadMessagesSeparator: UnreadMessagesSeparator2,
          virtuosoRef: virtuoso
        },
        firstItemIndex: calculateFirstItemIndex(numItemsPrepended),
        followOutput,
        increaseViewportBy: { bottom: 200, top: 0 },
        initialTopMostItemIndex: calculateInitialTopMostItemIndex(
          processedMessages,
          highlightedMessageId
        ),
        itemContent: messageRenderer,
        itemSize: fractionalItemSize,
        itemsRendered: handleItemsRendered,
        key: messageSetKey,
        overscan,
        ref: virtuoso,
        style: { overflowX: "hidden" },
        totalCount: processedMessages.length,
        ...overridingVirtuosoProps,
        ...scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {},
        ...defaultItemHeight ? { defaultItemHeight } : {}
      }
    )
  )), TypingIndicator2 && /* @__PURE__ */ import_react257.default.createElement(TypingIndicator2, null)), /* @__PURE__ */ import_react257.default.createElement(
    MessageListNotifications2,
    {
      hasNewMessages: newMessagesNotification,
      isMessageListScrolledToBottom,
      isNotAtLatestMessageSet: hasMoreNewer,
      MessageNotification: MessageNotification2,
      notifications,
      scrollToBottom,
      threadList,
      unreadCount: threadList ? void 0 : channelUnreadUiState?.unread_messages
    }
  ), giphyPreviewMessage && /* @__PURE__ */ import_react257.default.createElement(GiphyPreviewMessage2, { message: giphyPreviewMessage }));
};
function VirtualizedMessageList(props) {
  const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext("VirtualizedMessageList");
  const {
    channel,
    channelUnreadUiState,
    hasMore,
    hasMoreNewer,
    highlightedMessageId,
    loadingMore,
    loadingMoreNewer,
    messages: contextMessages,
    notifications,
    read,
    suppressAutoscroll
  } = useChannelStateContext("VirtualizedMessageList");
  const messages = props.messages || contextMessages;
  return /* @__PURE__ */ import_react257.default.createElement(
    VirtualizedMessageListWithContext,
    {
      channel,
      channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState,
      hasMore: !!hasMore,
      hasMoreNewer: !!hasMoreNewer,
      highlightedMessageId,
      jumpToLatestMessage,
      loadingMore: !!loadingMore,
      loadingMoreNewer: !!loadingMoreNewer,
      loadMore,
      loadMoreNewer,
      messages,
      notifications,
      read,
      suppressAutoscroll,
      ...props
    }
  );
}

// src/components/Channel/hooks/useChannelContainerClasses.ts
var useImageFlagEmojisOnWindowsClass = () => {
  const { useImageFlagEmojisOnWindows } = useChatContext("Channel");
  return useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/) ? "str-chat--windows-flags" : "";
};
var getChatContainerClass = (customClass) => customClass ?? "str-chat__container";
var useChannelContainerClasses = ({
  customClasses
}) => {
  const windowsEmojiClass = useImageFlagEmojisOnWindowsClass();
  return {
    channelClass: customClasses?.channel ?? "str-chat__channel",
    chatClass: customClasses?.chat ?? "str-chat",
    chatContainerClass: getChatContainerClass(customClasses?.chatContainer),
    windowsEmojiClass
  };
};

// src/components/Channel/utils.ts
var import_nanoid10 = require("nanoid");
var makeAddNotifications = (setNotifications, notificationTimeouts) => (text8, type) => {
  if (typeof text8 !== "string" || type !== "success" && type !== "error") {
    return;
  }
  const id = (0, import_nanoid10.nanoid)();
  setNotifications((prevNotifications) => [...prevNotifications, { id, text: text8, type }]);
  const timeout = setTimeout(
    () => setNotifications(
      (prevNotifications) => prevNotifications.filter((notification) => notification.id !== id)
    ),
    5e3
  );
  notificationTimeouts.push(timeout);
};
var findInMsgSetById = (targetId, msgSet) => {
  for (let i = msgSet.length - 1; i >= 0; i--) {
    const item2 = msgSet[i];
    if (item2.id === targetId) {
      return {
        index: i,
        target: item2
      };
    }
  }
  return {
    index: -1
  };
};
var findInMsgSetByDate = (targetDate, msgSet, exact = false) => {
  const targetTimestamp = targetDate.getTime();
  let left = 0;
  let middle = 0;
  let right = msgSet.length - 1;
  while (left <= right) {
    middle = Math.floor((right + left) / 2);
    const middleTimestamp = new Date(
      msgSet[middle].created_at
    ).getTime();
    const middleLeftTimestamp = msgSet[middle - 1]?.created_at && new Date(msgSet[middle - 1].created_at).getTime();
    const middleRightTimestamp = msgSet[middle + 1]?.created_at && new Date(msgSet[middle + 1].created_at).getTime();
    if (middleTimestamp === targetTimestamp || middleLeftTimestamp && middleRightTimestamp && middleLeftTimestamp < targetTimestamp && targetTimestamp < middleRightTimestamp) {
      return { index: middle, target: msgSet[middle] };
    }
    if (middleTimestamp < targetTimestamp) left = middle + 1;
    else right = middle - 1;
  }
  if (!exact || new Date(msgSet[left].created_at).getTime() === targetTimestamp) {
    return { index: left, target: msgSet[left] };
  }
  return { index: -1 };
};

// src/components/Attachment/attachment-sizing.tsx
var linkify2 = __toESM(require("linkifyjs"));
var getImageAttachmentConfiguration = (attachment, element4) => {
  let newUrl = void 0;
  const urlToTest = attachment.image_url || attachment.thumb_url || "";
  if (linkify2.test(urlToTest, "url")) {
    const url = new URL(urlToTest);
    const resizeDimensions = getSizingRestrictions(url, element4);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    newUrl = url.href;
  }
  return {
    url: newUrl || ""
  };
};
var getVideoAttachmentConfiguration = (attachment, element4, shouldGenerateVideoThumbnail) => {
  let thumbUrl = void 0;
  if (attachment.thumb_url && shouldGenerateVideoThumbnail && linkify2.test(attachment.thumb_url, "url")) {
    const url = new URL(attachment.thumb_url);
    const resizeDimensions = getSizingRestrictions(url, element4);
    if (resizeDimensions) {
      resizeDimensions.height *= 2;
      resizeDimensions.width *= 2;
      addResizingParamsToUrl(resizeDimensions, url);
    }
    thumbUrl = url.href;
  }
  return {
    thumbUrl,
    url: attachment.asset_url || ""
  };
};
var getSizingRestrictions = (url, htmlElement) => {
  const urlParams = url.searchParams;
  const originalHeight = Number(urlParams.get("oh")) || 1;
  const originalWidth = Number(urlParams.get("ow")) || 1;
  const cssSizeRestriction = getCSSSizeRestrictions(htmlElement);
  let resizeDimensions;
  if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {
    resizeDimensions = getResizeDimensions(
      originalHeight,
      originalWidth,
      /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */
      cssSizeRestriction.maxHeight || cssSizeRestriction.height,
      cssSizeRestriction.maxWidth
    );
  } else {
    resizeDimensions = void 0;
  }
  return resizeDimensions;
};
var getResizeDimensions = (originalHeight, originalWidth, maxHeight, maxWidth) => ({
  height: Math.round(Math.max(maxHeight, maxWidth / originalWidth * originalHeight)),
  width: Math.round(Math.max(maxHeight, maxWidth / originalHeight * originalWidth))
});
var getCSSSizeRestrictions = (htmlElement) => {
  const computedStylesheet = getComputedStyle(htmlElement);
  const height = getValueRepresentationOfCSSProperty(
    computedStylesheet.getPropertyValue("height")
  );
  const maxHeight = getValueRepresentationOfCSSProperty(
    computedStylesheet.getPropertyValue("max-height")
  );
  const maxWidth = getValueRepresentationOfCSSProperty(
    computedStylesheet.getPropertyValue("max-width")
  );
  if (!((height || maxHeight) && maxWidth)) {
    console.warn(
      `Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/react/message-components/attachment/#image-and-video-sizing`
    );
  }
  return { height, maxHeight, maxWidth };
};
var getValueRepresentationOfCSSProperty = (property) => {
  if (!property.endsWith("px")) {
    return void 0;
  }
  const number3 = parseFloat(property);
  return isNaN(number3) ? void 0 : number3;
};
var addResizingParamsToUrl = (resizeDimensions, url) => {
  url.searchParams.set("h", resizeDimensions.height.toString());
  url.searchParams.set("w", resizeDimensions.width.toString());
};

// src/experimental/Search/hooks/useSearchFocusedMessage.ts
var searchControllerStateSelector2 = (nextValue) => ({ focusedMessage: nextValue.focusedMessage });
var useSearchFocusedMessage = () => {
  const { searchController } = useChatContext("Channel");
  const { focusedMessage } = useStateStore(
    searchController._internalState,
    searchControllerStateSelector2
  );
  return focusedMessage;
};

// src/components/Channel/Channel.tsx
var isUserResponseArray = (output) => output[0]?.id != null;
var ChannelContainer = ({
  children,
  className: additionalClassName,
  ...props
}) => {
  const { customClasses, theme } = useChatContext("Channel");
  const { channelClass, chatClass } = useChannelContainerClasses({
    customClasses
  });
  const className = (0, import_clsx65.default)(chatClass, theme, channelClass, additionalClassName);
  return /* @__PURE__ */ import_react258.default.createElement("div", { id: CHANNEL_CONTAINER_ID, ...props, className }, children);
};
var UnMemoizedChannel = (props) => {
  const {
    channel: propsChannel,
    EmptyPlaceholder: EmptyPlaceholder2 = null,
    LoadingErrorIndicator: LoadingErrorIndicator2,
    LoadingIndicator: LoadingIndicator2 = LoadingChannel
  } = props;
  const { channel: contextChannel, channelsQueryState } = useChatContext("Channel");
  const channel = propsChannel || contextChannel;
  if (channelsQueryState.queryInProgress === "reload" && LoadingIndicator2) {
    return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, null, /* @__PURE__ */ import_react258.default.createElement(LoadingIndicator2, null));
  }
  if (channelsQueryState.error && LoadingErrorIndicator2) {
    return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, null, /* @__PURE__ */ import_react258.default.createElement(LoadingErrorIndicator2, { error: channelsQueryState.error }));
  }
  if (!channel?.cid) {
    return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, null, EmptyPlaceholder2);
  }
  return /* @__PURE__ */ import_react258.default.createElement(ChannelInner, { ...props, channel, key: channel.cid });
};
var ChannelInner = (props) => {
  const {
    acceptedFiles,
    activeUnreadHandler,
    channel,
    channelQueryOptions: propChannelQueryOptions,
    children,
    doDeleteMessageRequest,
    doMarkReadRequest,
    doSendMessageRequest,
    doUpdateMessageRequest,
    dragAndDropWindow = false,
    enrichURLForPreviewConfig,
    initializeOnMount = true,
    LoadingErrorIndicator: LoadingErrorIndicator2 = LoadingErrorIndicator,
    LoadingIndicator: LoadingIndicator2 = LoadingChannel,
    markReadOnMount = true,
    maxNumberOfFiles,
    multipleUploads = true,
    onMentionsClick,
    onMentionsHover,
    optionalMessageInputProps = {},
    skipMessageDataMemoization
  } = props;
  const channelQueryOptions = (0, import_react258.useMemo)(
    () => (0, import_lodash23.default)(propChannelQueryOptions, {
      messages: { limit: DEFAULT_INITIAL_CHANNEL_PAGE_SIZE }
    }),
    [propChannelQueryOptions]
  );
  const { client, customClasses, latestMessageDatesByChannels, mutes, searchController } = useChatContext("Channel");
  const { t: t2 } = useTranslationContext("Channel");
  const chatContainerClass = getChatContainerClass(customClasses?.chatContainer);
  const windowsEmojiClass = useImageFlagEmojisOnWindowsClass();
  const thread = useThreadContext();
  const [channelConfig, setChannelConfig] = (0, import_react258.useState)(channel.getConfig());
  const [notifications, setNotifications] = (0, import_react258.useState)([]);
  const [quotedMessage, setQuotedMessage] = (0, import_react258.useState)();
  const [channelUnreadUiState, _setChannelUnreadUiState] = (0, import_react258.useState)();
  const notificationTimeouts = (0, import_react258.useRef)([]);
  const channelReducer = (0, import_react258.useMemo)(() => makeChannelReducer(), []);
  const [state, dispatch] = (0, import_react258.useReducer)(
    channelReducer,
    // channel.initialized === false if client.channel().query() was not called, e.g. ChannelList is not used
    // => Channel will call channel.watch() in useLayoutEffect => state.loading is used to signal the watch() call state
    {
      ...initialState,
      hasMore: channel.state.messagePagination.hasPrev,
      loading: !channel.initialized
    }
  );
  const jumpToMessageFromSearch = useSearchFocusedMessage();
  const isMounted = useIsMounted();
  const originalTitle = (0, import_react258.useRef)("");
  const lastRead = (0, import_react258.useRef)(void 0);
  const online = (0, import_react258.useRef)(true);
  const clearHighlightedMessageTimeoutId = (0, import_react258.useRef)(
    null
  );
  const channelCapabilitiesArray = channel.data?.own_capabilities;
  const throttledCopyStateFromChannel = (0, import_lodash24.default)(
    () => dispatch({ channel, type: "copyStateFromChannelOnEvent" }),
    500,
    {
      leading: true,
      trailing: true
    }
  );
  const setChannelUnreadUiState = (0, import_react258.useMemo)(
    () => (0, import_lodash24.default)(_setChannelUnreadUiState, 200, {
      leading: true,
      trailing: false
    }),
    []
  );
  const markRead = (0, import_react258.useMemo)(
    () => (0, import_lodash24.default)(
      async (options) => {
        const { updateChannelUiUnreadState = true } = options ?? {};
        if (channel.disconnected || !channelConfig?.read_events) {
          return;
        }
        lastRead.current = /* @__PURE__ */ new Date();
        try {
          if (doMarkReadRequest) {
            doMarkReadRequest(
              channel,
              updateChannelUiUnreadState ? setChannelUnreadUiState : void 0
            );
          } else {
            const markReadResponse = await channel.markRead();
            if (updateChannelUiUnreadState && markReadResponse) {
              _setChannelUnreadUiState({
                last_read: lastRead.current,
                last_read_message_id: markReadResponse.event.last_read_message_id,
                unread_messages: 0
              });
            }
          }
          if (activeUnreadHandler) {
            activeUnreadHandler(0, originalTitle.current);
          } else if (originalTitle.current) {
            document.title = originalTitle.current;
          }
        } catch (e2) {
          console.error(t2("Failed to mark channel as read"));
        }
      },
      500,
      { leading: true, trailing: false }
    ),
    [
      activeUnreadHandler,
      channel,
      channelConfig,
      doMarkReadRequest,
      setChannelUnreadUiState,
      t2
    ]
  );
  const handleEvent = async (event) => {
    if (event.message) {
      dispatch({
        channel,
        message: event.message,
        type: "updateThreadOnEvent"
      });
    }
    if (event.type === "user.watching.start" || event.type === "user.watching.stop")
      return;
    if (event.type === "typing.start" || event.type === "typing.stop") {
      return dispatch({ channel, type: "setTyping" });
    }
    if (event.type === "connection.changed" && typeof event.online === "boolean") {
      online.current = event.online;
    }
    if (event.type === "message.new") {
      const mainChannelUpdated = !event.message?.parent_id || event.message?.show_in_channel;
      if (mainChannelUpdated) {
        if (document.hidden && channelConfig?.read_events && !channel.muteStatus().muted) {
          const unread = channel.countUnread(lastRead.current);
          if (activeUnreadHandler) {
            activeUnreadHandler(unread, originalTitle.current);
          } else {
            document.title = `(${unread}) ${originalTitle.current}`;
          }
        }
      }
      if (event.message?.user?.id === client.userID && event?.message?.created_at && event?.message?.cid) {
        const messageDate = new Date(event.message.created_at);
        const cid = event.message.cid;
        if (!latestMessageDatesByChannels[cid] || latestMessageDatesByChannels[cid].getTime() < messageDate.getTime()) {
          latestMessageDatesByChannels[cid] = messageDate;
        }
      }
    }
    if (event.type === "user.deleted") {
      const oldestID = channel.state?.messages?.[0]?.id;
      await channel.query({
        messages: { id_lt: oldestID, limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE },
        watchers: { limit: DEFAULT_NEXT_CHANNEL_PAGE_SIZE }
      });
    }
    if (event.type === "notification.mark_unread")
      _setChannelUnreadUiState((prev) => {
        if (!(event.last_read_at && event.user)) return prev;
        return {
          first_unread_message_id: event.first_unread_message_id,
          last_read: new Date(event.last_read_at),
          last_read_message_id: event.last_read_message_id,
          unread_messages: event.unread_messages ?? 0
        };
      });
    if (event.type === "channel.truncated" && event.cid === channel.cid) {
      _setChannelUnreadUiState(void 0);
    }
    throttledCopyStateFromChannel();
  };
  (0, import_react258.useLayoutEffect)(() => {
    let errored = false;
    let done = false;
    (async () => {
      if (!channel.initialized && initializeOnMount) {
        try {
          const members = [];
          if (!channel.id && channel.data?.members) {
            for (const member of channel.data.members) {
              let userId;
              if (typeof member === "string") {
                userId = member;
              } else if (typeof member === "object") {
                const { user, user_id } = member;
                userId = user_id || user?.id;
              }
              if (userId) {
                members.push(userId);
              }
            }
          }
          await getChannel({ channel, client, members, options: channelQueryOptions });
          const config = channel.getConfig();
          setChannelConfig(config);
        } catch (e2) {
          dispatch({ error: e2, type: "setError" });
          errored = true;
        }
      }
      done = true;
      originalTitle.current = document.title;
      if (!errored) {
        dispatch({
          channel,
          hasMore: channel.state.messagePagination.hasPrev,
          type: "initStateFromChannel"
        });
        if (client.user?.id && channel.state.read[client.user.id]) {
          const { user, ...ownReadState } = channel.state.read[client.user.id];
          _setChannelUnreadUiState(ownReadState);
        }
        if (channel.countUnread() > 0 && markReadOnMount)
          markRead({ updateChannelUiUnreadState: false });
        client.on("connection.changed", handleEvent);
        client.on("connection.recovered", handleEvent);
        client.on("user.updated", handleEvent);
        client.on("user.deleted", handleEvent);
        channel.on(handleEvent);
      }
    })();
    const notificationTimeoutsRef = notificationTimeouts.current;
    return () => {
      if (errored || !done) return;
      channel?.off(handleEvent);
      client.off("connection.changed", handleEvent);
      client.off("connection.recovered", handleEvent);
      client.off("user.deleted", handleEvent);
      notificationTimeoutsRef.forEach(clearTimeout);
    };
  }, [
    channel.cid,
    channelQueryOptions,
    doMarkReadRequest,
    channelConfig?.read_events,
    initializeOnMount
  ]);
  (0, import_react258.useEffect)(() => {
    if (!state.thread) return;
    const message = state.messages?.find((m) => m.id === state.thread?.id);
    if (message) dispatch({ message, type: "setThread" });
  }, [state.messages, state.thread]);
  const handleHighlightedMessageChange = (0, import_react258.useCallback)(
    ({
      highlightDuration,
      highlightedMessageId
    }) => {
      dispatch({
        channel,
        highlightedMessageId,
        type: "jumpToMessageFinished"
      });
      if (clearHighlightedMessageTimeoutId.current) {
        clearTimeout(clearHighlightedMessageTimeoutId.current);
      }
      clearHighlightedMessageTimeoutId.current = setTimeout(() => {
        if (searchController._internalState.getLatestValue().focusedMessage) {
          searchController._internalState.partialNext({ focusedMessage: void 0 });
        }
        clearHighlightedMessageTimeoutId.current = null;
        dispatch({ type: "clearHighlightedMessage" });
      }, highlightDuration ?? DEFAULT_HIGHLIGHT_DURATION);
    },
    [channel, searchController]
  );
  (0, import_react258.useEffect)(() => {
    if (!jumpToMessageFromSearch?.id) return;
    handleHighlightedMessageChange({ highlightedMessageId: jumpToMessageFromSearch.id });
  }, [jumpToMessageFromSearch, handleHighlightedMessageChange]);
  const addNotification = (0, import_react258.useMemo)(
    () => makeAddNotifications(setNotifications, notificationTimeouts.current),
    []
  );
  const loadMoreFinished = (0, import_react258.useCallback)(
    (0, import_lodash22.default)(
      (hasMore, messages) => {
        if (!isMounted.current) return;
        dispatch({ hasMore, messages, type: "loadMoreFinished" });
      },
      2e3,
      { leading: true, trailing: true }
    ),
    []
  );
  const loadMore = async (limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE) => {
    if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasPrev)
      return 0;
    const oldestMessage = state?.messages?.[0];
    if (state.loadingMore || state.loadingMoreNewer || oldestMessage?.status !== "received") {
      return 0;
    }
    dispatch({ loadingMore: true, type: "setLoadingMore" });
    const oldestID = oldestMessage?.id;
    const perPage = limit;
    let queryResponse;
    try {
      queryResponse = await channel.query({
        messages: { id_lt: oldestID, limit: perPage },
        watchers: { limit: perPage }
      });
    } catch (e2) {
      console.warn("message pagination request failed with error", e2);
      dispatch({ loadingMore: false, type: "setLoadingMore" });
      return 0;
    }
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    return queryResponse.messages.length;
  };
  const loadMoreNewer = async (limit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE) => {
    if (!online.current || !window.navigator.onLine || !channel.state.messagePagination.hasNext)
      return 0;
    const newestMessage = state?.messages?.[state?.messages?.length - 1];
    if (state.loadingMore || state.loadingMoreNewer) return 0;
    dispatch({ loadingMoreNewer: true, type: "setLoadingMoreNewer" });
    const newestId = newestMessage?.id;
    const perPage = limit;
    let queryResponse;
    try {
      queryResponse = await channel.query({
        messages: { id_gt: newestId, limit: perPage },
        watchers: { limit: perPage }
      });
    } catch (e2) {
      console.warn("message pagination request failed with error", e2);
      dispatch({ loadingMoreNewer: false, type: "setLoadingMoreNewer" });
      return 0;
    }
    dispatch({
      hasMoreNewer: channel.state.messagePagination.hasNext,
      messages: channel.state.messages,
      type: "loadMoreNewerFinished"
    });
    return queryResponse.messages.length;
  };
  const jumpToMessage = (0, import_react258.useCallback)(
    async (messageId, messageLimit = DEFAULT_JUMP_TO_PAGE_SIZE, highlightDuration = DEFAULT_HIGHLIGHT_DURATION) => {
      dispatch({ loadingMore: true, type: "setLoadingMore" });
      await channel.state.loadMessageIntoState(messageId, void 0, messageLimit);
      loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
      handleHighlightedMessageChange({
        highlightDuration,
        highlightedMessageId: messageId
      });
    },
    [channel, handleHighlightedMessageChange, loadMoreFinished]
  );
  const jumpToLatestMessage = (0, import_react258.useCallback)(async () => {
    await channel.state.loadMessageIntoState("latest");
    loadMoreFinished(channel.state.messagePagination.hasPrev, channel.state.messages);
    dispatch({
      type: "jumpToLatestMessage"
    });
  }, [channel, loadMoreFinished]);
  const jumpToFirstUnreadMessage = (0, import_react258.useCallback)(
    async (queryMessageLimit = DEFAULT_JUMP_TO_PAGE_SIZE, highlightDuration = DEFAULT_HIGHLIGHT_DURATION) => {
      if (!channelUnreadUiState?.unread_messages) return;
      let lastReadMessageId = channelUnreadUiState?.last_read_message_id;
      let firstUnreadMessageId = channelUnreadUiState?.first_unread_message_id;
      let isInCurrentMessageSet = false;
      if (firstUnreadMessageId) {
        const result = findInMsgSetById(firstUnreadMessageId, channel.state.messages);
        isInCurrentMessageSet = result.index !== -1;
      } else if (lastReadMessageId) {
        const result = findInMsgSetById(lastReadMessageId, channel.state.messages);
        isInCurrentMessageSet = !!result.target;
        firstUnreadMessageId = result.index > -1 ? channel.state.messages[result.index + 1]?.id : void 0;
      } else {
        const lastReadTimestamp = channelUnreadUiState.last_read.getTime();
        const { index: lastReadMessageIndex, target: lastReadMessage } = findInMsgSetByDate(
          channelUnreadUiState.last_read,
          channel.state.messages,
          true
        );
        if (lastReadMessage) {
          firstUnreadMessageId = channel.state.messages[lastReadMessageIndex + 1]?.id;
          isInCurrentMessageSet = !!firstUnreadMessageId;
          lastReadMessageId = lastReadMessage.id;
        } else {
          dispatch({ loadingMore: true, type: "setLoadingMore" });
          let messages;
          try {
            messages = (await channel.query(
              {
                messages: {
                  created_at_around: channelUnreadUiState.last_read.toISOString(),
                  limit: queryMessageLimit
                }
              },
              "new"
            )).messages;
          } catch (e2) {
            addNotification(t2("Failed to jump to the first unread message"), "error");
            loadMoreFinished(
              channel.state.messagePagination.hasPrev,
              channel.state.messages
            );
            return;
          }
          const firstMessageWithCreationDate = messages.find((msg) => msg.created_at);
          if (!firstMessageWithCreationDate) {
            addNotification(t2("Failed to jump to the first unread message"), "error");
            loadMoreFinished(
              channel.state.messagePagination.hasPrev,
              channel.state.messages
            );
            return;
          }
          const firstMessageTimestamp = new Date(
            firstMessageWithCreationDate.created_at
          ).getTime();
          if (lastReadTimestamp < firstMessageTimestamp) {
            firstUnreadMessageId = firstMessageWithCreationDate.id;
          } else {
            const result = findInMsgSetByDate(channelUnreadUiState.last_read, messages);
            lastReadMessageId = result.target?.id;
          }
          loadMoreFinished(
            channel.state.messagePagination.hasPrev,
            channel.state.messages
          );
        }
      }
      if (!firstUnreadMessageId && !lastReadMessageId) {
        addNotification(t2("Failed to jump to the first unread message"), "error");
        return;
      }
      if (!isInCurrentMessageSet) {
        dispatch({ loadingMore: true, type: "setLoadingMore" });
        try {
          const targetId = firstUnreadMessageId ?? lastReadMessageId;
          await channel.state.loadMessageIntoState(
            targetId,
            void 0,
            queryMessageLimit
          );
          const indexOfTarget = channel.state.messages.findIndex(
            (message) => message.id === targetId
          );
          loadMoreFinished(
            channel.state.messagePagination.hasPrev,
            channel.state.messages
          );
          firstUnreadMessageId = firstUnreadMessageId ?? channel.state.messages[indexOfTarget + 1]?.id;
        } catch (e2) {
          addNotification(t2("Failed to jump to the first unread message"), "error");
          loadMoreFinished(
            channel.state.messagePagination.hasPrev,
            channel.state.messages
          );
          return;
        }
      }
      if (!firstUnreadMessageId) {
        addNotification(t2("Failed to jump to the first unread message"), "error");
        return;
      }
      if (!channelUnreadUiState.first_unread_message_id)
        _setChannelUnreadUiState({
          ...channelUnreadUiState,
          first_unread_message_id: firstUnreadMessageId,
          last_read_message_id: lastReadMessageId
        });
      handleHighlightedMessageChange({
        highlightDuration,
        highlightedMessageId: firstUnreadMessageId
      });
    },
    [
      addNotification,
      channel,
      handleHighlightedMessageChange,
      loadMoreFinished,
      t2,
      channelUnreadUiState
    ]
  );
  const deleteMessage = (0, import_react258.useCallback)(
    async (message) => {
      if (!message?.id) {
        throw new Error("Cannot delete a message - missing message ID.");
      }
      let deletedMessage;
      if (doDeleteMessageRequest) {
        deletedMessage = await doDeleteMessageRequest(message);
      } else {
        const result = await client.deleteMessage(message.id);
        deletedMessage = result.message;
      }
      return deletedMessage;
    },
    [client, doDeleteMessageRequest]
  );
  const updateMessage = (updatedMessage) => {
    channel.state.addMessageSorted(
      updatedMessage,
      true
    );
    dispatch({
      channel,
      parentId: state.thread && updatedMessage.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  const doSendMessage = async (message, customMessageData, options) => {
    const { attachments, id, mentioned_users = [], parent_id, text: text8 } = message;
    const mentions = isUserResponseArray(mentioned_users) ? mentioned_users.map(({ id: id2 }) => id2) : mentioned_users;
    const messageData = {
      attachments,
      id,
      mentioned_users: mentions,
      parent_id,
      quoted_message_id: parent_id === quotedMessage?.parent_id ? quotedMessage?.id : void 0,
      text: text8,
      ...customMessageData
    };
    try {
      let messageResponse;
      if (doSendMessageRequest) {
        messageResponse = await doSendMessageRequest(channel, messageData, options);
      } else {
        messageResponse = await channel.sendMessage(messageData, options);
      }
      let existingMessage;
      for (let i = channel.state.messages.length - 1; i >= 0; i--) {
        const msg = channel.state.messages[i];
        if (msg.id && msg.id === messageData.id) {
          existingMessage = msg;
          break;
        }
      }
      const responseTimestamp = new Date(
        messageResponse?.message?.updated_at || 0
      ).getTime();
      const existingMessageTimestamp = existingMessage?.updated_at?.getTime() || 0;
      const responseIsTheNewest = responseTimestamp > existingMessageTimestamp;
      if (messageResponse?.message && (responseIsTheNewest || existingMessage?.status === "sending")) {
        updateMessage({
          ...messageResponse.message,
          status: "received"
        });
      }
      if (quotedMessage && parent_id === quotedMessage?.parent_id)
        setQuotedMessage(void 0);
    } catch (error) {
      const stringError = JSON.stringify(error);
      const parsedError = stringError ? JSON.parse(stringError) : {};
      if (parsedError.code === 4 && error instanceof Error && error.message.includes("already exists")) {
        updateMessage({
          ...message,
          status: "received"
        });
      } else {
        updateMessage({
          ...message,
          error: parsedError,
          errorStatusCode: parsedError.status || void 0,
          status: "failed"
        });
        thread?.upsertReplyLocally({
          // @ts-expect-error message type mismatch
          message: {
            ...message,
            error: parsedError,
            errorStatusCode: parsedError.status || void 0,
            status: "failed"
          }
        });
      }
    }
  };
  const sendMessage = async ({
    attachments = [],
    mentioned_users = [],
    parent,
    text: text8 = ""
  }, customMessageData, options) => {
    channel.state.filterErrorMessages();
    const messagePreview = {
      attachments,
      created_at: /* @__PURE__ */ new Date(),
      html: text8,
      id: customMessageData?.id ?? `${client.userID}-${(0, import_nanoid11.nanoid)()}`,
      mentioned_users,
      parent_id: parent?.id,
      reactions: [],
      status: "sending",
      text: text8,
      type: "regular",
      user: client.user
    };
    thread?.upsertReplyLocally({
      // @ts-expect-error message type mismatch
      message: messagePreview
    });
    updateMessage(messagePreview);
    await doSendMessage(messagePreview, customMessageData, options);
  };
  const retrySendMessage = async (message) => {
    updateMessage({
      ...message,
      errorStatusCode: void 0,
      status: "sending"
    });
    if (message.attachments) {
      message.attachments = message.attachments.filter(
        (attachment) => !attachment.og_scrape_url
      );
    }
    await doSendMessage(message);
  };
  const removeMessage = (message) => {
    channel.state.removeMessage(message);
    dispatch({
      channel,
      parentId: state.thread && message.parent_id,
      type: "copyMessagesFromChannel"
    });
  };
  const openThread = (message, event) => {
    event?.preventDefault();
    setQuotedMessage((current) => {
      if (current?.parent_id !== message?.parent_id) {
        return void 0;
      } else {
        return current;
      }
    });
    dispatch({ channel, message, type: "openThread" });
  };
  const closeThread = (event) => {
    event?.preventDefault();
    dispatch({ type: "closeThread" });
  };
  const loadMoreThreadFinished = (0, import_react258.useCallback)(
    (0, import_lodash22.default)(
      (threadHasMore, threadMessages) => {
        dispatch({
          threadHasMore,
          threadMessages,
          type: "loadMoreThreadFinished"
        });
      },
      2e3,
      { leading: true, trailing: true }
    ),
    []
  );
  const loadMoreThread = async (limit = DEFAULT_THREAD_PAGE_SIZE) => {
    if (state.threadLoadingMore || !state.thread || !state.threadHasMore) return;
    dispatch({ type: "startLoadingThread" });
    const parentId = state.thread.id;
    if (!parentId) {
      return dispatch({ type: "closeThread" });
    }
    const oldMessages = channel.state.threads[parentId] || [];
    const oldestMessageId = oldMessages[0]?.id;
    try {
      const queryResponse = await channel.getReplies(parentId, {
        id_lt: oldestMessageId,
        limit
      });
      const threadHasMoreMessages = hasMoreMessagesProbably(
        queryResponse.messages.length,
        limit
      );
      const newThreadMessages = channel.state.threads[parentId] || [];
      loadMoreThreadFinished(threadHasMoreMessages, newThreadMessages);
    } catch (e2) {
      loadMoreThreadFinished(false, oldMessages);
    }
  };
  const onMentionsHoverOrClick = useMentionsHandlers(onMentionsHover, onMentionsClick);
  const editMessage = useEditMessageHandler(doUpdateMessageRequest);
  const { typing, ...restState } = state;
  const channelStateContextValue = useCreateChannelStateContext({
    ...restState,
    acceptedFiles,
    channel,
    channelCapabilitiesArray,
    channelConfig,
    channelUnreadUiState,
    debounceURLEnrichmentMs: enrichURLForPreviewConfig?.debounceURLEnrichmentMs,
    dragAndDropWindow,
    enrichURLForPreview: props.enrichURLForPreview,
    findURLFn: enrichURLForPreviewConfig?.findURLFn,
    giphyVersion: props.giphyVersion || "fixed_height",
    imageAttachmentSizeHandler: props.imageAttachmentSizeHandler || getImageAttachmentConfiguration,
    maxNumberOfFiles,
    multipleUploads,
    mutes,
    notifications,
    onLinkPreviewDismissed: enrichURLForPreviewConfig?.onLinkPreviewDismissed,
    quotedMessage,
    shouldGenerateVideoThumbnail: props.shouldGenerateVideoThumbnail || true,
    videoAttachmentSizeHandler: props.videoAttachmentSizeHandler || getVideoAttachmentConfiguration,
    watcher_count: state.watcherCount
  });
  const channelActionContextValue = (0, import_react258.useMemo)(
    () => ({
      addNotification,
      closeThread,
      deleteMessage,
      dispatch,
      editMessage,
      jumpToFirstUnreadMessage,
      jumpToLatestMessage,
      jumpToMessage,
      loadMore,
      loadMoreNewer,
      loadMoreThread,
      markRead,
      onMentionsClick: onMentionsHoverOrClick,
      onMentionsHover: onMentionsHoverOrClick,
      openThread,
      removeMessage,
      retrySendMessage,
      sendMessage,
      setChannelUnreadUiState,
      setQuotedMessage,
      skipMessageDataMemoization,
      updateMessage
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channel.cid,
      deleteMessage,
      enrichURLForPreviewConfig?.findURLFn,
      enrichURLForPreviewConfig?.onLinkPreviewDismissed,
      loadMore,
      loadMoreNewer,
      markRead,
      quotedMessage,
      jumpToFirstUnreadMessage,
      jumpToMessage,
      jumpToLatestMessage,
      setChannelUnreadUiState
    ]
  );
  const componentContextValue = (0, import_react258.useMemo)(
    () => ({
      Attachment: props.Attachment,
      AttachmentPreviewList: props.AttachmentPreviewList,
      AttachmentSelector: props.AttachmentSelector,
      AttachmentSelectorInitiationButtonContents: props.AttachmentSelectorInitiationButtonContents,
      AudioRecorder: props.AudioRecorder,
      AutocompleteSuggestionItem: props.AutocompleteSuggestionItem,
      AutocompleteSuggestionList: props.AutocompleteSuggestionList,
      Avatar: props.Avatar,
      BaseImage: props.BaseImage,
      CooldownTimer: props.CooldownTimer,
      CustomMessageActionsList: props.CustomMessageActionsList,
      DateSeparator: props.DateSeparator,
      EditMessageInput: props.EditMessageInput,
      EmojiPicker: props.EmojiPicker,
      emojiSearchIndex: props.emojiSearchIndex,
      EmptyStateIndicator: props.EmptyStateIndicator,
      FileUploadIcon: props.FileUploadIcon,
      GiphyPreviewMessage: props.GiphyPreviewMessage,
      HeaderComponent: props.HeaderComponent,
      Input: props.Input,
      LinkPreviewList: props.LinkPreviewList,
      LoadingIndicator: props.LoadingIndicator,
      Message: props.Message,
      MessageActions: props.MessageActions,
      MessageBlocked: props.MessageBlocked,
      MessageBouncePrompt: props.MessageBouncePrompt,
      MessageDeleted: props.MessageDeleted,
      MessageListNotifications: props.MessageListNotifications,
      MessageNotification: props.MessageNotification,
      MessageOptions: props.MessageOptions,
      MessageRepliesCountButton: props.MessageRepliesCountButton,
      MessageStatus: props.MessageStatus,
      MessageSystem: props.MessageSystem,
      MessageTimestamp: props.MessageTimestamp,
      ModalGallery: props.ModalGallery,
      PinIndicator: props.PinIndicator,
      PollActions: props.PollActions,
      PollContent: props.PollContent,
      PollCreationDialog: props.PollCreationDialog,
      PollHeader: props.PollHeader,
      PollOptionSelector: props.PollOptionSelector,
      QuotedMessage: props.QuotedMessage,
      QuotedMessagePreview: props.QuotedMessagePreview,
      QuotedPoll: props.QuotedPoll,
      reactionOptions: props.reactionOptions,
      ReactionSelector: props.ReactionSelector,
      ReactionsList: props.ReactionsList,
      ReactionsListModal: props.ReactionsListModal,
      SendButton: props.SendButton,
      StartRecordingAudioButton: props.StartRecordingAudioButton,
      StopAIGenerationButton: props.StopAIGenerationButton,
      StreamedMessageText: props.StreamedMessageText,
      ThreadHead: props.ThreadHead,
      ThreadHeader: props.ThreadHeader,
      ThreadStart: props.ThreadStart,
      Timestamp: props.Timestamp,
      TriggerProvider: props.TriggerProvider,
      TypingIndicator: props.TypingIndicator,
      UnreadMessagesNotification: props.UnreadMessagesNotification,
      UnreadMessagesSeparator: props.UnreadMessagesSeparator,
      VirtualMessage: props.VirtualMessage
    }),
    [
      props.Attachment,
      props.AttachmentPreviewList,
      props.AttachmentSelector,
      props.AttachmentSelectorInitiationButtonContents,
      props.AudioRecorder,
      props.AutocompleteSuggestionItem,
      props.AutocompleteSuggestionList,
      props.Avatar,
      props.BaseImage,
      props.CooldownTimer,
      props.CustomMessageActionsList,
      props.DateSeparator,
      props.EditMessageInput,
      props.EmojiPicker,
      props.emojiSearchIndex,
      props.EmptyStateIndicator,
      props.FileUploadIcon,
      props.GiphyPreviewMessage,
      props.HeaderComponent,
      props.Input,
      props.LinkPreviewList,
      props.LoadingIndicator,
      props.Message,
      props.MessageActions,
      props.MessageBlocked,
      props.MessageBouncePrompt,
      props.MessageDeleted,
      props.MessageListNotifications,
      props.MessageNotification,
      props.MessageOptions,
      props.MessageRepliesCountButton,
      props.MessageStatus,
      props.MessageSystem,
      props.MessageTimestamp,
      props.ModalGallery,
      props.PinIndicator,
      props.PollActions,
      props.PollContent,
      props.PollCreationDialog,
      props.PollHeader,
      props.PollOptionSelector,
      props.QuotedMessage,
      props.QuotedMessagePreview,
      props.QuotedPoll,
      props.reactionOptions,
      props.ReactionSelector,
      props.ReactionsList,
      props.ReactionsListModal,
      props.SendButton,
      props.StartRecordingAudioButton,
      props.StopAIGenerationButton,
      props.StreamedMessageText,
      props.ThreadHead,
      props.ThreadHeader,
      props.ThreadStart,
      props.Timestamp,
      props.TriggerProvider,
      props.TypingIndicator,
      props.UnreadMessagesNotification,
      props.UnreadMessagesSeparator,
      props.VirtualMessage
    ]
  );
  const typingContextValue = useCreateTypingContext({
    typing
  });
  if (state.error) {
    return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, null, /* @__PURE__ */ import_react258.default.createElement(LoadingErrorIndicator2, { error: state.error }));
  }
  if (state.loading) {
    return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, null, /* @__PURE__ */ import_react258.default.createElement(LoadingIndicator2, null));
  }
  if (!channel.watch) {
    return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, null, /* @__PURE__ */ import_react258.default.createElement("div", null, t2("Channel Missing")));
  }
  return /* @__PURE__ */ import_react258.default.createElement(ChannelContainer, { className: windowsEmojiClass }, /* @__PURE__ */ import_react258.default.createElement(ChannelStateProvider, { value: channelStateContextValue }, /* @__PURE__ */ import_react258.default.createElement(ChannelActionProvider, { value: channelActionContextValue }, /* @__PURE__ */ import_react258.default.createElement(WithComponents, { overrides: componentContextValue }, /* @__PURE__ */ import_react258.default.createElement(TypingProvider, { value: typingContextValue }, /* @__PURE__ */ import_react258.default.createElement("div", { className: `${chatContainerClass}` }, dragAndDropWindow && /* @__PURE__ */ import_react258.default.createElement(DropzoneProvider, { ...optionalMessageInputProps }, children), !dragAndDropWindow && /* @__PURE__ */ import_react258.default.createElement(import_react258.default.Fragment, null, children)))))));
};
var Channel = import_react258.default.memo(UnMemoizedChannel);

// src/components/ChannelHeader/ChannelHeader.tsx
var import_react260 = __toESM(require("react"));

// src/components/ChannelHeader/icons.tsx
var import_react259 = __toESM(require("react"));
var MenuIcon2 = ({ title }) => {
  const { t: t2 } = useTranslationContext("MenuIcon");
  return /* @__PURE__ */ import_react259.default.createElement("svg", { "data-testid": "menu-icon", viewBox: "0 0 448 512", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ import_react259.default.createElement("title", null, title ?? t2("Menu")), /* @__PURE__ */ import_react259.default.createElement(
    "path",
    {
      d: "M0 88C0 74.75 10.75 64 24 64H424C437.3 64 448 74.75 448 88C448 101.3 437.3 112 424 112H24C10.75 112 0 101.3 0 88zM0 248C0 234.7 10.75 224 24 224H424C437.3 224 448 234.7 448 248C448 261.3 437.3 272 424 272H24C10.75 272 0 261.3 0 248zM424 432H24C10.75 432 0 421.3 0 408C0 394.7 10.75 384 24 384H424C437.3 384 448 394.7 448 408C448 421.3 437.3 432 424 432z",
      fill: "currentColor"
    }
  ));
};

// src/components/ChannelHeader/ChannelHeader.tsx
var ChannelHeader = (props) => {
  const {
    Avatar: Avatar2 = Avatar,
    image: overrideImage,
    live,
    MenuIcon: MenuIcon3 = MenuIcon2,
    title: overrideTitle
  } = props;
  const { channel, watcher_count } = useChannelStateContext("ChannelHeader");
  const { openMobileNav } = useChatContext("ChannelHeader");
  const { t: t2 } = useTranslationContext("ChannelHeader");
  const { displayImage, displayTitle, groupChannelDisplayInfo } = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  });
  const { member_count, subtitle } = channel?.data || {};
  return /* @__PURE__ */ import_react260.default.createElement("div", { className: "str-chat__channel-header" }, /* @__PURE__ */ import_react260.default.createElement(
    "button",
    {
      "aria-label": t2("aria/Menu"),
      className: "str-chat__header-hamburger",
      onClick: openMobileNav
    },
    /* @__PURE__ */ import_react260.default.createElement(MenuIcon3, null)
  ), /* @__PURE__ */ import_react260.default.createElement(
    Avatar2,
    {
      className: "str-chat__avatar--channel-header",
      groupChannelDisplayInfo,
      image: displayImage,
      name: displayTitle
    }
  ), /* @__PURE__ */ import_react260.default.createElement("div", { className: "str-chat__channel-header-end" }, /* @__PURE__ */ import_react260.default.createElement("p", { className: "str-chat__channel-header-title" }, displayTitle, " ", live && /* @__PURE__ */ import_react260.default.createElement("span", { className: "str-chat__header-livestream-livelabel" }, t2("live"))), subtitle && /* @__PURE__ */ import_react260.default.createElement("p", { className: "str-chat__channel-header-subtitle" }, subtitle), /* @__PURE__ */ import_react260.default.createElement("p", { className: "str-chat__channel-header-info" }, !live && !!member_count && member_count > 0 && /* @__PURE__ */ import_react260.default.createElement(import_react260.default.Fragment, null, t2("{{ memberCount }} members", {
    memberCount: member_count
  }), ",", " "), t2("{{ watcherCount }} online", { watcherCount: watcher_count }))));
};

// src/components/Chat/Chat.tsx
var import_react264 = __toESM(require("react"));
var import_stream_chat6 = require("stream-chat");

// src/components/Chat/hooks/useChat.ts
var import_react261 = require("react");
var useChat = ({
  client,
  defaultLanguage = "en",
  i18nInstance,
  initialNavOpen
}) => {
  const [translators, setTranslators] = (0, import_react261.useState)({
    t: (key) => key,
    tDateTimeParser: defaultDateTimeParser,
    userLanguage: "en"
  });
  const [channel, setChannel] = (0, import_react261.useState)();
  const [mutes, setMutes] = (0, import_react261.useState)([]);
  const [navOpen, setNavOpen] = (0, import_react261.useState)(initialNavOpen);
  const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = (0, import_react261.useState)({});
  const clientMutes = client.user?.mutes || [];
  const closeMobileNav = () => setNavOpen(false);
  const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);
  const appSettings = (0, import_react261.useRef)(
    null
  );
  const getAppSettings = () => {
    if (appSettings.current) {
      return appSettings.current;
    }
    appSettings.current = client.getAppSettings();
    return appSettings.current;
  };
  (0, import_react261.useEffect)(() => {
    if (!client) return;
    const version = "12.14.0";
    const userAgent = client.getUserAgent();
    if (!userAgent.includes("stream-chat-react")) {
      client.setUserAgent(`stream-chat-react-${version}-${userAgent}`);
    }
    client.threads.registerSubscriptions();
    client.polls.registerSubscriptions();
    return () => {
      client.threads.unregisterSubscriptions();
      client.polls.unregisterSubscriptions();
    };
  }, [client]);
  (0, import_react261.useEffect)(() => {
    setMutes(clientMutes);
    const handleEvent = (event) => {
      setMutes(event.me?.mutes || []);
    };
    client.on("notification.mutes_updated", handleEvent);
    return () => client.off("notification.mutes_updated", handleEvent);
  }, [clientMutes?.length]);
  (0, import_react261.useEffect)(() => {
    let userLanguage = client.user?.language;
    if (!userLanguage) {
      const browserLanguage = window.navigator.language.slice(0, 2);
      userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;
    }
    const streami18n = i18nInstance || new Streami18n({ language: userLanguage });
    streami18n.registerSetLanguageCallback(
      (t2) => setTranslators((prevTranslator) => ({ ...prevTranslator, t: t2 }))
    );
    streami18n.getTranslators().then((translator) => {
      setTranslators({
        ...translator,
        userLanguage: userLanguage || defaultLanguage
      });
    });
  }, [i18nInstance]);
  const setActiveChannel = (0, import_react261.useCallback)(
    async (activeChannel, watchers = {}, event) => {
      if (event && event.preventDefault) event.preventDefault();
      if (activeChannel && Object.keys(watchers).length) {
        await activeChannel.query({ watch: true, watchers });
      }
      setChannel(activeChannel);
      closeMobileNav();
    },
    []
  );
  (0, import_react261.useEffect)(() => {
    setLatestMessageDatesByChannels({});
  }, [client.user?.id]);
  return {
    channel,
    closeMobileNav,
    getAppSettings,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    setActiveChannel,
    translators
  };
};

// src/components/Chat/hooks/useCreateChatContext.ts
var import_react262 = require("react");
var useCreateChatContext = (value) => {
  const {
    channel,
    channelsQueryState,
    client,
    closeMobileNav,
    customClasses,
    getAppSettings,
    isMessageAIGenerated,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    searchController,
    setActiveChannel,
    theme,
    useImageFlagEmojisOnWindows
  } = value;
  const channelCid = channel?.cid;
  const channelsQueryError = channelsQueryState.error;
  const channelsQueryInProgress = channelsQueryState.queryInProgress;
  const clientValues = `${client.clientID}${Object.keys(client.activeChannels).length}${Object.keys(client.listeners).length}${client.mutedChannels.length}
  ${client.user?.id}`;
  const mutedUsersLength = mutes.length;
  const chatContext = (0, import_react262.useMemo)(
    () => ({
      channel,
      channelsQueryState,
      client,
      closeMobileNav,
      customClasses,
      getAppSettings,
      isMessageAIGenerated,
      latestMessageDatesByChannels,
      mutes,
      navOpen,
      openMobileNav,
      searchController,
      setActiveChannel,
      theme,
      useImageFlagEmojisOnWindows
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      channelCid,
      channelsQueryError,
      channelsQueryInProgress,
      clientValues,
      getAppSettings,
      searchController,
      mutedUsersLength,
      navOpen,
      isMessageAIGenerated
    ]
  );
  return chatContext;
};

// src/components/Chat/hooks/useChannelsQueryState.ts
var import_react263 = require("react");
var useChannelsQueryState = () => {
  const [error, setError] = (0, import_react263.useState)(null);
  const [queryInProgress, setQueryInProgress] = (0, import_react263.useState)("uninitialized");
  return {
    error,
    queryInProgress,
    setError,
    setQueryInProgress
  };
};

// src/components/Chat/Chat.tsx
var Chat = (props) => {
  const {
    children,
    client,
    customClasses,
    defaultLanguage,
    i18nInstance,
    initialNavOpen = true,
    isMessageAIGenerated,
    searchController: customChannelSearchController,
    theme = "messaging light",
    useImageFlagEmojisOnWindows = false
  } = props;
  const {
    channel,
    closeMobileNav,
    getAppSettings,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    setActiveChannel,
    translators
  } = useChat({ client, defaultLanguage, i18nInstance, initialNavOpen });
  const channelsQueryState = useChannelsQueryState();
  const searchController = (0, import_react264.useMemo)(
    () => customChannelSearchController ?? new import_stream_chat6.SearchController({
      sources: [
        new import_stream_chat6.ChannelSearchSource(client),
        new import_stream_chat6.UserSearchSource(client),
        new import_stream_chat6.MessageSearchSource(client)
      ]
    }),
    [client, customChannelSearchController]
  );
  const chatContextValue = useCreateChatContext({
    channel,
    channelsQueryState,
    client,
    closeMobileNav,
    customClasses,
    getAppSettings,
    isMessageAIGenerated,
    latestMessageDatesByChannels,
    mutes,
    navOpen,
    openMobileNav,
    searchController,
    setActiveChannel,
    theme,
    useImageFlagEmojisOnWindows
  });
  if (!translators.t) return null;
  return /* @__PURE__ */ import_react264.default.createElement(ChatProvider, { value: chatContextValue }, /* @__PURE__ */ import_react264.default.createElement(TranslationProvider, { value: translators }, children));
};

// src/components/Chat/hooks/useCreateChatClient.ts
var import_react265 = require("react");
var import_stream_chat7 = require("stream-chat");
var useCreateChatClient = ({
  apiKey,
  options,
  tokenOrProvider,
  userData
}) => {
  const [chatClient, setChatClient] = (0, import_react265.useState)(null);
  const [cachedUserData, setCachedUserData] = (0, import_react265.useState)(userData);
  if (userData.id !== cachedUserData.id) {
    setCachedUserData(userData);
  }
  const [cachedOptions] = (0, import_react265.useState)(options);
  (0, import_react265.useEffect)(() => {
    const client = new import_stream_chat7.StreamChat(apiKey, void 0, cachedOptions);
    let didUserConnectInterrupt = false;
    const connectionPromise = client.connectUser(cachedUserData, tokenOrProvider).then(() => {
      if (!didUserConnectInterrupt) setChatClient(client);
    });
    return () => {
      didUserConnectInterrupt = true;
      setChatClient(null);
      connectionPromise.then(() => client.disconnectUser()).then(() => {
        console.log(`Connection for user "${cachedUserData.id}" has been closed`);
      });
    };
  }, [apiKey, cachedUserData, cachedOptions, tokenOrProvider]);
  return chatClient;
};

// src/components/Thread/Thread.tsx
var import_react270 = __toESM(require("react"));
var import_clsx66 = __toESM(require("clsx"));

// src/components/Thread/ThreadHeader.tsx
var import_react267 = __toESM(require("react"));

// src/components/Thread/icons.tsx
var import_react266 = __toESM(require("react"));
var CloseIcon3 = ({ title }) => {
  const { t: t2 } = useTranslationContext("CloseIcon");
  return /* @__PURE__ */ import_react266.default.createElement(
    "svg",
    {
      "data-testid": "close-no-outline",
      fill: "none",
      viewBox: "0 0 24 24",
      xmlns: "http://www.w3.org/2000/svg"
    },
    /* @__PURE__ */ import_react266.default.createElement("title", null, title ?? t2("Close")),
    /* @__PURE__ */ import_react266.default.createElement(
      "path",
      {
        d: "M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z",
        fill: "black"
      }
    )
  );
};

// src/components/Thread/ThreadHeader.tsx
var ThreadHeader = (props) => {
  const { closeThread, overrideImage, overrideTitle } = props;
  const { t: t2 } = useTranslationContext("ThreadHeader");
  const { channel } = useChannelStateContext("");
  const { displayTitle } = useChannelPreviewInfo({
    channel,
    overrideImage,
    overrideTitle
  });
  return /* @__PURE__ */ import_react267.default.createElement("div", { className: "str-chat__thread-header" }, /* @__PURE__ */ import_react267.default.createElement("div", { className: "str-chat__thread-header-details" }, /* @__PURE__ */ import_react267.default.createElement("div", { className: "str-chat__thread-header-title" }, t2("Thread")), /* @__PURE__ */ import_react267.default.createElement("div", { className: "str-chat__thread-header-subtitle" }, displayTitle)), /* @__PURE__ */ import_react267.default.createElement(
    "button",
    {
      "aria-label": t2("aria/Close thread"),
      className: "str-chat__close-thread-button",
      "data-testid": "close-button",
      onClick: closeThread
    },
    /* @__PURE__ */ import_react267.default.createElement(CloseIcon3, null)
  ));
};

// src/components/Thread/ThreadHead.tsx
var import_react269 = __toESM(require("react"));

// src/components/Thread/ThreadStart.tsx
var import_react268 = __toESM(require("react"));
var ThreadStart = () => {
  const { thread } = useChannelStateContext("ThreadStart");
  const { t: t2 } = useTranslationContext("ThreadStart");
  if (!thread?.reply_count) return null;
  return /* @__PURE__ */ import_react268.default.createElement("div", { className: "str-chat__thread-start" }, t2("replyCount", { count: thread.reply_count }));
};

// src/components/Thread/ThreadHead.tsx
var ThreadHead = (props) => {
  const { ThreadStart: ThreadStart2 = ThreadStart } = useComponentContext("ThreadHead");
  return /* @__PURE__ */ import_react269.default.createElement("div", { className: "str-chat__parent-message-li" }, /* @__PURE__ */ import_react269.default.createElement(Message, { initialMessage: true, threadList: true, ...props }), /* @__PURE__ */ import_react269.default.createElement(ThreadStart2, null));
};

// src/components/Thread/Thread.tsx
var Thread = (props) => {
  const { channel, channelConfig, thread } = useChannelStateContext("Thread");
  const threadInstance = useThreadContext();
  if (!thread && !threadInstance || channelConfig?.replies === false) return null;
  return (
    // FIXME: TS is having trouble here as at least one of the two would always be defined
    /* @__PURE__ */ import_react270.default.createElement(
      ThreadInner,
      {
        ...props,
        key: `thread-${(thread ?? threadInstance)?.id}-${channel?.cid}`
      }
    )
  );
};
var selector6 = (nextValue) => ({
  isLoadingNext: nextValue.pagination.isLoadingNext,
  isLoadingPrev: nextValue.pagination.isLoadingPrev,
  parentMessage: nextValue.parentMessage,
  replies: nextValue.replies
});
var ThreadInner = (props) => {
  const {
    additionalMessageInputProps,
    additionalMessageListProps,
    additionalParentMessageProps,
    additionalVirtualizedMessageListProps,
    autoFocus = true,
    enableDateSeparator = false,
    Input: PropInput,
    Message: PropMessage,
    messageActions = Object.keys(MESSAGE_ACTIONS),
    virtualized
  } = props;
  const threadInstance = useThreadContext();
  const { isLoadingNext, isLoadingPrev, parentMessage, replies } = useStateStore(threadInstance?.state, selector6) ?? {};
  const {
    thread,
    threadHasMore,
    threadLoadingMore,
    threadMessages = [],
    threadSuppressAutoscroll
  } = useChannelStateContext("Thread");
  const { closeThread, loadMoreThread } = useChannelActionContext("Thread");
  const { customClasses } = useChatContext("Thread");
  const {
    Message: ContextMessage,
    ThreadHead: ThreadHead2 = ThreadHead,
    ThreadHeader: ThreadHeader2 = ThreadHeader,
    ThreadInput: ContextInput,
    VirtualMessage
  } = useComponentContext("Thread");
  const ThreadInput = PropInput ?? additionalMessageInputProps?.Input ?? ContextInput ?? MessageInputFlat;
  const ThreadMessage = PropMessage || additionalMessageListProps?.Message;
  const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;
  const MessageUIComponent = ThreadMessage || FallbackMessage;
  const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;
  (0, import_react270.useEffect)(() => {
    if (thread?.id && thread?.reply_count) {
      loadMoreThread();
    }
  }, [thread, loadMoreThread]);
  const threadProps = threadInstance ? {
    loadingMore: isLoadingPrev,
    loadingMoreNewer: isLoadingNext,
    loadMore: threadInstance.loadPrevPage,
    loadMoreNewer: threadInstance.loadNextPage,
    messages: replies
  } : {
    hasMore: threadHasMore,
    loadingMore: threadLoadingMore,
    loadMore: loadMoreThread,
    messages: threadMessages
  };
  const messageAsThread = thread ?? parentMessage;
  if (!messageAsThread) return null;
  const threadClass = customClasses?.thread || (0, import_clsx66.default)("str-chat__thread-container str-chat__thread", {
    "str-chat__thread--virtualized": virtualized
  });
  const head = /* @__PURE__ */ import_react270.default.createElement(
    ThreadHead2,
    {
      key: messageAsThread.id,
      message: messageAsThread,
      Message: MessageUIComponent,
      ...additionalParentMessageProps
    }
  );
  return /* @__PURE__ */ import_react270.default.createElement("div", { className: threadClass }, /* @__PURE__ */ import_react270.default.createElement(ThreadHeader2, { closeThread, thread: messageAsThread }), /* @__PURE__ */ import_react270.default.createElement(
    ThreadMessageList,
    {
      disableDateSeparator: !enableDateSeparator,
      head,
      Message: MessageUIComponent,
      messageActions,
      suppressAutoscroll: threadSuppressAutoscroll,
      threadList: true,
      ...threadProps,
      ...virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps
    }
  ), /* @__PURE__ */ import_react270.default.createElement(
    MessageInput,
    {
      focus: autoFocus,
      Input: ThreadInput,
      isThreadInput: true,
      parent: thread ?? parentMessage,
      publishTypingEvent: false,
      ...additionalMessageInputProps
    }
  ));
};

// src/components/Window/Window.tsx
var import_react271 = __toESM(require("react"));
var import_clsx67 = __toESM(require("clsx"));
var UnMemoizedWindow = (props) => {
  const { children, thread: propThread } = props;
  const { thread: contextThread } = useChannelStateContext("Window");
  return /* @__PURE__ */ import_react271.default.createElement(
    "div",
    {
      className: (0, import_clsx67.default)("str-chat__main-panel", {
        "str-chat__main-panel--thread-open": contextThread || propThread
      })
    },
    children
  );
};
var Window = import_react271.default.memo(UnMemoizedWindow);
/*! Bundled license information:

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=index.browser.cjs.map
